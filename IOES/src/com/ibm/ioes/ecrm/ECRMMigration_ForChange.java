package com.ibm.ioes.ecrm;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.sql.Timestamp;

import com.ibm.ioes.utilities.Utility;

import java.util.Calendar;

public class ECRMMigration_ForChange {
	
	//public static String orderNo="319582";1029095;
	//FINAL UAT LSIs:  1) 1117415  2) 1244205  3)1261731  4) 1353787   5) 1445910   6)1447173   7) 1325106
	public static String orderNo="1445910";//1279649(ORDER FOR CHARGE)";
		//"1029095(ORDER FOR TESTING)";//1261731";//1441854";//"1153911";//"1362935";//"319582";	//"358019";	//"358062";
	public static String tableSchemaName="APPS.";
	public static String viewSchemaName="APPS.";
	
	public static String spInsertECRMOrderHeadertoIOMS = "{call IOE.ECRM_INSERT_INTO_TPOMASTER(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	public static String spInsertECRMOrderHeadertoIOMS2 = "{call IOE.ECRM_INSERT_INTO_TPOMASTER_2(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	
	private static String strGetOrderHeaderFromCRM="select CRM_ORDER_ID,ORDERTYPE,ORDERSOURCE,COALESCE(QUOTENUMBER,'0') AS QUOTENUMBER,CURRENCY,M6_ORDER_STATUS,"
													+ " ORDER_STAGE,CUST_ACCOUNT_ID AS ACCOUNT_NO,PON,ORDER_SUBTYPE, ZONEID,PROJECT_MGR_ID,DEMO_TYPE,ORDERDATE,case when REGIONID=81 then 4"
													 +"when REGIONID=160 then 11"
													 +"when REGIONID=185 then 6"
													 +"when REGIONID=186 then 7"
													 +"when REGIONID=187 then 5"
													+"end  REGIONID, PUBLISH_DATE,"
													+ " CREATION_DATE,CREATED_BY, LAST_UPDATE_DATE,LAST_UPDATED_BY from IBMOE_ORDER_HEADER where CRM_ORDER_ID="+orderNo ;
	private static String strGetOrderHeaderFromCRM2="SELECT IBMOE_ORDER_HEADER.CRM_ORDER_ID,IBMOE_ORDER_HEADER.ORDERTYPE,IBMOE_ORDER_HEADER.ORDERSOURCE,COALESCE(IBMOE_ORDER_HEADER.QUOTENUMBER,'0') AS QUOTENUMBER,IBMOE_ORDER_HEADER.CURRENCY,IBMOE_ORDER_HEADER.M6_ORDER_STATUS,"
		+" IBMOE_ORDER_HEADER.ORDER_STAGE,IBMOE_ORDER_HEADER.CUST_ACCOUNT_ID AS ACCOUNT_NO,IBMOE_ORDER_HEADER.PON,IBMOE_ORDER_HEADER.ORDER_SUBTYPE, IBMOE_ORDER_HEADER.ZONEID,IBMOE_ORDER_HEADER.PROJECT_MGR_ID,IBMOE_ORDER_HEADER.DEMO_TYPE,IBMOE_ORDER_HEADER.ORDERDATE,CASE WHEN IBMOE_ORDER_HEADER.REGIONID=81 THEN 4"
		+" WHEN IBMOE_ORDER_HEADER.REGIONID=160 THEN 11"
		+" WHEN IBMOE_ORDER_HEADER.REGIONID=185 THEN 6"
		+" WHEN IBMOE_ORDER_HEADER.REGIONID=186 THEN 7"
		+" WHEN IBMOE_ORDER_HEADER.REGIONID=187 THEN 5"
		+" END  REGIONID, IBMOE_ORDER_HEADER.PUBLISH_DATE,"
		+" IBMOE_ORDER_HEADER.CREATION_DATE,IBMOE_ORDER_HEADER.CREATED_BY, IBMOE_ORDER_HEADER.LAST_UPDATE_DATE,IBMOE_ORDER_HEADER.LAST_UPDATED_BY ,"
		+" IBMOE_ORDER_HEADER.FIRST_NAME AS SALES_FIRSTNAME,IBMOE_ORDER_HEADER.LAST_NAME AS SALES_LASTNAME,"
		+" IBMOE_ORDER_HEADER.TEL_NUMBER AS SALES_PHONE,"
		+" (SELECT B.EMAIL_ADDRESS"
		+" FROM "+tableSchemaName+"FND_USER B"
		+" WHERE B.USER_ID = IBMOE_ORDER_HEADER.CREATED_BY) AS SALES_EMAIL,"
		+" (SELECT SERVICE_ORDER_TYPE FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE CRM_ORDER_ID=IBMOE_ORDER_HEADER.CRM_ORDER_ID AND ROWNUM=1) AS SUBCHANGE_TYPE_ID,"
		+" (SELECT "
		+" jtrr.role_resource_id"
		+" FROM "
		+" "+tableSchemaName+"jtf_rs_role_relations jtrr,"
		+" apps.jtf_rs_resource_extns jre, "
		+" apps.fnd_user fu, "
		+" apps.jtf_rs_roles_tl jrt										    "
		+" WHERE jre.resource_id =  jtrr.role_resource_id "
		+" AND jtrr.role_id = jrt.role_id "
		+" AND fu.user_id = jre.user_id 	AND fu.EMPLOYEE_ID=(SELECT B.EMPLOYEE_ID"
		+" FROM "+tableSchemaName+"FND_USER B"
		+" WHERE B.USER_ID = IBMOE_ORDER_HEADER.CREATED_BY) AND ROWNUM=1) AS EMPLOYEE_ID"
		+" FROM "+tableSchemaName+"IBMOE_ORDER_HEADER IBMOE_ORDER_HEADER"
		+" WHERE IBMOE_ORDER_HEADER.CRM_ORDER_ID IN(SELECT CRM_ORDER_ID FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"')";

	
	private static String strInsertECRMOrderHeaderAttributestoIOMS="{call IOE.ECRM_INSERT_INTO_TATTRIBUTEMASTER(?,?,?,?,?,?,?,?,?,?)}";
	private static String strInsertECRMOrderHeaderAttributestoIOMS2="{call IOE.ECRM_INSERT_INTO_TATTRIBUTEMASTER_2(?,?,?,?,?,?,?,?,?,?)}";
	
	private static String strGetOrderHeaderAttributesFromCRM="select OH_ATTRIBUTE_ID,LABEL_VALUE,CRM_ORDER_ID,CREATION_DATE,CREATED_BY,LAST_UPDATE_DATE,"
															  + " LAST_UPDATED_BY from IBMOE_ORDER_HEADER_ATTRIBUTES where CRM_ORDER_ID="+orderNo ;
	
	private static String strGetOrderHeaderAttributesFromCRM2="SELECT OH_ATTRIBUTE_ID,LABEL_VALUE,CRM_ORDER_ID,CREATION_DATE,CREATED_BY,LAST_UPDATE_DATE,"
    +" LAST_UPDATED_BY FROM "+tableSchemaName+"IBMOE_ORDER_HEADER_ATTRIBUTES"
    +" WHERE CRM_ORDER_ID IN(SELECT CRM_ORDER_ID FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"')";

	
	private static String strGetOrderContactFromCRM="select ORDER_CONTACT_ID, CONTACTTYPE, FORMOFADDRESS, GIVENNAME, FAMILYNAME,"
													+" EMAIL, CELLTELEPHONENR, CRM_ORDER_ID, FAXNR,  CREATION_DATE, CREATED_BY,"  
													+" LAST_UPDATE_DATE, LAST_UPDATED_BY from IBMOE_ORDER_CONTACT where CRM_ORDER_ID="+orderNo ;
	private static String strGetOrderContactFromCRM2="SELECT ORDER_CONTACT_ID, CONTACTTYPE, FORMOFADDRESS, GIVENNAME, FAMILYNAME,"
    +" EMAIL, CELLTELEPHONENR, CRM_ORDER_ID, FAXNR,  CREATION_DATE, CREATED_BY,"
    +" LAST_UPDATE_DATE, LAST_UPDATED_BY FROM "+tableSchemaName+"IBMOE_ORDER_CONTACT "
    +" WHERE CRM_ORDER_ID IN(SELECT CRM_ORDER_ID FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"')";
	
	private static String strGetOrderContactFromCRM3="SELECT IBMOE_ORDER_HEADER.CUST_ACCOUNT_ID AS ACCOUNT_NO,CRM_ORDER_ID,CREATED_BY"
    +" FROM "+tableSchemaName+"IBMOE_ORDER_HEADER IBMOE_ORDER_HEADER"
    +" WHERE CRM_ORDER_ID IN(SELECT CRM_ORDER_ID FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"')";

	
	private static String spInsertOrderContactToIOMS="{CALL IOE.ECRM_INSERT_INTO_TPOCONTACT(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	private static String spInsertOrderContactToIOMS2="{CALL IOE.ECRM_INSERT_INTO_TPOCONTACT_2(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	private static String spInsertOrderContactToIOMS3="{CALL IOE.ECRM_INSERT_INTO_TPOCONTACT_3(?,?,?,?,?,?)}";
		
	private static String strGetContactAddressFromCRM="select IBMOE_CONTACT_ADDRESS.CONTACT_ADDRESS_ID, IBMOE_CONTACT_ADDRESS.ADDRESS1, IBMOE_CONTACT_ADDRESS.ADDRESS2," 
													+" IBMOE_CONTACT_ADDRESS.ADDRESS3, IBMOE_CONTACT_ADDRESS.PIN,IBMOE_ORDER_CONTACT.CRM_ORDER_ID, IBMOE_CONTACT_ADDRESS.ORDER_CONTACT_ID, IBMOE_CONTACT_ADDRESS.CITY_ID,"
													+" IBMOE_CONTACT_ADDRESS.STATE_ID, IBMOE_CONTACT_ADDRESS.COUNTRY_ID, IBMOE_CONTACT_ADDRESS.CREATION_DATE, IBMOE_CONTACT_ADDRESS.CREATED_BY,IBMOE_CONTACT_ADDRESS.LAST_UPDATE_DATE,"
													+" IBMOE_CONTACT_ADDRESS.LAST_UPDATED_BY"
													+" from IBMOE_CONTACT_ADDRESS  JOIN IBMOE_ORDER_CONTACT"
													+" ON IBMOE_CONTACT_ADDRESS.ORDER_CONTACT_NO=IBMOE_ORDER_CONTACT.ORDER_CONTACT_NO" 
													+" where IBMOE_ORDER_CONTACT.CRM_ORDER_ID="+orderNo ;
	
	private static String strGetContactAddressFromCRM2="SELECT IBMOE_CONTACT_ADDRESS.CONTACT_ADDRESS_ID, IBMOE_CONTACT_ADDRESS.ADDRESS1, IBMOE_CONTACT_ADDRESS.ADDRESS2," 
	+" IBMOE_CONTACT_ADDRESS.ADDRESS3, IBMOE_CONTACT_ADDRESS.PIN,IBMOE_ORDER_CONTACT.CRM_ORDER_ID, IBMOE_CONTACT_ADDRESS.ORDER_CONTACT_ID, IBMOE_CONTACT_ADDRESS.CITY_ID,"
	+" IBMOE_CONTACT_ADDRESS.STATE_ID, IBMOE_CONTACT_ADDRESS.COUNTRY_ID, IBMOE_CONTACT_ADDRESS.CREATION_DATE, IBMOE_CONTACT_ADDRESS.CREATED_BY,IBMOE_CONTACT_ADDRESS.LAST_UPDATE_DATE,"
	+" IBMOE_CONTACT_ADDRESS.LAST_UPDATED_BY"
	+" FROM "+tableSchemaName+"IBMOE_CONTACT_ADDRESS  JOIN "+tableSchemaName+"IBMOE_ORDER_CONTACT"
	+" ON IBMOE_CONTACT_ADDRESS.ORDER_CONTACT_NO=IBMOE_ORDER_CONTACT.ORDER_CONTACT_NO" 
	+" WHERE CRM_ORDER_ID IN(SELECT CRM_ORDER_ID FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"')";
	
	private static String strGetContactAddressFromCRM3="SELECT IBMOE_ORDER_HEADER.CUST_ACCOUNT_ID AS ACCOUNT_NO,CRM_ORDER_ID,CREATED_BY"
	    +" FROM "+tableSchemaName+"IBMOE_ORDER_HEADER IBMOE_ORDER_HEADER"
	    +" WHERE CRM_ORDER_ID IN(SELECT CRM_ORDER_ID FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"')";
	private static String spInsertContactAddressToIOMS="{CALL IOE.ECRM_INSERT_INTO_TPOADDRESS(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	private static String spInsertContactAddressToIOMS2="{CALL IOE.ECRM_INSERT_INTO_TPOADDRESS_2(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	private static String spInsertContactAddressToIOMS3="{CALL IOE.ECRM_INSERT_INTO_TPOADDRESS_3(?,?,?,?,?,?)}";
	
	private static String strGetPODetailsFromCRM="select PO_ID, CRM_ORDER_ID, LEGAL_ENTITY_CODE, TOT_PO_AMT, CONTRACT_PERIOD_MNTHS, CUST_PO_RECEIVE_DATE,"
												 +" DEFAULT_FLAG, PO_ISSUING_PERSON_NAME, PO_PAYMENT_TERMS,  PO_ISSUING_PERSON_EMAIL, DEMO_CONTRACT_PERIOD,"
												 +" CONTRACT_START_DATE, CONTRACT_END_DATE,  CUST_PO_DATE, CUST_PO_NUMBER, CUST_PO_DATE, CREATION_DATE," 
												 +" CREATED_BY, LAST_UPDATE_DATE, LAST_UPDATED_BY"
												 +" from IBMOE_ORDER_PO_DTLS where CRM_ORDER_ID="+orderNo ;
	
	private static String strGetPODetailsFromCRM2="SELECT PO_ID, CRM_ORDER_ID, LEGAL_ENTITY_CODE, TOT_PO_AMT, CONTRACT_PERIOD_MNTHS, CUST_PO_RECEIVE_DATE,"
	+" DEFAULT_FLAG, PO_ISSUING_PERSON_NAME, PO_PAYMENT_TERMS,  PO_ISSUING_PERSON_EMAIL, DEMO_CONTRACT_PERIOD,"
	+" CONTRACT_START_DATE, CONTRACT_END_DATE,  CUST_PO_DATE, CUST_PO_NUMBER, CUST_PO_DATE, CREATION_DATE, "
	+" CREATED_BY, LAST_UPDATE_DATE, LAST_UPDATED_BY"
	+" FROM "+tableSchemaName+"IBMOE_ORDER_PO_DTLS "
	+" WHERE CRM_ORDER_ID IN(SELECT CRM_ORDER_ID FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"')";
	
	//private static String spInsertPODetailsToIOMS="{CALL IOE.ECRM_INSERT_INTO_TPODETAILS_L(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	private static String spInsertPODetailsToIOMS="{CALL IOE.ECRM_INSERT_INTO_TPODETAILS(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	private static String spInsertPODetailsToIOMS2="{CALL IOE.ECRM_INSERT_INTO_TPODETAILS_2(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	
	
	private static String strGetOrderServiceFromCRM2="SELECT DISTINCT SERVICE.SERVICE_NO, SERVICE.M6_PRODUCT_ID,SERVICE_TYPE AS SERVICESTAGENAME,SERVICE.EFFECTIVE_START_DATE, "
			+" SERVICE.CUST_LOGICAL_SI_ID, SERVICE.EFFECTIVE_END_DATE, SERVICE.PROVISIONING_PLAN_ID, SERVICE.REMARKS, "
			+" SERVICE.CRM_ORDER_ID, MAX(ORDER_STATUS.M6_ORDER_ID) AS M6_ORDER_ID, MAX(ORDER_STATUS.PRE_M6_ORDER_ID) AS PRE_M6_ORDER_ID ,"
			+" (SELECT MAX(SERVICE_NO) FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS"
			+" WHERE LOGICAL_SI_NUMBER = '"+orderNo+"' AND SERVICE_NO <> SERVICE.SERVICE_NO AND SERVICE_NO < SERVICE.SERVICE_NO) AS OLDSERVICEID,"
			+" CASE WHEN (SELECT MAX(SERVICE_NO) FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER = '"+orderNo+"' ) =SERVICE.SERVICE_NO "
			+" THEN 0 ELSE 1 END AS IS_IN_HISTORY, "
			+" SERVICE.SERVICE_ORDER_TYPE  AS SUBCHANGETYPEID,"
			+" SERVICE.SERVICE_ORDER_TYPE, SERVICE.LOGICAL_SI_NUMBER, SERVICE.CUST_LOGICAL_SI_NO, SERVICE.CREATION_DATE, "
			+" SERVICE.LAST_UPDATE_DATE, SERVICE.CREATED_BY, SERVICE.CREATION_DATE, SERVICE.LAST_UPDATE_DATE, SERVICE.LAST_UPDATED_BY,"
			+" CASE WHEN UPPER(SERVICE.SERVICE_STAGE) = 'DRAFT' THEN NULL "
			+" WHEN UPPER(SERVICE.SERVICE_STAGE) = 'OPEN' THEN 'M6_START'    "
			+" WHEN UPPER(SERVICE.SERVICE_STAGE) = 'CRM SERVICE CANCELLED' THEN 'M6_CANCELLED' "
			+" WHEN UPPER(SERVICE.SERVICE_STAGE) = 'PUBLISHED' THEN 'M6_END-FX_BT_START' "
			+" WHEN UPPER(SERVICE.SERVICE_STAGE) = 'CLOSED' THEN 'FX_BT_END' "
			+" END SERVICE_STAGE, SERVICE.PROCESS_ID,SERVICE.NETWORK_STATE,SERVICE.ATTRIBUTE1 ,SERVICE.ATTRIBUTE4,SERVICE.ATTRIBUTE5,SERVICE.CUST_ACCOUNT_ID"
			+" FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS SERVICE LEFT JOIN IBMOE_ORDER_STATUS ORDER_STATUS "
			+" ON ORDER_STATUS.SERVICE_LIST_ID=SERVICE.SERVICE_LIST_ID "
			+" LEFT JOIN "+tableSchemaName+"IBMOE_PRODUCT_MASTER_MAP PRODUCT_MSTR ON PRODUCT_MSTR.M6_PRODUCT_ID=SERVICE.M6_PRODUCT_ID "
			+" INNER JOIN "+tableSchemaName+"IBMOE_ORDER_LINE IBMOE_ORDER_LINE ON IBMOE_ORDER_LINE.SERVICE_NO=SERVICE.SERVICE_NO"
			+" WHERE   SERVICE.LOGICAL_SI_NUMBER = '"+orderNo+"'"
			+" GROUP BY SERVICE.SERVICE_NO, SERVICE.M6_PRODUCT_ID, SERVICE.EFFECTIVE_START_DATE, SERVICE.CUST_LOGICAL_SI_ID, "
			+" SERVICE.EFFECTIVE_END_DATE, SERVICE.PROVISIONING_PLAN_ID, SERVICE.REMARKS, SERVICE.CRM_ORDER_ID,  "
			+" SERVICE.SERVICE_ORDER_TYPE,  SERVICE.SERVICE_STAGE,"
			+" SERVICE.LOGICAL_SI_NUMBER, SERVICE.CUST_LOGICAL_SI_NO, SERVICE.CREATION_DATE, SERVICE.LAST_UPDATE_DATE, SERVICE.CREATED_BY,"
			+" SERVICE.CREATION_DATE, SERVICE.LAST_UPDATE_DATE, SERVICE.LAST_UPDATED_BY , SERVICE.PROCESS_ID,SERVICE.NETWORK_STATE,SERVICE.ATTRIBUTE1,SERVICE.ATTRIBUTE4,SERVICE.ATTRIBUTE5 ,"
			+" SERVICE.SERVICE_TYPE,SERVICE.CUST_ACCOUNT_ID,IBMOE_ORDER_LINE.LINE_STATUS	";
			/*"select distinct SERVICE.SERVICE_NO, SERVICE.M6_PRODUCT_ID,SERVICE_TYPE AS SERVICESTAGENAME,SERVICE.EFFECTIVE_START_DATE," 
			+" SERVICE.CUST_LOGICAL_SI_ID, SERVICE.EFFECTIVE_END_DATE, SERVICE.PROVISIONING_PLAN_ID, SERVICE.REMARKS, "
			+" SERVICE.CRM_ORDER_ID, MAX(ORDER_STATUS.M6_ORDER_ID) AS M6_ORDER_ID, max(ORDER_STATUS.PRE_M6_ORDER_ID) as PRE_M6_ORDER_ID ,"
			+" (SELECT MAX(SERVICE_NO) FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS"
			+" WHERE LOGICAL_SI_NUMBER = '"+orderNo+"' AND SERVICE_NO <> SERVICE.SERVICE_NO AND SERVICE_NO < SERVICE.SERVICE_NO) AS OLDSERVICEID,"
			+" CASE WHEN (SELECT MAX(SERVICE_NO) FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER = '"+orderNo+"' ) =SERVICE.SERVICE_NO" 
			+" THEN 0 ELSE 1 END AS IS_IN_HISTORY,"
			+" SERVICE.SERVICE_ORDER_TYPE, SERVICE.LOGICAL_SI_NUMBER, SERVICE.CUST_LOGICAL_SI_NO, SERVICE.CREATION_DATE, "
			+" SERVICE.LAST_UPDATE_DATE, SERVICE.CREATED_BY, SERVICE.CREATION_DATE, SERVICE.LAST_UPDATE_DATE, SERVICE.LAST_UPDATED_BY,"
			+" CASE WHEN UPPER(SERVICE.SERVICE_STAGE) = 'DRAFT' THEN NULL "
			+" WHEN UPPER(SERVICE.SERVICE_STAGE) = 'OPEN' THEN 'M6_START'  "  
			+" WHEN UPPER(SERVICE.SERVICE_STAGE) = 'CRM SERVICE CANCELLED' THEN 'M6_CANCELLED' "
			+" WHEN UPPER(SERVICE.SERVICE_STAGE) = 'PUBLISHED' THEN 'M6_END-FX_BT_START' "
			+" WHEN UPPER(SERVICE.SERVICE_STAGE) = 'CLOSED' THEN 'FX_BT_END' "
			+" END SERVICE_STAGE, SERVICE.PROCESS_ID,SERVICE.NETWORK_STATE,SERVICE.ATTRIBUTE1 ,SERVICE.ATTRIBUTE4,SERVICE.ATTRIBUTE5,SERVICE.CUST_ACCOUNT_ID"
			+" from "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS SERVICE LEFT JOIN "+tableSchemaName+"IBMOE_ORDER_STATUS ORDER_STATUS "
			+" ON ORDER_STATUS.SERVICE_LIST_ID=SERVICE.SERVICE_LIST_ID "
			+" LEFT JOIN "+tableSchemaName+"IBMOE_PRODUCT_MASTER_MAP PRODUCT_MSTR ON PRODUCT_MSTR.M6_PRODUCT_ID=SERVICE.M6_PRODUCT_ID "
			+" where   SERVICE.LOGICAL_SI_NUMBER = '"+orderNo+"'"
			+" GROUP BY SERVICE.SERVICE_NO, SERVICE.M6_PRODUCT_ID, SERVICE.EFFECTIVE_START_DATE, SERVICE.CUST_LOGICAL_SI_ID, "
			+" SERVICE.EFFECTIVE_END_DATE, SERVICE.PROVISIONING_PLAN_ID, SERVICE.REMARKS, SERVICE.CRM_ORDER_ID,  "
			+" SERVICE.SERVICE_ORDER_TYPE,  SERVICE.SERVICE_STAGE,"
			+" SERVICE.LOGICAL_SI_NUMBER, SERVICE.CUST_LOGICAL_SI_NO, SERVICE.CREATION_DATE, SERVICE.LAST_UPDATE_DATE, SERVICE.CREATED_BY,"
			+" SERVICE.CREATION_DATE, SERVICE.LAST_UPDATE_DATE, SERVICE.LAST_UPDATED_BY , SERVICE.PROCESS_ID,SERVICE.NETWORK_STATE,SERVICE.ATTRIBUTE1,SERVICE.ATTRIBUTE4,SERVICE.ATTRIBUTE5 ,"
			+" SERVICE.SERVICE_TYPE,SERVICE.CUST_ACCOUNT_ID";*/
		
		/*"select distinct SERVICE.SERVICE_NO, SERVICE.M6_PRODUCT_ID,"
           +" CASE WHEN UPPER(SERVICE.SERVICE_STAGE) = 'DRAFT' THEN NULL "
           +" WHEN UPPER(SERVICE.SERVICE_STAGE) = 'OPEN' THEN 'M6_START'    " 
           +" WHEN UPPER(SERVICE.SERVICE_STAGE) = 'CRM SERVICE CANCELLED' THEN 'M6_CANCELLED' "
           +" WHEN UPPER(SERVICE.SERVICE_STAGE) = 'PUBLISHED' THEN 'M6_END-FX_BT_START' "
           +" WHEN UPPER(SERVICE.SERVICE_STAGE) = 'CLOSED' THEN 'FX_BT_END' "
           +" END SERVICE_STAGE,SERVICE.EFFECTIVE_START_DATE, "
        +" SERVICE.CUST_LOGICAL_SI_ID, SERVICE.EFFECTIVE_END_DATE, SERVICE.PROVISIONING_PLAN_ID, SERVICE.REMARKS, " 
        +" SERVICE.CRM_ORDER_ID, MAX(ORDER_STATUS.M6_ORDER_ID) AS M6_ORDER_ID, max(ORDER_STATUS.PRE_M6_ORDER_ID) as PRE_M6_ORDER_ID ,SERVICE.SERVICE_ORDER_TYPE, SERVICE.LOGICAL_SI_NUMBER, SERVICE.CUST_LOGICAL_SI_NO, SERVICE.CREATION_DATE, "
        +" SERVICE.LAST_UPDATE_DATE, SERVICE.CREATED_BY, SERVICE.CREATION_DATE, SERVICE.LAST_UPDATE_DATE, "
        +" SERVICE.LAST_UPDATED_BY , SERVICE.PROCESS_ID,SERVICE.NETWORK_STATE,SERVICE.ATTRIBUTE1 ,SERVICE.ATTRIBUTE4,SERVICE.ATTRIBUTE5      "
        +" from IBMOE_ORDER_SERVICE_DETAILS SERVICE LEFT JOIN IBMOE_ORDER_STATUS ORDER_STATUS "
        +" ON ORDER_STATUS.SERVICE_LIST_ID=SERVICE.SERVICE_LIST_ID "
        +" LEFT JOIN IBMOE_PRODUCT_MASTER_MAP PRODUCT_MSTR ON PRODUCT_MSTR.M6_PRODUCT_ID=SERVICE.M6_PRODUCT_ID " 
        +" where  SERVICE.CRM_ORDER_ID="+orderNo
        +" GROUP BY SERVICE.SERVICE_NO, SERVICE.M6_PRODUCT_ID, SERVICE.EFFECTIVE_START_DATE, SERVICE.CUST_LOGICAL_SI_ID, "  
        +" SERVICE.EFFECTIVE_END_DATE, SERVICE.PROVISIONING_PLAN_ID, SERVICE.REMARKS, SERVICE.CRM_ORDER_ID,  "
        +" SERVICE.SERVICE_ORDER_TYPE,  SERVICE.SERVICE_STAGE,"
        +" SERVICE.LOGICAL_SI_NUMBER, SERVICE.CUST_LOGICAL_SI_NO, SERVICE.CREATION_DATE, SERVICE.LAST_UPDATE_DATE, SERVICE.CREATED_BY,"  
        +" SERVICE.CREATION_DATE, SERVICE.LAST_UPDATE_DATE, SERVICE.LAST_UPDATED_BY , SERVICE.PROCESS_ID,SERVICE.NETWORK_STATE,SERVICE.ATTRIBUTE1,SERVICE.ATTRIBUTE4,SERVICE.ATTRIBUTE5 ";
*/	
	private static String spInsertOrderServiceToIOMS2="{CALL IOE.ECRM_INSERT_INTO_TPOSERVICEMASTER2(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	
	private static String spInsertServiceAttributesToIOMS2="{CALL IOE.ECRM_INSERT_INTO_TPRODUCTATTVALUE_2(?,?,?,?,?,?,?,?,?,?)}";
	private static String strGetServiceAttributesFromCRM2="select IBMOE_CONFIG_PARAM.PRODUCT_ATTRIBUTE_ID,IBMOE_CONFIG_PARAM.M6_LABEL_VALUE,IBMOE_ORDER_LINE.SERVICE_NO,"
		 +" IBMOE_CONFIG_PARAM.CREATION_DATE,VALIDATE_LOV,IBMOE_CONFIG_PARAM.CREATED_BY,IBMOE_CONFIG_PARAM.LAST_UPDATE_DATE,"
		 +" IBMOE_CONFIG_PARAM.LAST_UPDATED_BY from  APPS.IBMOE_CONFIG_PARAM IBMOE_CONFIG_PARAM RIGHT OUTER"
		 +" JOIN xxibm.IBMOE_ORDER_LINE IBMOE_ORDER_LINE on IBMOE_ORDER_LINE.ORDER_LINE_ID=IBMOE_CONFIG_PARAM.ORDER_LINE_ID"
		 +" where IBMOE_ORDER_LINE.CHILD_SERVICE_KEY in (1,33,42,59,88,133,138,142,149,1230) and IBMOE_ORDER_LINE.CRM_ORDER_ID IN(SELECT CRM_ORDER_ID FROM IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"')" ;
		
	private static String strGetServiceAttributesFromCRM="select IBMOE_CONFIG_PARAM.PRODUCT_ATTRIBUTE_ID,IBMOE_CONFIG_PARAM.M6_LABEL_VALUE,IBMOE_ORDER_LINE.SERVICE_NO,"
														 +" IBMOE_CONFIG_PARAM.CREATION_DATE,VALIDATE_LOV,IBMOE_CONFIG_PARAM.CREATED_BY,IBMOE_CONFIG_PARAM.LAST_UPDATE_DATE,"
														 +" IBMOE_CONFIG_PARAM.LAST_UPDATED_BY from  APPS.IBMOE_CONFIG_PARAM IBMOE_CONFIG_PARAM RIGHT OUTER"
														 +" JOIN xxibm.IBMOE_ORDER_LINE IBMOE_ORDER_LINE on IBMOE_ORDER_LINE.ORDER_LINE_ID=IBMOE_CONFIG_PARAM.ORDER_LINE_ID"
														 +" where IBMOE_ORDER_LINE.CHILD_SERVICE_KEY in (1,33,42,59,88,133,138,142,149,1230) and IBMOE_ORDER_LINE.CRM_ORDER_ID="+orderNo ;
	
	private static String spInsertServiceAttributesToIOMS="{CALL IOE.ECRM_INSERT_INTO_TPRODUCTATTVALUE(?,?,?,?,?,?,?,?,?,?)}";
	
	private static String strGetOrderLineFromCRM="select IBMOE_ORDER_LINE.ORDER_LINE_ID,IBMOE_ORDER_LINE.SERVICE_LIST_ID,IBMOE_ORDER_LINE.M6_PRODUCT_ID,"
		+" IBMOE_ORDER_LINE.PARENT_SPEC_ID,IBMOE_ORDER_LINE.CHILD_SPEC_ID, "
		+ " IBMOE_CIRCUIT_DETAIL.LOC_DATE,IBMOE_CIRCUIT_DETAIL.LOC_NUMBER, IBMOE_CIRCUIT_DETAIL.BILLING_TRIG_DATE,"
		+ "	IBMOE_ORDER_LINE.PARENT_SERVICE_KEY,IBMOE_CIRCUIT_DETAIL.BILLING_TRIG_FLAG,IBMOE_BILLING_ACCOUNTS.CHILD_ACCOUNT_NUMBER,"
		+ "	IBMOE_ORDER_LINE.M6CHILDSERKEY,IBMOE_ORDER_LINE.M6PARENTSERKEY,IBMOE_ORDER_LINE.CREATION_DATE,IBMOE_ORDER_LINE.LAST_UPDATE_DATE,"
		+ "	IBMOE_CIRCUIT_DETAIL.CIRCUIT_ID, IBMOE_ORDER_LINE.PRI_LOC_ID,IBMOE_CIRCUIT_DETAIL.HUBLOCATION,IBMOE_CIRCUIT_DETAIL.UOM,"
		+ "	IBMOE_CIRCUIT_DETAIL.LOC_DATE,IBMOE_CIRCUIT_DETAIL.BILL_TRG_CREATE_DATE,IBMOE_CIRCUIT_DETAIL.CREATION_DATE,IBMOE_CIRCUIT_DETAIL.CREATED_BY,"
		+ "	IBMOE_CIRCUIT_DETAIL.LAST_UPDATE_DATE,IBMOE_CIRCUIT_DETAIL.LAST_UPDATED_BY,IBMOE_CIRCUIT_DETAIL.CHALLEN_NO,"
		+ "	IBMOE_CIRCUIT_DETAIL.CHALLEN_DATE,IBMOE_ORDER_LINE.M6_PRODUCT_ID,IBMOE_ORDER_LINE.NETWORK_STAT"
		+ "	from XXIBM.IBMOE_ORDER_LINE IBMOE_ORDER_LINE LEFT JOIN XXIBM.IBMOE_CIRCUIT_DETAIL IBMOE_CIRCUIT_DETAIL"
		+ "	on IBMOE_ORDER_LINE.ORDER_LINE_ID = IBMOE_CIRCUIT_DETAIL.ORDER_LINE_ID"
		+ "	LEFT JOIN IBMOE_BILLING_ACCOUNTS IBMOE_BILLING_ACCOUNTS on IBMOE_BILLING_ACCOUNTS.CHILD_ID=IBMOE_ORDER_LINE.CHILD_ID "
		+ "	where IBMOE_ORDER_LINE.CRM_ORDER_ID in ("+orderNo+")"
		+ "	order by ORDER_LINE_ID ";
		
	private static String spInsertOrderLineToIOMS2="{CALL IOE.ECRM_INSERT_INTO_TPOSERVICEDETAILS_L2(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	/*private static String strGetOrderLineFromCRM2="select  IBMOE_ORDER_LINE.ORDER_LINE_ID,IBMOE_ORDER_LINE.SERVICE_LIST_ID AS SERVICEID,IBMOE_ORDER_LINE.M6_PRODUCT_ID AS SERVICEDETAILID,"
		+ " IBMOE_CIRCUIT_DETAIL.LOC_DATE AS LOCDATE,IBMOE_CIRCUIT_DETAIL.BILLING_TRIG_DATE AS BILLINGTRIGGERDATE, IBMOE_ORDER_LINE.PARENT_SPEC_ID,IBMOE_ORDER_LINE.CHILD_SPEC_ID, "
		+ " IBMOE_CIRCUIT_DETAIL.LOC_NUMBER AS LOCNO," 
		+ " IBMOE_ORDER_LINE.PARENT_SERVICE_KEY AS PARENT_SERVICEPRODUCTID,"
		+ " IBMOE_CIRCUIT_DETAIL.BILLING_TRIG_FLAG AS BILLING_TRIGGER_STATUS,IBMOE_BILLING_ACCOUNTS.CHILD_ACCOUNT_NUMBER AS FX_ACCOUNT_EXTERNAL_ID,"
		+ " IBMOE_ORDER_LINE.M6CHILDSERKEY,IBMOE_ORDER_LINE.M6PARENTSERKEY,IBMOE_CIRCUIT_DETAIL.CREATION_DATE AS CREATED_DATE, IBMOE_ORDER_LINE.LAST_UPDATE_DATE AS MODIFIED_DATE,"
		+ " IBMOE_CIRCUIT_DETAIL.CIRCUIT_ID AS CKTID, IBMOE_ORDER_LINE.PRI_LOC_ID AS PRILOC,IBMOE_CIRCUIT_DETAIL.HUBLOCATION AS HUBLOC,IBMOE_CIRCUIT_DETAIL.UOM AS UOM,"
		+ " IBMOE_CIRCUIT_DETAIL.LOC_DATE,IBMOE_CIRCUIT_DETAIL.CREATION_DATE AS CREATEDDATE,IBMOE_CIRCUIT_DETAIL.CREATED_BY AS CREATEDBY,"
		+ " IBMOE_CIRCUIT_DETAIL.LAST_UPDATE_DATE,IBMOE_CIRCUIT_DETAIL.LAST_UPDATED_BY,IBMOE_CIRCUIT_DETAIL.CHALLEN_NO,"
		+ " IBMOE_CIRCUIT_DETAIL.CHALLEN_DATE,IBMOE_ORDER_LINE.M6_PRODUCT_ID,IBMOE_ORDER_LINE.NETWORK_STAT,IBMOE_CIRCUIT_DETAIL.CIRCUIT_ID AS FX_SI_ID,IBMOE_ORDER_LINE.LINE_STATUS AS LINE_STATUS,"
		+ " IBMOE_CIRCUIT_DETAIL.BILL_TRG_CREATE_DATE AS BILLING_TRIGGER_CREATEDATE,"
		+ " CASE WHEN SERVICE_STAGE = 'CLOSED' and ((SELECT MAX(SERVICE_NO) FROM IBMOE_ORDER_SERVICE_DETAILS"
		+ " WHERE LOGICAL_SI_NUMBER = '"+orderNo+"' AND SERVICE_NO <> SERVICE.SERVICE_NO AND SERVICE_NO < SERVICE.SERVICE_NO)) is null then 1 else 0 end  AS IS_IN_HISTORY"
		+ " from XXIBM.IBMOE_ORDER_LINE IBMOE_ORDER_LINE LEFT JOIN XXIBM.IBMOE_CIRCUIT_DETAIL IBMOE_CIRCUIT_DETAIL"
		+ " on IBMOE_ORDER_LINE.ORDER_LINE_ID = IBMOE_CIRCUIT_DETAIL.ORDER_LINE_ID"
		+ " LEFT JOIN IBMOE_BILLING_ACCOUNTS IBMOE_BILLING_ACCOUNTS on IBMOE_BILLING_ACCOUNTS.CHILD_ID=IBMOE_ORDER_LINE.CHILD_ID" 
		+ " INNER JOIN IBMOE_ORDER_SERVICE_DETAILS SERVICE ON SERVICE.SERVICE_NO= IBMOE_ORDER_LINE.SERVICE_NO"
		+ " where LOGICAL_SI_NUMBER = '"+orderNo+"'"
		+ " order by ORDER_LINE_ID";*/

	private static String strGetOrderLineFromCRM2="SELECT * FROM ("
		+" SELECT IBMOE_ORDER_LINE.ORDER_LINE_ID,"
		+" CASE WHEN IBMOE_ORDER_LINE.PARENT_SERVICE_KEY=IBMOE_ORDER_LINE.CHILD_SERVICE_KEY "
		+" THEN IBMOE_ORDER_LINE.ORDER_LINE_ID            "
		+" ELSE "
		+" (SELECT MAX (ol1.order_line_id)"
		+" FROM "+tableSchemaName+"ibmoe_order_line ol1"
		+" WHERE ol1.ib_order_line_id=IBMOE_ORDER_LINE.ib_ORDER_LINE_ID"
		+" ) END"
		
		+" AS SERVICEPRODUCTID,"
		+" CASE WHEN IBMOE_ORDER_LINE.PARENT_SERVICE_KEY=IBMOE_ORDER_LINE.CHILD_SERVICE_KEY "
		+" THEN IBMOE_ORDER_LINE.SERVICE_LIST_ID"
		+" ELSE   "
		+" (SELECT MIN (ol1.service_list_id)"
		+" FROM "+tableSchemaName+"ibmoe_order_line ol1"
		+" WHERE ol1.ib_order_line_id ="
		+" IBMOE_ORDER_LINE.ib_order_line_id"
		+" and line_status = 'NEW')"
		+" END"
		+" AS SERVICEID,"
		+" CASE WHEN IBMOE_ORDER_LINE.CRM_PRODUCT_NAME='Additional Billing Info' THEN IBMOE_ORDER_LINE.PARENT_SERVICE_KEY"
		+" ELSE IBMOE_ORDER_LINE.M6_PRODUCT_ID END"
		+" AS SERVICEDETAILID,"
		+" IBMOE_CIRCUIT_DETAIL.LOC_DATE AS LOCDATE,"
		+" IBMOE_CIRCUIT_DETAIL.BILLING_TRIG_DATE AS BILLINGTRIGGERDATE,"
		+" IBMOE_CIRCUIT_DETAIL.LOC_NUMBER AS LOCNO, "
		+" CASE WHEN IBMOE_ORDER_LINE.PARENT_SERVICE_KEY=IBMOE_ORDER_LINE.CHILD_SERVICE_KEY "
		+" THEN 0 "
		+" WHEN IBMOE_ORDER_LINE.PARENT_SERVICE_KEY=42 and IBMOE_ORDER_LINE.PARENT_SERVICE_KEY<>IBMOE_ORDER_LINE.CHILD_SERVICE_KEY "
		+" THEN (SELECT MIN (ol1.order_line_id)"
		+" FROM "+tableSchemaName+"ibmoe_order_line ol1"
		+" WHERE ol1.ib_order_line_id = "
		+" ("
		+" SELECT MIN(OLC.ib_order_line_id) FROM "+tableSchemaName+"ibmoe_order_line OLC"
		+" WHERE  OLC.CRM_ORDER_ID IN ("
		+" SELECT distinct IBMOE_ORDER_SERVICE_DETAILS.CRM_ORDER_ID "
		+" FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS "
		+" WHERE LOGICAL_SI_NUMBER='"+orderNo+"' and IBMOE_ORDER_SERVICE_DETAILS.CRM_ORDER_ID=IBMOE_ORDER_LINE.CRM_ORDER_ID"
		+" ) "
		+" ) "
		+" )"
		
		+" ELSE"
		+" ("
		+" SELECT MAX (ol1.order_line_id)"
		+" FROM "+tableSchemaName+"ibmoe_order_line ol1"
		+" WHERE ol1.ib_order_line_id = "
		+" (SELECT OLC.ib_order_line_id FROM "+tableSchemaName+"ibmoe_order_line OLC"
		+" WHERE  OLC.CRM_ORDER_ID IN ("
		+" SELECT distinct IBMOE_ORDER_SERVICE_DETAILS.CRM_ORDER_ID FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"' "
		+" and IBMOE_ORDER_SERVICE_DETAILS.CRM_ORDER_ID=IBMOE_ORDER_LINE.CRM_ORDER_ID"
		+" ) AND OLC.CHILD_SERVICE_KEY=(SELECT PARENT_SERVICE_KEY FROM "+tableSchemaName+"IBMOE_ORDER_LINE  ol WHERE  ol.ORDER_LINE_ID=IBMOE_ORDER_LINE.order_line_id)"
		+" )"
		+" )"
		+" END AS PARENT_SERVICEPRODUCTID,"
		+" IBMOE_ORDER_LINE.PARENT_SPEC_ID,"
		+" IBMOE_ORDER_LINE.CHILD_SPEC_ID,"
		+" (SELECT MAX(ol1.order_line_id)"
		+" FROM "+tableSchemaName+"ibmoe_order_line ol1"
		+" WHERE ol1.ib_order_line_id =IBMOE_ORDER_LINE.ib_order_line_id            "
		+" AND ol1.PARENT_SERVICE_KEY=ol1.CHILD_SERVICE_KEY "
		+" AND ol1.order_line_id<IBMOE_ORDER_LINE.order_line_id"
		+" )         "
		+" AS OLD_SERVICEPRODUCTID,"
		+" CASE WHEN IBMOE_ORDER_LINE.NETWORK_STAT=1053 "
		+" THEN 1"
		+" ELSE 0 END"
		+" AS IS_DISCONNECTION,        "
		+" CASE WHEN IBMOE_ORDER_LINE.NETWORK_STAT=10002 "
		+" THEN 1"
		+" ELSE 0 END"
		+" AS IS_SUSPENDED,"
		+" CASE WHEN IBMOE_ORDER_LINE.LINE_STATUS='NEW' "
		+" THEN NULL ELSE"
		+" IBMOE_ORDER_LINE.CRM_ORDER_ID"
		+" END AS CHANGE_ORDERNO,"
		+" CASE WHEN IBMOE_CIRCUIT_DETAIL.BILLING_TRIG_FLAG='Y' "
		+" THEN 20 ELSE 0 END AS BILLING_TRIGGER_STATUS,"
		+" IBMOE_BILLING_ACCOUNTS.CHILD_ACCOUNT_NUMBER AS FX_ACCOUNT_EXTERNAL_ID,"
		+" IBMOE_ORDER_LINE.M6CHILDSERKEY,"
		+" IBMOE_ORDER_LINE.M6PARENTSERKEY,"
		+" CASE WHEN IBMOE_ORDER_LINE.LINE_STATUS = 'NEW' THEN null"
		+" ELSE SERVICE_ORDER_TYPE                  "
		+" END"
		+" AS SUBCHANGETYPEID,"
		+" IBMOE_CIRCUIT_DETAIL.CREATION_DATE AS CREATED_DATE, "
		+" IBMOE_ORDER_LINE.LAST_UPDATE_DATE AS MODIFIED_DATE,"
		+" IBMOE_CIRCUIT_DETAIL.CIRCUIT_ID AS CKTID, "
		+" IBMOE_ORDER_LINE.PRI_LOC_ID AS PRILOC,"
		+" IBMOE_CIRCUIT_DETAIL.HUBLOCATION AS HUBLOC,"
		+" IBMOE_CIRCUIT_DETAIL.UOM AS UOM,"
		+" IBMOE_CIRCUIT_DETAIL.PM_PROV_DATE,"
		+" IBMOE_CIRCUIT_DETAIL.CREATION_DATE AS CREATEDDATE,"
		+" IBMOE_CIRCUIT_DETAIL.CREATED_BY AS CREATEDBY,"
		+" IBMOE_CIRCUIT_DETAIL.LAST_UPDATE_DATE AS MODIFIEDDATE,"
		+" IBMOE_CIRCUIT_DETAIL.LAST_UPDATED_BY AS MODIFIEDBY,"
		+" IBMOE_CIRCUIT_DETAIL.CHALLEN_NO,"
		+" IBMOE_CIRCUIT_DETAIL.CHALLEN_DATE,"
		+" CASE WHEN IBMOE_ORDER_LINE.ORDER_LINE_ID ="
		+" (   SELECT MIN(ORDER_LINE_ID) "
		+" FROM "+tableSchemaName+"IBMOE_ORDER_LINE "
		+" WHERE CRM_ORDER_ID IN (SELECT CRM_ORDER_ID FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"')"
		+" )   THEN 0"
		+" WHEN (IBMOE_ORDER_LINE.PARENT_SERVICE_KEY=IBMOE_ORDER_LINE.CHILD_SERVICE_KEY ) "
		+" THEN IBMOE_ORDER_LINE.SERVICE_LIST_ID"
		+" WHEN (IBMOE_ORDER_LINE.PARENT_SERVICE_KEY<>IBMOE_ORDER_LINE.CHILD_SERVICE_KEY ) "
		+" THEN (SELECT MAX(SERVICE_LIST_ID) "
		+" FROM "+tableSchemaName+"IBMOE_ORDER_LINE "
		+" WHERE CRM_ORDER_ID IN (SELECT CRM_ORDER_ID FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"') "
		+" )"
		+" END AS CHANGE_SERVICEID,"
		
		+" CASE WHEN IBMOE_ORDER_LINE.PARENT_SERVICE_KEY=IBMOE_ORDER_LINE.CHILD_SERVICE_KEY "
		+" THEN 0 "
		+" WHEN IBMOE_ORDER_LINE.PARENT_SERVICE_KEY=42 and IBMOE_ORDER_LINE.PARENT_SERVICE_KEY<>IBMOE_ORDER_LINE.CHILD_SERVICE_KEY"
		+" THEN (SELECT MAX (ol1.order_line_id)"
		+" FROM "+tableSchemaName+"ibmoe_order_line ol1"
		+" WHERE ol1.ib_order_line_id = "
		+" ("
		+" SELECT MIN(OLC.ib_order_line_id) FROM "+tableSchemaName+"ibmoe_order_line OLC"
		+" WHERE  OLC.CRM_ORDER_ID IN ("
		+" SELECT distinct IBMOE_ORDER_SERVICE_DETAILS.CRM_ORDER_ID "
		+" FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS "
		+" WHERE LOGICAL_SI_NUMBER='"+orderNo+"' and IBMOE_ORDER_SERVICE_DETAILS.CRM_ORDER_ID=IBMOE_ORDER_LINE.CRM_ORDER_ID"
		+" ) "
		+" ) "
		+" )"
		
		+" ELSE"
		+" ("
		+" SELECT MAX (ol1.order_line_id)"
		+" FROM "+tableSchemaName+"ibmoe_order_line ol1"
		+" WHERE ol1.ib_order_line_id = "
		+" (SELECT OLC.ib_order_line_id FROM "+tableSchemaName+"ibmoe_order_line OLC"
		+" WHERE  OLC.CRM_ORDER_ID IN ("
		+" SELECT distinct IBMOE_ORDER_SERVICE_DETAILS.CRM_ORDER_ID FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"' "
		+" and IBMOE_ORDER_SERVICE_DETAILS.CRM_ORDER_ID=IBMOE_ORDER_LINE.CRM_ORDER_ID"
		+" ) AND OLC.CHILD_SERVICE_KEY=(SELECT PARENT_SERVICE_KEY FROM "+tableSchemaName+"IBMOE_ORDER_LINE  ol WHERE  ol.ORDER_LINE_ID=IBMOE_ORDER_LINE.order_line_id)"
		+" )"
		+" )"
		+" END AS CHANGE_PARENT_SPID,		"
		+" CASE WHEN IBMOE_ORDER_LINE.CRM_PRODUCT_NAME='Additional Billing Info' THEN 1 ELSE 0 END AS ADDITIONALNODE,"
		+" IBMOE_CIRCUIT_DETAIL.CIRCUIT_ID AS FX_SI_ID,"
		+" CASE WHEN IBMOE_CIRCUIT_DETAIL.BILLING_TRIG_FLAG='Y' "
		+" THEN 'Y' ELSE 'null' END AS FOR_BILLINGTRIGGER,"
		+" IBMOE_CIRCUIT_DETAIL.BILL_TRG_CREATE_DATE AS BILLING_TRIGGER_CREATEDATE,"
		+" IBMOE_ORDER_LINE.M6_PRODUCT_ID,"
		+" IBMOE_ORDER_LINE.NETWORK_STAT,"
		+" IBMOE_ORDER_LINE.LINE_STATUS AS LINE_STATUS,      "
		+" IBMOE_ORDER_LINE.PARENT_SERVICE_KEY,"
		+" IBMOE_ORDER_LINE.CHILD_SERVICE_KEY,"
		
		+" CASE WHEN LINE_STATUS='NEW' THEN 'NEW' ELSE 'UNCHANGED' END AS M6_ATT_FX_CHANGED,"
		+" IBMOE_CIRCUIT_DETAIL.BILLING_TRIG_DATE AS SERVICEACTIVEDT,"
		+" IBMOE_ORDER_LINE.CRM_ORDER_ID,IBMOE_CIRCUIT_DETAIL.LOC_REC_DATE"
		
		+" FROM "+tableSchemaName+"IBMOE_ORDER_LINE IBMOE_ORDER_LINE LEFT JOIN "+tableSchemaName+"IBMOE_CIRCUIT_DETAIL IBMOE_CIRCUIT_DETAIL"
		+" ON IBMOE_ORDER_LINE.ORDER_LINE_ID = IBMOE_CIRCUIT_DETAIL.ORDER_LINE_ID"
		+" LEFT JOIN "+tableSchemaName+"IBMOE_BILLING_ACCOUNTS IBMOE_BILLING_ACCOUNTS ON IBMOE_BILLING_ACCOUNTS.CHILD_ID=IBMOE_ORDER_LINE.CHILD_ID "
		+" INNER JOIN "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS SERVICE ON SERVICE.SERVICE_NO= IBMOE_ORDER_LINE.SERVICE_NO "
		+" WHERE IBMOE_ORDER_LINE.CRM_ORDER_ID IN(SELECT MAX(CRM_ORDER_ID) FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"')        "
		
		+" UNION"
		
		+" SELECT  IBMOE_ORDER_LINE.ORDER_LINE_ID,"
		+" CASE WHEN IBMOE_ORDER_LINE.PARENT_SERVICE_KEY=IBMOE_ORDER_LINE.CHILD_SERVICE_KEY "
		+" THEN IBMOE_ORDER_LINE.ORDER_LINE_ID            "
		+" ELSE "
		+" (SELECT MAX (ol1.order_line_id)"
		+" FROM "+tableSchemaName+"ibmoe_order_line ol1"
		+" WHERE ol1.ib_order_line_id=IBMOE_ORDER_LINE.ib_ORDER_LINE_ID"
		+" ) END"
		+" AS SERVICEPRODUCTID,"
		+" CASE WHEN IBMOE_ORDER_LINE.PARENT_SERVICE_KEY=IBMOE_ORDER_LINE.CHILD_SERVICE_KEY "
		+" THEN IBMOE_ORDER_LINE.SERVICE_LIST_ID"
		+" ELSE   "
		+" (SELECT MIN (ol1.service_list_id)"
		+" FROM "+tableSchemaName+"ibmoe_order_line ol1"
		+" WHERE ol1.ib_order_line_id ="
		+" IBMOE_ORDER_LINE.ib_order_line_id"
		+" and line_status = 'NEW')"
		+" END"
		+" AS SERVICEID,       "
		+" CASE WHEN IBMOE_ORDER_LINE.CRM_PRODUCT_NAME='Additional Billing Info' THEN IBMOE_ORDER_LINE.PARENT_SERVICE_KEY"
		+" ELSE IBMOE_ORDER_LINE.M6_PRODUCT_ID END"
		+" AS SERVICEDETAILID,"
		+" IBMOE_CIRCUIT_DETAIL.LOC_DATE AS LOCDATE,"
		+" IBMOE_CIRCUIT_DETAIL.BILLING_TRIG_DATE AS BILLINGTRIGGERDATE,"
		+" IBMOE_CIRCUIT_DETAIL.LOC_NUMBER AS LOCNO, "
		+" CASE WHEN IBMOE_ORDER_LINE.PARENT_SERVICE_KEY=IBMOE_ORDER_LINE.CHILD_SERVICE_KEY "
		+" THEN 0 "
		+" WHEN IBMOE_ORDER_LINE.PARENT_SERVICE_KEY=42 and IBMOE_ORDER_LINE.PARENT_SERVICE_KEY<>IBMOE_ORDER_LINE.CHILD_SERVICE_KEY "
		+" THEN (SELECT MIN (ol1.order_line_id)"
		+" FROM "+tableSchemaName+"ibmoe_order_line ol1"
		+" WHERE ol1.ib_order_line_id = "
		+" ("
		+" SELECT MIN(OLC.ib_order_line_id) FROM "+tableSchemaName+"ibmoe_order_line OLC"
		+" WHERE  OLC.CRM_ORDER_ID IN ("
		+" SELECT distinct IBMOE_ORDER_SERVICE_DETAILS.CRM_ORDER_ID "
		+" FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS "
		+" WHERE LOGICAL_SI_NUMBER='"+orderNo+"' and IBMOE_ORDER_SERVICE_DETAILS.CRM_ORDER_ID=IBMOE_ORDER_LINE.CRM_ORDER_ID"
		+" ) "
		+" ) "
		+" )"
		
		+" ELSE"
		+" ("
		+" SELECT MAX (ol1.order_line_id)"
		+" FROM "+tableSchemaName+"ibmoe_order_line ol1"
		+" WHERE ol1.ib_order_line_id = "
		+" (SELECT OLC.ib_order_line_id FROM "+tableSchemaName+"ibmoe_order_line OLC"
		+" WHERE  OLC.CRM_ORDER_ID IN ("
		+" SELECT distinct IBMOE_ORDER_SERVICE_DETAILS.CRM_ORDER_ID FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"' "
		+" and IBMOE_ORDER_SERVICE_DETAILS.CRM_ORDER_ID=IBMOE_ORDER_LINE.CRM_ORDER_ID"
		+" ) AND OLC.CHILD_SERVICE_KEY=(SELECT PARENT_SERVICE_KEY FROM "+tableSchemaName+"IBMOE_ORDER_LINE  ol WHERE  ol.ORDER_LINE_ID=IBMOE_ORDER_LINE.order_line_id)"
		+" )"
		+" )"
		+" END AS PARENT_SERVICEPRODUCTID,"
		+" IBMOE_ORDER_LINE.PARENT_SPEC_ID,"
		+" IBMOE_ORDER_LINE.CHILD_SPEC_ID,"
		+" (SELECT MAX(ol1.order_line_id)"
		+" FROM "+tableSchemaName+"ibmoe_order_line ol1"
		+" WHERE ol1.ib_order_line_id =IBMOE_ORDER_LINE.ib_order_line_id            "
		+" AND ol1.PARENT_SERVICE_KEY=ol1.CHILD_SERVICE_KEY "
		+" AND ol1.order_line_id<IBMOE_ORDER_LINE.order_line_id"
		+" )         "
		+" AS OLD_SERVICEPRODUCTID,"
		+" CASE WHEN IBMOE_ORDER_LINE.NETWORK_STAT=1053 "
		+" THEN 1"
		+" ELSE 0 END"
		+" AS IS_DISCONNECTION,        "
		+" CASE WHEN IBMOE_ORDER_LINE.NETWORK_STAT=10002 "
		+" THEN 1"
		+" ELSE 0 END"
		+" AS IS_SUSPENDED,"
		+" CASE WHEN IBMOE_ORDER_LINE.LINE_STATUS='NEW' "
		+" THEN NULL ELSE"
		+" IBMOE_ORDER_LINE.CRM_ORDER_ID"
		+" END AS CHANGE_ORDERNO,"
		+" CASE WHEN IBMOE_CIRCUIT_DETAIL.BILLING_TRIG_FLAG='Y' "
		+" THEN 20 ELSE 0 END AS BILLING_TRIGGER_STATUS,"
		+" IBMOE_BILLING_ACCOUNTS.CHILD_ACCOUNT_NUMBER AS FX_ACCOUNT_EXTERNAL_ID,"
		+" IBMOE_ORDER_LINE.M6CHILDSERKEY,"
		+" IBMOE_ORDER_LINE.M6PARENTSERKEY,"
		+" CASE WHEN IBMOE_ORDER_LINE.LINE_STATUS = 'NEW' THEN null"
		+" ELSE SERVICE_ORDER_TYPE                  "
		+" END"
		+" AS SUBCHANGETYPEID,"
		+" IBMOE_CIRCUIT_DETAIL.CREATION_DATE AS CREATED_DATE, "
		+" IBMOE_ORDER_LINE.LAST_UPDATE_DATE AS MODIFIED_DATE,"
		+" IBMOE_CIRCUIT_DETAIL.CIRCUIT_ID AS CKTID, "
		+" IBMOE_ORDER_LINE.PRI_LOC_ID AS PRILOC,"
		+" IBMOE_CIRCUIT_DETAIL.HUBLOCATION AS HUBLOC,"
		+" IBMOE_CIRCUIT_DETAIL.UOM AS UOM,"
		+" IBMOE_CIRCUIT_DETAIL.PM_PROV_DATE,"
		+" IBMOE_CIRCUIT_DETAIL.CREATION_DATE AS CREATEDDATE,"
		+" IBMOE_CIRCUIT_DETAIL.CREATED_BY AS CREATEDBY,"
		+" IBMOE_CIRCUIT_DETAIL.LAST_UPDATE_DATE AS MODIFIEDDATE,"
		+" IBMOE_CIRCUIT_DETAIL.LAST_UPDATED_BY AS MODIFIEDBY,"
		+" IBMOE_CIRCUIT_DETAIL.CHALLEN_NO,"
		+" IBMOE_CIRCUIT_DETAIL.CHALLEN_DATE,"
		+" CASE WHEN IBMOE_ORDER_LINE.ORDER_LINE_ID ="
		+" (   SELECT MIN(ORDER_LINE_ID) "
		+" FROM "+tableSchemaName+"IBMOE_ORDER_LINE "
		+" WHERE CRM_ORDER_ID IN (SELECT CRM_ORDER_ID FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"')"
		+" )   THEN 0"
		+" WHEN (IBMOE_ORDER_LINE.PARENT_SERVICE_KEY=IBMOE_ORDER_LINE.CHILD_SERVICE_KEY ) "
		+" THEN IBMOE_ORDER_LINE.SERVICE_LIST_ID"
		+" WHEN (IBMOE_ORDER_LINE.PARENT_SERVICE_KEY<>IBMOE_ORDER_LINE.CHILD_SERVICE_KEY ) "
		+" THEN (SELECT MAX(SERVICE_LIST_ID) "
		+" FROM "+tableSchemaName+"IBMOE_ORDER_LINE "
		+" WHERE CRM_ORDER_ID IN (SELECT CRM_ORDER_ID FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"') "
		+" )"
		+" END AS CHANGE_SERVICEID,"
		
		+" CASE WHEN IBMOE_ORDER_LINE.PARENT_SERVICE_KEY=IBMOE_ORDER_LINE.CHILD_SERVICE_KEY "
		+" THEN 0 "
		+" WHEN IBMOE_ORDER_LINE.PARENT_SERVICE_KEY=42 and IBMOE_ORDER_LINE.PARENT_SERVICE_KEY<>IBMOE_ORDER_LINE.CHILD_SERVICE_KEY"
		+" THEN (SELECT MAX (ol1.order_line_id)"
		+" FROM "+tableSchemaName+"ibmoe_order_line ol1"
		+" WHERE ol1.ib_order_line_id = "
		+" ("
		+" SELECT MIN(OLC.ib_order_line_id) FROM "+tableSchemaName+"ibmoe_order_line OLC"
		+" WHERE  OLC.CRM_ORDER_ID IN ("
		+" SELECT distinct IBMOE_ORDER_SERVICE_DETAILS.CRM_ORDER_ID "
		+" FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS "
		+" WHERE LOGICAL_SI_NUMBER='"+orderNo+"' and IBMOE_ORDER_SERVICE_DETAILS.CRM_ORDER_ID=IBMOE_ORDER_LINE.CRM_ORDER_ID"
		+" ) "
		+" ) "
		+" )"
		
		+" ELSE"
		+" ("
		+" SELECT MAX (ol1.order_line_id)"
		+" FROM "+tableSchemaName+"ibmoe_order_line ol1"
		+" WHERE ol1.ib_order_line_id = "
		+" (SELECT OLC.ib_order_line_id FROM "+tableSchemaName+"ibmoe_order_line OLC"
		+" WHERE  OLC.CRM_ORDER_ID IN ("
		+" SELECT distinct IBMOE_ORDER_SERVICE_DETAILS.CRM_ORDER_ID FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"' "
		+" and IBMOE_ORDER_SERVICE_DETAILS.CRM_ORDER_ID=IBMOE_ORDER_LINE.CRM_ORDER_ID"
		+" ) AND OLC.CHILD_SERVICE_KEY=(SELECT PARENT_SERVICE_KEY FROM "+tableSchemaName+"IBMOE_ORDER_LINE  ol WHERE  ol.ORDER_LINE_ID=IBMOE_ORDER_LINE.order_line_id)"
		+" )"
		+" )"
		+" END AS CHANGE_PARENT_SPID,		"
		+" CASE WHEN IBMOE_ORDER_LINE.CRM_PRODUCT_NAME='Additional Billing Info' THEN 1 ELSE 0 END AS ADDITIONALNODE,"
		+" IBMOE_CIRCUIT_DETAIL.CIRCUIT_ID AS FX_SI_ID,"
		+" CASE WHEN IBMOE_CIRCUIT_DETAIL.BILLING_TRIG_FLAG='Y' "
		+" THEN 'Y' ELSE 'null' END AS FOR_BILLINGTRIGGER,"
		+" IBMOE_CIRCUIT_DETAIL.BILL_TRG_CREATE_DATE AS BILLING_TRIGGER_CREATEDATE,"
		+" IBMOE_ORDER_LINE.M6_PRODUCT_ID,"
		+" IBMOE_ORDER_LINE.NETWORK_STAT,"
		+" IBMOE_ORDER_LINE.LINE_STATUS AS LINE_STATUS,"
		+" IBMOE_ORDER_LINE.PARENT_SERVICE_KEY,"
		+" IBMOE_ORDER_LINE.CHILD_SERVICE_KEY,"
		
		+" CASE WHEN LINE_STATUS='NEW' THEN 'NEW' ELSE 'UNCHANGED' END AS M6_ATT_FX_CHANGED,"
		+" IBMOE_CIRCUIT_DETAIL.BILLING_TRIG_DATE AS SERVICEACTIVEDT,"
		+" IBMOE_ORDER_LINE.CRM_ORDER_ID,IBMOE_CIRCUIT_DETAIL.LOC_REC_DATE"
		
		+" FROM "+tableSchemaName+"IBMOE_ORDER_LINE IBMOE_ORDER_LINE LEFT JOIN "+tableSchemaName+"IBMOE_CIRCUIT_DETAIL IBMOE_CIRCUIT_DETAIL"
		+" ON IBMOE_ORDER_LINE.ORDER_LINE_ID = IBMOE_CIRCUIT_DETAIL.ORDER_LINE_ID"
		+" LEFT JOIN "+tableSchemaName+"IBMOE_BILLING_ACCOUNTS IBMOE_BILLING_ACCOUNTS ON IBMOE_BILLING_ACCOUNTS.CHILD_ID=IBMOE_ORDER_LINE.CHILD_ID "
		+" INNER JOIN "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS SERVICE ON SERVICE.SERVICE_NO= IBMOE_ORDER_LINE.SERVICE_NO "
		+" WHERE IBMOE_ORDER_LINE.CRM_ORDER_ID NOT IN (SELECT maX(CRM_ORDER_ID) FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"')        "
		+" AND IBMOE_ORDER_LINE.PARENT_SERVICE_KEY=IBMOE_ORDER_LINE.CHILD_SERVICE_KEY and SERVICE.LOGICAL_SI_NUMBER='"+orderNo+"'"
		
		+" ) TAB "
		+" ORDER BY TAB.SERVICEID,TAB.ORDER_LINE_ID";

	private static String spInsertOrderLineToIOMS3="{CALL IOE.ECRM_INSERT_INTO_TPOSERVICEDETAILS_L2_HISTORY(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	private static String spInsertOrderLineToIOMS4="{CALL IOE.ECRM_INSERT_INTO_TDISCONNECTION_HISTORY(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
/*	private static String strGetOrderLineFromCRM3="select  IBMOE_ORDER_LINE.ORDER_LINE_ID,IBMOE_ORDER_LINE.SERVICE_LIST_ID AS SERVICEID,IBMOE_ORDER_LINE.M6_PRODUCT_ID AS SERVICEDETAILID,"
		+ " IBMOE_CIRCUIT_DETAIL.LOC_DATE AS LOCDATE,IBMOE_CIRCUIT_DETAIL.BILLING_TRIG_DATE AS BILLINGTRIGGERDATE, IBMOE_ORDER_LINE.PARENT_SPEC_ID,IBMOE_ORDER_LINE.CHILD_SPEC_ID, "
		+ " IBMOE_CIRCUIT_DETAIL.LOC_NUMBER AS LOCNO," 
		+ " IBMOE_ORDER_LINE.PARENT_SERVICE_KEY AS PARENT_SERVICEPRODUCTID,"
		+ " IBMOE_CIRCUIT_DETAIL.BILLING_TRIG_FLAG AS BILLING_TRIGGER_STATUS,IBMOE_BILLING_ACCOUNTS.CHILD_ACCOUNT_NUMBER AS FX_ACCOUNT_EXTERNAL_ID,"
		+ " IBMOE_ORDER_LINE.M6CHILDSERKEY,IBMOE_ORDER_LINE.M6PARENTSERKEY,IBMOE_CIRCUIT_DETAIL.CREATION_DATE AS CREATED_DATE, IBMOE_ORDER_LINE.LAST_UPDATE_DATE AS MODIFIED_DATE,"
		+ " IBMOE_CIRCUIT_DETAIL.CIRCUIT_ID AS CKTID, IBMOE_ORDER_LINE.PRI_LOC_ID AS PRILOC,IBMOE_CIRCUIT_DETAIL.HUBLOCATION AS HUBLOC,IBMOE_CIRCUIT_DETAIL.UOM AS UOM,"
		+ " IBMOE_CIRCUIT_DETAIL.LOC_DATE,IBMOE_CIRCUIT_DETAIL.CREATION_DATE AS CREATEDDATE,IBMOE_CIRCUIT_DETAIL.CREATED_BY AS CREATEDBY,"
		+ " IBMOE_CIRCUIT_DETAIL.LAST_UPDATE_DATE,IBMOE_CIRCUIT_DETAIL.LAST_UPDATED_BY,IBMOE_CIRCUIT_DETAIL.CHALLEN_NO,"
		+ " IBMOE_CIRCUIT_DETAIL.CHALLEN_DATE,IBMOE_ORDER_LINE.M6_PRODUCT_ID,IBMOE_ORDER_LINE.NETWORK_STAT,IBMOE_CIRCUIT_DETAIL.CIRCUIT_ID AS FX_SI_ID,IBMOE_ORDER_LINE.LINE_STATUS AS LINE_STATUS,"
		+ " IBMOE_CIRCUIT_DETAIL.BILL_TRG_CREATE_DATE AS BILLING_TRIGGER_CREATEDATE,"
		+ " CASE WHEN SERVICE_STAGE = 'CLOSED' and ((SELECT MAX(SERVICE_NO) FROM IBMOE_ORDER_SERVICE_DETAILS"
		+ " WHERE LOGICAL_SI_NUMBER = '"+orderNo+"' AND SERVICE_NO <> SERVICE.SERVICE_NO AND SERVICE_NO < SERVICE.SERVICE_NO)) is null then 1 else 0 end  AS IS_IN_HISTORY"
		+ " from XXIBM.IBMOE_ORDER_LINE IBMOE_ORDER_LINE LEFT JOIN XXIBM.IBMOE_CIRCUIT_DETAIL IBMOE_CIRCUIT_DETAIL"
		+ " on IBMOE_ORDER_LINE.ORDER_LINE_ID = IBMOE_CIRCUIT_DETAIL.ORDER_LINE_ID"
		+ " LEFT JOIN IBMOE_BILLING_ACCOUNTS IBMOE_BILLING_ACCOUNTS on IBMOE_BILLING_ACCOUNTS.CHILD_ID=IBMOE_ORDER_LINE.CHILD_ID" 
		+ " INNER JOIN IBMOE_ORDER_SERVICE_DETAILS SERVICE ON SERVICE.SERVICE_NO= IBMOE_ORDER_LINE.SERVICE_NO"
		+ " where LOGICAL_SI_NUMBER = '"+orderNo+"'"
		+ " order by ORDER_LINE_ID";*/
	
	private static String strGetOrderLineFromCRM3=" SELECT * FROM ("
		+"  SELECT SERVICE.SERVICE_NO AS MAIN_SERVICE_ID,"
		+"  IBMOE_ORDER_LINE.ORDER_LINE_ID,"
		+"  CASE WHEN IBMOE_ORDER_LINE.PARENT_SERVICE_KEY=IBMOE_ORDER_LINE.CHILD_SERVICE_KEY "
		+"  THEN IBMOE_ORDER_LINE.ORDER_LINE_ID"
		+"  ELSE "
		+"  (SELECT MAX (ol1.order_line_id)"
		+"  FROM "+tableSchemaName+"ibmoe_order_line ol1"
		+"  WHERE ol1.ib_order_line_id=IBMOE_ORDER_LINE.ib_ORDER_LINE_ID"
		+"  ) END "
		+"  AS SERVICEPRODUCTID,"
		+"  NULL AS CHANGE_SERVICE_PRODUCT_ID,"
		+"  CASE WHEN SERVICE_ORDER_TYPE=10 "
		+"  THEN 'New' ELSE 'Change' END "
		+"  AS ORDER_TYPE,	"
		+"  CASE WHEN SERVICE_ORDER_TYPE=10 "
		+"  THEN IBMOE_ORDER_LINE.SERVICE_LIST_ID"
		+"  WHEN IBMOE_ORDER_LINE.PARENT_SERVICE_KEY=IBMOE_ORDER_LINE.CHILD_SERVICE_KEY "
		+"  THEN NULL"
		+"  ELSE "
		+"  (SELECT MAX(SERVICE_NO) FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER = '"+orderNo+"' AND SERVICE_NO < SERVICE.SERVICE_NO)"
		+"  END"
		+"  AS SERVICEID,"
		+" CASE WHEN IBMOE_ORDER_LINE.CRM_PRODUCT_NAME='Additional Billing Info' THEN IBMOE_ORDER_LINE.PARENT_SERVICE_KEY"
		+" ELSE IBMOE_ORDER_LINE.M6_PRODUCT_ID END"
		+" AS SERVICEDETAILID,"
		+"  IBMOE_CIRCUIT_DETAIL.LOC_DATE AS LOCDATE,"
		+"  IBMOE_CIRCUIT_DETAIL.BILLING_TRIG_DATE AS BILLINGTRIGGERDATE,"
		+"  IBMOE_CIRCUIT_DETAIL.LOC_NUMBER AS LOCNO, "
		+"  CASE WHEN IBMOE_ORDER_LINE.PARENT_SERVICE_KEY=IBMOE_ORDER_LINE.CHILD_SERVICE_KEY "
		+"  THEN 0 "
		+"  WHEN IBMOE_ORDER_LINE.PARENT_SERVICE_KEY=42 and IBMOE_ORDER_LINE.PARENT_SERVICE_KEY<>IBMOE_ORDER_LINE.CHILD_SERVICE_KEY "
		+"  THEN (SELECT MIN (ol1.order_line_id)"
		+"  FROM "+tableSchemaName+"ibmoe_order_line ol1"
		+"  WHERE ol1.ib_order_line_id = "
		+"  ("
		+"  SELECT MIN(OLC.ib_order_line_id) FROM "+tableSchemaName+"ibmoe_order_line OLC"
		+"  WHERE  OLC.CRM_ORDER_ID IN ("
		+"  SELECT distinct IBMOE_ORDER_SERVICE_DETAILS.CRM_ORDER_ID "
		+"  FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS "
		+"  WHERE LOGICAL_SI_NUMBER='"+orderNo+"' and IBMOE_ORDER_SERVICE_DETAILS.CRM_ORDER_ID=IBMOE_ORDER_LINE.CRM_ORDER_ID"
		+"  ) "
		+"  ) "
		+"  )"
		+" 		"
		+"  ELSE"
		+"  ("
		+"  SELECT MAX (ol1.order_line_id)"
		+"  FROM "+tableSchemaName+"ibmoe_order_line ol1"
		+"  WHERE ol1.ib_order_line_id = "
		+"  (SELECT OLC.ib_order_line_id FROM "+tableSchemaName+"ibmoe_order_line OLC"
		+"  WHERE  OLC.CRM_ORDER_ID IN ("
		+"  SELECT distinct IBMOE_ORDER_SERVICE_DETAILS.CRM_ORDER_ID FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"' "
		+"  and IBMOE_ORDER_SERVICE_DETAILS.CRM_ORDER_ID=IBMOE_ORDER_LINE.CRM_ORDER_ID"
		+"  ) AND OLC.CHILD_SERVICE_KEY=(SELECT PARENT_SERVICE_KEY FROM "+tableSchemaName+"IBMOE_ORDER_LINE  ol WHERE  ol.ORDER_LINE_ID=IBMOE_ORDER_LINE.order_line_id)"
		+"  )"
		+"  )"
		+"  END AS PARENT_SERVICEPRODUCTID,"
		+"  IBMOE_ORDER_LINE.PARENT_SPEC_ID,"
		+"  IBMOE_ORDER_LINE.CHILD_SPEC_ID,"
		+"  (SELECT MAX(ol1.order_line_id)"
		+"  FROM "+tableSchemaName+"ibmoe_order_line ol1"
		+"  WHERE ol1.ib_order_line_id =IBMOE_ORDER_LINE.ib_order_line_id            "
		+"  AND ol1.PARENT_SERVICE_KEY=ol1.CHILD_SERVICE_KEY "
		+"  AND ol1.order_line_id<IBMOE_ORDER_LINE.order_line_id"
		+"  )         "
		+"  AS OLD_SERVICEPRODUCTID,"
		+"  CASE WHEN IBMOE_ORDER_LINE.NETWORK_STAT=1053 "
		+"  THEN 1"
		+"  ELSE 0 END"
		+"  AS IS_DISCONNECTION,      "
		+"  CASE WHEN IBMOE_ORDER_LINE.NETWORK_STAT=1053 "
		+"  THEN 1"
		+"  ELSE 0 END"
		+"  AS DISCONNECTION_IN_CURRENT_ORDER,"
		+"  null AS MODIFIED_AT,"
		+"  CASE WHEN IBMOE_ORDER_LINE.NETWORK_STAT=10002 "
		+"  THEN 1"
		+"  ELSE 0 END"
		+"  AS IS_SUSPENDED,"
		+"  CASE WHEN IBMOE_ORDER_LINE.NETWORK_STAT=10002 "
		+"  THEN 1"
		+"  ELSE 0 END"
		+"  AS RESUME_IN_CURRENT_ORDER,"
		+" CASE WHEN IBMOE_ORDER_LINE.LINE_STATUS = 'NEW' THEN null"
		+" ELSE (SELECT ORDERTYPE FROM "+tableSchemaName+"IBMOE_ORDER_HEADER WHERE CRM_ORDER_ID=IBMOE_ORDER_LINE.CRM_ORDER_ID)"
		+" END AS CHANGETYPEID,"
        +" CASE WHEN IBMOE_ORDER_LINE.LINE_STATUS='NEW'" 
   		+" THEN NULL ELSE"
        +" IBMOE_ORDER_LINE.CRM_ORDER_ID"
   		+" END AS CHANGE_ORDERNO,"
		+"  CASE WHEN IBMOE_CIRCUIT_DETAIL.BILLING_TRIG_FLAG='Y' "
		+"  THEN 20 ELSE 0 END AS BILLING_TRIGGER_STATUS,"
		+"  IBMOE_BILLING_ACCOUNTS.CHILD_ACCOUNT_NUMBER AS FX_ACCOUNT_EXTERNAL_ID,"
		+"  IBMOE_ORDER_LINE.M6CHILDSERKEY,"
		+"  IBMOE_ORDER_LINE.M6PARENTSERKEY,"
		+"  CASE WHEN IBMOE_ORDER_LINE.LINE_STATUS = 'NEW' THEN null"
		+"  ELSE SERVICE_ORDER_TYPE    "
		+" 		"
		+"  END"
		+"  AS SUBCHANGETYPEID,"
		+"  IBMOE_ORDER_LINE.SERVICE_LIST_ID,"
		+"  CASE WHEN IBMOE_ORDER_LINE.CRM_ORDER_ID=(SELECT MAX(IBSD.CRM_ORDER_ID) FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS  IBSD WHERE IBSD.LOGICAL_SI_NUMBER='"+orderNo+"' )"
		+"  THEN 0 "
		+"  ELSE    1 END"
		+"  AS IS_IN_HISTORY,     "
		+"  IBMOE_CIRCUIT_DETAIL.CREATION_DATE AS CREATED_DATE, "
		+"  IBMOE_ORDER_LINE.LAST_UPDATE_DATE AS MODIFIED_DATE,"
		+"  IBMOE_CIRCUIT_DETAIL.CIRCUIT_ID AS CKTID, "
		+"  IBMOE_ORDER_LINE.PRI_LOC_ID AS PRILOC,"
		+"  IBMOE_CIRCUIT_DETAIL.HUBLOCATION AS HUBLOC,"
		+"  IBMOE_CIRCUIT_DETAIL.UOM AS UOM,"
		+"  IBMOE_CIRCUIT_DETAIL.PM_PROV_DATE,"
		+"  IBMOE_CIRCUIT_DETAIL.CREATION_DATE AS CREATEDDATE,"
		+"  IBMOE_CIRCUIT_DETAIL.CREATED_BY AS CREATEDBY,"
		+"  IBMOE_CIRCUIT_DETAIL.LAST_UPDATE_DATE AS MODIFIEDDATE,"
		+"  IBMOE_CIRCUIT_DETAIL.LAST_UPDATED_BY AS MODIFIEDBY,"
		+"  IBMOE_CIRCUIT_DETAIL.CHALLEN_NO,"
		+"  IBMOE_CIRCUIT_DETAIL.CHALLEN_DATE,"
		+"  CASE WHEN SERVICE_ORDER_TYPE=10"
		+"  THEN null ELSE IBMOE_ORDER_LINE.SERVICE_LIST_ID END "
		+"  AS CHANGE_SERVICEID,"
		+"  CASE WHEN IBMOE_ORDER_LINE.PARENT_SERVICE_KEY=IBMOE_ORDER_LINE.CHILD_SERVICE_KEY "
		+"  THEN 0 "
		+"  WHEN IBMOE_ORDER_LINE.PARENT_SERVICE_KEY=42 and IBMOE_ORDER_LINE.PARENT_SERVICE_KEY<>IBMOE_ORDER_LINE.CHILD_SERVICE_KEY"
		+"  THEN (SELECT MAX (ol1.order_line_id)"
		+"  FROM "+tableSchemaName+"ibmoe_order_line ol1"
		+"  WHERE ol1.ib_order_line_id = "
		+"  ("
		+"  SELECT MIN(OLC.ib_order_line_id) FROM "+tableSchemaName+"ibmoe_order_line OLC"
		+"  	WHERE  OLC.CRM_ORDER_ID IN ("
		+" SELECT distinct IBMOE_ORDER_SERVICE_DETAILS.CRM_ORDER_ID "
		+" 	FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS "
		+" 		WHERE LOGICAL_SI_NUMBER='"+orderNo+"' and IBMOE_ORDER_SERVICE_DETAILS.CRM_ORDER_ID=IBMOE_ORDER_LINE.CRM_ORDER_ID"
		+" ) "
		+"  ) "
		+"  )"
		+"  	 "
		+"  ELSE"
		+"  ("
		+"  SELECT MAX (ol1.order_line_id)"
		+"  FROM "+tableSchemaName+"ibmoe_order_line ol1"
		+"  WHERE ol1.ib_order_line_id = "
		+"  (SELECT OLC.ib_order_line_id FROM "+tableSchemaName+"ibmoe_order_line OLC"
		+"   WHERE  OLC.CRM_ORDER_ID IN ("
		+"  		SELECT distinct IBMOE_ORDER_SERVICE_DETAILS.CRM_ORDER_ID FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"' "
		+" 	and IBMOE_ORDER_SERVICE_DETAILS.CRM_ORDER_ID=IBMOE_ORDER_LINE.CRM_ORDER_ID"
		+"  		) AND OLC.CHILD_SERVICE_KEY=(SELECT PARENT_SERVICE_KEY FROM "+tableSchemaName+"IBMOE_ORDER_LINE  ol WHERE  ol.ORDER_LINE_ID=IBMOE_ORDER_LINE.order_line_id)"
		+"  )"
		+"  )END "
		+"  AS CHANGE_PARENT_SPID,		"
		+"  CASE WHEN IBMOE_ORDER_LINE.CRM_PRODUCT_NAME='Additional Billing Info' THEN 1 ELSE 0 END AS ADDITIONALNODE,"
		+"  IBMOE_CIRCUIT_DETAIL.CIRCUIT_ID AS FX_SI_ID,"
		+"  CASE WHEN IBMOE_CIRCUIT_DETAIL.BILLING_TRIG_FLAG='Y' "
		+"  THEN 'Y' ELSE 'null' END AS FOR_BILLINGTRIGGER,"
		+"  IBMOE_CIRCUIT_DETAIL.BILL_TRG_CREATE_DATE AS BILLING_TRIGGER_CREATEDATE,"
		+"  IBMOE_ORDER_LINE.M6_PRODUCT_ID,"
		+"  IBMOE_ORDER_LINE.NETWORK_STAT,"
		+"  IBMOE_ORDER_LINE.LINE_STATUS AS LINE_STATUS,      "
		+"  IBMOE_ORDER_LINE.PARENT_SERVICE_KEY,"
		+"  IBMOE_ORDER_LINE.CHILD_SERVICE_KEY,"
		+" 		"
		+"  CASE WHEN LINE_STATUS='NEW' THEN 'NEW' ELSE 'UNCHANGED' END AS M6_ATT_FX_CHANGED,"
		+"  IBMOE_CIRCUIT_DETAIL.BILLING_TRIG_DATE AS SERVICEACTIVEDT,"
		+"  IBMOE_ORDER_LINE.CRM_ORDER_ID,IBMOE_CIRCUIT_DETAIL.LOC_REC_DATE"
		+"  FROM "+tableSchemaName+"IBMOE_ORDER_LINE IBMOE_ORDER_LINE LEFT JOIN "+tableSchemaName+"IBMOE_CIRCUIT_DETAIL IBMOE_CIRCUIT_DETAIL"
		+"  ON IBMOE_ORDER_LINE.ORDER_LINE_ID = IBMOE_CIRCUIT_DETAIL.ORDER_LINE_ID"
		+"  LEFT JOIN "+tableSchemaName+"IBMOE_BILLING_ACCOUNTS IBMOE_BILLING_ACCOUNTS ON IBMOE_BILLING_ACCOUNTS.CHILD_ID=IBMOE_ORDER_LINE.CHILD_ID "
		+"  INNER JOIN "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS SERVICE ON SERVICE.SERVICE_NO= IBMOE_ORDER_LINE.SERVICE_NO "
		+"  WHERE IBMOE_ORDER_LINE.CRM_ORDER_ID "
		+"  IN(SELECT CRM_ORDER_ID FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"'"
		+"  AND CRM_ORDER_ID NOT IN(SELECT MAX(CRM_ORDER_ID) FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"')))";
	
	private static String strGetOrderLineFromCRM4="SELECT "
		+" IBMOE_ORDER_LINE.CRM_ORDER_ID AS ORDERNO,"
		+" CASE WHEN SERVICE_ORDER_TYPE=10 "
		+" THEN IBMOE_ORDER_LINE.SERVICE_LIST_ID"
		+" WHEN IBMOE_ORDER_LINE.PARENT_SERVICE_KEY=IBMOE_ORDER_LINE.CHILD_SERVICE_KEY "
		+" THEN NULL"
		+" ELSE "
		+" (SELECT MAX(SERVICE_NO) FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER = '"+orderNo+"' AND SERVICE_NO < SERVICE.SERVICE_NO)"
		+" END"
		+" AS SERVICEID,"
		+" CASE WHEN SERVICE_ORDER_TYPE=10"
		+" THEN null ELSE IBMOE_ORDER_LINE.SERVICE_LIST_ID END "
		+" AS CHANGE_SERVICEID,"
		+" IBMOE_ORDER_LINE.ORDER_LINE_ID,"
		+" CASE WHEN IBMOE_ORDER_LINE.PARENT_SERVICE_KEY=IBMOE_ORDER_LINE.CHILD_SERVICE_KEY "
		+" THEN IBMOE_ORDER_LINE.ORDER_LINE_ID            "
		+" ELSE "
		+" (SELECT MAX (ol1.order_line_id)"
		+" FROM "+tableSchemaName+"ibmoe_order_line ol1"
		+" WHERE ol1.ib_order_line_id=IBMOE_ORDER_LINE.ib_ORDER_LINE_ID"
		+" ) END "
		+" AS SERVICEPRODUCTID,"
		+" NULL AS CHANGE_SERVICE_PRODUCT_ID,"
		+" CASE WHEN SERVICE_ORDER_TYPE=10 "
		+" THEN 'New' ELSE 'Change' END "
		+" AS ORDER_TYPE,"
		+" CASE WHEN IBMOE_ORDER_LINE.PARENT_SERVICE_KEY=IBMOE_ORDER_LINE.CHILD_SERVICE_KEY "
		+" THEN 0 "
		+" WHEN IBMOE_ORDER_LINE.PARENT_SERVICE_KEY=42 AND IBMOE_ORDER_LINE.PARENT_SERVICE_KEY<>IBMOE_ORDER_LINE.CHILD_SERVICE_KEY"
		+" THEN ("
		+" SELECT OLC1.ORDER_LINE_ID FROM "+tableSchemaName+"IBMOE_ORDER_LINE OLC1 WHERE OLC1.CRM_ORDER_ID=IBMOE_ORDER_LINE.CRM_ORDER_ID "
		+" AND OLC1.PARENT_SERVICE_KEY=OLC1.CHILD_SERVICE_KEY"
		+" )"

		+" ELSE"
		+" ("
		+" SELECT MAX (OL1.ORDER_LINE_ID)"
		+" FROM "+tableSchemaName+"IBMOE_ORDER_LINE OL1"
		+" WHERE OL1.IB_ORDER_LINE_ID = "
		+" (SELECT OLC.IB_ORDER_LINE_ID FROM "+tableSchemaName+"IBMOE_ORDER_LINE OLC"
		+" WHERE  OLC.CRM_ORDER_ID IN ("
		+" SELECT DISTINCT IBMOE_ORDER_SERVICE_DETAILS.CRM_ORDER_ID FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"' "
		+" AND IBMOE_ORDER_SERVICE_DETAILS.CRM_ORDER_ID=IBMOE_ORDER_LINE.CRM_ORDER_ID"
		+" ) AND OLC.CHILD_SERVICE_KEY=(SELECT PARENT_SERVICE_KEY FROM "+tableSchemaName+"IBMOE_ORDER_LINE  OL WHERE  OL.ORDER_LINE_ID=IBMOE_ORDER_LINE.ORDER_LINE_ID)"
		+" )"
		+" )END "
		+" AS PARENT_SPID,"
		+" CASE WHEN IBMOE_ORDER_LINE.NETWORK_STAT=1053 "
		+" THEN 1"
		+" ELSE 0 END"
		+" AS IS_DISCONNECTION,"
		+" CASE WHEN IBMOE_ORDER_LINE.NETWORK_STAT=1053 "
		+" THEN 1"
		+" ELSE 0 END"
		+" AS DISCONNECTION_IN_CURRENT_ORDER,"
		+" null AS MODIFIED_AT,"
		+" CASE WHEN IBMOE_ORDER_LINE.NETWORK_STAT=10002 "
		+" THEN 1"
		+" ELSE 0 END"
		+" AS IS_SUSPENDED,"
		+" CASE WHEN IBMOE_ORDER_LINE.NETWORK_STAT=10002 "
		+" THEN 1"
		+" ELSE 0 END"
		+" AS RESUME_IN_CURRENT_ORDER,"
		+" CASE WHEN IBMOE_ORDER_LINE.LINE_STATUS = 'NEW' THEN null"
		+" ELSE (SELECT ORDER_SUBTYPE FROM "+tableSchemaName+"IBMOE_ORDER_HEADER WHERE CRM_ORDER_ID=IBMOE_ORDER_LINE.CRM_ORDER_ID)"
		+" END AS CHANGETYPEID,"
		+" CASE WHEN IBMOE_ORDER_LINE.LINE_STATUS = 'NEW' THEN null"
		+" ELSE SERVICE_ORDER_TYPE    "		
		+" END"
		+" AS SUBCHANGETYPEID,"		
		+" SERVICE.SERVICE_NO AS MAIN_SERVICE_ID,"		
		+" CASE WHEN IBMOE_ORDER_LINE.CRM_ORDER_ID=(SELECT MAX(IBSD.CRM_ORDER_ID) FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS  IBSD WHERE IBSD.LOGICAL_SI_NUMBER='"+orderNo+"' )"
		+" THEN 0 "
		+" ELSE    1 END"
		+" AS IS_IN_HISTORY"		
		+" FROM "+tableSchemaName+"IBMOE_ORDER_LINE IBMOE_ORDER_LINE LEFT JOIN "+tableSchemaName+"IBMOE_CIRCUIT_DETAIL IBMOE_CIRCUIT_DETAIL"
		+" ON IBMOE_ORDER_LINE.ORDER_LINE_ID = IBMOE_CIRCUIT_DETAIL.ORDER_LINE_ID"
		+" LEFT JOIN "+tableSchemaName+"IBMOE_BILLING_ACCOUNTS IBMOE_BILLING_ACCOUNTS ON IBMOE_BILLING_ACCOUNTS.CHILD_ID=IBMOE_ORDER_LINE.CHILD_ID "
		+" INNER JOIN "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS SERVICE ON SERVICE.SERVICE_NO= IBMOE_ORDER_LINE.SERVICE_NO "
		+" WHERE SERVICE.LOGICAL_SI_NUMBER='"+orderNo+"'"
		+" ORDER BY ORDER_LINE_ID";
	
	private static String spInsertLineAttributesToIOMS2="{CALL IOE.ECRM_INSERT_INTO_TPRODUCTLINEATTVALUE_2(?,?,?,?,?,?,?,?,?,?,?)}";
	private static String strGetLineAttributesFromCRM2="SELECT IBMOE_CONFIG_PARAM.PRODUCT_ATTRIBUTE_ID,NULLIF(IBMOE_CONFIG_PARAM.M6_LABEL_VALUE,'0') AS M6_LABEL_VALUE,"
		+" CASE WHEN IBMOE_ORDER_LINE.PARENT_SERVICE_KEY=IBMOE_ORDER_LINE.CHILD_SERVICE_KEY "
		+" THEN IBMOE_ORDER_LINE.ORDER_LINE_ID             "
		+" ELSE (SELECT MAX (OL1.ORDER_LINE_ID)"
		+" FROM "+tableSchemaName+"IBMOE_ORDER_LINE OL1"
		+" WHERE OL1.IB_ORDER_LINE_ID =IBMOE_ORDER_LINE.IB_ORDER_LINE_ID) "
		+" END "
		+" AS ORDER_LINE_NO,"
		+" IBMOE_CONFIG_PARAM.CREATION_DATE,VALIDATE_LOV,IBMOE_CONFIG_PARAM.CREATED_BY,IBMOE_CONFIG_PARAM.LAST_UPDATE_DATE,"
		+" IBMOE_CONFIG_PARAM.LAST_UPDATED_BY,IBMOE_CONFIG_PARAM.CRM_ORDER_ID AS ORDERNO ,"
		+" CASE WHEN IBMOE_CONFIG_PARAM.ATTRIBUTE_STATUS='NEW' THEN 'N'"
		+" ELSE 'C' END"
		+" AS ORDERTYPE"
		+" FROM  "+tableSchemaName+"IBMOE_CONFIG_PARAM IBMOE_CONFIG_PARAM"
		+" JOIN "+tableSchemaName+"IBMOE_ORDER_LINE IBMOE_ORDER_LINE ON IBMOE_ORDER_LINE.ORDER_LINE_ID=IBMOE_CONFIG_PARAM.ORDER_LINE_ID"
		+" WHERE IBMOE_ORDER_LINE.CHILD_SERVICE_KEY NOT IN (1,33,42,88,133,138,142,149,1230) AND HIDDEN_FLAG='N' AND IBMOE_ORDER_LINE.CRM_ORDER_ID "
		+" IN(SELECT MAX(CRM_ORDER_ID) FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"')";
		
/*	private static String strGetLineAttributesFromCRM2="SELECT IBMOE_CONFIG_PARAM.PRODUCT_ATTRIBUTE_ID,NULLIF(IBMOE_CONFIG_PARAM.M6_LABEL_VALUE,'0') AS M6_LABEL_VALUE,"
		+" (SELECT MAX (OL1.ORDER_LINE_ID)"
		+" FROM IBMOE_ORDER_LINE OL1"
		+" WHERE OL1.IB_ORDER_LINE_ID =IBMOE_ORDER_LINE.IB_ORDER_LINE_ID) AS ORDER_LINE_NO,"                                                    
		+" IBMOE_CONFIG_PARAM.CREATION_DATE,VALIDATE_LOV,IBMOE_CONFIG_PARAM.CREATED_BY,IBMOE_CONFIG_PARAM.LAST_UPDATE_DATE,"
		+" IBMOE_CONFIG_PARAM.LAST_UPDATED_BY FROM  APPS.IBMOE_IB_CONFIG_PARAM IBMOE_CONFIG_PARAM"
		+" JOIN XXIBM.IBMOE_ORDER_LINE IBMOE_ORDER_LINE ON IBMOE_ORDER_LINE.IB_ORDER_LINE_ID=IBMOE_CONFIG_PARAM.IB_ORDER_LINE_ID"
		+" WHERE IBMOE_ORDER_LINE.CHILD_SERVICE_KEY NOT IN (1,33,42,59,88,133,138,142,149,1230) AND HIDDEN_FLAG='N' AND IBMOE_ORDER_LINE.CRM_ORDER_ID" 
		+" IN (SELECT MAX(CRM_ORDER_ID) FROM IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"')";
*/
	private static String spInsertLineAttributesToIOMS3="{CALL IOE.ECRM_INSERT_INTO_TPRODUCTLINEATTVALUE_HISTORY(?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	private static String strGetLineAttributesFromCRM3="SELECT * FROM("
		+" SELECT "
		+" IBMOE_CONFIG_PARAM.PRODUCT_ATTRIBUTE_ID,"
		+" NULLIF(IBMOE_CONFIG_PARAM.M6_LABEL_VALUE,'0') AS ATTVALUE,"
		+" NULLIF(IBMOE_CONFIG_PARAM.M6_LABEL_VALUE,'0') AS ATTVALUE_NEW,"
		+" CASE WHEN IBMOE_ORDER_LINE.PARENT_SERVICE_KEY=IBMOE_ORDER_LINE.CHILD_SERVICE_KEY "
		+" THEN IBMOE_ORDER_LINE.ORDER_LINE_ID "
		+" ELSE (SELECT MAX (OL1.ORDER_LINE_ID)"
		+" FROM "+tableSchemaName+"IBMOE_ORDER_LINE OL1"
		+" WHERE OL1.IB_ORDER_LINE_ID =IBMOE_ORDER_LINE.IB_ORDER_LINE_ID) "
		+" END "
		+" AS ORDER_LINE_NO,"
		+" IBMOE_CONFIG_PARAM.CRM_ORDER_ID AS ORDERNO ,"
		+" CASE WHEN IBMOE_CONFIG_PARAM.ATTRIBUTE_STATUS='NEW' THEN 'N'"
		+" ELSE 'C' END"
		+" AS ORDERTYPE,"
		+" IBMOE_ORDER_LINE.service_list_id,"
		+" IBMOE_CONFIG_PARAM.ATTRIBUTE_STATUS,"
		+" IBMOE_CONFIG_PARAM.CREATION_DATE,"
		+" VALIDATE_LOV,"
		+" IBMOE_CONFIG_PARAM.CREATED_BY,"
		+" IBMOE_CONFIG_PARAM.LAST_UPDATE_DATE,"
		+" IBMOE_CONFIG_PARAM.LAST_UPDATED_BY "
		+" FROM  "+tableSchemaName+"IBMOE_CONFIG_PARAM IBMOE_CONFIG_PARAM"
		+" JOIN "+tableSchemaName+"IBMOE_ORDER_LINE IBMOE_ORDER_LINE ON IBMOE_ORDER_LINE.ORDER_LINE_ID=IBMOE_CONFIG_PARAM.ORDER_LINE_ID"
		+" WHERE IBMOE_ORDER_LINE.CHILD_SERVICE_KEY NOT IN (1,33,42,88,133,138,142,149,1230) AND HIDDEN_FLAG='N' "
		+" AND IBMOE_ORDER_LINE.CRM_ORDER_ID "
		+" IN(SELECT MIN(CRM_ORDER_ID) FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"')"
		
		+" UNION"
		
		+" SELECT "
		+" IBMOE_CONFIG_PARAM.PRODUCT_ATTRIBUTE_ID,"
		+" (SELECT ICP2.M6_LABEL_VALUE FROM "+tableSchemaName+"IBMOE_CONFIG_PARAM ICP2 WHERE ICP2.order_line_id IN("
		+" (SELECT MAX (ol1.order_line_id)"
		+" FROM "+tableSchemaName+"ibmoe_order_line ol1"
		+" WHERE ol1.ib_order_line_id =IBMOE_ORDER_LINE.ib_order_line_id  AND  ol1.order_line_id  < IBMOE_ORDER_LINE.order_line_id)"                       
		+" )AND ICP2.PRODUCT_ATTRIBUTE_ID=IBMOE_CONFIG_PARAM.PRODUCT_ATTRIBUTE_ID)"
		+" AS ATTVALUE,"
		+" NULLIF(IBMOE_CONFIG_PARAM.M6_LABEL_VALUE,'0') AS ATTVALUE_NEW,"
		+" CASE WHEN IBMOE_ORDER_LINE.PARENT_SERVICE_KEY=IBMOE_ORDER_LINE.CHILD_SERVICE_KEY "
		+" THEN IBMOE_ORDER_LINE.ORDER_LINE_ID             "
		+" ELSE (SELECT MAX (OL1.ORDER_LINE_ID)"
		+" FROM "+tableSchemaName+"IBMOE_ORDER_LINE OL1"
		+" WHERE OL1.IB_ORDER_LINE_ID =IBMOE_ORDER_LINE.IB_ORDER_LINE_ID) "
		+" END "
		+" AS ORDER_LINE_NO,"
		+" IBMOE_CONFIG_PARAM.CRM_ORDER_ID AS ORDERNO, "
		+" CASE WHEN IBMOE_CONFIG_PARAM.ATTRIBUTE_STATUS='NEW' THEN 'N'"
		+" ELSE 'C' END"
		+" AS ORDERTYPE, "
		+" IBMOE_ORDER_LINE.service_list_id,"
		+" IBMOE_CONFIG_PARAM.ATTRIBUTE_STATUS,"
		+" IBMOE_CONFIG_PARAM.CREATION_DATE,"
		+" VALIDATE_LOV,"
		+" IBMOE_CONFIG_PARAM.CREATED_BY,"
		+" IBMOE_CONFIG_PARAM.LAST_UPDATE_DATE,"
		+" IBMOE_CONFIG_PARAM.LAST_UPDATED_BY"
		
		+" FROM  "+tableSchemaName+"IBMOE_CONFIG_PARAM IBMOE_CONFIG_PARAM"
		+" JOIN "+tableSchemaName+"IBMOE_ORDER_LINE IBMOE_ORDER_LINE ON IBMOE_ORDER_LINE.ORDER_LINE_ID=IBMOE_CONFIG_PARAM.ORDER_LINE_ID"
		+" WHERE IBMOE_ORDER_LINE.CHILD_SERVICE_KEY NOT IN (1,33,42,88,133,138,142,149,1230) AND HIDDEN_FLAG='N' "
		+" AND IBMOE_CONFIG_PARAM.ORDER_LINE_ID IN"
		+" (SELECT ICP.ORDER_LINE_ID FROM "+tableSchemaName+"IBMOE_CONFIG_PARAM  ICP  WHERE ICP.ATTRIBUTE_STATUS='CHANGED' and  "
		+" ICP.ORDER_LINE_ID IN("
		+" SELECT IOL.ORDER_LINE_ID FROM "+tableSchemaName+"IBMOE_ORDER_LINE IOL WHERE IOL.CRM_ORDER_ID IN("
		+" 	(SELECT IOSD.CRM_ORDER_ID FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS IOSD WHERE IOSD.LOGICAL_SI_NUMBER='"+orderNo+"')"
		+"  )"
		+" )"
		+" )"
		+" )TAB order by TAB.ORDERNO,TAB.ORDER_LINE_NO";

	
	/*private static String strGetLineAttributesFromCRM3="SELECT IBMOE_CONFIG_PARAM.PRODUCT_ATTRIBUTE_ID,NULLIF(IBMOE_CONFIG_PARAM.M6_LABEL_VALUE,'0') AS M6_LABEL_VALUE,"
	+" (SELECT MAX (OL1.ORDER_LINE_ID)"
	+" FROM IBMOE_ORDER_LINE OL1"
	+" WHERE OL1.IB_ORDER_LINE_ID =IBMOE_ORDER_LINE.IB_ORDER_LINE_ID) AS ORDER_LINE_NO,"  
	+" IBMOE_CONFIG_PARAM.CREATION_DATE,VALIDATE_LOV,IBMOE_CONFIG_PARAM.CREATED_BY,IBMOE_CONFIG_PARAM.LAST_UPDATE_DATE,"
	+" IBMOE_CONFIG_PARAM.LAST_UPDATED_BY,IBMOE_CONFIG_PARAM.CRM_ORDER_ID AS ORDERNO FROM  APPS.IBMOE_CONFIG_PARAM IBMOE_CONFIG_PARAM"
	+" JOIN XXIBM.IBMOE_ORDER_LINE IBMOE_ORDER_LINE ON IBMOE_ORDER_LINE.ORDER_LINE_ID=IBMOE_CONFIG_PARAM.ORDER_LINE_ID"
	+" WHERE IBMOE_ORDER_LINE.CHILD_SERVICE_KEY NOT IN (1,33,42,59,88,133,138,142,149,1230) AND HIDDEN_FLAG='N' AND IBMOE_ORDER_LINE.CRM_ORDER_ID" 
	+" IN(SELECT CRM_ORDER_ID FROM IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"'"
	+" AND CRM_ORDER_ID NOT IN(SELECT MAX(CRM_ORDER_ID) FROM IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"'))";*/ 





	private static String spInsertOrderLineToIOMS="{CALL IOE.ECRM_INSERT_INTO_TPOSERVICEDETAILS_L(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	
	private static String strGetLineAttributesFromCRM="select IBMOE_CONFIG_PARAM.PRODUCT_ATTRIBUTE_ID,NULLIF(IBMOE_CONFIG_PARAM.M6_LABEL_VALUE,'0') as M6_LABEL_VALUE,IBMOE_CONFIG_PARAM.ORDER_LINE_NO,"
													  +" IBMOE_CONFIG_PARAM.CREATION_DATE,VALIDATE_LOV,IBMOE_CONFIG_PARAM.CREATED_BY,IBMOE_CONFIG_PARAM.LAST_UPDATE_DATE,"
													  +" IBMOE_CONFIG_PARAM.LAST_UPDATED_BY from  APPS.IBMOE_CONFIG_PARAM IBMOE_CONFIG_PARAM"
													  +" JOIN xxibm.IBMOE_ORDER_LINE IBMOE_ORDER_LINE on IBMOE_ORDER_LINE.ORDER_LINE_ID=IBMOE_CONFIG_PARAM.ORDER_LINE_ID"
													  +" where IBMOE_ORDER_LINE.CHILD_SERVICE_KEY not in (1,33,42,59,88,133,138,142,149,1230) and HIDDEN_FLAG='N' and IBMOE_ORDER_LINE.CRM_ORDER_ID in ("+orderNo+")";
	
	private static String spInsertLineAttributesToIOMS="{CALL IOE.ECRM_INSERT_INTO_TPRODUCTLINEATTVALUE(?,?,?,?,?,?,?,?,?,?,?)}";
	// changed for CUST_ACCOUNT_ID from ACCOUNT_NUMBER
	private static String strGetChargesHeaderFromCRM="select CHARGE_HDR_ID,PO_ID,CUST_ACCOUNT_ID,CREDIT_PERIOD,LEGAL_ENTITY_CODE,CASE WHEN BILLING_MODE = 'MANUAL' THEN 2 WHEN BILLING_MODE = 'AUTO' THEN 1 END BILLING_MODE,"
													+" BILL_FORMAT, LICENCE_COMPANY,TAXATION,CASE WHEN BILLING_LEVEL = 'PO No' THEN 2 WHEN BILLING_LEVEL = 'Account No' THEN 1 End BILLING_LEVEL,COMMITMENT_PERIOD,PENELTY_CLAUSE,ORDER_LINE_ID,"
													+" BILL_TYPE, BILLING_ADDRESS_ID, BILLING_LEVEL_NUMBER, CREATION_DATE, CREATED_BY, LAST_UPDATE_DATE,"
													+" LAST_UPDATED_BY, NOTICE_PERIOD from XXIBM.IBMOE_CHARGES_HDR where CRM_ORDER_ID="+orderNo;
	
	private static String spInsertChargesHeaderToIOMS="{CALL IOE.ECRM_INSERT_INTO_TBILLING_INFO(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	
	private static String strGetLocationHeaderFromCRM="select IBMOE_ORDER_LINE.PRI_LOC_TYP,IBMOE_ORDER_LINE.PRI_LOC_ID, IBMOE_ORDER_LINE.SEC_LOC_TYP, IBMOE_ORDER_LINE.SEC_LOC_ID,"
													+" IBMOE_ORDER_HEADER.ACCOUNT_NO,IBMOE_ORDER_LINE.ORDER_LINE_ID, IBMOE_ORDER_LINE.CREATION_DATE, IBMOE_ORDER_LINE.CREATED_BY,"
													+" IBMOE_ORDER_LINE.LAST_UPDATE_DATE, IBMOE_ORDER_LINE.LAST_UPDATED_BY  "
													+" from XXIBM.IBMOE_ORDER_LINE IBMOE_ORDER_LINE JOIN IBMOE_ORDER_HEADER IBMOE_ORDER_HEADER"
													+" on IBMOE_ORDER_HEADER.CRM_ORDER_ID=IBMOE_ORDER_LINE.CRM_ORDER_ID where "
													+" IBMOE_ORDER_LINE.PRI_LOC_TYP is not null and IBMOE_ORDER_LINE.SEC_LOC_TYP is not null AND IBMOE_ORDER_LINE.CRM_ORDER_ID="+orderNo;
	private static String spInsertChargesHeaderToIOMS2="{CALL IOE.ECRM_INSERT_INTO_TBILLING_INFO_2(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	
	private static String strGetChargesHeaderFromCRM2="SELECT IBMOE_CHARGES_HDR.CRM_ORDER_ID,CHARGE_HDR_ID,PO_ID,IBMOE_CHARGES_HDR.CUST_ACCOUNT_ID,CREDIT_PERIOD,LEGAL_ENTITY_CODE,CASE WHEN BILLING_MODE = 'MANUAL' THEN 2 "
		+"  WHEN BILLING_MODE = 'AUTO' THEN 1 END BILLING_MODE,"
		+"  BILL_FORMAT, LICENCE_COMPANY,TAXATION,CASE WHEN UPPER(BILLING_LEVEL) = 'PO NO' THEN 2 "
		+"  WHEN UPPER(BILLING_LEVEL) = 'ACCOUNT NO' "
		+"  THEN 1 END BILLING_LEVEL,COMMITMENT_PERIOD,PENELTY_CLAUSE,"
		+"  (SELECT MAX (OL1.ORDER_LINE_ID)"
		+"  FROM "+tableSchemaName+"IBMOE_ORDER_LINE OL1"
		+"  WHERE OL1.IB_ORDER_LINE_ID =IBMOE_ORDER_LINE.IB_ORDER_LINE_ID) AS ORDER_LINE_ID,                                                    "
		+"  BILL_TYPE, BILLING_ADDRESS_ID, BILLING_LEVEL_NUMBER, IBMOE_CHARGES_HDR.CREATION_DATE, IBMOE_CHARGES_HDR.CREATED_BY, IBMOE_CHARGES_HDR.LAST_UPDATE_DATE,"
		+"  IBMOE_CHARGES_HDR.LAST_UPDATED_BY, NOTICE_PERIOD,"
		+"  CASE WHEN SERVICE_STAGE='NEW' THEN 0 ELSE 1 END STDREASION_ID ,LOGICAL_SI_NUMBER ,"
		+"  CASE WHEN IBMOE_CHARGES_HDR.PO_ID IS NULL THEN "
		+"    (SELECT ICH1.PO_ID FROM "+tableSchemaName+"IBMOE_CHARGES_HDR ICH1 WHERE ICH1.ORDER_LINE_ID IN( "
		+"        (SELECT MAX (OL2.ORDER_LINE_ID) "
		+"            FROM "+tableSchemaName+"IBMOE_ORDER_LINE OL2 INNER JOIN "+tableSchemaName+"IBMOE_CHARGES_HDR ICH ON ICH.ORDER_LINE_ID=OL2.ORDER_LINE_ID and ICH.PO_ID IS NOT NULL "
		+"                WHERE OL2.IB_ORDER_LINE_ID =IBMOE_ORDER_LINE.IB_ORDER_LINE_ID))) "
		+"	ELSE "
		+"    IBMOE_CHARGES_HDR.PO_ID END "
		+"    AS LATEST_SELECTED_PODETAILID "
		+"  FROM "+tableSchemaName+"IBMOE_CHARGES_HDR IBMOE_CHARGES_HDR"
		+"  INNER JOIN "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS SERVICE ON SERVICE.CRM_ORDER_ID= IBMOE_CHARGES_HDR.CRM_ORDER_ID  "
		+"  INNER JOIN "+tableSchemaName+"IBMOE_ORDER_LINE IBMOE_ORDER_LINE ON IBMOE_ORDER_LINE.ORDER_LINE_ID=IBMOE_CHARGES_HDR.ORDER_LINE_ID "
		+"  WHERE IBMOE_CHARGES_HDR.CRM_ORDER_ID"
		+"  IN(SELECT MAX(CRM_ORDER_ID) FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"')";


	/*private static String strGetChargesHeaderFromCRM2="	SELECT IBMOE_IB_CHARGES_HDR.LAST_CRM_ORDER_ID,IBMOE_CHARGES_HDR.CHARGE_HDR_ID,IBMOE_CHARGES_HDR.PO_ID,IBMOE_CHARGES_HDR.CUST_ACCOUNT_ID,IBMOE_CHARGES_HDR.CREDIT_PERIOD,IBMOE_CHARGES_HDR.LEGAL_ENTITY_CODE,CASE WHEN IBMOE_CHARGES_HDR.BILLING_MODE = 'MANUAL' THEN 2" 
		+" WHEN IBMOE_CHARGES_HDR.BILLING_MODE = 'AUTO' THEN 1 END BILLING_MODE,"
		+" IBMOE_CHARGES_HDR.BILL_FORMAT, IBMOE_CHARGES_HDR.LICENCE_COMPANY,IBMOE_CHARGES_HDR.TAXATION,"
		+" CASE WHEN IBMOE_CHARGES_HDR.BILLING_LEVEL = 'PO NO' THEN 2 "
		+" WHEN IBMOE_CHARGES_HDR.BILLING_LEVEL = 'ACCOUNT NO' "
		+" THEN 1 END BILLING_LEVEL,IBMOE_CHARGES_HDR.COMMITMENT_PERIOD,IBMOE_CHARGES_HDR.PENELTY_CLAUSE,"
		+" (SELECT MAX (OL1.ORDER_LINE_ID)"
		+" FROM IBMOE_ORDER_LINE OL1"
		+" WHERE OL1.IB_ORDER_LINE_ID ="
		+" IBMOE_IB_CHARGES_HDR.IB_ORDER_LINE_ID) AS IB_ORDER_LINE_ID,"                                                        
		+" IBMOE_CHARGES_HDR.BILL_TYPE, IBMOE_CHARGES_HDR.BILLING_ADDRESS_ID, IBMOE_CHARGES_HDR.BILLING_LEVEL_NUMBER, IBMOE_CHARGES_HDR.CREATION_DATE, IBMOE_CHARGES_HDR.CREATED_BY, IBMOE_CHARGES_HDR.LAST_UPDATE_DATE,"
		+" IBMOE_CHARGES_HDR.LAST_UPDATED_BY, IBMOE_CHARGES_HDR.NOTICE_PERIOD ,"
		+" CASE WHEN SERVICE_STAGE='NEW' THEN 0 ELSE 1 END STDREASION_ID,LOGICAL_SI_NUMBER"
		+" FROM XXIBM.IBMOE_IB_CHARGES_HDR IBMOE_IB_CHARGES_HDR"
		+" INNER JOIN IBMOE_ORDER_SERVICE_DETAILS SERVICE ON SERVICE.CRM_ORDER_ID= IBMOE_IB_CHARGES_HDR.LAST_CRM_ORDER_ID"      
		+" LEFT JOIN XXIBM.IBMOE_CHARGES_HDR IBMOE_CHARGES_HDR ON IBMOE_CHARGES_HDR.CHARGE_HDR_ID=IBMOE_IB_CHARGES_HDR.IB_CHARGE_HDR_ID"
		+" WHERE IBMOE_IB_CHARGES_HDR.LAST_CRM_ORDER_ID IN (SELECT CRM_ORDER_ID FROM IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"')";*/


	private static String spInsertChargesHeaderToIOMS3="{CALL IOE.ECRM_INSERT_INTO_TBILLING_INFO_HISTORY(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	
	private static String strGetChargesHeaderFromCRM3="SELECT IBMOE_CHARGES_HDR.CRM_ORDER_ID,CHARGE_HDR_ID,PO_ID,IBMOE_CHARGES_HDR.CUST_ACCOUNT_ID,CREDIT_PERIOD,LEGAL_ENTITY_CODE,CASE WHEN BILLING_MODE = 'MANUAL' THEN 2 "
		+"  WHEN BILLING_MODE = 'AUTO' THEN 1 END BILLING_MODE,"
		+"  BILL_FORMAT, LICENCE_COMPANY,TAXATION,CASE WHEN UPPER(BILLING_LEVEL) = 'PO NO' THEN 2 "
		+"  WHEN UPPER(BILLING_LEVEL) = 'ACCOUNT NO' "
		+"  THEN 1 END BILLING_LEVEL,COMMITMENT_PERIOD,PENELTY_CLAUSE,"
		+"  (SELECT MAX (OL1.ORDER_LINE_ID)"
		+"  FROM "+tableSchemaName+"IBMOE_ORDER_LINE OL1"
		+"  WHERE OL1.IB_ORDER_LINE_ID =IBMOE_ORDER_LINE.IB_ORDER_LINE_ID) AS ORDER_LINE_ID,                                                    "
		+"  BILL_TYPE, BILLING_ADDRESS_ID, BILLING_LEVEL_NUMBER, IBMOE_CHARGES_HDR.CREATION_DATE, IBMOE_CHARGES_HDR.CREATED_BY, IBMOE_CHARGES_HDR.LAST_UPDATE_DATE,"
		+"  IBMOE_CHARGES_HDR.LAST_UPDATED_BY, NOTICE_PERIOD,SERVICE.SERVICE_NO AS MAIN_SERVICE_ID, "
		+"  CASE WHEN SERVICE_STAGE='NEW' THEN 0 ELSE 1 END STDREASION_ID ,LOGICAL_SI_NUMBER "
		+"  FROM "+tableSchemaName+"IBMOE_CHARGES_HDR IBMOE_CHARGES_HDR"
		+"  INNER JOIN "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS SERVICE ON SERVICE.CRM_ORDER_ID= IBMOE_CHARGES_HDR.CRM_ORDER_ID  "
		+"  INNER JOIN "+tableSchemaName+"IBMOE_ORDER_LINE IBMOE_ORDER_LINE ON IBMOE_ORDER_LINE.ORDER_LINE_ID=IBMOE_CHARGES_HDR.ORDER_LINE_ID "
		+"  WHERE IBMOE_CHARGES_HDR.CRM_ORDER_ID"
		+"  IN(SELECT CRM_ORDER_ID FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"'"
		+"  AND CRM_ORDER_ID NOT IN(SELECT MAX(CRM_ORDER_ID) FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"'))";
		
	private static String spInsertHardwareHeaderToIOMS2="{CALL IOE.ECRM_INSERT_INTO_THARDWARE_INFO_2(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	private static String strGetHardwareHeaderFromCRM2="SELECT IBMOE_CHARGES_HDR.STORE,IBMOE_CHARGES_HDR.HARDWARE_TYPE,IBMOE_CHARGES_HDR.FORM_C_AVAILABLE,IBMOE_CHARGES_HDR.TYPE_OF_SALE,IBMOE_CHARGES_HDR.NATURE_OF_SALE,IBMOE_CHARGES_HDR.DISPATCH_ADDRESS_ID,"
		+"  IBMOE_CHARGES_HDR.CUST_ACCOUNT_ID,IBMOE_CHARGES_HDR.ORDER_LINE_ID,"
		+"  (SELECT MAX (OL1.ORDER_LINE_ID)"
		+"  FROM "+tableSchemaName+"IBMOE_ORDER_LINE OL1"
		+"  WHERE OL1.IB_ORDER_LINE_ID =IBMOE_ORDER_LINE.IB_ORDER_LINE_ID) AS ORDER_LINE_ID,                                                    "
		+"  IBMOE_CHARGES_HDR.WARRANTY_DATE_LOGIC,IBMOE_CHARGES_HDR.WARRANTY_END_DATE_LOGIC,IBMOE_CHARGES_HDR.WARRANTY_PERIOD_MONTHS,"
		+"  IBMOE_CHARGES_HDR.WARRANTY_START_DATE,IBMOE_CHARGES_HDR.WARRANTY_END_DATE,IBMOE_CHARGES_HDR.PRINCIPAL_AMT,IBMOE_CHARGES_HDR.INTREST_RATE,IBMOE_CHARGES_HDR.CREATION_DATE,IBMOE_CHARGES_HDR.LAST_UPDATE_DATE,"
		+"  IBMOE_CHARGES_HDR.CREATED_BY,IBMOE_CHARGES_HDR.LAST_UPDATED_BY,IBMOE_CHARGES_HDR.WARRANTY_END_PERIOD_MONTHS,IBMOE_CHARGES_HDR.EXTND_SUPPORT_PERIOD_MONTHS,"
		+"  IBMOE_CHARGES_HDR.EXTND_SUPPORT_END_DATE,IBMOE_CHARGES_HDR.WARRANTY_PERIOD_DAYS,IBMOE_CHARGES_HDR.EXTND_SUPPORT_PERIOD_DAYS,IBMOE_CHARGES_HDR.WARRANTY_END_PERIOD_DAYS ,IBMOE_CHARGES_HDR.EXTND_SUPPORT_END_DATE"
		+"  FROM "+tableSchemaName+"IBMOE_CHARGES_HDR IBMOE_CHARGES_HDR"
		+"  INNER JOIN "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS SERVICE ON SERVICE.CRM_ORDER_ID= IBMOE_CHARGES_HDR.CRM_ORDER_ID  "
		+"  INNER JOIN "+tableSchemaName+"IBMOE_ORDER_LINE IBMOE_ORDER_LINE ON IBMOE_ORDER_LINE.ORDER_LINE_ID=IBMOE_CHARGES_HDR.ORDER_LINE_ID "
		+"  WHERE IBMOE_CHARGES_HDR.CRM_ORDER_ID "
		+"  IN(SELECT MAX(CRM_ORDER_ID) FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"') AND STORE IS NOT NULL";


	
	private static String spInsertHardwareHeaderToIOMS3="{CALL IOE.ECRM_INSERT_INTO_THARDWARE_INFO_HISTORY(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	private static String strGetHardwareHeaderFromCRM3="SELECT SERVICE.SERVICE_NO AS MAIN_SERVICE_ID,IBMOE_CHARGES_HDR.STORE,IBMOE_CHARGES_HDR.HARDWARE_TYPE,IBMOE_CHARGES_HDR.FORM_C_AVAILABLE,IBMOE_CHARGES_HDR.TYPE_OF_SALE,IBMOE_CHARGES_HDR.NATURE_OF_SALE,IBMOE_CHARGES_HDR.DISPATCH_ADDRESS_ID,"
		+"  IBMOE_CHARGES_HDR.CUST_ACCOUNT_ID,IBMOE_CHARGES_HDR.ORDER_LINE_ID,"
		+"  (SELECT MAX (OL1.ORDER_LINE_ID)"
		+"  FROM "+tableSchemaName+"IBMOE_ORDER_LINE OL1"
		+"  WHERE OL1.IB_ORDER_LINE_ID =IBMOE_ORDER_LINE.IB_ORDER_LINE_ID) AS ORDER_LINE_ID,                                                    "
		+"  IBMOE_CHARGES_HDR.WARRANTY_DATE_LOGIC,IBMOE_CHARGES_HDR.WARRANTY_END_DATE_LOGIC,IBMOE_CHARGES_HDR.WARRANTY_PERIOD_MONTHS,"
		+"  IBMOE_CHARGES_HDR.WARRANTY_START_DATE,IBMOE_CHARGES_HDR.WARRANTY_END_DATE,IBMOE_CHARGES_HDR.PRINCIPAL_AMT,IBMOE_CHARGES_HDR.INTREST_RATE,IBMOE_CHARGES_HDR.CREATION_DATE,IBMOE_CHARGES_HDR.LAST_UPDATE_DATE,"
		+"  IBMOE_CHARGES_HDR.CREATED_BY,IBMOE_CHARGES_HDR.LAST_UPDATED_BY,IBMOE_CHARGES_HDR.WARRANTY_END_PERIOD_MONTHS,IBMOE_CHARGES_HDR.EXTND_SUPPORT_PERIOD_MONTHS,"
		+"  IBMOE_CHARGES_HDR.EXTND_SUPPORT_END_DATE,IBMOE_CHARGES_HDR.WARRANTY_PERIOD_DAYS,IBMOE_CHARGES_HDR.EXTND_SUPPORT_PERIOD_DAYS,IBMOE_CHARGES_HDR.WARRANTY_END_PERIOD_DAYS ,IBMOE_CHARGES_HDR.EXTND_SUPPORT_END_DATE"
		+"  FROM "+tableSchemaName+"IBMOE_CHARGES_HDR IBMOE_CHARGES_HDR"
		+"  INNER JOIN "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS SERVICE ON SERVICE.CRM_ORDER_ID= IBMOE_CHARGES_HDR.CRM_ORDER_ID  "
		+"  INNER JOIN "+tableSchemaName+"IBMOE_ORDER_LINE IBMOE_ORDER_LINE ON IBMOE_ORDER_LINE.ORDER_LINE_ID=IBMOE_CHARGES_HDR.ORDER_LINE_ID "		
		+"  WHERE IBMOE_CHARGES_HDR.CRM_ORDER_ID "
		+"  IN(SELECT MAX(CRM_ORDER_ID) FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"'"	
		+" AND CRM_ORDER_ID NOT IN(SELECT MAX(CRM_ORDER_ID) FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"')) AND STORE IS NOT NULL";

	private static String spInsertLocationHeaderToIOMS2="{CALL IOE.ECRM_INSERT_INTO_TLOCATION_INFO_2(?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	private static String strGetLocationHeaderFromCRM2="SELECT IBMOE_ORDER_LINE.PRI_LOC_TYP,IBMOE_ORDER_LINE.PRI_LOC_ID, IBMOE_ORDER_LINE.SEC_LOC_TYP, IBMOE_ORDER_LINE.SEC_LOC_ID,"
    +" IBMOE_ORDER_HEADER.ACCOUNT_NO,"
    +" (SELECT MAX (OL1.ORDER_LINE_ID)"
    +" FROM "+tableSchemaName+"IBMOE_ORDER_LINE OL1"
    +" WHERE OL1.IB_ORDER_LINE_ID =IBMOE_ORDER_LINE.IB_ORDER_LINE_ID) AS ORDER_LINE_ID,"                                                    
    +" IBMOE_ORDER_LINE.CREATION_DATE, IBMOE_ORDER_LINE.CREATED_BY,"
    +" IBMOE_ORDER_LINE.LAST_UPDATE_DATE, IBMOE_ORDER_LINE.LAST_UPDATED_BY"  
    +" FROM "+tableSchemaName+"IBMOE_ORDER_LINE IBMOE_ORDER_LINE "
    +" JOIN "+tableSchemaName+"IBMOE_ORDER_HEADER IBMOE_ORDER_HEADER"
    +" ON IBMOE_ORDER_HEADER.CRM_ORDER_ID=IBMOE_ORDER_LINE.CRM_ORDER_ID" 
    +" WHERE IBMOE_ORDER_LINE.PRI_LOC_TYP IS NOT NULL AND IBMOE_ORDER_LINE.SEC_LOC_TYP IS NOT NULL" 
    +" AND IBMOE_ORDER_LINE.CRM_ORDER_ID IN(SELECT MAX(CRM_ORDER_ID) FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER ='"+orderNo+"')";

	private static String spInsertLocationHeaderToIOMS3="{CALL IOE.ECRM_INSERT_INTO_TLOCATION_INFO_HISTORY(?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	private static String strGetLocationHeaderFromCRM3="SELECT SERVICE.SERVICE_NO AS MAIN_SERVICE_ID,IBMOE_ORDER_LINE.PRI_LOC_TYP,IBMOE_ORDER_LINE.PRI_LOC_ID, IBMOE_ORDER_LINE.SEC_LOC_TYP, IBMOE_ORDER_LINE.SEC_LOC_ID,"
	+" IBMOE_ORDER_HEADER.ACCOUNT_NO, "
	+" (SELECT MAX (OL1.ORDER_LINE_ID)"
	+" FROM "+tableSchemaName+"IBMOE_ORDER_LINE OL1"
	+" WHERE OL1.IB_ORDER_LINE_ID =IBMOE_ORDER_LINE.IB_ORDER_LINE_ID) AS ORDER_LINE_ID,"                                                    
	+" IBMOE_ORDER_LINE.CREATION_DATE, IBMOE_ORDER_LINE.CREATED_BY,"
	+" IBMOE_ORDER_LINE.LAST_UPDATE_DATE, IBMOE_ORDER_LINE.LAST_UPDATED_BY  ,IBMOE_ORDER_HEADER.CRM_ORDER_ID"
	+" FROM "+tableSchemaName+"IBMOE_ORDER_LINE IBMOE_ORDER_LINE JOIN IBMOE_ORDER_HEADER IBMOE_ORDER_HEADER"
	+" ON IBMOE_ORDER_HEADER.CRM_ORDER_ID=IBMOE_ORDER_LINE.CRM_ORDER_ID "
	+" INNER JOIN "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS SERVICE ON SERVICE.CRM_ORDER_ID= IBMOE_ORDER_LINE.CRM_ORDER_ID"          
	+" WHERE IBMOE_ORDER_LINE.PRI_LOC_TYP IS NOT NULL AND IBMOE_ORDER_LINE.SEC_LOC_TYP IS NOT NULL AND"
	+" IBMOE_ORDER_LINE.CRM_ORDER_ID " 
	+" IN(SELECT CRM_ORDER_ID FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"'"
	+" AND CRM_ORDER_ID NOT IN(SELECT MAX(CRM_ORDER_ID) FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"'))";

	
	private static String spGetApprovalWorkFlowTOIOMS2="{CALL IOE.ECRM_INSERT_INTO_TPOWORKFLOWTASK_2(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	private static String spInsertApprovalWorkFlowFromCRM2="SELECT TASK_ID,TASK_NAME,OWNER_ID,TASK_STATUS_ID,PLANNED_START_DATE, ACTUAL_END_DATE,	"
		+" SOURCE_OBJECT_ID,"
		+" (SELECT "
		+" jtrr.role_resource_id"
		+" FROM "
		+" "+tableSchemaName+"jtf_rs_role_relations jtrr,"
		+" "+tableSchemaName+"jtf_rs_resource_extns jre, "
		+" "+tableSchemaName+"fnd_user fu, "
		+" "+tableSchemaName+"jtf_rs_roles_tl jrt										    "
		+" WHERE jre.resource_id =  jtrr.role_resource_id "
		+" AND jtrr.role_id = jrt.role_id "
		+" AND fu.user_id = jre.user_id 	AND fu.EMPLOYEE_ID=(SELECT B.EMPLOYEE_ID"
		+" FROM "+tableSchemaName+"FND_USER B"
		+" WHERE B.USER_ID = JTF_TASKS_V_2.CREATED_BY) AND ROWNUM=1) AS   CREATED_BY,"
		+" CREATION_DATE, ATTRIBUTE1, OWNER_ID AS REJECTED_BY,ACTUAL_END_DATE "
		+" AS REJECTED_DATE,"
		+" ATTRIBUTE14 AS IS_REJECTED,"
		+" CASE WHEN TASK_ID=(SELECT MIN(TASK_ID) FROM  "+viewSchemaName+"JTF_TASKS_V "
		+" WHERE SOURCE_OBJECT_TYPE_CODE = 'XXIBM_ORDER' "
		+" AND SOURCE_OBJECT_ID=JTF_TASKS_V_2.SOURCE_OBJECT_ID) THEN 1 ELSE 0 END AS IS_FIRST_TASK,"
		+" CASE WHEN TASK_ID=(SELECT MAX(TASK_ID) FROM  "+viewSchemaName+"JTF_TASKS_V IS_LAST_TASK"
		+" WHERE SOURCE_OBJECT_TYPE_CODE = 'XXIBM_ORDER' "
		+" AND SOURCE_OBJECT_ID=JTF_TASKS_V_2.SOURCE_OBJECT_ID) THEN 1 ELSE 0 END AS IS_LAST_TASK,"
		+" (SELECT "
		+" jtrr.role_resource_id"
		+" FROM "
		+" "+tableSchemaName+"jtf_rs_role_relations jtrr,"
		+" "+tableSchemaName+"jtf_rs_resource_extns jre, "
		+" "+tableSchemaName+"fnd_user fu, "
		+" "+tableSchemaName+"jtf_rs_roles_tl jrt										    "
		+" WHERE jre.resource_id =  jtrr.role_resource_id "
		+" AND jtrr.role_id = jrt.role_id "
		+" AND fu.user_id = jre.user_id 	AND fu.EMPLOYEE_ID=(SELECT B.EMPLOYEE_ID"
		+" FROM "+tableSchemaName+"FND_USER B"
		+" WHERE B.USER_ID = JTF_TASKS_V_2.ASSIGNED_BY_ID) AND ROWNUM=1) AS   TASK_ASSIGNED_TO,"
		+" (SELECT MAX(TASK_ID) FROM "+viewSchemaName+"JTF_TASKS_V WHERE SOURCE_OBJECT_TYPE_CODE = 'XXIBM_ORDER' AND SOURCE_OBJECT_ID "
		+" IN (SELECT CRM_ORDER_ID FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"') AND TASK_ID <> JTF_TASKS_V_2.TASK_ID "
		+" AND TASK_ID < JTF_TASKS_V_2.TASK_ID) AS PREV_TASK_ID,"
		+" CASE WHEN ATTRIBUTE14 IN(5353,5351) THEN (SELECT OWNER_ID FROM "+viewSchemaName+"JTF_TASKS_V WHERE TASK_ID =(SELECT MIN(TASK_ID) FROM "+viewSchemaName+"JTF_TASKS_V WHERE SOURCE_OBJECT_TYPE_CODE = 'XXIBM_ORDER' AND SOURCE_OBJECT_ID "
		+" IN (SELECT CRM_ORDER_ID FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"'))) ELSE 0 END AS REJECTION_SEND_TO"
		+" FROM "+viewSchemaName+"JTF_TASKS_V  JTF_TASKS_V_2"
		+" WHERE SOURCE_OBJECT_TYPE_CODE = 'XXIBM_ORDER' AND SOURCE_OBJECT_ID "
		+" IN (SELECT CRM_ORDER_ID FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"') ORDER BY TASK_ID";

			
	/*"SELECT TASK_ID,TASK_NAME,OWNER_ID,TASK_STATUS_ID,PLANNED_START_DATE, ACTUAL_END_DATE,"	
	+" SOURCE_OBJECT_ID,CREATED_BY,CREATION_DATE, ATTRIBUTE1, OWNER_ID AS REJECTED_BY,ACTUAL_END_DATE "
	+" AS REJECTED_DATE,"
	+" ATTRIBUTE14 AS IS_REJECTED,"
	+" CASE WHEN TASK_ID=(SELECT MIN(TASK_ID) FROM  JTF_TASKS_V "
	+" WHERE SOURCE_OBJECT_TYPE_CODE = 'XXIBM_ORDER' "
	+" AND SOURCE_OBJECT_ID=JTF_TASKS_V_2.SOURCE_OBJECT_ID) THEN 1 ELSE 0 END AS IS_FIRST_TASK,"
	+" CASE WHEN TASK_ID=(SELECT MAX(TASK_ID) FROM  JTF_TASKS_V IS_LAST_TASK"
	+" WHERE SOURCE_OBJECT_TYPE_CODE = 'XXIBM_ORDER' "
	+" AND SOURCE_OBJECT_ID=JTF_TASKS_V_2.SOURCE_OBJECT_ID) THEN 1 ELSE 0 END AS IS_LAST_TASK,"
	+" ASSIGNED_BY_ID AS TASK_ASSIGNED_TO,"
	+" (SELECT MAX(TASK_ID) FROM JTF_TASKS_V WHERE SOURCE_OBJECT_TYPE_CODE = 'XXIBM_ORDER' AND SOURCE_OBJECT_ID" 
	+" IN (SELECT CRM_ORDER_ID FROM IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"') AND TASK_ID <> JTF_TASKS_V_2.TASK_ID" 
	+" AND TASK_ID < JTF_TASKS_V_2.TASK_ID) AS PREV_TASK_ID,"
	+" CASE WHEN ATTRIBUTE14 IN(5353,5351) THEN (SELECT OWNER_ID FROM JTF_TASKS_V WHERE TASK_ID =(SELECT MIN(TASK_ID) FROM JTF_TASKS_V WHERE SOURCE_OBJECT_TYPE_CODE = 'XXIBM_ORDER' AND SOURCE_OBJECT_ID" 
	+" IN (SELECT CRM_ORDER_ID FROM IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"'))) ELSE 0 END AS REJECTION_SEND_TO"
	+" FROM JTF_TASKS_V  JTF_TASKS_V_2"
	+" WHERE SOURCE_OBJECT_TYPE_CODE = 'XXIBM_ORDER' AND SOURCE_OBJECT_ID" 
	+" IN (SELECT CRM_ORDER_ID FROM IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"') ORDER BY TASK_ID";*/


	private static String spGetApprovalWorkFlowTOIOMS3="{CALL IOE.ECRM_INSERT_INTO_TTASKACTIONHISTORY_2(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	private static String spInsertApprovalWorkFlowFromCRM3="SELECT TASK_ID,TASK_NAME,OWNER_ID,TASK_STATUS_ID,PLANNED_START_DATE, ACTUAL_END_DATE,"	
		+" SOURCE_OBJECT_ID,CREATED_BY,CREATION_DATE, ATTRIBUTE1, OWNER_ID AS REJECTED_BY,ACTUAL_END_DATE "
		+" AS REJECTED_DATE,"
		+" ATTRIBUTE14 AS IS_REJECTED,"
		+" CASE WHEN TASK_ID=(SELECT MIN(TASK_ID) FROM  JTF_TASKS_V "
		+" WHERE SOURCE_OBJECT_TYPE_CODE = 'XXIBM_ORDER' "
		+" AND SOURCE_OBJECT_ID=JTF_TASKS_V_2.SOURCE_OBJECT_ID) THEN 1 ELSE 0 END AS IS_FIRST_TASK,"
		+" CASE WHEN TASK_ID=(SELECT MAX(TASK_ID) FROM  JTF_TASKS_V IS_LAST_TASK"
		+" WHERE SOURCE_OBJECT_TYPE_CODE = 'XXIBM_ORDER' "
		+" AND SOURCE_OBJECT_ID=JTF_TASKS_V_2.SOURCE_OBJECT_ID) THEN 1 ELSE 0 END AS IS_LAST_TASK,"
		+" ASSIGNED_BY_ID AS TASK_ASSIGNED_TO,"
		+" (SELECT MAX(TASK_ID) FROM JTF_TASKS_V WHERE SOURCE_OBJECT_TYPE_CODE = 'XXIBM_ORDER' AND SOURCE_OBJECT_ID" 
		+" IN (SELECT CRM_ORDER_ID FROM IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"') AND TASK_ID <> JTF_TASKS_V_2.TASK_ID" 
		+" AND TASK_ID < JTF_TASKS_V_2.TASK_ID) AS PREV_TASK_ID,"
		+" CASE WHEN ATTRIBUTE14 IN(5353,5351) THEN (SELECT OWNER_ID FROM JTF_TASKS_V WHERE TASK_ID =(SELECT MIN(TASK_ID) FROM JTF_TASKS_V WHERE SOURCE_OBJECT_TYPE_CODE = 'XXIBM_ORDER' AND SOURCE_OBJECT_ID" 
		+" IN (SELECT CRM_ORDER_ID FROM IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"'))) ELSE 0 END AS REJECTION_SEND_TO"
		+" FROM JTF_TASKS_V  JTF_TASKS_V_2"
		+" WHERE SOURCE_OBJECT_TYPE_CODE = 'XXIBM_ORDER' AND SOURCE_OBJECT_ID" 
		+" IN (SELECT CRM_ORDER_ID FROM IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"') ORDER BY TASK_ID";
	
	private static String spInsertChangeOrderDetailFromCRM2="{CALL IOE.ECRM_INSERT_INTO_TCHANGE_ORDER_DETAILS_2(?,?,?,?,?,?,?,?,?,?)}";
	private static String spGetChangeOrderDetailFromCRM2="SELECT CRM_ORDER_ID AS ORDERNO,"
		+" (SELECT MAX(IOSD1.SERVICE_LIST_ID) FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS IOSD1"
		+" WHERE IOSD1.IB_SERVICE_LIST_ID=IOSD1.IB_SERVICE_LIST_ID and IOSD1.SERVICE_LIST_ID<IOSD.SERVICE_LIST_ID) "
		+" AS SERVICEID,"
		+" SERVICE_LIST_ID  AS NEWSERVICELISTID,"
		+" ATTRIBUTE2 AS CHANGE_REASON_ID,"
		+" SERVICE_ORDER_TYPE,"
		+" REMARKS,CREATION_DATE"
		+" FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS IOSD where LOGICAL_SI_NUMBER='"+orderNo+"'"
		+" AND CRM_ORDER_ID NOT IN("
		+" SELECT MIN(CRM_ORDER_ID) FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS  WHERE LOGICAL_SI_NUMBER='"+orderNo+"'"
		+" )";

	private static String spInsertLocationHeaderToIOMS="{CALL IOE.ECRM_INSERT_INTO_TLOCATION_INFO(?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	// start, end, ext months
	private static String strGetHardwareHeaderFromCRM="select STORE,HARDWARE_TYPE,FORM_C_AVAILABLE,TYPE_OF_SALE,NATURE_OF_SALE,DISPATCH_ADDRESS_ID,"
													+" CUST_ACCOUNT_ID,ORDER_LINE_ID,WARRANTY_DATE_LOGIC,WARRANTY_END_DATE_LOGIC,WARRANTY_PERIOD_MONTHS,"
													+" WARRANTY_START_DATE,WARRANTY_END_DATE,PRINCIPAL_AMT,INTREST_RATE,CREATION_DATE,LAST_UPDATE_DATE,"
													+" CREATED_BY,LAST_UPDATED_BY,WARRANTY_END_PERIOD_MONTHS,EXTND_SUPPORT_PERIOD_MONTHS,"
													+" EXTND_SUPPORT_END_DATE,WARRANTY_PERIOD_DAYS,EXTND_SUPPORT_PERIOD_DAYS,WARRANTY_END_PERIOD_DAYS "
													+" from XXIBM.IBMOE_CHARGES_HDR where store is not null AND CRM_ORDER_ID ="+orderNo;
	
	private static String spInsertHardwareHeaderToIOMS="{CALL IOE.ECRM_INSERT_INTO_THARDWARE_INFO(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	// Remarks was missing
	private static String strGetChargesFromCRM="select IBMOE_CHARGES.CHARGE_ID,IBMOE_CHARGES.PK_CHARGES_ID,IBMOE_CHARGES.ORDER_LINE_ID,IBMOE_CHARGES.CHARGE_TYPE,"
											+" IBMOE_CHARGES.CONTRACT_PERIOD_MNTHS,IBMOE_CHARGES.TOTAL_AMOUNT,IBMOE_CHARGES.FREQUENCY,IBMOE_CHARGES.CHARGE_VALUE,"
											+" IBMOE_CHARGES.START_DATE_LOGIC,IBMOE_CHARGES.END_DATE_LOGIC,IBMOE_CHARGES.START_DATE_DAYS,IBMOE_CHARGES.START_DATE_MONTHS,"
											+" IBMOE_CHARGES.END_DATE_DAYS, IBMOE_CHARGES.END_DATE_MONTHS,IBMOE_CHARGES.FX_STATUS,IBMOE_CHARGES.ANNOTATION,IBMOE_CHARGES.CREATION_DATE,"
											+" IBMOE_CHARGES.CREATED_BY,IBMOE_CHARGES.LAST_UPDATE_DATE,IBMOE_CHARGES.LAST_UPDATED_BY,IBMOE_CHARGES.REMARKS,IBMOE_CHARGE_MAP.TAX_RATE"
											+" from XXIBM.IBMOE_CHARGES, XXIBM.IBMOE_CHARGE_MAP where IBMOE_CHARGES.CHARGE_ID=IBMOE_CHARGE_MAP.CHARGE_ID and IBMOE_CHARGES.CRM_ORDER_ID ="+orderNo;
	
	private static String spInsertChargesToIOMS="{CALL IOE.ECRM_INSERT_INTO_TCHARGES_INFO(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	private static String spInsertChargesToIOMS2="{CALL IOE.ECRM_INSERT_INTO_TCHARGES_INFO_2(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	private static String strGetChargesFromCRM2=" SELECT DISTINCT IBMOE_CHARGES.CHARGE_ID,"
			+" (SELECT MIN (PK_CHARGES_ID) FROM "+tableSchemaName+"IBMOE_CHARGES C1 WHERE C1.IB_PK_CHARGES_ID = IBMOE_CHARGES.IB_PK_CHARGES_ID) PK_CHARGES_ID,"
			+" (SELECT MAX (OL1.ORDER_LINE_ID) FROM "+tableSchemaName+"IBMOE_ORDER_LINE OL1 WHERE OL1.IB_ORDER_LINE_ID =IBMOE_ORDER_LINE.IB_ORDER_LINE_ID)"
			+" AS ORDER_LINE_ID, IBMOE_CHARGES.CHARGE_TYPE, IBMOE_CHARGES.CONTRACT_PERIOD_MNTHS,IBMOE_CHARGES.TOTAL_AMOUNT,IBMOE_CHARGES.FREQUENCY,IBMOE_CHARGES.CHARGE_VALUE, IBMOE_CHARGES.START_DATE_LOGIC,"
			+" IBMOE_CHARGES.END_DATE_LOGIC,IBMOE_CHARGES.START_DATE_DAYS,IBMOE_CHARGES.START_DATE_MONTHS, IBMOE_CHARGES.END_DATE_DAYS, IBMOE_CHARGES.END_DATE_MONTHS,IBMOE_CHARGES.FX_STATUS,IBMOE_CHARGES.ANNOTATION,IBMOE_CHARGES.CREATION_DATE, "
			+" IBMOE_CHARGES.CREATED_BY,IBMOE_CHARGES.LAST_UPDATE_DATE,IBMOE_CHARGES.LAST_UPDATED_BY,IBMOE_CHARGES.REMARKS,IBMOE_CHARGE_MAP.TAX_RATE, IBMOE_CHARGES.FREQUENCY AS CHARGEFREQUENCY,IBMOE_CHARGES.CHARGE_END_DATE AS CHARGE_DISCONNECTION_DATE,"
			+" IBMOE_CHARGES.PO_VALID_EXCLUDE AS EXCLUDE, IBMOE_CHARGES.ANNUAL_RATE AS ANNUAL_RATE,IBMOE_CHARGES.CHARGE_START_DATE AS START_DATE,IBMOE_CHARGES.CHARGE_END_DATE AS END_DATE, IBMOE_CHARGES.CHARGE_STATUS AS CHARGES_STATUS,"
			+" IBMOE_CHARGES.CRM_ORDER_ID,        "
			+" ( SELECT DISTINCT SERVICE_LIST_ID FROM "+tableSchemaName+"IBMOE_CHARGES_HDR WHERE CHARGE_HDR_ID IN("
			+" SELECT DISTINCT c2.CHARGE_HDR_ID FROM "+tableSchemaName+"IBMOE_CHARGES C2 where c2.PK_CHARGES_ID IN("
			+" (SELECT MIN (PK_CHARGES_ID) FROM "+tableSchemaName+"IBMOE_CHARGES C1 WHERE C1.IB_PK_CHARGES_ID = IBMOE_CHARGES.IB_PK_CHARGES_ID))))"
			+" AS CREATEDIN_SERVICEID,"
			+" ( SELECT DISTINCT PO_ID FROM "+tableSchemaName+"IBMOE_CHARGES_HDR WHERE CHARGE_HDR_ID IN("
			+" SELECT DISTINCT c2.CHARGE_HDR_ID FROM "+tableSchemaName+"IBMOE_CHARGES C2 where c2.PK_CHARGES_ID IN("
			+" (SELECT MIN (PK_CHARGES_ID) FROM "+tableSchemaName+"IBMOE_CHARGES C1 WHERE C1.IB_PK_CHARGES_ID = IBMOE_CHARGES.IB_PK_CHARGES_ID))))"
			+" AS PODETAILID"
			+" FROM "+tableSchemaName+"IBMOE_CHARGES IBMOE_CHARGES"
			+" INNER JOIN "+tableSchemaName+"IBMOE_CHARGE_MAP IBMOE_CHARGE_MAP ON IBMOE_CHARGES.CHARGE_ID=IBMOE_CHARGE_MAP.CHARGE_ID    "
			+" INNER JOIN "+tableSchemaName+"IBMOE_ORDER_LINE IBMOE_ORDER_LINE ON IBMOE_ORDER_LINE.ORDER_LINE_ID=IBMOE_CHARGES.ORDER_LINE_ID"
			+" WHERE IBMOE_CHARGES.CRM_ORDER_ID  IN(SELECT MAX(CRM_ORDER_ID) FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"')";
		
		/*"SELECT DISTINCT IBMOE_CHARGES.CHARGE_ID,"
	+" (SELECT MAX (PK_CHARGES_ID)"
	+" FROM IBMOE_CHARGES C1"
	+" WHERE C1.IB_PK_CHARGES_ID = IBMOE_CHARGES.IB_PK_CHARGES_ID) PK_CHARGES_ID,"
	+" (SELECT MAX (OL1.ORDER_LINE_ID)"
	+" FROM IBMOE_ORDER_LINE OL1"
	+" WHERE OL1.IB_ORDER_LINE_ID =IBMOE_ORDER_LINE.IB_ORDER_LINE_ID) AS ORDER_LINE_ID,"                                                    
	+" IBMOE_CHARGES.CHARGE_TYPE,"
	+" IBMOE_CHARGES.CONTRACT_PERIOD_MNTHS,IBMOE_CHARGES.TOTAL_AMOUNT,IBMOE_CHARGES.FREQUENCY,IBMOE_CHARGES.CHARGE_VALUE,"
	+" IBMOE_CHARGES.START_DATE_LOGIC,IBMOE_CHARGES.END_DATE_LOGIC,IBMOE_CHARGES.START_DATE_DAYS,IBMOE_CHARGES.START_DATE_MONTHS,"
	+" IBMOE_CHARGES.END_DATE_DAYS, IBMOE_CHARGES.END_DATE_MONTHS,IBMOE_CHARGES.FX_STATUS,IBMOE_CHARGES.ANNOTATION,IBMOE_CHARGES.CREATION_DATE,"
	+" IBMOE_CHARGES.CREATED_BY,IBMOE_CHARGES.LAST_UPDATE_DATE,IBMOE_CHARGES.LAST_UPDATED_BY,IBMOE_CHARGES.REMARKS,IBMOE_CHARGE_MAP.TAX_RATE,"
	+" IBMOE_CHARGES.FREQUENCY AS CHARGEFREQUENCY,IBMOE_CHARGES.CHARGE_END_DATE AS CHARGE_DISCONNECTION_DATE,IBMOE_CHARGES.PO_VALID_EXCLUDE AS EXCLUDE,"
	+" IBMOE_CHARGES.ANNUAL_RATE AS ANNUAL_RATE,IBMOE_CHARGES.CHARGE_START_DATE AS START_DATE,IBMOE_CHARGES.CHARGE_END_DATE AS END_DATE,"
	+" IBMOE_CHARGES.CHARGE_STATUS AS CHARGES_STATUS,IBMOE_CHARGES.CRM_ORDER_ID,IBMOE_IB_CHARGES_HDR.LAST_SERVICE_LIST_ID AS CREATEDIN_SERVICEID"
	+" FROM XXIBM.IBMOE_CHARGES IBMOE_CHARGES"
	+" INNER JOIN XXIBM.IBMOE_CHARGE_MAP IBMOE_CHARGE_MAP ON IBMOE_CHARGES.CHARGE_ID=IBMOE_CHARGE_MAP.CHARGE_ID" 
	+" LEFT JOIN XXIBM.IBMOE_IB_CHARGES_HDR IBMOE_IB_CHARGES_HDR ON IBMOE_IB_CHARGES_HDR.LAST_SERVICE_LIST_ID=IBMOE_CHARGES.SERVICE_LIST_ID" 
	+" INNER JOIN XXIBM.IBMOE_ORDER_LINE IBMOE_ORDER_LINE ON IBMOE_ORDER_LINE.ORDER_LINE_ID=IBMOE_CHARGES.ORDER_LINE_ID"
	+" WHERE IBMOE_CHARGES.CRM_ORDER_ID "
	+" IN(SELECT MAX(CRM_ORDER_ID) FROM IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"')";*/



	
	private static String spInsertChargesToIOMS3="{CALL IOE.ECRM_INSERT_INTO_TCHARGES_INFO_HISTORY(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	private static String strGetChargesFromCRM3=" SELECT DISTINCT SERVICE.SERVICE_NO AS MAIN_SERVICE_ID,IBMOE_CHARGES.CHARGE_ID,"
			+" (SELECT MIN (PK_CHARGES_ID) FROM "+tableSchemaName+"IBMOE_CHARGES C1 WHERE C1.IB_PK_CHARGES_ID = IBMOE_CHARGES.IB_PK_CHARGES_ID) PK_CHARGES_ID, "
			+" (SELECT MAX (OL1.ORDER_LINE_ID) FROM "+tableSchemaName+"IBMOE_ORDER_LINE OL1 WHERE OL1.IB_ORDER_LINE_ID =IBMOE_ORDER_LINE.IB_ORDER_LINE_ID) AS ORDER_LINE_ID, IBMOE_CHARGES.CHARGE_TYPE, "
			+" IBMOE_CHARGES.CONTRACT_PERIOD_MNTHS,IBMOE_CHARGES.TOTAL_AMOUNT,IBMOE_CHARGES.FREQUENCY,IBMOE_CHARGES.CHARGE_VALUE, "
			+" IBMOE_CHARGES.START_DATE_LOGIC,IBMOE_CHARGES.END_DATE_LOGIC,IBMOE_CHARGES.START_DATE_DAYS,IBMOE_CHARGES.START_DATE_MONTHS, IBMOE_CHARGES.END_DATE_DAYS, IBMOE_CHARGES.END_DATE_MONTHS,IBMOE_CHARGES.FX_STATUS,IBMOE_CHARGES.ANNOTATION,IBMOE_CHARGES.CREATION_DATE, IBMOE_CHARGES.CREATED_BY,IBMOE_CHARGES.LAST_UPDATE_DATE,IBMOE_CHARGES.LAST_UPDATED_BY,IBMOE_CHARGES.REMARKS,IBMOE_CHARGE_MAP.TAX_RATE, IBMOE_CHARGES.FREQUENCY AS CHARGEFREQUENCY,IBMOE_CHARGES.CHARGE_END_DATE AS CHARGE_DISCONNECTION_DATE,IBMOE_CHARGES.PO_VALID_EXCLUDE AS EXCLUDE, IBMOE_CHARGES.ANNUAL_RATE AS ANNUAL_RATE,IBMOE_CHARGES.CHARGE_START_DATE AS START_DATE,IBMOE_CHARGES.CHARGE_END_DATE AS END_DATE, IBMOE_CHARGES.CHARGE_STATUS AS CHARGES_STATUS,IBMOE_CHARGES.CRM_ORDER_ID,"
			+" ( SELECT DISTINCT SERVICE_LIST_ID FROM "+tableSchemaName+"IBMOE_CHARGES_HDR WHERE CHARGE_HDR_ID IN("
			+" SELECT DISTINCT c2.CHARGE_HDR_ID FROM "+tableSchemaName+"IBMOE_CHARGES C2 where c2.PK_CHARGES_ID IN("
			+" (SELECT MIN (PK_CHARGES_ID) FROM "+tableSchemaName+"IBMOE_CHARGES C1 WHERE C1.IB_PK_CHARGES_ID = IBMOE_CHARGES.IB_PK_CHARGES_ID))))"
			+" AS CREATEDIN_SERVICEID,"
			+" ( SELECT DISTINCT PO_ID FROM "+tableSchemaName+"IBMOE_CHARGES_HDR WHERE CHARGE_HDR_ID IN("
			+" SELECT DISTINCT c2.CHARGE_HDR_ID FROM "+tableSchemaName+"IBMOE_CHARGES C2 where c2.PK_CHARGES_ID IN("
			+" (SELECT MIN (PK_CHARGES_ID) FROM "+tableSchemaName+"IBMOE_CHARGES C1 WHERE C1.IB_PK_CHARGES_ID = IBMOE_CHARGES.IB_PK_CHARGES_ID))))"
			+" AS PODETAILID"
			+" FROM "+tableSchemaName+"IBMOE_CHARGES IBMOE_CHARGES "
			+" INNER JOIN "+tableSchemaName+"IBMOE_CHARGE_MAP IBMOE_CHARGE_MAP ON IBMOE_CHARGES.CHARGE_ID=IBMOE_CHARGE_MAP.CHARGE_ID "
			+" INNER JOIN "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS SERVICE ON SERVICE.CRM_ORDER_ID= IBMOE_CHARGES.CRM_ORDER_ID "
			+" INNER JOIN "+tableSchemaName+"IBMOE_ORDER_LINE IBMOE_ORDER_LINE ON IBMOE_ORDER_LINE.ORDER_LINE_ID=IBMOE_CHARGES.ORDER_LINE_ID "
			+" WHERE IBMOE_CHARGES.CRM_ORDER_ID  "
			+" IN(SELECT CRM_ORDER_ID FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"' AND CRM_ORDER_ID "
			+" NOT IN(SELECT MAX(CRM_ORDER_ID) FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"'))";
		
		/*"SELECT SERVICE.SERVICE_NO AS MAIN_SERVICE_ID,IBMOE_CHARGES.CHARGE_ID,IBMOE_CHARGES.PK_CHARGES_ID,"
	+" (SELECT MAX (OL1.ORDER_LINE_ID)"
	+" FROM IBMOE_ORDER_LINE OL1"
	+" WHERE OL1.IB_ORDER_LINE_ID =IBMOE_IB_CHARGES_HDR.IB_ORDER_LINE_ID) AS ORDER_LINE_ID,"                                                    
	+" IBMOE_CHARGES.CHARGE_TYPE,"
	+" IBMOE_CHARGES.CONTRACT_PERIOD_MNTHS,IBMOE_CHARGES.TOTAL_AMOUNT,IBMOE_CHARGES.FREQUENCY,IBMOE_CHARGES.CHARGE_VALUE,"
	+" IBMOE_CHARGES.START_DATE_LOGIC,IBMOE_CHARGES.END_DATE_LOGIC,IBMOE_CHARGES.START_DATE_DAYS,IBMOE_CHARGES.START_DATE_MONTHS,"
	+" IBMOE_CHARGES.END_DATE_DAYS, IBMOE_CHARGES.END_DATE_MONTHS,IBMOE_CHARGES.FX_STATUS,IBMOE_CHARGES.ANNOTATION,IBMOE_CHARGES.CREATION_DATE,"
	+" IBMOE_CHARGES.CREATED_BY,IBMOE_CHARGES.LAST_UPDATE_DATE,IBMOE_CHARGES.LAST_UPDATED_BY,IBMOE_CHARGES.REMARKS,IBMOE_CHARGE_MAP.TAX_RATE,"
	+" IBMOE_CHARGES.FREQUENCY AS CHARGEFREQUENCY,IBMOE_CHARGES.CHARGE_END_DATE AS CHARGE_DISCONNECTION_DATE,IBMOE_CHARGES.PO_VALID_EXCLUDE AS EXCLUDE,"
	+" IBMOE_CHARGES.ANNUAL_RATE AS ANNUAL_RATE,IBMOE_CHARGES.CHARGE_START_DATE AS START_DATE,IBMOE_CHARGES.CHARGE_END_DATE AS END_DATE,"
	+" IBMOE_CHARGES.CHARGE_STATUS AS CHARGES_STATUS,IBMOE_CHARGES.CRM_ORDER_ID,IBMOE_IB_CHARGES_HDR.LAST_SERVICE_LIST_ID AS CREATEDIN_SERVICEID"
	+" FROM XXIBM.IBMOE_CHARGES IBMOE_CHARGES"
	+" INNER JOIN XXIBM.IBMOE_CHARGE_MAP IBMOE_CHARGE_MAP ON IBMOE_CHARGES.CHARGE_ID=IBMOE_CHARGE_MAP.CHARGE_ID" 
	+" LEFT JOIN XXIBM.IBMOE_IB_CHARGES_HDR IBMOE_IB_CHARGES_HDR ON IBMOE_IB_CHARGES_HDR.LAST_SERVICE_LIST_ID=IBMOE_CHARGES.SERVICE_LIST_ID" 
	+" INNER JOIN IBMOE_ORDER_SERVICE_DETAILS SERVICE ON SERVICE.CRM_ORDER_ID= IBMOE_IB_CHARGES_HDR.LAST_CRM_ORDER_ID"
	+" WHERE IBMOE_CHARGES.CRM_ORDER_ID "
	+" IN(SELECT CRM_ORDER_ID FROM IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"'"
	+" AND CRM_ORDER_ID NOT IN(SELECT MAX(CRM_ORDER_ID) FROM IBMOE_ORDER_SERVICE_DETAILS WHERE LOGICAL_SI_NUMBER='"+orderNo+"')) AND LAST_SERVICE_LIST_ID IS NOT NULL";*/

	// used ATTRIBUTE1 instead of REASON_CODE 
	private static String spInsertApprovalWorkFlowFromCRM="SELECT TASK_ID,TASK_NAME,OWNER_ID,TASK_STATUS_ID,PLANNED_START_DATE, ACTUAL_END_DATE," +
															" SOURCE_OBJECT_ID,CREATED_BY,CREATION_DATE, ATTRIBUTE1 FROM JTF_TASKS_V " +
															" WHERE SOURCE_OBJECT_TYPE_CODE = 'XXIBM_ORDER' AND SOURCE_OBJECT_ID in ("+orderNo+")";
	
	private static String spGetApprovalWorkFlowTOIOMS="{CALL IOE.ECRM_INSERT_INTO_TPOWORKFLOWTASK(?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	
	private static String strGetApprovalDetailsFromCRM="SELECT TASK_ID,TASK_STATUS_ID,OWNER_ID,PLANNED_START_DATE,SOURCE_OBJECT_ID,ATTRIBUTE1,"
													 +" ACTUAL_END_DATE,CREATED_BY"
													 +" FROM JTF_TASKS_V"
													 +" WHERE SOURCE_OBJECT_TYPE_CODE = 'XXIBM_ORDER' AND SOURCE_OBJECT_ID in ("+orderNo+")";
	
	private static String strInsertECRMApprovalstoIOMS="{CALL IOE.ECRM_INSERT_INTO_TTASKACTIONHISTORY(?,?,?,?,?,?,?,?,?,?,?)}";
	
	private static String strGetECRMM6TaskHistoryFromIOMS="select distinct CRM_ORDER_ID,SERVICE_LIST_ID,EVENT_TYPE_ID,CANCEL_REASON,CREATION_DATE from IBMOE_ORDER_STATUS where CRM_ORDER_ID in ("+orderNo+")";
	private static String strGetECRMM6TaskHistoryFromIOMS2=" SELECT DISTINCT CRM_ORDER_ID,SERVICE_LIST_ID,EVENT_TYPE_ID,CANCEL_REASON,CREATION_DATE "
		+" FROM "+tableSchemaName+"IBMOE_ORDER_STATUS "
		+" WHERE EVENT_TYPE_ID IN('2222','3333','4444','5555','6666','7777','8888','9999')"
		+" AND CRM_ORDER_ID "
		+" IN (SELECT CRM_ORDER_ID FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS   IBSD WHERE IBSD.LOGICAL_SI_NUMBER='"+orderNo+"' )";
	private static String strGetECRMTM6_NewOrder_StatusFromIOMS2="SELECT CRM_ORDER_ID AS CRMORDERID,SERVICE_LIST_ID AS SERVICEID,ORDER_STATUS AS STATUS,"
		+" CREATION_DATE AS CREATEDDATE,LAST_UPDATE_DATE AS LASTUPDATEDDATE,CASE WHEN (SELECT SERVICE_ORDER_TYPE FROM IBMOE_ORDER_SERVICE_DETAILS WHERE SERVICE_LIST_ID=IBMOE_ORDER_STATUS.SERVICE_LIST_ID)=10 THEN 'NEW' ELSE 'CHANGE' END AS ORDERTYPE        "
		+" FROM "+tableSchemaName+"IBMOE_ORDER_STATUS "
		+" WHERE EVENT_TYPE_ID IN('2222','3333','4444','5555','6666','7777','8888','9999')"
		+" AND CRM_ORDER_ID IN (SELECT IBSD.CRM_ORDER_ID"
		+" FROM "+tableSchemaName+"IBMOE_ORDER_SERVICE_DETAILS   IBSD     "
		+" WHERE IBSD.LOGICAL_SI_NUMBER='"+orderNo+"' )";
	
	private static String strInsertECRMM6TaskHistoryToIOMS="{CALL IOE.ECRM_INSERT_INTO_TM6_RESPONSE_HISTORY(?,?,?,?,?,?,?,?)}";
	private static String strInsertECRMM6TaskHistoryToIOMS2="{CALL IOE.ECRM_INSERT_INTO_TM6_RESPONSE_HISTORY_2(?,?,?,?,?,?,?,?,?)}";
	private static String strInsertECRMM6NewOrderStatusToIOMS2="{CALL IOE.ECRM_INSERT_INTO_TM6_NEWORDER_STATUS(?,?,?,?,?,?,?,?,?)}";

	private static String strGetECRMFXAccountCreateFromIOMS="select '101',LEGAL_ENTITY,'3', CRM_ORDER_ID from IBMOE_CRM_FX_INTEGRATION where CRM_ORDER_ID in ("+orderNo+")";
	
	private static String strInsertECRMFXAccountToCreate="{CALL IOE.ECRM_INSERT_INTO_TFX_ACCOUNTCREATE(?,?,?,?,?)}";
	
	private static String strGetECRMFXServiceCreateFromIOMS="select SERVICE_INTERNAL_ID,SERVICE_INTER_ID_RESET,'3',UPDATED_ON,CREATED_ON,CRM_ORDER_ID,"
														 +"	ORDER_LINE_ID,'101',SERVICE_LIST_ID,LEGAL_ENTITY,FX_TOKEN_NO,SERVICE_VIEW_ID from IBMOE_CRM_FX_INTEGRATION"
														 +" where CRM_ORDER_ID in ("+orderNo+")";
	
	private static String strInsertECRMFXServiceCreateToIOMS="{CALL IOE.ECRM_INSERT_INTO_TFX_SERVICECREATE(?,?,?,?,?,?,?,?,?,?,?)}";
	
	private static String strGetECRMFXRCCreateFromIOMS="select CRM_ORDER_ID,ORDER_LINE_ID,PK_CHARGES_ID,SERVICE_VIEW_ID,LEGAL_ENTITY,UPDATED_ON,CREATED_ON " +
													   " from IBMOE_CRM_FX_INTEGRATION where PK_CHARGES_ID is not null and CHARGE_TYPE=30 and CRM_ORDER_ID in ("+orderNo+")";
	
	private static String strInsertECRMFXRCCreateToIOMS="{CALL IOE.ECRM_INSERT_INTO_TFX_RC_CREATE(?,?,?,?,?,?,?,?,?,?)}";;
	
	private static String strGetECRMFXNRCCreateFromIOMS="select ORDER_LINE_ID,PK_CHARGES_ID,SERVICE_VIEW_ID,LEGAL_ENTITY,UPDATED_ON,CREATED_ON from IBMOE_CRM_FX_INTEGRATION " +
														" where PK_CHARGES_ID is not null and CHARGE_TYPE=20 and CRM_ORDER_ID in ("+orderNo+")";
	
	private static String strInsertECRMFXNRCCreateToIOMS="{CALL IOE.ECRM_INSERT_INTO_TFX_NRC_CREATE(?,?,?,?,?,?,?,?,?)}";;
	
	ArrayList OrderNoList = new ArrayList();
	
	
	public static void InsertECRMOrderHeadertoIOMS()//Insert Into TPOMASTER
	{
				PreparedStatement pstmt = null;
				ResultSet rset = null;
				DBConnectionRetriever con = new DBConnectionRetriever();
				Connection crmcon = con.getCRMConnection();
				
				Connection iomsConn = null;
				CallableStatement csIOMS = null;
				boolean isInserted = false;
				try {
					System.out.println("Connect with IOMS database");
					iomsConn = getConnectionObject();
					//csIOMS=iomsConn.prepareCall(strGetInsertDateFromIOMS);
					//tableName="TM_ACCOUNTROLEDETAILS";
					//csIOMS.setString(1, tableName);
					//rset=csIOMS.executeQuery();
					//System.out.println("fetching insert date from IOMS history table");
					//while(rset.next())
					//{
					//	insertDate=rset.getString("INSERTDATE");
					//}
					System.out.println("query ::" + strGetOrderHeaderFromCRM);
					pstmt = crmcon.prepareStatement(strGetOrderHeaderFromCRM);
					//pstmt.setString(1,insertDate);
					rset = pstmt.executeQuery();
					int i = 0;
					ArrayList lstOrder = new ArrayList();
					ECRMMigrationDto objDto = null; 
					while (rset.next()) 
					{
						objDto = new ECRMMigrationDto();
						objDto.setCrmOrderId(rset.getString("CRM_ORDER_ID"));
						objDto.setOrderType(rset.getString("ORDERTYPE"));
						objDto.setOrderSource(rset.getString("ORDERSOURCE"));
						objDto.setQuoteNumber(rset.getString("QUOTENUMBER"));
						objDto.setCurrency(rset.getString("CURRENCY"));
						objDto.setM6OrderStatus(rset.getString("M6_ORDER_STATUS"));
						objDto.setOrderStage(rset.getString("ORDER_STAGE"));
						objDto.setCustAccountId(rset.getString("ACCOUNT_NO"));
						objDto.setPon(rset.getString("PON"));
						objDto.setOrderSubType(rset.getString("ORDER_SUBTYPE"));
						objDto.setZoneId(rset.getString("ZONEID"));
						objDto.setProjectManagerId(rset.getString("PROJECT_MGR_ID"));
						objDto.setDemoType(rset.getString("DEMO_TYPE"));
						//objDto.setIsRegularised(rset.getInt(columnName));
						objDto.setOrderDate1(rset.getString("ORDERDATE"));
						objDto.setRegionId(rset.getString("REGIONID"));
						objDto.setPublishDate1(rset.getString("PUBLISH_DATE"));
						objDto.setCreatedBy(rset.getString("CREATED_BY"));
						objDto.setCreationDate1(rset.getString("CREATION_DATE"));
						objDto.setLastUpdatedBy(rset.getString("LAST_UPDATED_BY"));
						objDto.setLastUpdatedDate1(rset.getString("LAST_UPDATE_DATE"));
						
						
						lstOrder.add(objDto);
						
					}
					
					System.err.println("Inside Function....");
					if(lstOrder.size()>0)
					{
						 java.util.Date date= new java.util.Date();
						 System.err.println("Order Header And Stored In ArrayList" + new Timestamp(date.getTime()));	
						 iomsConn.setAutoCommit(false);
						 csIOMS = iomsConn.prepareCall(spInsertECRMOrderHeadertoIOMS);
								
					
					for (Iterator iter = lstOrder.iterator(); iter.hasNext();) 
					{
						ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
												
						csIOMS.setString(1, element.getCrmOrderId());
						csIOMS.setString(2, element.getOrderType());
						csIOMS.setString(3, element.getOrderSource());
						csIOMS.setString(4, element.getQuoteNumber());
						csIOMS.setString(5, element.getCurrency());						
						csIOMS.setString(6, element.getM6OrderStatus());
						csIOMS.setString(7,element.getOrderStage());
						csIOMS.setString(8,element.getCustAccountId());
						csIOMS.setString(9,element.getPon());
						csIOMS.setString(10,element.getOrderSubType());
						csIOMS.setString(11, element.getZoneId());
						csIOMS.setString(12,element.getProjectManagerId());
						csIOMS.setString(13, element.getDemoType());
						csIOMS.setString(14,element.getOrderDate1());
						csIOMS.setString(15,element.getRegionId());
						csIOMS.setString(16, element.getPublishDate1());
						csIOMS.setString(17, element.getCreationDate1());
						csIOMS.setString(18, element.getCreatedBy());
						csIOMS.setString(19, element.getLastUpdatedDate1());
						csIOMS.setString(20, element.getLastUpdatedBy());
						csIOMS.setInt(21, 0);
						csIOMS.setInt(22, 0);
						csIOMS.setString(23, "");
						csIOMS.execute();
						
					}
							 

								if (csIOMS.getInt(22) == 0) {
									iomsConn.commit();
									//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
									//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
									isInserted = true;
									System.err.println("Order Updated....");
								} else {
									iomsConn.rollback();
									System.err.println("Order Not Updated....");
									System.err.println(csIOMS.getString(22));
									isInserted = false;
								}
								
					}
					
						// Long ServiceSegment = null;
					System.out.println("Order Data is Inserted");
					java.util.Date date= new java.util.Date();
					 System.err.println("Order Header And Stored In ArrayList" + new Timestamp(date.getTime()));
				} catch (Exception e) {
					System.out.println("Order Data is Not Inserted"
							+ e.getStackTrace());
					e.printStackTrace();
				} finally {
					try {
						pstmt.close();
						rset.close();
						iomsConn.close();
					} catch (Exception e) {
						System.out.println("exeption due to : " + e.getMessage());
					}
				}
	}

	public static void InsertECRMOrderHeadertoIOMS2()//Insert Into TPOMASTER
	{
				PreparedStatement pstmt = null;
				ResultSet rset = null;
				DBConnectionRetriever con = new DBConnectionRetriever();
				Connection crmcon = con.getCRMConnection();
				
				Connection iomsConn = null;
				CallableStatement csIOMS = null;
				boolean isInserted = false;
				try {
					System.out.println("Connect with IOMS database");
					iomsConn = getConnectionObject();
					//csIOMS=iomsConn.prepareCall(strGetInsertDateFromIOMS);
					//tableName="TM_ACCOUNTROLEDETAILS";
					//csIOMS.setString(1, tableName);
					//rset=csIOMS.executeQuery();
					//System.out.println("fetching insert date from IOMS history table");
					//while(rset.next())
					//{
					//	insertDate=rset.getString("INSERTDATE");
					//}
					System.out.println("query ::" + strGetOrderHeaderFromCRM2);
					pstmt = crmcon.prepareStatement(strGetOrderHeaderFromCRM2);
					//pstmt.setString(1,insertDate);
					rset = pstmt.executeQuery();
					int i = 0;
					ArrayList lstOrder = new ArrayList();
					ECRMMigrationDto objDto = null; 
					while (rset.next()) 
					{
						objDto = new ECRMMigrationDto();
						objDto.setCrmOrderId(rset.getString("CRM_ORDER_ID"));
						objDto.setOrderType(rset.getString("ORDERTYPE"));
						objDto.setOrderSource(rset.getString("ORDERSOURCE"));
						objDto.setQuoteNumber(rset.getString("QUOTENUMBER"));
						objDto.setCurrency(rset.getString("CURRENCY"));
						objDto.setM6OrderStatus(rset.getString("M6_ORDER_STATUS"));
						objDto.setOrderStage(rset.getString("ORDER_STAGE"));
						objDto.setCustAccountId(rset.getString("ACCOUNT_NO"));
						objDto.setPon(rset.getString("PON"));
						objDto.setOrderSubType(rset.getString("ORDER_SUBTYPE"));
						objDto.setZoneId(rset.getString("ZONEID"));
						objDto.setProjectManagerId(rset.getString("PROJECT_MGR_ID"));
						objDto.setDemoType(rset.getString("DEMO_TYPE"));
						//objDto.setIsRegularised(rset.getInt(columnName));
						objDto.setOrderDate1(rset.getString("ORDERDATE"));
						objDto.setRegionId(rset.getString("REGIONID"));
						objDto.setPublishDate1(rset.getString("PUBLISH_DATE"));
						objDto.setCreatedBy(rset.getString("CREATED_BY"));
						objDto.setCreationDate1(rset.getString("CREATION_DATE"));
						objDto.setLastUpdatedBy(rset.getString("LAST_UPDATED_BY"));
						objDto.setLastUpdatedDate1(rset.getString("LAST_UPDATE_DATE"));
						objDto.setServiceType(rset.getString("SUBCHANGE_TYPE_ID"));
						objDto.setSalesFirstName(rset.getString("SALES_FIRSTNAME"));
						objDto.setSalesLastName(rset.getString("SALES_LASTNAME"));
						objDto.setSalesPhoneNo(rset.getString("SALES_PHONE"));
						objDto.setSalesEmail(rset.getString("SALES_EMAIL"));
						objDto.setEmployeeId(rset.getString("EMPLOYEE_ID"));
						
						lstOrder.add(objDto);
						
					}
					
					System.err.println("Inside Function....");
					if(lstOrder.size()>0)
					{
						 java.util.Date date= new java.util.Date();
						 System.err.println("Order Header And Stored In ArrayList" + new Timestamp(date.getTime()));	
						 iomsConn.setAutoCommit(false);
						 csIOMS = iomsConn.prepareCall(spInsertECRMOrderHeadertoIOMS2);
								
					
					for (Iterator iter = lstOrder.iterator(); iter.hasNext();) 
					{
						ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
												
						csIOMS.setString(1, element.getCrmOrderId());
						csIOMS.setString(2, element.getOrderType());
						csIOMS.setString(3, element.getOrderSource());
						csIOMS.setString(4, element.getQuoteNumber());
						csIOMS.setString(5, element.getCurrency());						
						csIOMS.setString(6, element.getM6OrderStatus());
						csIOMS.setString(7,element.getOrderStage());
						csIOMS.setString(8,element.getCustAccountId());
						csIOMS.setString(9,element.getPon());
						csIOMS.setString(10,element.getOrderSubType());
						csIOMS.setString(11, element.getZoneId());
						csIOMS.setString(12,element.getProjectManagerId());
						csIOMS.setString(13, element.getDemoType());
						csIOMS.setString(14,element.getOrderDate1());
						csIOMS.setString(15,element.getRegionId());
						csIOMS.setString(16, element.getPublishDate1());
						csIOMS.setString(17, element.getCreationDate1());
						csIOMS.setString(18, element.getCreatedBy());
						csIOMS.setString(19, element.getLastUpdatedDate1());
						csIOMS.setString(20, element.getLastUpdatedBy());
						csIOMS.setInt(21, 0);
						csIOMS.setInt(22, 0);
						csIOMS.setString(23, "");
						csIOMS.setString(24, element.getServiceType());
						csIOMS.setString(25, element.getSalesFirstName());
						csIOMS.setString(26, element.getSalesLastName());
						csIOMS.setString(27, element.getSalesPhoneNo());
						csIOMS.setString(28, element.getSalesEmail());
						csIOMS.setString(29, element.getEmployeeId());
						csIOMS.execute();
						
					}
							 

					if (csIOMS.getInt(22) == 0) {
						iomsConn.commit();
						//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
						//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
						isInserted = true;
						System.err.println("Order Updated....");
					} else {
						iomsConn.rollback();
						System.err.println("Order Not Updated....");
						System.err.println(csIOMS.getString(22));
						isInserted = false;
					}
								
					}
					
						// Long ServiceSegment = null;
					System.out.println("Order Data is Inserted");
					java.util.Date date= new java.util.Date();
					 System.err.println("Order Header And Stored In ArrayList" + new Timestamp(date.getTime()));
				} catch (Exception e) {
					System.out.println("Order Data is Not Inserted"
							+ e.getStackTrace());
					e.printStackTrace();
				} finally {
					try {
						pstmt.close();
						rset.close();
						iomsConn.close();
					} catch (Exception e) {
						System.out.println("exeption due to : " + e.getMessage());
					}
				}
	}

	public static void InsertECRMHeaderAttributesInfotoIOMS()//INSERT INTO IOE.TATTRIBUTEVALUES
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetOrderHeaderAttributesFromCRM);
			pstmt = crmcon.prepareStatement(strGetOrderHeaderAttributesFromCRM);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstOrderAttributes = new ArrayList();
			ECRMMigrationDto objDto = null; 
			//lawkush start
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
			DateFormat df2 = new SimpleDateFormat("dd-MMM-yyyy");
			Utility utility=new Utility();
			//lawkush End 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setLabelName(rset.getString("OH_ATTRIBUTE_ID"));
				objDto.setLabelValue(rset.getString("LABEL_VALUE"));
				if(rset.getString("OH_ATTRIBUTE_ID").equalsIgnoreCase("3") || rset.getString("OH_ATTRIBUTE_ID").equalsIgnoreCase("11"))
				{
					if(rset.getString("LABEL_VALUE")==null)
					{
						objDto.setLabelValue((utility.showDate_Report2(new Date(rset.getTimestamp("CREATION_DATE").getTime()))).toUpperCase());
					}
					java.util.Date date=df2.parse(objDto.getLabelValue());
					objDto.setLabelValue((utility.showDate_std_fmt(date).toUpperCase()));
				}
				objDto.setCrmOrderId(rset.getString("CRM_ORDER_ID"));
				objDto.setCreatedBy(rset.getString("CREATED_BY"));
				objDto.setCreationDate(rset.getTimestamp("CREATION_DATE"));
				objDto.setLastUpdatedBy(rset.getString("LAST_UPDATED_BY"));
				objDto.setLastUpdatedDate(rset.getTimestamp("LAST_UPDATE_DATE"));
				lstOrderAttributes.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstOrderAttributes.size()>0)
			{
			System.err.println("Order Header Attributes And Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(strInsertECRMOrderHeaderAttributestoIOMS);
						
			
			for (Iterator iter = lstOrderAttributes.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				csIOMS.setString(1, element.getLabelName());
				csIOMS.setString(2, element.getLabelValue());
				csIOMS.setString(3, element.getCrmOrderId());
				csIOMS.setTimestamp(4, element.getCreationDate());
				csIOMS.setString(5, element.getCreatedBy());
				csIOMS.setTimestamp(6, element.getLastUpdatedDate());
				csIOMS.setString(7, element.getLastUpdatedBy());
				csIOMS.setInt(8, 0);
				csIOMS.setInt(9, 0);
				csIOMS.setString(10, "");
				csIOMS.execute();
				
			}
			
			//for non CRM attributes 
			java.util.Date date= new java.util.Date();
			 System.out.println(new Timestamp(date.getTime()));
			 
			csIOMS.setString(1, "NOT_IN_CRM1");
			csIOMS.setString(2, null);
			csIOMS.setString(3, orderNo);
			csIOMS.setTimestamp(4, new Timestamp(date.getTime()));
			csIOMS.setString(5, "1");
			csIOMS.setTimestamp(6, new Timestamp(date.getTime()));
			csIOMS.setString(7, "1");
			csIOMS.setInt(8, 0);
			csIOMS.setInt(9, 0);
			csIOMS.setString(10, "");
			csIOMS.execute();
			
			csIOMS.setString(1, "NOT_IN_CRM2");
			csIOMS.setString(2, null);
			csIOMS.setString(3, orderNo);
			csIOMS.setTimestamp(4, new Timestamp(date.getTime()));
			csIOMS.setString(5, "1");
			csIOMS.setTimestamp(6, new Timestamp(date.getTime()));
			csIOMS.setString(7, "1");
			csIOMS.setInt(8, 0);
			csIOMS.setInt(9, 0);
			csIOMS.setString(10, "");
			csIOMS.execute();
			
			csIOMS.setString(1, "NOT_IN_CRM3");
			csIOMS.setString(2, null);
			csIOMS.setString(3, orderNo);
			csIOMS.setTimestamp(4, new Timestamp(date.getTime()));
			csIOMS.setString(5, "1");
			csIOMS.setTimestamp(6, new Timestamp(date.getTime()));
			csIOMS.setString(7, "1");
			csIOMS.setInt(8, 0);
			csIOMS.setInt(9, 0);
			csIOMS.setString(10, "");
			csIOMS.execute();
			
			
			//for non CRM attributes 
			if (csIOMS.getInt(9) == 0) {
				iomsConn.commit();
				SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("Header Attributes Updated....");
			} else {
				System.err.println("Header Attributes not Updated....");
				System.err.println(csIOMS.getString(10));
				iomsConn.rollback();
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("Order Attributes Inserted");
			} catch (Exception e) {
			System.out.println("Error in method processPartyIds()"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}
	
	public static void InsertECRMHeaderAttributesInfotoIOMS2()//INSERT INTO IOE.TATTRIBUTEVALUES
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetOrderHeaderAttributesFromCRM2);
			pstmt = crmcon.prepareStatement(strGetOrderHeaderAttributesFromCRM2);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstOrderAttributes = new ArrayList();
			ECRMMigrationDto objDto = null; 
			//lawkush start
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
			DateFormat df2 = new SimpleDateFormat("dd-MMM-yyyy");
			Utility utility=new Utility();
			//lawkush End 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setLabelName(rset.getString("OH_ATTRIBUTE_ID"));
				objDto.setLabelValue(rset.getString("LABEL_VALUE"));
				if(rset.getString("OH_ATTRIBUTE_ID").equalsIgnoreCase("3") || rset.getString("OH_ATTRIBUTE_ID").equalsIgnoreCase("11"))
				{
					if(rset.getString("LABEL_VALUE")==null)
					{
						objDto.setLabelValue((utility.showDate_Report2(new Date(rset.getTimestamp("CREATION_DATE").getTime()))).toUpperCase());
					}
					java.util.Date date=df2.parse(objDto.getLabelValue());
					objDto.setLabelValue((utility.showDate_std_fmt(date).toUpperCase()));
				}
				objDto.setCrmOrderId(rset.getString("CRM_ORDER_ID"));
				objDto.setCreatedBy(rset.getString("CREATED_BY"));
				objDto.setCreationDate(rset.getTimestamp("CREATION_DATE"));
				objDto.setLastUpdatedBy(rset.getString("LAST_UPDATED_BY"));
				objDto.setLastUpdatedDate(rset.getTimestamp("LAST_UPDATE_DATE"));
				lstOrderAttributes.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstOrderAttributes.size()>0)
			{
			System.err.println("Order Header Attributes And Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(strInsertECRMOrderHeaderAttributestoIOMS2);
						
			
			for (Iterator iter = lstOrderAttributes.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				csIOMS.setString(1, element.getLabelName());
				csIOMS.setString(2, element.getLabelValue());
				csIOMS.setString(3, element.getCrmOrderId());
				csIOMS.setTimestamp(4, element.getCreationDate());
				csIOMS.setString(5, element.getCreatedBy());
				csIOMS.setTimestamp(6, element.getLastUpdatedDate());
				csIOMS.setString(7, element.getLastUpdatedBy());
				csIOMS.setInt(8, 0);
				csIOMS.setInt(9, 0);
				csIOMS.setString(10, "");
				csIOMS.execute();
				
			}
			
			//for non CRM attributes 
			java.util.Date date= new java.util.Date();
			 System.out.println(new Timestamp(date.getTime()));
			 
/*			csIOMS.setString(1, "NOT_IN_CRM1");
			csIOMS.setString(2, null);
			csIOMS.setString(3, orderNo);
			csIOMS.setTimestamp(4, new Timestamp(date.getTime()));
			csIOMS.setString(5, "1");
			csIOMS.setTimestamp(6, new Timestamp(date.getTime()));
			csIOMS.setString(7, "1");
			csIOMS.setInt(8, 0);
			csIOMS.setInt(9, 0);
			csIOMS.setString(10, "");
			csIOMS.execute();
			
			csIOMS.setString(1, "NOT_IN_CRM2");
			csIOMS.setString(2, null);
			csIOMS.setString(3, orderNo);
			csIOMS.setTimestamp(4, new Timestamp(date.getTime()));
			csIOMS.setString(5, "1");
			csIOMS.setTimestamp(6, new Timestamp(date.getTime()));
			csIOMS.setString(7, "1");
			csIOMS.setInt(8, 0);
			csIOMS.setInt(9, 0);
			csIOMS.setString(10, "");
			csIOMS.execute();
			
			csIOMS.setString(1, "NOT_IN_CRM3");
			csIOMS.setString(2, null);
			csIOMS.setString(3, orderNo);
			csIOMS.setTimestamp(4, new Timestamp(date.getTime()));
			csIOMS.setString(5, "1");
			csIOMS.setTimestamp(6, new Timestamp(date.getTime()));
			csIOMS.setString(7, "1");
			csIOMS.setInt(8, 0);
			csIOMS.setInt(9, 0);
			csIOMS.setString(10, "");
			csIOMS.execute();
*/			
			
			//for non CRM attributes 
			if (csIOMS.getInt(9) == 0) {
				iomsConn.commit();
				SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("Header Attributes Updated....");
			} else {
				System.err.println("Header Attributes not Updated....");
				System.err.println(csIOMS.getString(10));
				iomsConn.rollback();
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("Order Attributes Inserted");
			} catch (Exception e) {
			System.out.println("Error in method processPartyIds()"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}

	public static void InsertECRMContacttoIOMS()//INSERT TO TPOCONTACT
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetOrderContactFromCRM);
			pstmt = crmcon.prepareStatement(strGetOrderContactFromCRM);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstContact = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setOrderContactId(rset.getString("ORDER_CONTACT_ID"));
				objDto.setContactType(rset.getString("CONTACTTYPE"));
				objDto.setFormofAddress(rset.getString("FORMOFADDRESS"));
				objDto.setGivenName(rset.getString("GIVENNAME"));
				objDto.setFamilyName(rset.getString("FAMILYNAME"));
				objDto.setEMail(rset.getString("EMAIL"));
				objDto.setCellPhoneNo(rset.getLong("CELLTELEPHONENR"));
				objDto.setCrmOrderId(rset.getString("CRM_ORDER_ID"));
				objDto.setFaxNo(rset.getString("FAXNR"));
				objDto.setCreatedBy(rset.getString("CREATED_BY"));
				objDto.setCreationDate1(rset.getString("CREATION_DATE"));
				objDto.setLastUpdatedBy(rset.getString("LAST_UPDATED_BY"));
				objDto.setLastUpdatedDate1(rset.getString("LAST_UPDATE_DATE"));
				
				lstContact.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstContact.size()>0)
			{
			System.err.println("Order Contact Information Fetched And Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(spInsertOrderContactToIOMS);
						
			
			for (Iterator iter = lstContact.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				csIOMS.setString(1, element.getOrderContactId());
				csIOMS.setString(2, element.getContactType());
				csIOMS.setString(3, element.getFormofAddress());
				csIOMS.setString(4, element.getGivenName());
				csIOMS.setString(5, element.getFamilyName());
				if(element.getEMail()==null)
				{
					csIOMS.setString(6, "email@e.com");
				}
				else
				{
					csIOMS.setString(6, element.getEMail());
				}
				csIOMS.setLong(7, element.getCellPhoneNo());
				csIOMS.setString(8, element.getCrmOrderId());
				if(element.getFaxNo()==null)
				{
					csIOMS.setString(9, "123456");
				}
				else
				{
				csIOMS.setString(9, element.getFaxNo());
				}
				csIOMS.setString(10, element.getCreationDate1());
				csIOMS.setString(11, element.getCreatedBy());
				csIOMS.setString(12, element.getLastUpdatedDate1());
				csIOMS.setString(13, element.getLastUpdatedBy());
				csIOMS.setInt(14, 0);
				csIOMS.setInt(15, 0);
				csIOMS.setString(16, "");
				csIOMS.execute();
			}
		}
			else
			{
				System.err.println("Order Contact Information Stored In ArrayList");	
				iomsConn.setAutoCommit(false);
				csIOMS = iomsConn.prepareCall(spInsertOrderContactToIOMS);
				csIOMS.setString(1, null);
				csIOMS.setString(2, null);
				csIOMS.setString(3, null);
				csIOMS.setString(4, null);
				csIOMS.setString(5, null);
				csIOMS.setString(6, null);
				csIOMS.setLong(7, 0);
				csIOMS.setString(8, orderNo);
				csIOMS.setString(9, null);
				csIOMS.setString(10, null);
				csIOMS.setString(11, null);
				csIOMS.setString(12, null);
				csIOMS.setString(13, null);
				csIOMS.setInt(14, 0);
				csIOMS.setInt(15, 0);
				csIOMS.setString(16, "");
				csIOMS.execute();
			}

			 
			
			if (csIOMS.getInt(15) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("Contacts Updated....");
			} else {
				System.err.println("Contacts not Updated....");
				System.err.println(csIOMS.getString(15));
				iomsConn.rollback();
				isInserted = false;
			}
			
		//	}

				// Long ServiceSegment = null;
			//System.out.println("Values assigned processPartyIds()");
			} catch (Exception e) {
			System.out.println("Error in method processPartyIds()"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}

	public static void InsertECRMContacttoIOMS2()//INSERT TO TPOCONTACT
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		
		PreparedStatement pstmt2 = null;
		ResultSet rset2 = null;
		DBConnectionRetriever con2 = new DBConnectionRetriever();
		Connection crmcon2 = con.getCRMConnection();
		
		Connection iomsConn2 = null;
		CallableStatement csIOMS2 = null;

		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetOrderContactFromCRM2);
			pstmt = crmcon.prepareStatement(strGetOrderContactFromCRM2);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstContact = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setOrderContactId(rset.getString("ORDER_CONTACT_ID"));
				objDto.setContactType(rset.getString("CONTACTTYPE"));
				objDto.setFormofAddress(rset.getString("FORMOFADDRESS"));
				objDto.setGivenName(rset.getString("GIVENNAME"));
				objDto.setFamilyName(rset.getString("FAMILYNAME"));
				objDto.setEMail(rset.getString("EMAIL"));
				//objDto.setCellPhoneNo(rset.getLong("CELLTELEPHONENR"));
				objDto.setCellPhoneNo1(rset.getString("CELLTELEPHONENR"));
				objDto.setCrmOrderId(rset.getString("CRM_ORDER_ID"));
				objDto.setFaxNo(rset.getString("FAXNR"));
				objDto.setCreatedBy(rset.getString("CREATED_BY"));
				objDto.setCreationDate1(rset.getString("CREATION_DATE"));
				objDto.setLastUpdatedBy(rset.getString("LAST_UPDATED_BY"));
				objDto.setLastUpdatedDate1(rset.getString("LAST_UPDATE_DATE"));
				
				lstContact.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstContact.size()>0)
			{
			System.err.println("Order Contact Information Fetched And Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(spInsertOrderContactToIOMS2);
						
			
			for (Iterator iter = lstContact.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				csIOMS.setString(1, element.getOrderContactId());
				csIOMS.setString(2, element.getContactType());
				csIOMS.setString(3, element.getFormofAddress());
				csIOMS.setString(4, element.getGivenName());
				csIOMS.setString(5, element.getFamilyName());
				if(element.getEMail()==null)
				{
					csIOMS.setString(6, "email@e.com");
				}
				else
				{
					csIOMS.setString(6, element.getEMail());
				}
				csIOMS.setLong(7, element.getCellPhoneNo());
				csIOMS.setString(8, element.getCrmOrderId());
				if(element.getFaxNo()==null)
				{
					csIOMS.setString(9, "123456");
				}
				else
				{
				csIOMS.setString(9, element.getFaxNo());
				}
				csIOMS.setString(10, element.getCreationDate1());
				csIOMS.setString(11, element.getCreatedBy());
				csIOMS.setString(12, element.getLastUpdatedDate1());
				csIOMS.setString(13, element.getLastUpdatedBy());
				csIOMS.setInt(14, 0);
				csIOMS.setInt(15, 0);
				csIOMS.setString(16, "");
				csIOMS.execute();
			}
		}
			else
			{
				System.err.println("Order Contact Information Stored In ArrayList");	
				/*iomsConn.setAutoCommit(false);
				csIOMS = iomsConn.prepareCall(spInsertOrderContactToIOMS);
				csIOMS.setString(1, null);
				csIOMS.setString(2, null);
				csIOMS.setString(3, null);
				csIOMS.setString(4, null);
				csIOMS.setString(5, null);
				csIOMS.setString(6, null);
				csIOMS.setLong(7, 0);
				csIOMS.setString(8, orderNo);
				csIOMS.setString(9, null);
				csIOMS.setString(10, null);
				csIOMS.setString(11, null);
				csIOMS.setString(12, null);
				csIOMS.setString(13, null);
				csIOMS.setInt(14, 0);
				csIOMS.setInt(15, 0);
				csIOMS.setString(16, "");
				csIOMS.execute();
				 */
				try{
					System.out.println("Connect with IOMS database");
					iomsConn2 = getConnectionObject();
					System.out.println("query ::" + strGetOrderContactFromCRM3);
					pstmt2 = crmcon2.prepareStatement(strGetOrderContactFromCRM3);
					rset2 = pstmt2.executeQuery();
					ArrayList lstContact2 = new ArrayList();
					ECRMMigrationDto objDto2= null; 
					while (rset2.next()) 
					{
						objDto2 = new ECRMMigrationDto();
						objDto2.setAccountNo(rset2.getString("ACCOUNT_NO"));
						objDto2.setCrmOrderId(rset2.getString("CRM_ORDER_ID"));
						objDto2.setCreatedBy(rset2.getString("CREATED_BY"));
						
						lstContact2.add(objDto2);
						
					}
						System.err.println("Inside Function....");
						if(lstContact2.size()>0)
						{
						System.err.println("Order Contact Information Fetched And Stored In ArrayList");	
						iomsConn2.setAutoCommit(false);
						csIOMS2 = iomsConn2.prepareCall(spInsertOrderContactToIOMS3);
									
						
						for (Iterator iter = lstContact2.iterator(); iter.hasNext();) 
						{
							ECRMMigrationDto element2 = (ECRMMigrationDto) iter.next();
							
							csIOMS2.setString(1, element2.getAccountNo());
							csIOMS2.setString(2, element2.getCrmOrderId());
							csIOMS2.setString(3, element2.getCreatedBy());
							csIOMS2.setInt(4, 0);
							csIOMS2.setInt(5, 0);
							csIOMS2.setString(6, "");
							csIOMS2.execute();
						}
					}
						if (csIOMS2.getInt(5) == 0) {
							iomsConn2.commit();
							isInserted = true;
							System.err.println("Contacts Updated....");
						} else {
							System.err.println("Contacts not Updated....");
							System.err.println(csIOMS2.getString(5));
							iomsConn2.rollback();
							isInserted = false;
						}
						
					} catch (Exception e) {
					System.out.println("Error in method processPartyIds()"
							+ e.getStackTrace());
					e.printStackTrace();
					} finally {
						try {
							pstmt2.close();
							rset2.close();
							iomsConn2.close();
							pstmt.close();
							rset.close();
							iomsConn.close();
						} catch (Exception e) {
							System.out.println("exeption due to : " + e.getMessage());
						}
					}
			}

			if (csIOMS.getInt(15) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("Contacts Updated....");
			} else {
				System.err.println("Contacts not Updated....");
				System.err.println(csIOMS.getString(15));
				iomsConn.rollback();
				isInserted = false;
			}
			
		//	}

				// Long ServiceSegment = null;
			//System.out.println("Values assigned processPartyIds()");
			} catch (Exception e) {
			System.out.println("Error in method processPartyIds()"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();

			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}

	public static void InsertECRMAddresstoIOMS()//INSERT INTO TPOADDRESS
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		

		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetContactAddressFromCRM);
			pstmt = crmcon.prepareStatement(strGetContactAddressFromCRM);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstContactAddress = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setContactAddressId(rset.getString("CONTACT_ADDRESS_ID"));
				objDto.setAddress1(rset.getString("ADDRESS1"));
				objDto.setAddress2(rset.getString("ADDRESS2"));
				objDto.setAddress3(rset.getString("ADDRESS3"));
				objDto.setPin(rset.getString("PIN"));
				objDto.setCrmOrderId(rset.getString("CRM_ORDER_ID"));
				objDto.setOrderContactId(rset.getString("ORDER_CONTACT_ID"));
				objDto.setCityId(rset.getString("CITY_ID"));
				objDto.setStateId(rset.getString("STATE_ID"));
				objDto.setCountryId(rset.getString("COUNTRY_ID"));
				objDto.setCreatedBy(rset.getString("CREATED_BY"));
				objDto.setCreationDate1(rset.getString("CREATION_DATE"));
				objDto.setLastUpdatedBy(rset.getString("LAST_UPDATED_BY"));
				objDto.setLastUpdatedDate1(rset.getString("LAST_UPDATE_DATE"));
				
				lstContactAddress.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstContactAddress.size()>0)
			{
			System.err.println("Order Address Information Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(spInsertContactAddressToIOMS);
						
			
			for (Iterator iter = lstContactAddress.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				csIOMS.setString(1, element.getContactAddressId());
				csIOMS.setString(2, element.getAddress1());
				csIOMS.setString(3, element.getAddress2());
				csIOMS.setString(4, element.getAddress3());
				csIOMS.setString(5, element.getPin());
				csIOMS.setString(6, element.getCrmOrderId());
				csIOMS.setString(7, element.getOrderContactId());
				csIOMS.setString(8, element.getCityId());
				csIOMS.setString(9, element.getStateId());
				csIOMS.setString(10, element.getCountryId());
				csIOMS.setString(11, element.getCreationDate1());
				csIOMS.setString(12, element.getCreatedBy());
				csIOMS.setString(13, element.getLastUpdatedDate1());
				csIOMS.setString(14, element.getLastUpdatedBy());
				csIOMS.setInt(15, 0);
				csIOMS.setInt(16, 0);
				csIOMS.setString(17, "");
				csIOMS.execute();
			}
		}
			else
			{
				System.err.println("Order Address Information Stored In ArrayList");	
				iomsConn.setAutoCommit(false);
				csIOMS = iomsConn.prepareCall(spInsertContactAddressToIOMS);
					
					csIOMS.setString(1, null);
					csIOMS.setString(2, null);
					csIOMS.setString(3, null);
					csIOMS.setString(4, null);
					csIOMS.setString(5, null);
					csIOMS.setString(6, orderNo);
					csIOMS.setString(7, null);
					csIOMS.setString(8, null);
					csIOMS.setString(9,null);
					csIOMS.setString(10, null);
					csIOMS.setString(11, null);
					csIOMS.setString(12,null);
					csIOMS.setString(13, null);
					csIOMS.setString(14, null);
					csIOMS.setInt(15, 0);
					csIOMS.setInt(16, 0);
					csIOMS.setString(17, "");
					csIOMS.execute();
				}

			if (csIOMS.getInt(16) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("Contact Address Updated....");
			} else {
				iomsConn.rollback();
				System.err.println("Contact Address Not Updated....");
				System.err.println(csIOMS.getString(16));
				isInserted = false;
			}

				// Long ServiceSegment = null;
			System.out.println("Values assigned processPartyIds()");
			} catch (Exception e) {
			System.out.println("Error in method processPartyIds()"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}
	
	public static void InsertECRMAddresstoIOMS2()//INSERT INTO TPOADDRESS
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		PreparedStatement pstmt2 = null;
		ResultSet rset2 = null;
		DBConnectionRetriever con2 = new DBConnectionRetriever();
		Connection crmcon2 = con2.getCRMConnection();
		
		Connection iomsConn2 = null;
		CallableStatement csIOMS2 = null;

		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetContactAddressFromCRM2);
			pstmt = crmcon.prepareStatement(strGetContactAddressFromCRM2);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstContactAddress = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setContactAddressId(rset.getString("CONTACT_ADDRESS_ID"));
				objDto.setAddress1(rset.getString("ADDRESS1"));
				objDto.setAddress2(rset.getString("ADDRESS2"));
				objDto.setAddress3(rset.getString("ADDRESS3"));
				objDto.setPin(rset.getString("PIN"));
				objDto.setCrmOrderId(rset.getString("CRM_ORDER_ID"));
				objDto.setOrderContactId(rset.getString("ORDER_CONTACT_ID"));
				objDto.setCityId(rset.getString("CITY_ID"));
				objDto.setStateId(rset.getString("STATE_ID"));
				objDto.setCountryId(rset.getString("COUNTRY_ID"));
				objDto.setCreatedBy(rset.getString("CREATED_BY"));
				objDto.setCreationDate1(rset.getString("CREATION_DATE"));
				objDto.setLastUpdatedBy(rset.getString("LAST_UPDATED_BY"));
				objDto.setLastUpdatedDate1(rset.getString("LAST_UPDATE_DATE"));
				
				lstContactAddress.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstContactAddress.size()>0)
			{
			System.err.println("Order Address Information Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(spInsertContactAddressToIOMS2);
						
			
			for (Iterator iter = lstContactAddress.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				csIOMS.setString(1, element.getContactAddressId());
				csIOMS.setString(2, element.getAddress1());
				csIOMS.setString(3, element.getAddress2());
				csIOMS.setString(4, element.getAddress3());
				csIOMS.setString(5, element.getPin());
				csIOMS.setString(6, element.getCrmOrderId());
				csIOMS.setString(7, element.getOrderContactId());
				csIOMS.setString(8, element.getCityId());
				csIOMS.setString(9, element.getStateId());
				csIOMS.setString(10, element.getCountryId());
				csIOMS.setString(11, element.getCreationDate1());
				csIOMS.setString(12, element.getCreatedBy());
				csIOMS.setString(13, element.getLastUpdatedDate1());
				csIOMS.setString(14, element.getLastUpdatedBy());
				csIOMS.setInt(15, 0);
				csIOMS.setInt(16, 0);
				csIOMS.setString(17, "");
				csIOMS.execute();
			}
		}
			else
			{
				/*			System.err.println("Order Address Information Stored In ArrayList");	
				iomsConn.setAutoCommit(false);
				csIOMS = iomsConn.prepareCall(spInsertContactAddressToIOMS);
					
					csIOMS.setString(1, null);
					csIOMS.setString(2, null);
					csIOMS.setString(3, null);
					csIOMS.setString(4, null);
					csIOMS.setString(5, null);
					csIOMS.setString(6, orderNo);
					csIOMS.setString(7, null);
					csIOMS.setString(8, null);
					csIOMS.setString(9,null);
					csIOMS.setString(10, null);
					csIOMS.setString(11, null);
					csIOMS.setString(12,null);
					csIOMS.setString(13, null);
					csIOMS.setString(14, null);
					csIOMS.setInt(15, 0);
					csIOMS.setInt(16, 0);
					csIOMS.setString(17, "");
					csIOMS.execute();
	*/			}
				System.err.println("Order Contact Information Stored In ArrayList");	
				
				try{
					System.out.println("Connect with IOMS database");
					iomsConn2 = getConnectionObject();
					System.out.println("query ::" + strGetContactAddressFromCRM3);
					pstmt2 = crmcon2.prepareStatement(strGetContactAddressFromCRM3);
					rset2 = pstmt2.executeQuery();
					ArrayList lstContact2 = new ArrayList();
					ECRMMigrationDto objDto2= null; 
					while (rset2.next()) 
					{
						objDto2 = new ECRMMigrationDto();
						objDto2.setAccountNo(rset2.getString("ACCOUNT_NO"));
						System.out.println(rset2.getString("ACCOUNT_NO"));
						objDto2.setCrmOrderId(rset2.getString("CRM_ORDER_ID"));
						System.out.println(rset2.getString("CRM_ORDER_ID"));
						objDto2.setCreatedBy(rset2.getString("CREATED_BY"));
						System.out.println(rset2.getString("CREATED_BY"));
						
						lstContact2.add(objDto2);
						
					}
						System.err.println("Inside Function....");
						if(lstContact2.size()>0)
						{
						System.err.println("Order Contact Information Fetched And Stored In ArrayList");	
						iomsConn2.setAutoCommit(false);
						csIOMS2 = iomsConn2.prepareCall(spInsertContactAddressToIOMS3);
									
						
						for (Iterator iter = lstContact2.iterator(); iter.hasNext();) 
						{
							ECRMMigrationDto element2 = (ECRMMigrationDto) iter.next();
							System.out.println("INSIDE FOR LOOP");
							csIOMS2.setString(1, element2.getAccountNo());
							csIOMS2.setString(2, element2.getCrmOrderId());
							csIOMS2.setString(3, element2.getCreatedBy());
							csIOMS2.setInt(4, 0);
							csIOMS2.setInt(5, 0);
							csIOMS2.setString(6, "");
							csIOMS2.execute();
						}
					}
						if (csIOMS2.getInt(5) == 0) {
							iomsConn2.commit();
							isInserted = true;
							System.err.println("Contacts Updated....");
						} else {
							System.err.println("Contacts not Updated....");
							System.err.println(csIOMS2.getString(5));
							iomsConn2.rollback();
							isInserted = false;
						}
						
					} catch (Exception e) {
					System.out.println("Error in method processPartyIds()"
							+ e.getStackTrace());
					e.printStackTrace();
					} finally {
						try {
							pstmt2.close();
							rset2.close();
							iomsConn2.close();
							pstmt.close();
							rset.close();
							iomsConn.close();
						} catch (Exception e) {
							System.out.println("exeption due to : " + e.getMessage());
						}
					}

			if (csIOMS.getInt(16) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("Contact Address Updated....");
			} else {
				iomsConn.rollback();
				System.err.println("Contact Address Not Updated....");
				System.err.println(csIOMS.getString(16));
				isInserted = false;
			}

				// Long ServiceSegment = null;
			System.out.println("Values assigned processPartyIds()");
			} catch (Exception e) {
			System.out.println("Error in method processPartyIds()"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}

	public static void InsertECRMPODetailstoIOMS()//INSERT INTO TPODETAILS
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetPODetailsFromCRM);
			pstmt = crmcon.prepareStatement(strGetPODetailsFromCRM);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstPODetails = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setPoId(rset.getString("PO_ID"));
				objDto.setCrmOrderId(rset.getString("CRM_ORDER_ID"));
				objDto.setLegalEntityCode(rset.getString("LEGAL_ENTITY_CODE"));
				objDto.setTotalPOAmount(rset.getString("TOT_PO_AMT"));
				objDto.setContractPeriod(rset.getString("CONTRACT_PERIOD_MNTHS"));
				objDto.setCustPOReceiveDate(rset.getTimestamp("CUST_PO_RECEIVE_DATE"));
				objDto.setDefaultFlag(rset.getString("DEFAULT_FLAG"));
				objDto.setPoIssuingPersonName(rset.getString("PO_ISSUING_PERSON_NAME"));
				objDto.setPoPaymentTerms(rset.getString("PO_PAYMENT_TERMS"));
				objDto.setPoIssuingPersonEmail(rset.getString("PO_ISSUING_PERSON_EMAIL"));
				objDto.setDemoContractPeriod(rset.getString("DEMO_CONTRACT_PERIOD"));
				objDto.setContractStartDate(rset.getTimestamp("CONTRACT_START_DATE"));
				objDto.setContactEndDate(rset.getTimestamp("CONTRACT_END_DATE"));
				objDto.setCustPODate(rset.getTimestamp("CUST_PO_DATE"));
				objDto.setCustPONo(rset.getString("CUST_PO_NUMBER"));
				objDto.setCustPODate(rset.getTimestamp("CUST_PO_DATE"));
				objDto.setCreatedBy(rset.getString("CREATED_BY"));
				objDto.setCreationDate(rset.getTimestamp("CREATION_DATE"));
				objDto.setLastUpdatedBy(rset.getString("LAST_UPDATED_BY"));
				objDto.setLastUpdatedDate(rset.getTimestamp("LAST_UPDATE_DATE"));
				
				lstPODetails.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstPODetails.size()>0)
			{
			System.err.println("Order PO Details Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(spInsertPODetailsToIOMS);
			//SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy");		
			
			for (Iterator iter = lstPODetails.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				csIOMS.setString(1, element.getPoId());
				csIOMS.setString(2, element.getCrmOrderId());
				csIOMS.setString(3, element.getLegalEntityCode());
				csIOMS.setString(4, element.getTotalPOAmount());
				csIOMS.setString(5, element.getContractPeriod());
				csIOMS.setTimestamp(6, element.getCustPOReceiveDate());
				csIOMS.setString(7, element.getDefaultFlag());
				csIOMS.setString(8, element.getPoIssuingPersonName());
				csIOMS.setString(9, element.getPoPaymentTerms());
				csIOMS.setString(10, element.getPoIssuingPersonEmail());
				if(element.getDemoContractPeriod()==null)
				{
					csIOMS.setString(11, "0");
				}
				else
				{
					csIOMS.setString(11, element.getDemoContractPeriod());
				}
				
				if(element.getContractStartDate()==null)
				{
					csIOMS.setTimestamp(12, element.getCreationDate());
				}
				else
				{
					csIOMS.setTimestamp(12, element.getContractStartDate());
				}
				
				
				if(element.getContactEndDate()==null)
				{
					
					
					Calendar cl = Calendar.getInstance();
					cl.setTime(element.getCreationDate());
					cl.add(Calendar.MONTH,Integer.valueOf(element.getContractPeriod()));
		 
				csIOMS.setTimestamp(13, new Timestamp(cl.getTime().getTime()));
				}
				else
				{
					csIOMS.setTimestamp(13, element.getContactEndDate());
				}
				
				csIOMS.setTimestamp(14, element.getCustPODate());
				csIOMS.setString(15, element.getCustPONo());
				csIOMS.setTimestamp(16, element.getCustPODate());
				csIOMS.setTimestamp(17, element.getCreationDate());
				csIOMS.setString(18, element.getCreatedBy());
				csIOMS.setTimestamp(19, element.getLastUpdatedDate());
				csIOMS.setString(20, element.getLastUpdatedBy());
				csIOMS.setInt(21, 0);
				csIOMS.setInt(22, 0);
				csIOMS.setString(23, "");
				csIOMS.execute();
				
			}
			 

			if (csIOMS.getInt(22) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("PO Details Updated....");
			} else {
				iomsConn.rollback();
				System.err.println("PO Details Not Updated....");
				System.err.println(csIOMS.getString(22));
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("Values assigned processPartyIds()");
			} catch (Exception e) {
			System.out.println("Error in method processPartyIds()"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}

	public static void InsertECRMPODetailstoIOMS2()//INSERT INTO TPODETAILS
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetPODetailsFromCRM2);
			pstmt = crmcon.prepareStatement(strGetPODetailsFromCRM2);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstPODetails = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setPoId(rset.getString("PO_ID"));
				objDto.setCrmOrderId(rset.getString("CRM_ORDER_ID"));
				objDto.setLegalEntityCode(rset.getString("LEGAL_ENTITY_CODE"));
				objDto.setTotalPOAmount(rset.getString("TOT_PO_AMT"));
				objDto.setContractPeriod(rset.getString("CONTRACT_PERIOD_MNTHS"));
				objDto.setCustPOReceiveDate(rset.getTimestamp("CUST_PO_RECEIVE_DATE"));
				objDto.setDefaultFlag(rset.getString("DEFAULT_FLAG"));
				objDto.setPoIssuingPersonName(rset.getString("PO_ISSUING_PERSON_NAME"));
				objDto.setPoPaymentTerms(rset.getString("PO_PAYMENT_TERMS"));
				objDto.setPoIssuingPersonEmail(rset.getString("PO_ISSUING_PERSON_EMAIL"));
				objDto.setDemoContractPeriod(rset.getString("DEMO_CONTRACT_PERIOD"));
				objDto.setContractStartDate(rset.getTimestamp("CONTRACT_START_DATE"));
				objDto.setContactEndDate(rset.getTimestamp("CONTRACT_END_DATE"));
				objDto.setCustPODate(rset.getTimestamp("CUST_PO_DATE"));
				objDto.setCustPONo(rset.getString("CUST_PO_NUMBER"));
				objDto.setCustPODate(rset.getTimestamp("CUST_PO_DATE"));
				objDto.setCreatedBy(rset.getString("CREATED_BY"));
				objDto.setCreationDate(rset.getTimestamp("CREATION_DATE"));
				objDto.setLastUpdatedBy(rset.getString("LAST_UPDATED_BY"));
				objDto.setLastUpdatedDate(rset.getTimestamp("LAST_UPDATE_DATE"));
				
				lstPODetails.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstPODetails.size()>0)
			{
			System.err.println("Order PO Details Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(spInsertPODetailsToIOMS2);
			//SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy");		
			
			for (Iterator iter = lstPODetails.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				csIOMS.setString(1, element.getPoId());
				csIOMS.setString(2, element.getCrmOrderId());
				csIOMS.setString(3, element.getLegalEntityCode());
				csIOMS.setString(4, element.getTotalPOAmount());
				csIOMS.setString(5, element.getContractPeriod());
				csIOMS.setTimestamp(6, element.getCustPOReceiveDate());
				csIOMS.setString(7, element.getDefaultFlag());
				csIOMS.setString(8, element.getPoIssuingPersonName());
				csIOMS.setString(9, element.getPoPaymentTerms());
				csIOMS.setString(10, element.getPoIssuingPersonEmail());
				if(element.getDemoContractPeriod()==null)
				{
					csIOMS.setString(11, "0");
				}
				else
				{
					csIOMS.setString(11, element.getDemoContractPeriod());
				}
				
				if(element.getContractStartDate()==null)
				{
					csIOMS.setTimestamp(12, element.getCreationDate());
				}
				else
				{
					csIOMS.setTimestamp(12, element.getContractStartDate());
				}
				
				
				if(element.getContactEndDate()==null)
				{
					
					
					Calendar cl = Calendar.getInstance();
					cl.setTime(element.getCreationDate());
					cl.add(Calendar.MONTH,Integer.valueOf(element.getContractPeriod()));
		 
				csIOMS.setTimestamp(13, new Timestamp(cl.getTime().getTime()));
				}
				else
				{
					csIOMS.setTimestamp(13, element.getContactEndDate());
				}
				
				csIOMS.setTimestamp(14, element.getCustPODate());
				csIOMS.setString(15, element.getCustPONo());
				csIOMS.setTimestamp(16, element.getCustPODate());
				csIOMS.setTimestamp(17, element.getCreationDate());
				csIOMS.setString(18, element.getCreatedBy());
				csIOMS.setTimestamp(19, element.getLastUpdatedDate());
				csIOMS.setString(20, element.getLastUpdatedBy());
				csIOMS.setInt(21, 0);
				csIOMS.setInt(22, 0);
				csIOMS.setString(23, "");
				csIOMS.execute();
				
			}
			 

			if (csIOMS.getInt(22) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("PO Details Updated....");
			} else {
				iomsConn.rollback();
				System.err.println("PO Details Not Updated....");
				System.err.println(csIOMS.getString(22));
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("Values assigned processPartyIds()");
			} catch (Exception e) {
			System.out.println("Error in method processPartyIds()"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}

	public static void InsertECRMServicetoIOMS2()//insert into TPOSERVICEMASTER
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetOrderServiceFromCRM2);
			pstmt = crmcon.prepareStatement(strGetOrderServiceFromCRM2);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstService = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setServiceNo(rset.getString("SERVICE_NO"));
				objDto.setServiceType(rset.getString("M6_PRODUCT_ID"));
				objDto.setServiceStage(rset.getString("SERVICESTAGENAME"));
				objDto.setEffectiveStartDate1(rset.getString("EFFECTIVE_START_DATE"));
				objDto.setCustomerLogicalSIId(rset.getString("CUST_LOGICAL_SI_ID"));
				objDto.setEffectiveEndDate1(rset.getString("EFFECTIVE_END_DATE"));
				objDto.setProvisioningPlanId(rset.getString("PROVISIONING_PLAN_ID"));
				objDto.setRemarks(rset.getString("REMARKS"));
				objDto.setCrmOrderId(rset.getString("CRM_ORDER_ID"));
				objDto.setM6OrderId(rset.getString("M6_ORDER_ID"));
				objDto.setPreM6OrderId(rset.getString("PRE_M6_ORDER_ID"));
				objDto.setOldServiceNo(rset.getString("OLDSERVICEID"));
				objDto.setIsInHistory(rset.getString("IS_IN_HISTORY"));
				//objDto.setEventTypeId(rset.getString("EVENT_TYPE_ID"));
				//objDto.setCancelReason(rset.getString("CANCEL_REASON"));
				objDto.setServiceOrderType(rset.getString("SERVICE_ORDER_TYPE"));
				objDto.setLogicalSINo(rset.getString("LOGICAL_SI_NUMBER"));
				objDto.setCustomerLogicalSINo(rset.getString("CUST_LOGICAL_SI_NO"));
				objDto.setCreationDate1(rset.getString("CREATION_DATE"));
				objDto.setLastUpdatedDate1(rset.getString("LAST_UPDATE_DATE"));
				objDto.setCreatedBy(rset.getString("CREATED_BY"));
				objDto.setLastUpdatedBy(rset.getString("LAST_UPDATED_BY"));
				objDto.setServiceState(rset.getString("NETWORK_STATE"));
				objDto.setProcessId(rset.getString("SERVICE_STAGE"));
				objDto.setRfsDate1(rset.getString("ATTRIBUTE1"));
				objDto.setCrmProductName(rset.getString("ATTRIBUTE4"));
				objDto.setCrmSubProductName(rset.getString("ATTRIBUTE5"));
				objDto.setCustAccountId(rset.getString("CUST_ACCOUNT_ID"));
				objDto.setSubChangeTypeId(rset.getString("SUBCHANGETYPEID"));
				
				lstService.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstService.size()>0)
			{
			System.err.println("Order Service Infomation Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(spInsertOrderServiceToIOMS2);
						
			
			for (Iterator iter = lstService.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				csIOMS.setString(1, element.getServiceNo());
				csIOMS.setString(2, element.getServiceType());
				csIOMS.setString(3, element.getEffectiveStartDate1());
				csIOMS.setString(4, element.getCustomerLogicalSIId());
				csIOMS.setString(5, element.getEffectiveEndDate1());
				csIOMS.setString(6, element.getProvisioningPlanId());
				csIOMS.setString(7, element.getRemarks());
				csIOMS.setString(8, element.getCrmOrderId());
				csIOMS.setString(9, element.getM6OrderId());
				csIOMS.setString(10, element.getPreM6OrderId());
				csIOMS.setString(11, element.getEventTypeId());
				//csIOMS.setString(11, element.getCancelReason());
				csIOMS.setString(12, element.getServiceOrderType());
				csIOMS.setString(13, element.getLogicalSINo());
				csIOMS.setString(14, element.getCustomerLogicalSINo());
				csIOMS.setString(15, element.getProcessId());
				csIOMS.setString(16, element.getRfsDate1());
				csIOMS.setString(17, element.getServiceState());
				csIOMS.setString(18, element.getCreationDate1());
				csIOMS.setString(19, element.getCreatedBy());
				csIOMS.setString(20, element.getLastUpdatedDate1());
				csIOMS.setString(21, element.getLastUpdatedBy());
				csIOMS.setString(22, element.getCrmProductName());
				csIOMS.setString(23, element.getCrmSubProductName());
				csIOMS.setInt(24, 0);
				csIOMS.setInt(25, 0);
				csIOMS.setString(26, "");
				csIOMS.setString(27, element.getServiceStage());
				csIOMS.setString(28, element.getOldServiceNo());
				csIOMS.setString(29, element.getIsInHistory());
				csIOMS.setString(30, element.getOrderType());
				csIOMS.setString(31, element.getCustAccountId());
				csIOMS.setString(32, element.getSubChangeTypeId());
				
				csIOMS.execute();
			}
			 

			if (csIOMS.getInt(24) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("Service Details Updated....");
			} else {
				System.err.println("Service Details Not Updated....");
				iomsConn.rollback();
				System.err.println(csIOMS.getString(23));
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("Values assigned");
			} catch (Exception e) {
			System.out.println("Error in method"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}
	
	public static void InsertECRMServiceAttributestoIOMS2()//insert into TPRODUCTATTVALUE
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetServiceAttributesFromCRM2);
			pstmt = crmcon.prepareStatement(strGetServiceAttributesFromCRM2);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstServiceAttributes = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setM6LabelName(rset.getString("PRODUCT_ATTRIBUTE_ID"));
				objDto.setM6LabelValue(rset.getString("M6_LABEL_VALUE"));
				objDto.setServiceNo(rset.getString("SERVICE_NO"));
				objDto.setCreatedBy(rset.getString("CREATED_BY"));
				objDto.setCreationDate(rset.getTimestamp("CREATION_DATE"));
				objDto.setLastUpdatedBy(rset.getString("LAST_UPDATED_BY"));
				objDto.setLastUpdatedDate(rset.getTimestamp("LAST_UPDATE_DATE"));
			

				
				
				lstServiceAttributes.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstServiceAttributes.size()>0)
			{
			System.err.println("Service Attributes Information And Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(spInsertServiceAttributesToIOMS2);
			
						
			
			for (Iterator iter = lstServiceAttributes.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				csIOMS.setString(1, element.getM6LabelName());
				csIOMS.setString(2, element.getM6LabelValue());
				csIOMS.setString(3, element.getServiceNo());
				csIOMS.setTimestamp(4, element.getCreationDate());
				csIOMS.setString(5, element.getCreatedBy());
				csIOMS.setTimestamp(6, element.getLastUpdatedDate());
				csIOMS.setString(7, element.getLastUpdatedBy());
				csIOMS.setInt(8, 0);
				csIOMS.setInt(9, 0);
				csIOMS.setString(10, "");
				csIOMS.execute();
			}
			 

			if (csIOMS.getInt(9) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("Service Attributes Updated....");
			} else {
				iomsConn.rollback();
				System.err.println("Service Attributes Not Updated....");
				System.err.println(csIOMS.getString(9));
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("Values assigned ");
			} catch (Exception e) {
			System.out.println("Error in method"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
				System.out.println("Connection Closed....");
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}

	public static void InsertECRMServiceAttributestoIOMS()//insert into TPRODUCTATTVALUE
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetServiceAttributesFromCRM);
			pstmt = crmcon.prepareStatement(strGetServiceAttributesFromCRM);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstServiceAttributes = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setM6LabelName(rset.getString("PRODUCT_ATTRIBUTE_ID"));
				objDto.setM6LabelValue(rset.getString("M6_LABEL_VALUE"));
				objDto.setServiceNo(rset.getString("SERVICE_NO"));
				objDto.setCreatedBy(rset.getString("CREATED_BY"));
				objDto.setCreationDate(rset.getTimestamp("CREATION_DATE"));
				objDto.setLastUpdatedBy(rset.getString("LAST_UPDATED_BY"));
				objDto.setLastUpdatedDate(rset.getTimestamp("LAST_UPDATE_DATE"));
				
				lstServiceAttributes.add(objDto);
			}
			
			System.err.println("Inside Function....");
			if(lstServiceAttributes.size()>0)
			{
			System.err.println("Service Attributes Information And Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(spInsertServiceAttributesToIOMS);
			
			for (Iterator iter = lstServiceAttributes.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				csIOMS.setString(1, element.getM6LabelName());
				csIOMS.setString(2, element.getM6LabelValue());
				csIOMS.setString(3, element.getServiceNo());
				csIOMS.setTimestamp(4, element.getCreationDate());
				csIOMS.setString(5, element.getCreatedBy());
				csIOMS.setTimestamp(6, element.getLastUpdatedDate());
				csIOMS.setString(7, element.getLastUpdatedBy());
				csIOMS.setInt(8, 0);
				csIOMS.setInt(9, 0);
				csIOMS.setString(10, "");
				csIOMS.execute();
			}
			 

			if (csIOMS.getInt(9) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("Service Attributes Updated....");
			} else {
				iomsConn.rollback();
				System.err.println("Service Attributes Not Updated....");
				System.err.println(csIOMS.getString(9));
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("Values assigned ");
			} catch (Exception e) {
			System.out.println("Error in method"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
				System.out.println("Connection Closed....");
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}
	
	public static void InsertECRMOrderLinetoIOMS()//INSERT INTO TPOSERVICEDETAILS
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetOrderLineFromCRM);
			pstmt = crmcon.prepareStatement(strGetOrderLineFromCRM);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstLine = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setOrderLineId(rset.getString("ORDER_LINE_ID"));
				objDto.setServiceNo(rset.getString("SERVICE_LIST_ID"));
				objDto.setParentSpecId(rset.getString("PARENT_SPEC_ID"));	
				objDto.setChildSpecId(rset.getString("CHILD_SPEC_ID"));	
				objDto.setProductName(rset.getString("M6_PRODUCT_ID"));
				objDto.setLocDate(rset.getString("LOC_DATE"));
				objDto.setLocNo(rset.getString("LOC_NUMBER"));
				objDto.setBillingTriggerDate(rset.getString("BILLING_TRIG_DATE"));
				objDto.setParentServiceId(rset.getString("PARENT_SERVICE_KEY"));
				objDto.setBillingTriggerFlag(rset.getString("BILLING_TRIG_FLAG"));
				objDto.setCircuitId(rset.getString("CIRCUIT_ID"));
				objDto.setPriLocId(rset.getString("PRI_LOC_ID"));
				objDto.setHubLocation(rset.getString("HUBLOCATION"));
				objDto.setUom(rset.getString("UOM"));
				objDto.setLocDate(rset.getString("LOC_DATE"));
				objDto.setBillingTriggerCreateDate(rset.getString("BILL_TRG_CREATE_DATE"));
				objDto.setChallenNo(rset.getString("CHALLEN_NO"));
				objDto.setChallenDate(rset.getString("CHALLEN_DATE"));
				objDto.setChildAccountNo(rset.getString("CHILD_ACCOUNT_NUMBER"));
				objDto.setM6ChildServiceKey(rset.getString("M6CHILDSERKEY"));
				objDto.setM6ParentServiceKey(rset.getString("M6PARENTSERKEY"));
				objDto.setLineState(rset.getString("NETWORK_STAT"));
				objDto.setM6ProductId(rset.getString("M6_PRODUCT_ID"));
				objDto.setCreatedBy(rset.getString("CREATED_BY"));
				objDto.setCreationDate(rset.getTimestamp("CREATION_DATE"));
				objDto.setLastUpdatedBy(rset.getString("LAST_UPDATED_BY"));
				objDto.setLastUpdatedDate(rset.getTimestamp("LAST_UPDATE_DATE"));
				
				lstLine.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstLine.size()>0)
			{
			System.err.println("Order Line Information And Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(spInsertOrderLineToIOMS);
						
			for (Iterator iter = lstLine.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				csIOMS.setString(1, element.getOrderLineId());
				csIOMS.setString(2, element.getServiceNo());
				csIOMS.setString(3, element.getProductName());
				csIOMS.setString(4, element.getLocDate());
				csIOMS.setString(5, element.getBillingTriggerDate());
				csIOMS.setString(6, element.getLocNo());
				csIOMS.setString(7, element.getBillingTriggerCreateDate());
				csIOMS.setString(8, element.getParentServiceId());
				csIOMS.setString(9, element.getBillingTriggerFlag());
				csIOMS.setString(10, element.getChildAccountNo());
				csIOMS.setString(11, element.getM6ChildServiceKey());
				csIOMS.setString(12, element.getM6ParentServiceKey());
				csIOMS.setString(13, element.getLineState());
				csIOMS.setString(14, element.getCircuitId());
				csIOMS.setString(15, element.getPriLocId());
				csIOMS.setString(16, element.getHubLocation());
				csIOMS.setString(17,element.getUom());
				csIOMS.setString(18,element.getLocDate());
				csIOMS.setString(19, element.getChallenNo());
				csIOMS.setString(20, element.getChallenDate());
				csIOMS.setTimestamp(21, element.getCreationDate());
				csIOMS.setString(22, element.getCreatedBy());
				csIOMS.setTimestamp(23, element.getLastUpdatedDate());
				csIOMS.setString(24, element.getLastUpdatedBy());
				csIOMS.setInt(25, 0);
				csIOMS.setInt(26, 0);
				csIOMS.setString(27, "");
				csIOMS.setString(28, element.getParentSpecId());
				csIOMS.setString(29, element.getChildSpecId());
				csIOMS.execute();
				System.err.println(element.getParentSpecId() + " ------------- Checking Error.....");
			}
			 
			if (csIOMS.getInt(26) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("ORDER Line Updated....");
			} else {
				iomsConn.rollback();
				System.err.println(csIOMS.getString(26));
				System.err.println("ORDER Line Not Updated....");
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("Values assigned");
			} catch (Exception e) {
			System.out.println("Error in method "
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}
	
	public static void InsertECRMOrderLinetoIOMS2()//INSERT INTO TPOSERVICEDETAILS_L2
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetOrderLineFromCRM2);
			pstmt = crmcon.prepareStatement(strGetOrderLineFromCRM2);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstLine = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setOrderLineId(rset.getString("SERVICEPRODUCTID"));
				objDto.setServiceNo(rset.getString("SERVICEID"));
				objDto.setParentSpecId(rset.getString("PARENT_SPEC_ID"));	
				objDto.setChildSpecId(rset.getString("CHILD_SPEC_ID"));	
				objDto.setProductName(rset.getString("SERVICEDETAILID"));
				objDto.setLocDate(rset.getString("LOCDATE"));
				objDto.setLocNo(rset.getString("LOCNO"));
				objDto.setBillingTriggerDate(rset.getString("BILLINGTRIGGERDATE"));
				objDto.setParentServiceId(rset.getString("PARENT_SERVICEPRODUCTID"));
				objDto.setBillingTriggerFlag(rset.getString("BILLING_TRIGGER_STATUS"));
				objDto.setCircuitId(rset.getString("CKTID"));
				objDto.setPriLocId(rset.getString("PRILOC"));
				objDto.setHubLocation(rset.getString("HUBLOC"));
				objDto.setUom(rset.getString("UOM"));
				objDto.setPmProvisioningDate(rset.getString("PM_PROV_DATE"));
				objDto.setBillingTriggerCreateDate(rset.getString("BILLING_TRIGGER_CREATEDATE"));
				objDto.setChallenNo(rset.getString("CHALLEN_NO"));
				objDto.setChallenDate(rset.getString("CHALLEN_DATE"));
				objDto.setChildAccountNo(rset.getString("FX_ACCOUNT_EXTERNAL_ID"));
				objDto.setM6ChildServiceKey(rset.getString("M6CHILDSERKEY"));
				objDto.setM6ParentServiceKey(rset.getString("M6PARENTSERKEY"));
				objDto.setLineState(rset.getString("NETWORK_STAT"));
				objDto.setM6ProductId(rset.getString("SERVICEDETAILID"));
				objDto.setCreatedBy(rset.getString("CREATEDBY"));
				objDto.setCreationDate(rset.getTimestamp("CREATED_DATE"));
				objDto.setLastUpdatedBy(rset.getString("MODIFIEDBY"));
				objDto.setLastUpdatedDate(rset.getTimestamp("MODIFIEDDATE"));
				objDto.setLineStatus(rset.getString("LINE_STATUS"));
				
				objDto.setOldServiceProductId(rset.getString("OLD_SERVICEPRODUCTID"));
				objDto.setIsDisconnected(rset.getString("IS_DISCONNECTION"));
				objDto.setIsSuspended(rset.getString("IS_SUSPENDED"));
				objDto.setChangeOrderNo(rset.getString("CHANGE_ORDERNO"));
				objDto.setSubChangeTypeId(rset.getString("SUBCHANGETYPEID"));
				objDto.setCreatedDate(rset.getString("CREATEDDATE"));
				objDto.setModifiedDate(rset.getString("MODIFIED_DATE"));
				//objDto.setModifiedBy(rset.getString("MODIFIEDBY"));
				objDto.setChangeServiceId(rset.getString("CHANGE_SERVICEID"));
				objDto.setChangeParentSPId(rset.getString("CHANGE_PARENT_SPID"));
				objDto.setAdditionalNode(rset.getString("ADDITIONALNODE"));
				objDto.setForBillingTrigger(rset.getString("FOR_BILLINGTRIGGER"));
				objDto.setM6_ATT_FX_CHANGED(rset.getString("M6_ATT_FX_CHANGED"));
				objDto.setServiceActiveDT(rset.getString("SERVICEACTIVEDT"));
				objDto.setCrmOrderId(rset.getString("CRM_ORDER_ID"));
				objDto.setParentServiceKey(rset.getString("PARENT_SERVICE_KEY"));
				objDto.setChildServiceKey(rset.getString("CHILD_SERVICE_KEY"));
				objDto.setLocRecDate(rset.getString("LOC_REC_DATE"));

				lstLine.add(objDto);
			}
			
			System.err.println("Inside Function....");
			if(lstLine.size()>0)
			{
			System.err.println("Order Line Information And Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(spInsertOrderLineToIOMS2);
						
			for (Iterator iter = lstLine.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				csIOMS.setString(1, element.getOrderLineId());
				csIOMS.setString(2, element.getServiceNo());
				csIOMS.setString(3, element.getProductName());
				csIOMS.setString(4, element.getLocDate());
				csIOMS.setString(5, element.getBillingTriggerDate());
				csIOMS.setString(6, element.getLocNo());
				csIOMS.setString(7, element.getBillingTriggerCreateDate());
				csIOMS.setString(8, element.getParentServiceId());
				csIOMS.setString(9, element.getBillingTriggerFlag());
				csIOMS.setString(10, element.getChildAccountNo());
				csIOMS.setString(11, element.getM6ChildServiceKey());
				csIOMS.setString(12, element.getM6ParentServiceKey());
				csIOMS.setString(13, element.getLineState());
				csIOMS.setString(14, element.getCircuitId());
				csIOMS.setString(15, element.getPriLocId());
				csIOMS.setString(16, element.getHubLocation());
				csIOMS.setString(17,element.getUom());
				csIOMS.setString(18,element.getPmProvisioningDate());
				csIOMS.setString(19, element.getChallenNo());
				csIOMS.setString(20, element.getChallenDate());
				csIOMS.setTimestamp(21, element.getCreationDate());
				csIOMS.setString(22, element.getCreatedBy());
				csIOMS.setTimestamp(23, element.getLastUpdatedDate());
				csIOMS.setString(24, element.getLastUpdatedBy());
				csIOMS.setInt(25, 0);
				csIOMS.setInt(26, 0);
				csIOMS.setString(27, "");
				csIOMS.setString(28, element.getParentSpecId());
				csIOMS.setString(29, element.getChildSpecId());
				csIOMS.setString(30, element.getLineStatus());
				csIOMS.setString(31, element.getOldServiceProductId());
				csIOMS.setString(32, element.getIsDisconnected());
				csIOMS.setString(33, element.getIsSuspended());
				csIOMS.setString(34, element.getChangeOrderNo());
				csIOMS.setString(35, element.getSubChangeTypeId());
				csIOMS.setString(36, element.getCreatedDate());
				csIOMS.setString(37, element.getModifiedDate());
				//csIOMS.setString(38, element.getModifiedBy());
				csIOMS.setString(38, element.getChangeServiceId());
				csIOMS.setString(39, element.getChangeParentSPId());
				csIOMS.setString(40, element.getAdditionalNode());
				csIOMS.setString(41, element.getForBillingTrigger());
				csIOMS.setString(42, element.getM6_ATT_FX_CHANGED());
				csIOMS.setString(43, element.getServiceActiveDT());
				csIOMS.setString(44, element.getCrmOrderId());
				csIOMS.setString(45, element.getParentServiceKey());
				csIOMS.setString(46, element.getChildServiceKey());
				csIOMS.setString(47, element.getLocRecDate());
				
				csIOMS.execute();
				System.err.println(element.getParentSpecId() + " ------------- Checking Error.....");
			}
			 
			if (csIOMS.getInt(26) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("ORDER Line Updated....");
			} else {
				iomsConn.rollback();
				System.err.println(csIOMS.getString(26));
				System.err.println("ORDER Line Not Updated....");
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("Values assigned");
			} catch (Exception e) {
			System.out.println("Error in method "
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}

	public static void InsertECRMOrderLinetoIOMS3()//INSERT INTO TPOSERVICEDETAILS_HISTORY
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetOrderLineFromCRM3);
			pstmt = crmcon.prepareStatement(strGetOrderLineFromCRM3);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstLine = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setOrderLineId(rset.getString("SERVICEPRODUCTID"));
				objDto.setServiceNo(rset.getString("SERVICEID"));
				objDto.setParentSpecId(rset.getString("PARENT_SPEC_ID"));	
				objDto.setChildSpecId(rset.getString("CHILD_SPEC_ID"));	
				objDto.setProductName(rset.getString("SERVICEDETAILID"));
				objDto.setLocDate(rset.getString("LOCDATE"));
				objDto.setLocNo(rset.getString("LOCNO"));
				objDto.setBillingTriggerDate(rset.getString("BILLINGTRIGGERDATE"));
				objDto.setParentServiceId(rset.getString("PARENT_SERVICEPRODUCTID"));
				objDto.setBillingTriggerFlag(rset.getString("BILLING_TRIGGER_STATUS"));
				objDto.setCircuitId(rset.getString("CKTID"));
				objDto.setPriLocId(rset.getString("PRILOC"));
				objDto.setHubLocation(rset.getString("HUBLOC"));
				objDto.setUom(rset.getString("UOM"));
				objDto.setPmProvisioningDate(rset.getString("PM_PROV_DATE"));
				objDto.setBillingTriggerCreateDate(rset.getString("BILLING_TRIGGER_CREATEDATE"));
				objDto.setChallenNo(rset.getString("CHALLEN_NO"));
				objDto.setChallenDate(rset.getString("CHALLEN_DATE"));
				objDto.setChildAccountNo(rset.getString("FX_ACCOUNT_EXTERNAL_ID"));
				objDto.setM6ChildServiceKey(rset.getString("M6CHILDSERKEY"));
				objDto.setM6ParentServiceKey(rset.getString("M6PARENTSERKEY"));
				objDto.setLineState(rset.getString("NETWORK_STAT"));
				objDto.setM6ProductId(rset.getString("SERVICEDETAILID"));
				objDto.setCreatedBy(rset.getString("CREATEDBY"));
				objDto.setCreationDate(rset.getTimestamp("CREATED_DATE"));
				objDto.setLastUpdatedBy(rset.getString("MODIFIEDBY"));
				objDto.setLastUpdatedDate(rset.getTimestamp("MODIFIEDDATE"));
				objDto.setLineStatus(rset.getString("LINE_STATUS"));
				
				objDto.setOldServiceProductId(rset.getString("OLD_SERVICEPRODUCTID"));
				objDto.setIsDisconnected(rset.getString("IS_DISCONNECTION"));
				objDto.setIsSuspended(rset.getString("IS_SUSPENDED"));
				objDto.setChangeOrderNo(rset.getString("CHANGE_ORDERNO"));
				objDto.setSubChangeTypeId(rset.getString("SUBCHANGETYPEID"));
				objDto.setCreatedDate(rset.getString("CREATEDDATE"));
				objDto.setModifiedDate(rset.getString("MODIFIED_DATE"));
				//objDto.setModifiedBy(rset.getString("MODIFIEDBY"));
				objDto.setChangeServiceId(rset.getString("CHANGE_SERVICEID"));
				objDto.setChangeParentSPId(rset.getString("CHANGE_PARENT_SPID"));
				objDto.setAdditionalNode(rset.getString("ADDITIONALNODE"));
				objDto.setForBillingTrigger(rset.getString("FOR_BILLINGTRIGGER"));
				objDto.setM6_ATT_FX_CHANGED(rset.getString("M6_ATT_FX_CHANGED"));
				objDto.setServiceActiveDT(rset.getString("SERVICEACTIVEDT"));
				objDto.setCrmOrderId(rset.getString("CRM_ORDER_ID"));
				objDto.setParentServiceKey(rset.getString("PARENT_SERVICE_KEY"));
				objDto.setChildServiceKey(rset.getString("CHILD_SERVICE_KEY"));
				objDto.setMainServiceId(rset.getString("MAIN_SERVICE_ID"));
				objDto.setLocRecDate(rset.getString("LOC_REC_DATE"));

				//objDto.setChangeServiceProductId(rset.getString("CHANGE_SERVICE_PRODUCT_ID"));

				lstLine.add(objDto);
			}
			
			System.err.println("Inside Function....");
			if(lstLine.size()>0)
			{
			System.err.println("Order Line Information And Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(spInsertOrderLineToIOMS3);
						
			for (Iterator iter = lstLine.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				csIOMS.setString(1, element.getOrderLineId());
				csIOMS.setString(2, element.getServiceNo());
				csIOMS.setString(3, element.getProductName());
				csIOMS.setString(4, element.getLocDate());
				csIOMS.setString(5, element.getBillingTriggerDate());
				csIOMS.setString(6, element.getLocNo());
				csIOMS.setString(7, element.getBillingTriggerCreateDate());
				csIOMS.setString(8, element.getParentServiceId());
				csIOMS.setString(9, element.getBillingTriggerFlag());
				csIOMS.setString(10, element.getChildAccountNo());
				csIOMS.setString(11, element.getM6ChildServiceKey());
				csIOMS.setString(12, element.getM6ParentServiceKey());
				csIOMS.setString(13, element.getLineState());
				csIOMS.setString(14, element.getCircuitId());
				csIOMS.setString(15, element.getPriLocId());
				csIOMS.setString(16, element.getHubLocation());
				csIOMS.setString(17,element.getUom());
				csIOMS.setString(18,element.getPmProvisioningDate());
				csIOMS.setString(19, element.getChallenNo());
				csIOMS.setString(20, element.getChallenDate());
				csIOMS.setTimestamp(21, element.getCreationDate());
				csIOMS.setString(22, element.getCreatedBy());
				csIOMS.setTimestamp(23, element.getLastUpdatedDate());
				csIOMS.setString(24, element.getLastUpdatedBy());
				csIOMS.setInt(25, 0);
				csIOMS.setInt(26, 0);
				csIOMS.setString(27, "");
				csIOMS.setString(28, element.getParentSpecId());
				csIOMS.setString(29, element.getChildSpecId());
				csIOMS.setString(30, element.getLineStatus());
				csIOMS.setString(31, element.getOldServiceProductId());
				csIOMS.setString(32, element.getIsDisconnected());
				csIOMS.setString(33, element.getIsSuspended());
				csIOMS.setString(34, element.getChangeOrderNo());
				csIOMS.setString(35, element.getSubChangeTypeId());
				csIOMS.setString(36, element.getCreatedDate());
				csIOMS.setString(37, element.getModifiedDate());
				//csIOMS.setString(38, element.getModifiedBy());
				csIOMS.setString(38, element.getChangeServiceId());
				csIOMS.setString(39, element.getChangeParentSPId());
				csIOMS.setString(40, element.getAdditionalNode());
				csIOMS.setString(41, element.getForBillingTrigger());
				csIOMS.setString(42, element.getM6_ATT_FX_CHANGED());
				csIOMS.setString(43, element.getServiceActiveDT());
				csIOMS.setString(44, element.getCrmOrderId());
				csIOMS.setString(45, element.getParentServiceKey());
				csIOMS.setString(46, element.getChildServiceKey());
				csIOMS.setString(47, element.getMainServiceId());
				csIOMS.setString(48, element.getLocRecDate());
				
				csIOMS.execute();
				System.err.println(element.getParentSpecId() + " ------------- Checking Error.....");
			}
			 
			if (csIOMS.getInt(26) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("ORDER Line Updated....");
			} else {
				iomsConn.rollback();
				System.err.println(csIOMS.getString(26));
				System.err.println("ORDER Line Not Updated....");
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("Values assigned");
			} catch (Exception e) {
			System.out.println("Error in method "
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}

	public static void InsertECRMOrderLinetoIOMS4()//INSERT INTO TDISCONNECTION_HISTORY
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetOrderLineFromCRM4);
			pstmt = crmcon.prepareStatement(strGetOrderLineFromCRM4);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstLine = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setCrmOrderId(rset.getString("ORDERNO"));
				objDto.setServiceNo(rset.getString("SERVICEID"));
				objDto.setChangeServiceId(rset.getString("CHANGE_SERVICEID"));	
				objDto.setServiceProductId(rset.getString("SERVICEPRODUCTID"));	
				objDto.setChangeServiceProductId(rset.getString("CHANGE_SERVICE_PRODUCT_ID"));
				objDto.setOrderType(rset.getString("ORDER_TYPE"));
				objDto.setParentServiceId(rset.getString("PARENT_SPID"));
				objDto.setIsDisconnected(rset.getString("IS_DISCONNECTION"));
				objDto.setDisconnectionInCurrentOrder(rset.getString("DISCONNECTION_IN_CURRENT_ORDER"));
				objDto.setModifiedAt(rset.getString("MODIFIED_AT"));
				objDto.setIsSuspended(rset.getString("IS_SUSPENDED"));
				objDto.setResumeInCurrentOrder(rset.getString("RESUME_IN_CURRENT_ORDER"));
				objDto.setChangeTypeId(rset.getString("CHANGETYPEID"));
				objDto.setSubChangeTypeId(rset.getString("SUBCHANGETYPEID"));
				objDto.setMainServiceId(rset.getString("MAIN_SERVICE_ID"));
				objDto.setIsInHistory(rset.getString("IS_IN_HISTORY"));
				
				lstLine.add(objDto);
			}
			
			System.err.println("Inside Function....");
			if(lstLine.size()>0)
			{
			System.err.println("Order Line Information And Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(spInsertOrderLineToIOMS4);
						
			for (Iterator iter = lstLine.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				csIOMS.setString(1, element.getCrmOrderId());
				csIOMS.setString(2, element.getServiceNo());
				csIOMS.setString(3, element.getChangeServiceId());
				csIOMS.setString(4, element.getServiceProductId());
				csIOMS.setString(5, element.getChangeServiceProductId());
				csIOMS.setString(6, element.getOrderType());
				csIOMS.setString(7, element.getParentServiceId());
				csIOMS.setString(8, element.getIsDisconnected());
				csIOMS.setString(9, element.getDisconnectionInCurrentOrder());
				csIOMS.setString(10, element.getModifiedAt());
				csIOMS.setString(11, element.getIsSuspended());
				csIOMS.setString(12, element.getResumeInCurrentOrder());
				csIOMS.setString(13, element.getChangeTypeId());
				csIOMS.setString(14, element.getSubChangeTypeId());
				csIOMS.setString(15, element.getMainServiceId());
				csIOMS.setString(16, element.getIsInHistory());
				csIOMS.setInt(17, 0);
				csIOMS.setInt(18, 0);
				csIOMS.setString(19, "");
								
				csIOMS.execute();
				System.err.println(element.getParentSpecId() + " ------------- Checking Error.....");
			}
			 
			if (csIOMS.getInt(18) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("ORDER Line Updated....");
			} else {
				iomsConn.rollback();
				System.err.println(csIOMS.getString(18));
				System.err.println("ORDER Line Not Updated....");
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("Values assigned");
			} catch (Exception e) {
			System.out.println("Error in method "
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}

	public static void InsertECRMLineAttributestoIOMS()//INSERT INTO TPRODUCTLINEATTVALUE
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetLineAttributesFromCRM);
			pstmt = crmcon.prepareStatement(strGetLineAttributesFromCRM);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstLineAttributes = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setM6LabelName(rset.getString("PRODUCT_ATTRIBUTE_ID"));
				objDto.setM6LabelValue(rset.getString("M6_LABEL_VALUE"));
				objDto.setOrderLineId(rset.getString("ORDER_LINE_NO"));
				objDto.setCreatedBy(rset.getString("CREATED_BY"));
				objDto.setCreationDate(rset.getTimestamp("CREATION_DATE"));
				objDto.setLastUpdatedBy(rset.getString("LAST_UPDATED_BY"));
				objDto.setLastUpdatedDate(rset.getTimestamp("LAST_UPDATE_DATE"));
				objDto.setIsLov(rset.getString("VALIDATE_LOV"));
				
				lstLineAttributes.add(objDto);
			}
			
			System.err.println("Inside Function....");
			if(lstLineAttributes.size()>0)
			{
			System.err.println("Service Summary Fetched And Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(spInsertLineAttributesToIOMS);
						
			
			for (Iterator iter = lstLineAttributes.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				csIOMS.setString(1, element.getM6LabelName());
				csIOMS.setString(2, element.getM6LabelValue());
				csIOMS.setString(3, element.getOrderLineId());
				csIOMS.setTimestamp(4, element.getCreationDate());
				csIOMS.setString(5, element.getCreatedBy());
				csIOMS.setTimestamp(6, element.getLastUpdatedDate());
				csIOMS.setString(7, element.getLastUpdatedBy());
				csIOMS.setInt(8, 0);
				csIOMS.setInt(9, 0);
				csIOMS.setString(10, "");
				csIOMS.setString(11,element.getIsLov());
				csIOMS.execute();
			}
			 

			if (csIOMS.getInt(9) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("Line Attributes Updated....");
			} else {
				iomsConn.rollback();
				System.err.println(csIOMS.getString(9));
				System.err.println("Line Attributes Not Updated....");
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("Values assigned processPartyIds()");
			} catch (Exception e) {
			System.out.println("Error in method processPartyIds()"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}
	
	public static void InsertECRMLineAttributestoIOMS2()//INSERT INTO TPRODUCTLINEATTVALUE
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetLineAttributesFromCRM2);
			pstmt = crmcon.prepareStatement(strGetLineAttributesFromCRM2);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstLineAttributes = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setM6LabelName(rset.getString("PRODUCT_ATTRIBUTE_ID"));
				objDto.setM6LabelValue(rset.getString("M6_LABEL_VALUE"));
				objDto.setOrderLineId(rset.getString("ORDER_LINE_NO"));
				objDto.setCreatedBy(rset.getString("CREATED_BY"));
				objDto.setCreationDate(rset.getTimestamp("CREATION_DATE"));
				objDto.setLastUpdatedBy(rset.getString("LAST_UPDATED_BY"));
				objDto.setLastUpdatedDate(rset.getTimestamp("LAST_UPDATE_DATE"));
				objDto.setIsLov(rset.getString("VALIDATE_LOV"));
				
				
				lstLineAttributes.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstLineAttributes.size()>0)
			{
			System.err.println("Service Summary Fetched And Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(spInsertLineAttributesToIOMS2);
						
			
			for (Iterator iter = lstLineAttributes.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				csIOMS.setString(1, element.getM6LabelName());
				csIOMS.setString(2, element.getM6LabelValue());
				csIOMS.setString(3, element.getOrderLineId());
				csIOMS.setTimestamp(4, element.getCreationDate());
				csIOMS.setString(5, element.getCreatedBy());
				csIOMS.setTimestamp(6, element.getLastUpdatedDate());
				csIOMS.setString(7, element.getLastUpdatedBy());
				csIOMS.setInt(8, 0);
				csIOMS.setInt(9, 0);
				csIOMS.setString(10, "");
				csIOMS.setString(11,element.getIsLov());
				csIOMS.execute();
			}
			 

			if (csIOMS.getInt(9) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("Line Attributes Updated....");
			} else {
				iomsConn.rollback();
				System.err.println(csIOMS.getString(9));
				System.err.println("Line Attributes Not Updated....");
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("Values assigned processPartyIds()");
			} catch (Exception e) {
			System.out.println("Error in method processPartyIds()"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}

	public static void InsertECRMLineAttributestoIOMS3()//INSERT INTO TPRODUCTLINEATTVALUE_HISTORY
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetLineAttributesFromCRM3);
			pstmt = crmcon.prepareStatement(strGetLineAttributesFromCRM3);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstLineAttributes = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setM6LabelName(rset.getString("PRODUCT_ATTRIBUTE_ID"));
				objDto.setAttValue(rset.getString("ATTVALUE"));
				objDto.setOrderLineId(rset.getString("ORDER_LINE_NO"));
				objDto.setCreatedBy(rset.getString("CREATED_BY"));
				objDto.setCreationDate(rset.getTimestamp("CREATION_DATE"));
				objDto.setLastUpdatedBy(rset.getString("LAST_UPDATED_BY"));
				objDto.setLastUpdatedDate(rset.getTimestamp("LAST_UPDATE_DATE"));
				objDto.setIsLov(rset.getString("VALIDATE_LOV"));
				objDto.setCrmOrderId(rset.getString("ORDERNO"));
				objDto.setAttNewValue(rset.getString("ATTVALUE_NEW"));
				objDto.setOrderType(rset.getString("ORDERTYPE"));
				
				
				
				lstLineAttributes.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstLineAttributes.size()>0)
			{
			System.err.println("Service Summary Fetched And Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(spInsertLineAttributesToIOMS3);
						
			
			for (Iterator iter = lstLineAttributes.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				csIOMS.setString(1, element.getM6LabelName());
				csIOMS.setString(2, element.getAttValue());
				csIOMS.setString(3, element.getOrderLineId());
				csIOMS.setTimestamp(4, element.getCreationDate());
				csIOMS.setString(5, element.getCreatedBy());
				csIOMS.setTimestamp(6, element.getLastUpdatedDate());
				csIOMS.setString(7, element.getLastUpdatedBy());
				csIOMS.setInt(8, 0);
				csIOMS.setInt(9, 0);
				csIOMS.setString(10, "");
				csIOMS.setString(11,element.getIsLov());
				csIOMS.setString(12, element.getCrmOrderId());
				csIOMS.setString(13, element.getAttNewValue());
				csIOMS.setString(14, element.getOrderType());
				csIOMS.execute();
			}
			 

			if (csIOMS.getInt(9) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("Line Attributes Updated....");
			} else {
				iomsConn.rollback();
				System.err.println(csIOMS.getString(9));
				System.err.println("Line Attributes Not Updated....");
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("Values assigned processPartyIds()");
			} catch (Exception e) {
			System.out.println("Error in method processPartyIds()"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}

	public static void InsertECRMChargesHeaderBillingInfotoIOMS()//INSERT INTO TBILLING_INFO
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetChargesHeaderFromCRM);
			pstmt = crmcon.prepareStatement(strGetChargesHeaderFromCRM);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstBillingInfo = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setBillingInfoId(rset.getString("CHARGE_HDR_ID"));
				objDto.setPoId(rset.getString("PO_ID"));
				objDto.setCustAccountId(rset.getString("CUST_ACCOUNT_ID"));
				objDto.setCreditPeriod(rset.getString("CREDIT_PERIOD"));
				objDto.setLegalEntityCode(rset.getString("LEGAL_ENTITY_CODE"));
				objDto.setBillingMode(rset.getString("BILLING_MODE"));
				objDto.setBillFormat(rset.getString("BILL_FORMAT"));
				objDto.setLicenceCompany(rset.getString("LICENCE_COMPANY"));
				objDto.setTaxation(rset.getString("TAXATION"));
				objDto.setBillingLevel(rset.getString("BILLING_LEVEL"));
				objDto.setCommitmentPeriod(rset.getString("COMMITMENT_PERIOD"));
				objDto.setPenaltyCause(rset.getString("PENELTY_CLAUSE"));
				objDto.setOrderLineId(rset.getString("ORDER_LINE_ID"));
				objDto.setBillType(rset.getString("BILL_TYPE"));
				objDto.setBillingAddressId(rset.getString("BILLING_ADDRESS_ID"));
				objDto.setBillingLevelNo(rset.getString("BILLING_LEVEL_NUMBER"));
				objDto.setNoticePeriod(rset.getString("NOTICE_PERIOD"));
				objDto.setCreatedBy(rset.getString("CREATED_BY"));
				objDto.setCreationDate1(rset.getString("CREATION_DATE"));
				objDto.setLastUpdatedBy(rset.getString("LAST_UPDATED_BY"));
				objDto.setLastUpdatedDate1(rset.getString("LAST_UPDATE_DATE"));
				
				lstBillingInfo.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstBillingInfo.size()>0)
			{
			System.err.println("Charge Header Information And Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(spInsertChargesHeaderToIOMS);
						
			
			for (Iterator iter = lstBillingInfo.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				
				csIOMS.setString(1, element.getPoId());
				csIOMS.setString(2, element.getCustAccountId());
				csIOMS.setString(3, element.getCreditPeriod());
				csIOMS.setString(4, element.getLegalEntityCode());
				csIOMS.setString(5, element.getBillingMode());
				csIOMS.setString(6, element.getBillFormat());
				csIOMS.setString(7, element.getLicenceCompany());
				csIOMS.setString(8, element.getTaxation());
				csIOMS.setString(9, element.getBillingLevel());
				csIOMS.setString(10, element.getCommitmentPeriod());
				csIOMS.setString(11, element.getPenaltyCause());
				csIOMS.setString(12, element.getOrderLineId());
				csIOMS.setString(13, element.getBillType());
				csIOMS.setString(14, element.getBillingAddressId());
				csIOMS.setString(15, element.getBillingLevelNo());
				csIOMS.setString(16, element.getNoticePeriod());
				csIOMS.setString(17, element.getCreationDate1());
				csIOMS.setString(18, element.getCreatedBy());
				csIOMS.setString(19, element.getLastUpdatedDate1());
				csIOMS.setString(20, element.getLastUpdatedBy());
				csIOMS.setString(21,element.getBillingInfoId());
				csIOMS.setInt(22, 0);
				csIOMS.setInt(23, 0);
				csIOMS.setString(24, "");
				csIOMS.execute();
			}
			 

			if (csIOMS.getInt(23) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("Billing Header Updated....");
			} else {
				iomsConn.rollback();
				System.err.println(csIOMS.getString(23));
				System.err.println("Billing Header Not Updated....");
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("Values assigned processPartyIds()");
			} catch (Exception e) {
			System.out.println("Error in method processPartyIds()"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}

	public static void InsertECRMChargesHeaderBillingInfotoIOMS2()//INSERT INTO TBILLING_INFO
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetChargesHeaderFromCRM2);
			pstmt = crmcon.prepareStatement(strGetChargesHeaderFromCRM2);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstBillingInfo = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setBillingInfoId(rset.getString("CHARGE_HDR_ID"));
				objDto.setPoId(rset.getString("PO_ID"));
				objDto.setCustAccountId(rset.getString("CUST_ACCOUNT_ID"));
				objDto.setCreditPeriod(rset.getString("CREDIT_PERIOD"));
				objDto.setLegalEntityCode(rset.getString("LEGAL_ENTITY_CODE"));
				objDto.setBillingMode(rset.getString("BILLING_MODE"));
				objDto.setBillFormat(rset.getString("BILL_FORMAT"));
				objDto.setLicenceCompany(rset.getString("LICENCE_COMPANY"));
				objDto.setTaxation(rset.getString("TAXATION"));
				objDto.setBillingLevel(rset.getString("BILLING_LEVEL"));
				objDto.setCommitmentPeriod(rset.getString("COMMITMENT_PERIOD"));
				objDto.setPenaltyCause(rset.getString("PENELTY_CLAUSE"));
				objDto.setOrderLineId(rset.getString("ORDER_LINE_ID"));
				objDto.setBillType(rset.getString("BILL_TYPE"));
				objDto.setBillingAddressId(rset.getString("BILLING_ADDRESS_ID"));
				objDto.setBillingLevelNo(rset.getString("BILLING_LEVEL_NUMBER"));
				objDto.setNoticePeriod(rset.getString("NOTICE_PERIOD"));
				objDto.setCreatedBy(rset.getString("CREATED_BY"));
				objDto.setCreationDate1(rset.getString("CREATION_DATE"));
				objDto.setLastUpdatedBy(rset.getString("LAST_UPDATED_BY"));
				objDto.setLastUpdatedDate1(rset.getString("LAST_UPDATE_DATE"));
				objDto.setStdReasonId(rset.getString("STDREASION_ID"));
				objDto.setOrderNo(rset.getString("CRM_ORDER_ID"));
				objDto.setLogicalSINo(rset.getString("LOGICAL_SI_NUMBER"));
				objDto.setLetestSelectedPoDetailID(rset.getString("LATEST_SELECTED_PODETAILID"));//Added by Ashutosh
				
				
				lstBillingInfo.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstBillingInfo.size()>0)
			{
			System.err.println("Charge Header Information And Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(spInsertChargesHeaderToIOMS2);
						
			
			for (Iterator iter = lstBillingInfo.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				
				csIOMS.setString(1, element.getPoId());
				csIOMS.setString(2, element.getCustAccountId());
				csIOMS.setString(3, element.getCreditPeriod());
				csIOMS.setString(4, element.getLegalEntityCode());
				csIOMS.setString(5, element.getBillingMode());
				csIOMS.setString(6, element.getBillFormat());
				csIOMS.setString(7, element.getLicenceCompany());
				csIOMS.setString(8, element.getTaxation());
				csIOMS.setString(9, element.getBillingLevel());
				csIOMS.setString(10, element.getCommitmentPeriod());
				csIOMS.setString(11, element.getPenaltyCause());
				csIOMS.setString(12, element.getOrderLineId());
				csIOMS.setString(13, element.getBillType());
				csIOMS.setString(14, element.getBillingAddressId());
				csIOMS.setString(15, element.getBillingLevelNo());
				csIOMS.setString(16, element.getNoticePeriod());
				csIOMS.setString(17, element.getCreationDate1());
				csIOMS.setString(18, element.getCreatedBy());
				csIOMS.setString(19, element.getLastUpdatedDate1());
				csIOMS.setString(20, element.getLastUpdatedBy());
				csIOMS.setString(21,element.getBillingInfoId());
				csIOMS.setInt(22, 0);
				csIOMS.setInt(23, 0);
				csIOMS.setString(24, "");
				csIOMS.setString(25, element.getStdReasonId());
				csIOMS.setString(26, element.getOrderNo());
				csIOMS.setString(27, element.getLogicalSINo());
				csIOMS.setString(28, element.getLetestSelectedPoDetailID());//Added by Ashutosh
				
				csIOMS.execute();
			}
			 

			if (csIOMS.getInt(23) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("Billing Header Updated....");
			} else {
				iomsConn.rollback();
				System.err.println(csIOMS.getString(23));
				System.err.println("Billing Header Not Updated....");
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("Values assigned processPartyIds()");
			} catch (Exception e) {
			System.out.println("Error in method processPartyIds()"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}

	public static void InsertECRMChargesHeaderBillingInfotoIOMS3()//INSERT INTO TBILLING_INFO_HISTORY
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetChargesHeaderFromCRM3);
			pstmt = crmcon.prepareStatement(strGetChargesHeaderFromCRM3);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstBillingInfo = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setBillingInfoId(rset.getString("CHARGE_HDR_ID"));
				objDto.setPoId(rset.getString("PO_ID"));
				objDto.setCustAccountId(rset.getString("CUST_ACCOUNT_ID"));
				objDto.setCreditPeriod(rset.getString("CREDIT_PERIOD"));
				objDto.setLegalEntityCode(rset.getString("LEGAL_ENTITY_CODE"));
				objDto.setBillingMode(rset.getString("BILLING_MODE"));
				objDto.setBillFormat(rset.getString("BILL_FORMAT"));
				objDto.setLicenceCompany(rset.getString("LICENCE_COMPANY"));
				objDto.setTaxation(rset.getString("TAXATION"));
				objDto.setBillingLevel(rset.getString("BILLING_LEVEL"));
				objDto.setCommitmentPeriod(rset.getString("COMMITMENT_PERIOD"));
				objDto.setPenaltyCause(rset.getString("PENELTY_CLAUSE"));
				objDto.setOrderLineId(rset.getString("ORDER_LINE_ID"));
				objDto.setBillType(rset.getString("BILL_TYPE"));
				objDto.setBillingAddressId(rset.getString("BILLING_ADDRESS_ID"));
				objDto.setBillingLevelNo(rset.getString("BILLING_LEVEL_NUMBER"));
				objDto.setNoticePeriod(rset.getString("NOTICE_PERIOD"));
				objDto.setCreatedBy(rset.getString("CREATED_BY"));
				objDto.setCreationDate1(rset.getString("CREATION_DATE"));
				objDto.setLastUpdatedBy(rset.getString("LAST_UPDATED_BY"));
				objDto.setLastUpdatedDate1(rset.getString("LAST_UPDATE_DATE"));
				objDto.setServiceNo(rset.getString("MAIN_SERVICE_ID"));
				objDto.setStdReasonId(rset.getString("STDREASION_ID"));
				objDto.setOrderNo(rset.getString("CRM_ORDER_ID"));
				objDto.setLogicalSINo(rset.getString("LOGICAL_SI_NUMBER"));
				
				lstBillingInfo.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstBillingInfo.size()>0)
			{
			System.err.println("Charge Header Information And Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(spInsertChargesHeaderToIOMS3);
						
			
			for (Iterator iter = lstBillingInfo.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				
				csIOMS.setString(1, element.getPoId());
				csIOMS.setString(2, element.getCustAccountId());
				csIOMS.setString(3, element.getCreditPeriod());
				csIOMS.setString(4, element.getLegalEntityCode());
				csIOMS.setString(5, element.getBillingMode());
				csIOMS.setString(6, element.getBillFormat());
				csIOMS.setString(7, element.getLicenceCompany());
				csIOMS.setString(8, element.getTaxation());
				csIOMS.setString(9, element.getBillingLevel());
				csIOMS.setString(10, element.getCommitmentPeriod());
				csIOMS.setString(11, element.getPenaltyCause());
				csIOMS.setString(12, element.getOrderLineId());
				csIOMS.setString(13, element.getBillType());
				csIOMS.setString(14, element.getBillingAddressId());
				csIOMS.setString(15, element.getBillingLevelNo());
				csIOMS.setString(16, element.getNoticePeriod());
				csIOMS.setString(17, element.getCreationDate1());
				csIOMS.setString(18, element.getCreatedBy());
				csIOMS.setString(19, element.getLastUpdatedDate1());
				csIOMS.setString(20, element.getLastUpdatedBy());
				csIOMS.setString(21,element.getBillingInfoId());
				csIOMS.setString(22,element.getServiceNo());
				csIOMS.setInt(23, 0);
				csIOMS.setInt(24, 0);
				csIOMS.setString(25, "");
				csIOMS.setString(26, element.getStdReasonId());
				csIOMS.setString(27, element.getOrderNo());
				csIOMS.setString(28, element.getLogicalSINo());
				
				csIOMS.execute();
			}
			 

			if (csIOMS.getInt(23) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("Billing Header Updated....");
			} else {
				iomsConn.rollback();
				System.err.println(csIOMS.getString(23));
				System.err.println("Billing Header Not Updated....");
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("Values assigned processPartyIds()");
			} catch (Exception e) {
			System.out.println("Error in method processPartyIds()"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}

	public static void InsertECRMLocationInfotoIOMS()//insert into TLOCATION_INFO
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetLocationHeaderFromCRM);
			pstmt = crmcon.prepareStatement(strGetLocationHeaderFromCRM);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstLocation = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setPriLocationType(rset.getString("PRI_LOC_TYP"));
				objDto.setPriLocationId(rset.getString("PRI_LOC_ID"));
				objDto.setSecLocationType(rset.getString("SEC_LOC_TYP"));
				objDto.setSecLocationId(rset.getString("SEC_LOC_ID"));
				objDto.setCustAccountId(rset.getString("ACCOUNT_NO"));
				objDto.setOrderLineId(rset.getString("ORDER_LINE_ID"));
				objDto.setCreatedBy(rset.getString("CREATED_BY"));
				objDto.setCreationDate1(rset.getString("CREATION_DATE"));
				objDto.setLastUpdatedBy(rset.getString("LAST_UPDATED_BY"));
				objDto.setLastUpdatedDate1(rset.getString("LAST_UPDATE_DATE"));
				
				lstLocation.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstLocation.size()>0)
			{
			System.err.println("Location Information And Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(spInsertLocationHeaderToIOMS);
						
			
			for (Iterator iter = lstLocation.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				csIOMS.setString(1, element.getPriLocationType());
				csIOMS.setString(2, element.getPriLocationId());
				csIOMS.setString(3, element.getSecLocationType());
				csIOMS.setString(4, element.getSecLocationId());
				csIOMS.setString(5, element.getCustAccountId());
				csIOMS.setString(6, element.getOrderLineId());
				csIOMS.setString(7, element.getCreationDate1());
				csIOMS.setString(8, element.getCreatedBy());
				csIOMS.setString(9, element.getLastUpdatedDate1());
				csIOMS.setString(10, element.getLastUpdatedBy());
				csIOMS.setInt(11, 0);
				csIOMS.setInt(12, 0);
				csIOMS.setString(13, "");
				csIOMS.execute();
			}
			 

			if (csIOMS.getInt(12) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("Location details Updated....");
			} else {
				iomsConn.rollback();
				System.err.println(csIOMS.getString(12));
				System.err.println("Location details Not Updated....");
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("Values assigned");
			} catch (Exception e) {
			System.out.println("Error in method"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}	
		
	public static void InsertECRMLocationInfotoIOMS2()//insert into TLOCATION_INFO_2
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetLocationHeaderFromCRM2);
			pstmt = crmcon.prepareStatement(strGetLocationHeaderFromCRM2);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstLocation = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setPriLocationType(rset.getString("PRI_LOC_TYP"));
				objDto.setPriLocationId(rset.getString("PRI_LOC_ID"));
				objDto.setSecLocationType(rset.getString("SEC_LOC_TYP"));
				objDto.setSecLocationId(rset.getString("SEC_LOC_ID"));
				objDto.setCustAccountId(rset.getString("ACCOUNT_NO"));
				objDto.setOrderLineId(rset.getString("ORDER_LINE_ID"));
				objDto.setCreatedBy(rset.getString("CREATED_BY"));
				objDto.setCreationDate1(rset.getString("CREATION_DATE"));
				objDto.setLastUpdatedBy(rset.getString("LAST_UPDATED_BY"));
				objDto.setLastUpdatedDate1(rset.getString("LAST_UPDATE_DATE"));
				
				lstLocation.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstLocation.size()>0)
			{
			System.err.println("Location Information And Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(spInsertLocationHeaderToIOMS2);
						
			
			for (Iterator iter = lstLocation.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				csIOMS.setString(1, element.getPriLocationType());
				csIOMS.setString(2, element.getPriLocationId());
				csIOMS.setString(3, element.getSecLocationType());
				csIOMS.setString(4, element.getSecLocationId());
				csIOMS.setString(5, element.getCustAccountId());
				csIOMS.setString(6, element.getOrderLineId());
				csIOMS.setString(7, element.getCreationDate1());
				csIOMS.setString(8, element.getCreatedBy());
				csIOMS.setString(9, element.getLastUpdatedDate1());
				csIOMS.setString(10, element.getLastUpdatedBy());
				csIOMS.setInt(11, 0);
				csIOMS.setInt(12, 0);
				csIOMS.setString(13, "");
				csIOMS.execute();
			}
			 

			if (csIOMS.getInt(12) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("Location details Updated....");
			} else {
				iomsConn.rollback();
				System.err.println(csIOMS.getString(12));
				System.err.println("Location details Not Updated....");
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("Values assigned");
			} catch (Exception e) {
			System.out.println("Error in method"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}

	public static void InsertECRMLocationInfotoIOMS3()//insert into TLOCATION_INFO_HISTORY
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetLocationHeaderFromCRM3);
			pstmt = crmcon.prepareStatement(strGetLocationHeaderFromCRM3);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstLocation = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setPriLocationType(rset.getString("PRI_LOC_TYP"));
				objDto.setPriLocationId(rset.getString("PRI_LOC_ID"));
				objDto.setSecLocationType(rset.getString("SEC_LOC_TYP"));
				objDto.setSecLocationId(rset.getString("SEC_LOC_ID"));
				objDto.setCustAccountId(rset.getString("ACCOUNT_NO"));
				objDto.setOrderLineId(rset.getString("ORDER_LINE_ID"));
				objDto.setCreatedBy(rset.getString("CREATED_BY"));
				objDto.setCreationDate1(rset.getString("CREATION_DATE"));
				objDto.setLastUpdatedBy(rset.getString("LAST_UPDATED_BY"));
				objDto.setLastUpdatedDate1(rset.getString("LAST_UPDATE_DATE"));
				objDto.setServiceNo(rset.getString("MAIN_SERVICE_ID"));
				
				lstLocation.add(objDto);
			}
			
			System.err.println("Inside Function....");
			if(lstLocation.size()>0)
			{
			System.err.println("Location Information And Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(spInsertLocationHeaderToIOMS3);
						
			
			for (Iterator iter = lstLocation.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				csIOMS.setString(1, element.getPriLocationType());
				csIOMS.setString(2, element.getPriLocationId());
				csIOMS.setString(3, element.getSecLocationType());
				csIOMS.setString(4, element.getSecLocationId());
				csIOMS.setString(5, element.getCustAccountId());
				csIOMS.setString(6, element.getOrderLineId());
				csIOMS.setString(7, element.getCreationDate1());
				csIOMS.setString(8, element.getCreatedBy());
				csIOMS.setString(9, element.getLastUpdatedDate1());
				csIOMS.setString(10, element.getLastUpdatedBy());
				csIOMS.setInt(11, 0);
				csIOMS.setInt(12, 0);
				csIOMS.setString(13, "");
				csIOMS.setString(14,element.getServiceNo());
				csIOMS.execute();
			}
			 

			if (csIOMS.getInt(12) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("Location details Updated....");
			} else {
				iomsConn.rollback();
				System.err.println(csIOMS.getString(12));
				System.err.println("Location details Not Updated....");
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("Values assigned");
			} catch (Exception e) {
			System.out.println("Error in method"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}

	public static void InsertECRMHardwareInfotoIOMS()//INSERT INTO THARDWARE_INFO
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetHardwareHeaderFromCRM);
			pstmt = crmcon.prepareStatement(strGetHardwareHeaderFromCRM);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstHardware = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setStore(rset.getString("STORE"));
				objDto.setHarwareType(rset.getString("HARDWARE_TYPE"));
				objDto.setForm(rset.getString("FORM_C_AVAILABLE"));
				objDto.setTypeofSale(rset.getString("TYPE_OF_SALE"));
				objDto.setNatureofSale(rset.getString("NATURE_OF_SALE"));
				objDto.setDispatchAddId(rset.getString("DISPATCH_ADDRESS_ID"));
				objDto.setCustAccountId(rset.getString("CUST_ACCOUNT_ID"));
				objDto.setOrderLineId(rset.getString("ORDER_LINE_ID"));
				objDto.setHwWarrantyStartDateLogic(rset.getString("WARRANTY_DATE_LOGIC"));
				objDto.setHwWarrantyEndDateLogic(rset.getString("WARRANTY_END_DATE_LOGIC"));
				objDto.setHwWarrantyPeriodMonths(rset.getString("WARRANTY_PERIOD_MONTHS"));
				objDto.setHwWarrantyStartDate(rset.getString("WARRANTY_START_DATE"));
				objDto.setHwWarrantyEndDate(rset.getString("WARRANTY_END_DATE"));
				objDto.setPrincipalAmount(rset.getString("PRINCIPAL_AMT"));
				objDto.setInterestRate(rset.getString("INTREST_RATE"));
				objDto.setCreatedBy(rset.getString("CREATED_BY"));
				objDto.setCreationDate1(rset.getString("CREATION_DATE"));
				objDto.setLastUpdatedBy(rset.getString("LAST_UPDATED_BY"));
				objDto.setLastUpdatedDate1(rset.getString("LAST_UPDATE_DATE"));
				objDto.setHwWarrantyEndPeriodMonths(rset.getString("WARRANTY_END_PERIOD_MONTHS"));		// new params
				objDto.setHwWarrantyExtPeriodMonths(rset.getString("EXTND_SUPPORT_PERIOD_MONTHS"));
				objDto.setHwWarrantyExtDate(rset.getString("EXTND_SUPPORT_END_DATE"));
				objDto.setHwWarrantyStartDays(rset.getString("WARRANTY_PERIOD_DAYS"));
				objDto.setHwWarrantyExtDays(rset.getString("EXTND_SUPPORT_PERIOD_DAYS"));
				objDto.setHwWarrantyEndDays(rset.getString("WARRANTY_END_PERIOD_DAYS"));
				
				lstHardware.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstHardware.size()>0)
			{
			System.err.println("Order Hardware Information And Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(spInsertHardwareHeaderToIOMS);
						
			
			for (Iterator iter = lstHardware.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				csIOMS.setString(1, element.getStore());
				csIOMS.setString(2, element.getHarwareType());
				csIOMS.setString(3, element.getForm());
				csIOMS.setString(4, element.getTypeofSale());
				csIOMS.setString(5, element.getNatureofSale());
				csIOMS.setString(6, element.getDispatchAddId());
				csIOMS.setString(7, element.getCustAccountId());
				csIOMS.setString(8, element.getOrderLineId());
				csIOMS.setString(9, element.getHwWarrantyStartDateLogic());
				csIOMS.setString(10, element.getHwWarrantyEndDateLogic());
				csIOMS.setString(11, element.getHwWarrantyPeriodMonths());
				csIOMS.setString(12, element.getHwWarrantyStartDate());
				csIOMS.setString(13, element.getHwWarrantyEndDate());
				csIOMS.setString(14, element.getPrincipalAmount());
				csIOMS.setString(15, element.getInterestRate());
				csIOMS.setString(16, element.getCreationDate1());
				csIOMS.setString(17, element.getCreatedBy());
				csIOMS.setString(18, element.getLastUpdatedDate1());
				csIOMS.setString(19, element.getLastUpdatedBy());
				csIOMS.setInt(20, 0);
				csIOMS.setInt(21, 0);
				csIOMS.setString(22, "");
				csIOMS.setString(23, element.getHwWarrantyEndPeriodMonths());
				csIOMS.setString(24, element.getHwWarrantyExtPeriodMonths());
				csIOMS.setString(25, element.getHwWarrantyExtDate());
				csIOMS.setString(26, element.getHwWarrantyStartDays());
				csIOMS.setString(27, element.getHwWarrantyExtDays());
				csIOMS.setString(28, element.getHwWarrantyEndDays());
				csIOMS.execute();
			}
			 

			if (csIOMS.getInt(21) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("Hardware Info Updated....");
			} else {
				iomsConn.rollback();
				System.err.println(csIOMS.getString(21));
				System.err.println("Hardware Info Not Updated....");
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("Values assigned");
			} catch (Exception e) {
			System.out.println("Error in method"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}

	public static void InsertECRMHardwareInfotoIOMS2()//INSERT INTO THARDWARE_INFO_2
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetHardwareHeaderFromCRM2);
			pstmt = crmcon.prepareStatement(strGetHardwareHeaderFromCRM2);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstHardware = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setStore(rset.getString("STORE"));
				objDto.setHarwareType(rset.getString("HARDWARE_TYPE"));
				objDto.setForm(rset.getString("FORM_C_AVAILABLE"));
				objDto.setTypeofSale(rset.getString("TYPE_OF_SALE"));
				objDto.setNatureofSale(rset.getString("NATURE_OF_SALE"));
				objDto.setDispatchAddId(rset.getString("DISPATCH_ADDRESS_ID"));
				objDto.setCustAccountId(rset.getString("CUST_ACCOUNT_ID"));
				objDto.setOrderLineId(rset.getString("ORDER_LINE_ID"));
				objDto.setHwWarrantyStartDateLogic(rset.getString("WARRANTY_DATE_LOGIC"));
				objDto.setHwWarrantyEndDateLogic(rset.getString("WARRANTY_END_DATE_LOGIC"));
				objDto.setHwWarrantyPeriodMonths(rset.getString("WARRANTY_PERIOD_MONTHS"));
				objDto.setHwWarrantyStartDate(rset.getString("WARRANTY_START_DATE"));
				objDto.setHwWarrantyEndDate(rset.getString("WARRANTY_END_DATE"));
				objDto.setPrincipalAmount(rset.getString("PRINCIPAL_AMT"));
				objDto.setInterestRate(rset.getString("INTREST_RATE"));
				objDto.setCreatedBy(rset.getString("CREATED_BY"));
				objDto.setCreationDate1(rset.getString("CREATION_DATE"));
				objDto.setLastUpdatedBy(rset.getString("LAST_UPDATED_BY"));
				objDto.setLastUpdatedDate1(rset.getString("LAST_UPDATE_DATE"));
				objDto.setHwWarrantyEndPeriodMonths(rset.getString("WARRANTY_END_PERIOD_MONTHS"));		// new params
				objDto.setHwWarrantyExtPeriodMonths(rset.getString("EXTND_SUPPORT_PERIOD_MONTHS"));
				objDto.setHwWarrantyExtDate(rset.getString("EXTND_SUPPORT_END_DATE"));
				objDto.setHwWarrantyStartDays(rset.getString("WARRANTY_PERIOD_DAYS"));
				objDto.setHwWarrantyExtDays(rset.getString("EXTND_SUPPORT_PERIOD_DAYS"));
				objDto.setHwWarrantyEndDays(rset.getString("WARRANTY_END_PERIOD_DAYS"));
				
				lstHardware.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstHardware.size()>0)
			{
			System.err.println("Order Hardware Information And Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(spInsertHardwareHeaderToIOMS2);
						
			
			for (Iterator iter = lstHardware.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				csIOMS.setString(1, element.getStore());
				csIOMS.setString(2, element.getHarwareType());
				csIOMS.setString(3, element.getForm());
				csIOMS.setString(4, element.getTypeofSale());
				csIOMS.setString(5, element.getNatureofSale());
				csIOMS.setString(6, element.getDispatchAddId());
				csIOMS.setString(7, element.getCustAccountId());
				csIOMS.setString(8, element.getOrderLineId());
				csIOMS.setString(9, element.getHwWarrantyStartDateLogic());
				csIOMS.setString(10, element.getHwWarrantyEndDateLogic());
				csIOMS.setString(11, element.getHwWarrantyPeriodMonths());
				csIOMS.setString(12, element.getHwWarrantyStartDate());
				csIOMS.setString(13, element.getHwWarrantyEndDate());
				csIOMS.setString(14, element.getPrincipalAmount());
				csIOMS.setString(15, element.getInterestRate());
				csIOMS.setString(16, element.getCreationDate1());
				csIOMS.setString(17, element.getCreatedBy());
				csIOMS.setString(18, element.getLastUpdatedDate1());
				csIOMS.setString(19, element.getLastUpdatedBy());
				csIOMS.setInt(20, 0);
				csIOMS.setInt(21, 0);
				csIOMS.setString(22, "");
				csIOMS.setString(23, element.getHwWarrantyEndPeriodMonths());
				csIOMS.setString(24, element.getHwWarrantyExtPeriodMonths());
				csIOMS.setString(25, element.getHwWarrantyExtDate());
				csIOMS.setString(26, element.getHwWarrantyStartDays());
				csIOMS.setString(27, element.getHwWarrantyExtDays());
				csIOMS.setString(28, element.getHwWarrantyEndDays());
				csIOMS.execute();
			}
			 

			if (csIOMS.getInt(21) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("Hardware Info Updated....");
			} else {
				iomsConn.rollback();
				System.err.println(csIOMS.getString(21));
				System.err.println("Hardware Info Not Updated....");
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("Values assigned");
			} catch (Exception e) {
			System.out.println("Error in method"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}
	public static void InsertECRMHardwareInfotoIOMS3()//INSERT INTO THARDWARE_INFO_HISTORY
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetHardwareHeaderFromCRM3);
			pstmt = crmcon.prepareStatement(strGetHardwareHeaderFromCRM3);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstHardware = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setServiceNo(rset.getString("MAIN_SERVICE_ID"));
				objDto.setStore(rset.getString("STORE"));
				objDto.setHarwareType(rset.getString("HARDWARE_TYPE"));
				objDto.setForm(rset.getString("FORM_C_AVAILABLE"));
				objDto.setTypeofSale(rset.getString("TYPE_OF_SALE"));
				objDto.setNatureofSale(rset.getString("NATURE_OF_SALE"));
				objDto.setDispatchAddId(rset.getString("DISPATCH_ADDRESS_ID"));
				objDto.setCustAccountId(rset.getString("CUST_ACCOUNT_ID"));
				objDto.setOrderLineId(rset.getString("ORDER_LINE_ID"));
				objDto.setHwWarrantyStartDateLogic(rset.getString("WARRANTY_DATE_LOGIC"));
				objDto.setHwWarrantyEndDateLogic(rset.getString("WARRANTY_END_DATE_LOGIC"));
				objDto.setHwWarrantyPeriodMonths(rset.getString("WARRANTY_PERIOD_MONTHS"));
				objDto.setHwWarrantyStartDate(rset.getString("WARRANTY_START_DATE"));
				objDto.setHwWarrantyEndDate(rset.getString("WARRANTY_END_DATE"));
				objDto.setPrincipalAmount(rset.getString("PRINCIPAL_AMT"));
				objDto.setInterestRate(rset.getString("INTREST_RATE"));
				objDto.setCreatedBy(rset.getString("CREATED_BY"));
				objDto.setCreationDate1(rset.getString("CREATION_DATE"));
				objDto.setLastUpdatedBy(rset.getString("LAST_UPDATED_BY"));
				objDto.setLastUpdatedDate1(rset.getString("LAST_UPDATE_DATE"));
				objDto.setHwWarrantyEndPeriodMonths(rset.getString("WARRANTY_END_PERIOD_MONTHS"));		// new params
				objDto.setHwWarrantyExtPeriodMonths(rset.getString("EXTND_SUPPORT_PERIOD_MONTHS"));
				objDto.setHwWarrantyExtDate(rset.getString("EXTND_SUPPORT_END_DATE"));
				objDto.setHwWarrantyStartDays(rset.getString("WARRANTY_PERIOD_DAYS"));
				objDto.setHwWarrantyExtDays(rset.getString("EXTND_SUPPORT_PERIOD_DAYS"));
				objDto.setHwWarrantyEndDays(rset.getString("WARRANTY_END_PERIOD_DAYS"));
				
				lstHardware.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstHardware.size()>0)
			{
			System.err.println("Order Hardware Information And Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(spInsertHardwareHeaderToIOMS3);
						
			
			for (Iterator iter = lstHardware.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				csIOMS.setString(1, element.getStore());
				csIOMS.setString(2, element.getHarwareType());
				csIOMS.setString(3, element.getForm());
				csIOMS.setString(4, element.getTypeofSale());
				csIOMS.setString(5, element.getNatureofSale());
				csIOMS.setString(6, element.getDispatchAddId());
				csIOMS.setString(7, element.getCustAccountId());
				csIOMS.setString(8, element.getOrderLineId());
				csIOMS.setString(9, element.getHwWarrantyStartDateLogic());
				csIOMS.setString(10, element.getHwWarrantyEndDateLogic());
				csIOMS.setString(11, element.getHwWarrantyPeriodMonths());
				csIOMS.setString(12, element.getHwWarrantyStartDate());
				csIOMS.setString(13, element.getHwWarrantyEndDate());
				csIOMS.setString(14, element.getPrincipalAmount());
				csIOMS.setString(15, element.getInterestRate());
				csIOMS.setString(16, element.getCreationDate1());
				csIOMS.setString(17, element.getCreatedBy());
				csIOMS.setString(18, element.getLastUpdatedDate1());
				csIOMS.setString(19, element.getLastUpdatedBy());
				csIOMS.setInt(20, 0);
				csIOMS.setInt(21, 0);
				csIOMS.setString(22, "");
				csIOMS.setString(23, element.getHwWarrantyEndPeriodMonths());
				csIOMS.setString(24, element.getHwWarrantyExtPeriodMonths());
				csIOMS.setString(25, element.getHwWarrantyExtDate());
				csIOMS.setString(26, element.getHwWarrantyStartDays());
				csIOMS.setString(27, element.getHwWarrantyExtDays());
				csIOMS.setString(28, element.getHwWarrantyEndDays());
				csIOMS.setString(29, element.getServiceNo());
				csIOMS.execute();
			}
			 

			if (csIOMS.getInt(21) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("Hardware Info Updated....");
			} else {
				iomsConn.rollback();
				System.err.println(csIOMS.getString(21));
				System.err.println("Hardware Info Not Updated....");
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("Values assigned");
			} catch (Exception e) {
			System.out.println("Error in method"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}

	
	public static void InsertECRMChargestoIOMS()
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetChargesFromCRM);
			pstmt = crmcon.prepareStatement(strGetChargesFromCRM);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstCharges = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				
				objDto.setCrmChargeId(rset.getInt("CHARGE_ID"));
				objDto.setChargeId(rset.getString("PK_CHARGES_ID"));
				objDto.setOrderLineId(rset.getString("ORDER_LINE_ID"));
				objDto.setChargetype(rset.getString("CHARGE_TYPE"));
				objDto.setContractPeriodMonths(rset.getString("CONTRACT_PERIOD_MNTHS"));
				objDto.setTotalAmount(rset.getDouble("TOTAL_AMOUNT"));
				objDto.setFrequency(rset.getString("FREQUENCY"));
				objDto.setChargeValue(rset.getDouble("CHARGE_VALUE"));
				objDto.setStartDatLogic(rset.getString("START_DATE_LOGIC"));
				objDto.setEndDateLogic(rset.getString("END_DATE_LOGIC"));
				objDto.setStartDateDays(rset.getString("START_DATE_DAYS"));
				objDto.setStartDateMonths(rset.getString("START_DATE_MONTHS"));
				objDto.setEndDateDays(rset.getString("END_DATE_DAYS"));
				objDto.setEndDateMonths(rset.getString("END_DATE_MONTHS"));
				objDto.setFxStatus(rset.getString("FX_STATUS"));
				objDto.setAnnotation(rset.getString("ANNOTATION"));
				objDto.setCreatedBy(rset.getString("CREATED_BY"));
				objDto.setCreationDate1(rset.getString("CREATION_DATE"));
				objDto.setLastUpdatedBy(rset.getString("LAST_UPDATED_BY"));
				objDto.setLastUpdatedDate1(rset.getString("LAST_UPDATE_DATE"));
				objDto.setRemarks(rset.getString("REMARKS"));		// Remarks was missing
				objDto.setTaxRate(rset.getString("TAX_RATE"));

				lstCharges.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstCharges.size()>0)
			{
			System.err.println("Charges Information Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(spInsertChargesToIOMS);
						
			
			for (Iterator iter = lstCharges.iterator(); iter.hasNext();) 
			{
			ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
			
			csIOMS.setString(1, element.getChargeId());
			csIOMS.setString(2, element.getOrderLineId());
			csIOMS.setString(3, element.getChargetype());
			csIOMS.setString(4, element.getContractPeriodMonths());
			csIOMS.setDouble(5, element.getTotalAmount());
			csIOMS.setString(6, element.getFrequency());
			csIOMS.setDouble(7, element.getChargeValue());
			csIOMS.setString(8, element.getStartDatLogic());
			csIOMS.setString(9, element.getEndDateLogic());
			csIOMS.setString(10, element.getStartDateDays());
			csIOMS.setString(11, element.getStartDateMonths());
			csIOMS.setString(12, element.getEndDateDays());
			csIOMS.setString(13, element.getEndDateMonths());
			csIOMS.setString(14, element.getFxStatus());
			csIOMS.setString(15, element.getAnnotation());
			csIOMS.setString(16, element.getCreationDate1());
			csIOMS.setString(17, element.getCreatedBy());
			csIOMS.setString(18, element.getLastUpdatedDate1());
			csIOMS.setString(19, element.getLastUpdatedBy());
			csIOMS.setInt(20, 0);
			csIOMS.setInt(21, 0);
			csIOMS.setString(22, "");
			csIOMS.setInt(23, element.getCrmChargeId());
			csIOMS.setString(24, element.getRemarks());		// Remarks was missing
			csIOMS.setString(25, element.getTaxRate());
			csIOMS.execute();
			}
			 

			if (csIOMS.getInt(21) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("Charges Info Updated....");
			} else {
				iomsConn.rollback();
				System.err.println(csIOMS.getString(21));
				System.err.println("Charges Info Not Updated....");
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("Values assigned ");
			} catch (Exception e) {
			System.out.println("Error in method "
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}
	
	public static void InsertECRMChargestoIOMS2()//insert into TCHAREGES_INFO_2
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetChargesFromCRM2);
			pstmt = crmcon.prepareStatement(strGetChargesFromCRM2);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstCharges = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				
				objDto.setCrmChargeId(rset.getInt("CHARGE_ID"));
				objDto.setChargeId(rset.getString("PK_CHARGES_ID"));
				objDto.setOrderLineId(rset.getString("ORDER_LINE_ID"));
				objDto.setChargetype(rset.getString("CHARGE_TYPE"));
				objDto.setContractPeriodMonths(rset.getString("CONTRACT_PERIOD_MNTHS"));
				objDto.setTotalAmount(rset.getDouble("TOTAL_AMOUNT"));
				objDto.setFrequency(rset.getString("FREQUENCY"));
				objDto.setChargeValue(rset.getDouble("CHARGE_VALUE"));
				objDto.setStartDatLogic(rset.getString("START_DATE_LOGIC"));
				objDto.setEndDateLogic(rset.getString("END_DATE_LOGIC"));
				objDto.setStartDateDays(rset.getString("START_DATE_DAYS"));
				objDto.setStartDateMonths(rset.getString("START_DATE_MONTHS"));
				objDto.setEndDateDays(rset.getString("END_DATE_DAYS"));
				objDto.setEndDateMonths(rset.getString("END_DATE_MONTHS"));
				objDto.setFxStatus(rset.getString("FX_STATUS"));
				objDto.setAnnotation(rset.getString("ANNOTATION"));
				objDto.setCreatedBy(rset.getString("CREATED_BY"));
				objDto.setCreationDate1(rset.getString("CREATION_DATE"));
				objDto.setLastUpdatedBy(rset.getString("LAST_UPDATED_BY"));
				objDto.setLastUpdatedDate1(rset.getString("LAST_UPDATE_DATE"));
				objDto.setRemarks(rset.getString("REMARKS"));		// Remarks was missing
				objDto.setTaxRate(rset.getString("TAX_RATE"));
				
				objDto.setCharge_start_date(rset.getString("START_DATE"));
				objDto.setCharge_end_date(rset.getString("END_DATE"));
				objDto.setExclude(rset.getString("EXCLUDE"));
				objDto.setAnnual_rate(rset.getString("ANNUAL_RATE"));
				objDto.setCharge_status(rset.getString("CHARGES_STATUS"));
				objDto.setCrmOrderId(rset.getString("CRM_ORDER_ID"));
				objDto.setServiceNo(rset.getString("CREATEDIN_SERVICEID"));
				objDto.setPoId(rset.getString("PODETAILID"));

				lstCharges.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstCharges.size()>0)
			{
			System.err.println("Charges Information Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(spInsertChargesToIOMS2);
						
			
			for (Iterator iter = lstCharges.iterator(); iter.hasNext();) 
			{
			ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
			
			//csIOMS.setString(1, element.getChargeId());
			csIOMS.setString(1, element.getOrderLineId());
			csIOMS.setString(2, element.getChargetype());
			csIOMS.setString(3, element.getContractPeriodMonths());
			csIOMS.setDouble(4, element.getTotalAmount());
			csIOMS.setString(5, element.getFrequency());
			csIOMS.setDouble(6, element.getChargeValue());
			csIOMS.setString(7, element.getStartDatLogic());
			csIOMS.setString(8, element.getEndDateLogic());
			csIOMS.setString(9, element.getStartDateDays());
			csIOMS.setString(10, element.getStartDateMonths());
			csIOMS.setString(11, element.getEndDateDays());
			csIOMS.setString(12, element.getEndDateMonths());
			csIOMS.setString(13, element.getFxStatus());
			csIOMS.setString(14, element.getAnnotation());
			csIOMS.setString(15, element.getCreationDate1());
			csIOMS.setString(16, element.getCreatedBy());
			csIOMS.setString(17, element.getLastUpdatedDate1());
			csIOMS.setString(18, element.getLastUpdatedBy());
			csIOMS.setInt(19, 0);
			csIOMS.setInt(20, 0);
			csIOMS.setString(21, "");
			csIOMS.setInt(22, element.getCrmChargeId());
			csIOMS.setString(23, element.getRemarks());		// Remarks was missing
			csIOMS.setString(24, element.getTaxRate());
			
			csIOMS.setString(25, element.getCharge_start_date());
			csIOMS.setString(26, element.getCharge_end_date());
			csIOMS.setString(27, element.getExclude());
			csIOMS.setString(28, element.getAnnual_rate());
			csIOMS.setString(29, element.getCharge_status());
			csIOMS.setString(30, element.getCrmOrderId());
			csIOMS.setString(31, element.getServiceNo());
			csIOMS.setString(32, element.getChargeId());
			csIOMS.setString(33, element.getPoId());//Added by Ashutosh
			csIOMS.execute();
			}
			 

			if (csIOMS.getInt(20) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("Charges Info Updated....");
			} else {
				iomsConn.rollback();
				System.err.println(csIOMS.getString(21));
				System.err.println("Charges Info Not Updated....");
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("Values assigned ");
			} catch (Exception e) {
			System.out.println("Error in method "
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}

	public static void InsertECRMChargestoIOMS3()//insert into TCHAREGES_INFO_HISTORY
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetChargesFromCRM3);
			pstmt = crmcon.prepareStatement(strGetChargesFromCRM3);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstCharges = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				
				objDto.setCrmChargeId(rset.getInt("CHARGE_ID"));
				objDto.setChargeId(rset.getString("PK_CHARGES_ID"));
				objDto.setOrderLineId(rset.getString("ORDER_LINE_ID"));
				objDto.setChargetype(rset.getString("CHARGE_TYPE"));
				objDto.setContractPeriodMonths(rset.getString("CONTRACT_PERIOD_MNTHS"));
				objDto.setTotalAmount(rset.getDouble("TOTAL_AMOUNT"));
				objDto.setFrequency(rset.getString("FREQUENCY"));
				objDto.setChargeValue(rset.getDouble("CHARGE_VALUE"));
				objDto.setStartDatLogic(rset.getString("START_DATE_LOGIC"));
				objDto.setEndDateLogic(rset.getString("END_DATE_LOGIC"));
				objDto.setStartDateDays(rset.getString("START_DATE_DAYS"));
				objDto.setStartDateMonths(rset.getString("START_DATE_MONTHS"));
				objDto.setEndDateDays(rset.getString("END_DATE_DAYS"));
				objDto.setEndDateMonths(rset.getString("END_DATE_MONTHS"));
				objDto.setFxStatus(rset.getString("FX_STATUS"));
				objDto.setAnnotation(rset.getString("ANNOTATION"));
				objDto.setCreatedBy(rset.getString("CREATED_BY"));
				objDto.setCreationDate1(rset.getString("CREATION_DATE"));
				objDto.setLastUpdatedBy(rset.getString("LAST_UPDATED_BY"));
				objDto.setLastUpdatedDate1(rset.getString("LAST_UPDATE_DATE"));
				objDto.setRemarks(rset.getString("REMARKS"));		// Remarks was missing
				objDto.setTaxRate(rset.getString("TAX_RATE"));
				
				objDto.setCharge_start_date(rset.getString("START_DATE"));
				objDto.setCharge_end_date(rset.getString("END_DATE"));
				objDto.setExclude(rset.getString("EXCLUDE"));
				objDto.setAnnual_rate(rset.getString("ANNUAL_RATE"));
				objDto.setCharge_status(rset.getString("CHARGES_STATUS"));
				objDto.setCrmOrderId(rset.getString("CRM_ORDER_ID"));
				objDto.setServiceNo(rset.getString("CREATEDIN_SERVICEID"));
				objDto.setMainServiceId(rset.getString("MAIN_SERVICE_ID"));
				objDto.setPoId(rset.getString("PODETAILID"));

				lstCharges.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstCharges.size()>0)
			{
			System.err.println("Charges Information Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(spInsertChargesToIOMS3);
						
			
			for (Iterator iter = lstCharges.iterator(); iter.hasNext();) 
			{
			ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
			
			//csIOMS.setString(1, element.getChargeId());
			csIOMS.setString(1, element.getOrderLineId());
			csIOMS.setString(2, element.getChargetype());
			csIOMS.setString(3, element.getContractPeriodMonths());
			csIOMS.setDouble(4, element.getTotalAmount());
			csIOMS.setString(5, element.getFrequency());
			csIOMS.setDouble(6, element.getChargeValue());
			csIOMS.setString(7, element.getStartDatLogic());
			csIOMS.setString(8, element.getEndDateLogic());
			csIOMS.setString(9, element.getStartDateDays());
			csIOMS.setString(10, element.getStartDateMonths());
			csIOMS.setString(11, element.getEndDateDays());
			csIOMS.setString(12, element.getEndDateMonths());
			csIOMS.setString(13, element.getFxStatus());
			csIOMS.setString(14, element.getAnnotation());
			csIOMS.setString(15, element.getCreationDate1());
			csIOMS.setString(16, element.getCreatedBy());
			csIOMS.setString(17, element.getLastUpdatedDate1());
			csIOMS.setString(18, element.getLastUpdatedBy());
			csIOMS.setInt(19, 0);
			csIOMS.setInt(20, 0);
			csIOMS.setString(21, "");
			csIOMS.setInt(22, element.getCrmChargeId());
			csIOMS.setString(23, element.getRemarks());		// Remarks was missing
			csIOMS.setString(24, element.getTaxRate());
			
			csIOMS.setString(25, element.getCharge_start_date());
			csIOMS.setString(26, element.getCharge_end_date());
			csIOMS.setString(27, element.getExclude());
			csIOMS.setString(28, element.getAnnual_rate());
			csIOMS.setString(29, element.getCharge_status());
			csIOMS.setString(30, element.getCrmOrderId());
			csIOMS.setString(31, element.getServiceNo());
			csIOMS.setString(32, element.getChargeId());
			csIOMS.setString(33, element.getMainServiceId());
			csIOMS.setString(34, element.getPoId());//Added by Ashutosh

			csIOMS.execute();
			}
			 

			if (csIOMS.getInt(20) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("Charges Info Updated....");
			} else {
				iomsConn.rollback();
				System.err.println(csIOMS.getString(21));
				System.err.println("Charges Info Not Updated....");
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("Values assigned ");
			} catch (Exception e) {
			System.out.println("Error in method "
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}

	
	public static void InsertECRMApprovalWorkFlowtoIOMS()//INSERT INTO IOE.TPOWORKFLOWTASK
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + spInsertApprovalWorkFlowFromCRM);
			pstmt = crmcon.prepareStatement(spInsertApprovalWorkFlowFromCRM);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstApprovals = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setTaskId(rset.getString("TASK_ID"));
				objDto.setTaskName(rset.getString("TASK_NAME"));
				objDto.setOwnerId(rset.getString("OWNER_ID"));
				objDto.setTaskStatusId(rset.getString("TASK_STATUS_ID"));
				objDto.setPlannedStartDate(rset.getString("PLANNED_START_DATE"));
				objDto.setCrmOrderId(rset.getString("SOURCE_OBJECT_ID"));
				objDto.setReasonCode(rset.getString("ATTRIBUTE1"));			//used ATTRIBUTE1 instead of REASON_CODE
				objDto.setActualEndDate(rset.getString("ACTUAL_END_DATE"));
				objDto.setCreatedBy(rset.getString("CREATED_BY"));
				objDto.setCreationDate1(rset.getString("CREATION_DATE"));
				lstApprovals.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstApprovals.size()>0)
			{
			System.err.println("Approval Workflow Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(spGetApprovalWorkFlowTOIOMS);
						
			
			for (Iterator iter = lstApprovals.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				csIOMS.setString(1, element.getTaskId());
				csIOMS.setString(2, element.getTaskName());
				csIOMS.setString(3, element.getOwnerId());
				csIOMS.setString(4, element.getTaskStatusId());
				csIOMS.setString(5, element.getPlannedStartDate());
				csIOMS.setString(6, element.getActualEndDate());
				csIOMS.setString(7, element.getCrmOrderId());
				csIOMS.setString(8, element.getCreatedBy());
				csIOMS.setString(9, element.getCreationDate1());
				csIOMS.setString(10, element.getReasonCode());
				csIOMS.setInt(11, 0);
				csIOMS.setInt(12, 0);
				csIOMS.setString(13, "");
				csIOMS.execute();
				
			}
			 

			if (csIOMS.getInt(12) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("Approval Workflow Details Updated....");
			} else {
				System.err.println("Approval Workflow Details Not Updated....");
				System.err.println(csIOMS.getString(10));
				iomsConn.rollback();
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("Approval Workflow Details Inserted");
			} catch (Exception e) {
			System.out.println("Error in method Approval Workflow()"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}
	
	public static void InsertECRMApprovalWorkFlowtoIOMS2()//INSERT INTO IOE.TPOWORKFLOWTASK
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + spInsertApprovalWorkFlowFromCRM2);
			pstmt = crmcon.prepareStatement(spInsertApprovalWorkFlowFromCRM2);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstApprovals = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setTaskId(rset.getString("TASK_ID"));
				objDto.setTaskName(rset.getString("TASK_NAME"));
				objDto.setOwnerId(rset.getString("OWNER_ID"));
				objDto.setTaskStatusId(rset.getString("TASK_STATUS_ID"));
				objDto.setPlannedStartDate(rset.getString("PLANNED_START_DATE"));
				objDto.setCrmOrderId(rset.getString("SOURCE_OBJECT_ID"));
				objDto.setReasonCode(rset.getString("ATTRIBUTE1"));			//used ATTRIBUTE1 instead of REASON_CODE
				objDto.setActualEndDate(rset.getString("ACTUAL_END_DATE"));
				objDto.setCreatedBy(rset.getString("CREATED_BY"));
				objDto.setCreationDate1(rset.getString("CREATION_DATE"));
				
				objDto.setRejectedBy(rset.getString("REJECTED_BY"));
				objDto.setRejectedDate(rset.getString("REJECTED_DATE"));
				objDto.setIsRejected(rset.getString("IS_REJECTED"));
				objDto.setIsFirstTask(rset.getString("IS_FIRST_TASK"));
				objDto.setIsLastTask(rset.getString("IS_LAST_TASK"));
				objDto.setTaskAssignedTo(rset.getString("TASK_ASSIGNED_TO"));
				objDto.setTaskName(rset.getString("TASK_NAME"));
				objDto.setPreviousTaskId(rset.getString("PREV_TASK_ID"));
				lstApprovals.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstApprovals.size()>0)
			{
			System.err.println("Approval Workflow Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(spGetApprovalWorkFlowTOIOMS2);
						
			
			for (Iterator iter = lstApprovals.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				csIOMS.setString(1, element.getTaskId());
				csIOMS.setString(2, element.getTaskName());
				csIOMS.setString(3, element.getOwnerId());
				csIOMS.setString(4, element.getTaskStatusId());
				csIOMS.setString(5, element.getPlannedStartDate());
				csIOMS.setString(6, element.getActualEndDate());
				csIOMS.setString(7, element.getCrmOrderId());
				csIOMS.setString(8, element.getCreatedBy());
				csIOMS.setString(9, element.getCreationDate1());
				csIOMS.setString(10, element.getReasonCode());
				csIOMS.setInt(11, 0);
				csIOMS.setInt(12, 0);
				csIOMS.setString(13, "");
								
				csIOMS.setString(14, element.getRejectedBy());
				csIOMS.setString(15, element.getRejectedDate());
				csIOMS.setString(16, element.getIsRejected());
				csIOMS.setString(17, element.getIsFirstTask());
				csIOMS.setString(18, element.getIsLastTask());
				csIOMS.setString(19, element.getTaskAssignedTo());
				csIOMS.setString(20, element.getTaskName());
				csIOMS.setString(21, element.getPreviousTaskId());
				csIOMS.execute();
				
			}
			 

			if (csIOMS.getInt(12) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("Approval Workflow Details Updated....");
			} else {
				System.err.println("Approval Workflow Details Not Updated....");
				System.err.println(csIOMS.getString(10));
				iomsConn.rollback();
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("Approval Workflow Details Inserted");
			} catch (Exception e) {
			System.out.println("Error in method Approval Workflow()"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}

	public static void InsertECRMApprovalWorkFlowtoIOMS3()//INSERT INTO TTASKACTIONHISTORY
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + spInsertApprovalWorkFlowFromCRM3);
			pstmt = crmcon.prepareStatement(spInsertApprovalWorkFlowFromCRM3);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstApprovals = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setTaskId(rset.getString("TASK_ID"));
				objDto.setTaskName(rset.getString("TASK_NAME"));
				objDto.setOwnerId(rset.getString("OWNER_ID"));
				objDto.setTaskStatusId(rset.getString("TASK_STATUS_ID"));
				objDto.setPlannedStartDate(rset.getString("PLANNED_START_DATE"));
				objDto.setCrmOrderId(rset.getString("SOURCE_OBJECT_ID"));
				objDto.setReasonCode(rset.getString("ATTRIBUTE1"));			//used ATTRIBUTE1 instead of REASON_CODE
				objDto.setActualEndDate(rset.getString("ACTUAL_END_DATE"));
				objDto.setCreatedBy(rset.getString("CREATED_BY"));
				objDto.setCreationDate1(rset.getString("CREATION_DATE"));
				
				objDto.setRejectedBy(rset.getString("REJECTED_BY"));
				objDto.setRejectedDate(rset.getString("REJECTED_DATE"));
				objDto.setIsRejected(rset.getString("IS_REJECTED"));
				objDto.setIsFirstTask(rset.getString("IS_FIRST_TASK"));
				objDto.setIsLastTask(rset.getString("IS_LAST_TASK"));
				objDto.setTaskAssignedTo(rset.getString("TASK_ASSIGNED_TO"));
				objDto.setTaskName(rset.getString("TASK_NAME"));
				objDto.setPreviousTaskId(rset.getString("PREV_TASK_ID"));
				objDto.setRejectionSendTo(rset.getString("REJECTION_SEND_TO"));
				lstApprovals.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstApprovals.size()>0)
			{
			System.err.println("Approval Workflow Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(spGetApprovalWorkFlowTOIOMS3);
						
			
			for (Iterator iter = lstApprovals.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				csIOMS.setString(1, element.getTaskId());
				csIOMS.setString(2, element.getTaskName());
				csIOMS.setString(3, element.getOwnerId());
				csIOMS.setString(4, element.getTaskStatusId());
				csIOMS.setString(5, element.getPlannedStartDate());
				csIOMS.setString(6, element.getActualEndDate());
				csIOMS.setString(7, element.getCrmOrderId());
				csIOMS.setString(8, element.getCreatedBy());
				csIOMS.setString(9, element.getCreationDate1());
				csIOMS.setString(10, element.getReasonCode());
				csIOMS.setInt(11, 0);
				csIOMS.setInt(12, 0);
				csIOMS.setString(13, "");
								
				csIOMS.setString(14, element.getRejectedBy());
				csIOMS.setString(15, element.getRejectedDate());
				csIOMS.setString(16, element.getIsRejected());
				csIOMS.setString(17, element.getIsFirstTask());
				csIOMS.setString(18, element.getIsLastTask());
				csIOMS.setString(19, element.getTaskAssignedTo());
				csIOMS.setString(20, element.getTaskName());
				csIOMS.setString(21, element.getPreviousTaskId());
				csIOMS.setString(22, element.getRejectionSendTo());
				csIOMS.execute();
				
			}
			 

			if (csIOMS.getInt(12) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("Approval Workflow Details Updated....");
			} else {
				System.err.println("Approval Workflow Details Not Updated....");
				System.err.println(csIOMS.getString(10));
				iomsConn.rollback();
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("Approval Workflow Details Inserted");
			} catch (Exception e) {
			System.out.println("Error in method Approval Workflow()"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}


	public static void InsertECRMChangeOrderDetailstoIOMS2()//INSERT INTO TCHANGE_ORDER_DETAILS
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + spGetChangeOrderDetailFromCRM2);
			pstmt = crmcon.prepareStatement(spGetChangeOrderDetailFromCRM2);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstApprovals = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setCrmOrderId(rset.getString("ORDERNO"));
				objDto.setServiceNo(rset.getString("SERVICEID"));
				objDto.setNewServiceListId(rset.getString("NEWSERVICELISTID"));
				objDto.setChangeReasonId(rset.getString("CHANGE_REASON_ID"));
				objDto.setOrderType(rset.getString("SERVICE_ORDER_TYPE"));
				objDto.setRemarks(rset.getString("REMARKS"));
				objDto.setCreationDate(rset.getTimestamp("CREATION_DATE"));			//used ATTRIBUTE1 instead of REASON_CODE
				
				lstApprovals.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstApprovals.size()>0)
			{
			System.err.println("Approval Workflow Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(spInsertChangeOrderDetailFromCRM2);
						
			
			for (Iterator iter = lstApprovals.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				csIOMS.setString(1, element.getCrmOrderId());
				csIOMS.setString(2, element.getServiceNo());
				csIOMS.setString(3, element.getNewServiceListId());
				csIOMS.setString(4, element.getChangeReasonId());
				csIOMS.setString(5, element.getOrderType());
				csIOMS.setString(6, element.getRemarks());
				csIOMS.setTimestamp(7, element.getCreationDate());
				csIOMS.setInt(8, 0);
				csIOMS.setInt(9, 0);
				csIOMS.setString(10, "");
								
				csIOMS.execute();
				
			}
			 

			if (csIOMS.getInt(9) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("Approval Workflow Details Updated....");
			} else {
				System.err.println("Approval Workflow Details Not Updated....");
				System.err.println(csIOMS.getString(10));
				iomsConn.rollback();
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("Approval Workflow Details Inserted");
			} catch (Exception e) {
			System.out.println("Error in method Approval Workflow()"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}


	
	public static void InsertECRMApprovalsInfotoIOMS()//INSERT INTO IOE.TTASKACTIONHISTORY
	{
/*		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetApprovalDetailsFromCRM);
			pstmt = crmcon.prepareStatement(strGetApprovalDetailsFromCRM);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstApprovals = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setTaskId(rset.getString("TASK_ID"));
				objDto.setTaskStatusId(rset.getString("TASK_STATUS_ID"));
				objDto.setOwnerId(rset.getString("OWNER_ID"));
				objDto.setPlannedStartDate(rset.getString("PLANNED_START_DATE"));
				objDto.setCrmOrderId(rset.getString("SOURCE_OBJECT_ID"));
				objDto.setReasonCode(rset.getString("ATTRIBUTE1"));
				objDto.setActualEndDate(rset.getString("ACTUAL_END_DATE"));
				objDto.setCreatedBy(rset.getString("CREATED_BY"));
				lstApprovals.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstApprovals.size()>0)
			{
			System.err.println("Approval Information Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(strInsertECRMApprovalstoIOMS);
						
			
			for (Iterator iter = lstApprovals.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				csIOMS.setString(1, element.getTaskId());
				csIOMS.setString(2, element.getTaskStatusId());
				csIOMS.setString(3, element.getOwnerId());
				csIOMS.setString(4, element.getPlannedStartDate());
				csIOMS.setString(5, element.getCrmOrderId());
				csIOMS.setString(6, element.getReasonCode());
				csIOMS.setString(7, element.getActualEndDate());
				csIOMS.setString(8, element.getCreatedBy());
				csIOMS.setInt(9, 0);
				csIOMS.setInt(10, 0);
				csIOMS.setString(11, "");
				csIOMS.execute();
				
			}
			 

			if (csIOMS.getInt(10) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("Approval Details Updated....");
			} else {
				System.err.println("Approval Details Not Updated....");
				System.err.println(csIOMS.getString(10));
				iomsConn.rollback();
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("Approval Details Inserted");
			} catch (Exception e) {
			System.out.println("Error in method Approval()"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
*/	
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + spInsertApprovalWorkFlowFromCRM3);
			pstmt = crmcon.prepareStatement(spInsertApprovalWorkFlowFromCRM3);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstApprovals = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setTaskId(rset.getString("TASK_ID"));
				objDto.setTaskName(rset.getString("TASK_NAME"));
				objDto.setOwnerId(rset.getString("OWNER_ID"));
				objDto.setTaskStatusId(rset.getString("TASK_STATUS_ID"));
				objDto.setPlannedStartDate(rset.getString("PLANNED_START_DATE"));
				objDto.setCrmOrderId(rset.getString("SOURCE_OBJECT_ID"));
				objDto.setReasonCode(rset.getString("ATTRIBUTE1"));			//used ATTRIBUTE1 instead of REASON_CODE
				objDto.setActualEndDate(rset.getString("ACTUAL_END_DATE"));
				objDto.setCreatedBy(rset.getString("CREATED_BY"));
				objDto.setCreationDate1(rset.getString("CREATION_DATE"));
				
				objDto.setRejectedBy(rset.getString("REJECTED_BY"));
				objDto.setRejectedDate(rset.getString("REJECTED_DATE"));
				objDto.setIsRejected(rset.getString("IS_REJECTED"));
				objDto.setIsFirstTask(rset.getString("IS_FIRST_TASK"));
				objDto.setIsLastTask(rset.getString("IS_LAST_TASK"));
				objDto.setTaskAssignedTo(rset.getString("TASK_ASSIGNED_TO"));
				objDto.setTaskName(rset.getString("TASK_NAME"));
				objDto.setPreviousTaskId(rset.getString("PREV_TASK_ID"));
				objDto.setRejectionSendTo(rset.getString("REJECTION_SEND_TO"));
				lstApprovals.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstApprovals.size()>0)
			{
			System.err.println("Approval Workflow Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(spGetApprovalWorkFlowTOIOMS3);
						
			
			for (Iterator iter = lstApprovals.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				csIOMS.setString(1, element.getTaskId());
				csIOMS.setString(2, element.getTaskName());
				csIOMS.setString(3, element.getOwnerId());
				csIOMS.setString(4, element.getTaskStatusId());
				csIOMS.setString(5, element.getPlannedStartDate());
				csIOMS.setString(6, element.getActualEndDate());
				csIOMS.setString(7, element.getCrmOrderId());
				csIOMS.setString(8, element.getCreatedBy());
				csIOMS.setString(9, element.getCreationDate1());
				csIOMS.setString(10, element.getReasonCode());
				csIOMS.setInt(11, 0);
				csIOMS.setInt(12, 0);
				csIOMS.setString(13, "");
								
				csIOMS.setString(14, element.getRejectedBy());
				csIOMS.setString(15, element.getRejectedDate());
				csIOMS.setString(16, element.getIsRejected());
				csIOMS.setString(17, element.getIsFirstTask());
				csIOMS.setString(18, element.getIsLastTask());
				csIOMS.setString(19, element.getTaskAssignedTo());
				csIOMS.setString(20, element.getTaskName());
				csIOMS.setString(21, element.getPreviousTaskId());
				csIOMS.setString(22, element.getRejectionSendTo());
				csIOMS.execute();
				
			}
			 

			if (csIOMS.getInt(12) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("Approval Workflow Details Updated....");
			} else {
				System.err.println("Approval Workflow Details Not Updated....");
				System.err.println(csIOMS.getString(10));
				iomsConn.rollback();
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("Approval Workflow Details Inserted");
			} catch (Exception e) {
			System.out.println("Error in method Approval Workflow()"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}

		}
	
	public static void InsertECRMM6TaskHistorytoIOMS()//INSERT INTO IOE.TM6_RESPONSE_HISTORY
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetECRMM6TaskHistoryFromIOMS);
			pstmt = crmcon.prepareStatement(strGetECRMM6TaskHistoryFromIOMS);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstM6Task = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setCrmOrderId(rset.getString("CRM_ORDER_ID"));
				objDto.setServiceNo(rset.getString("SERVICE_LIST_ID"));
				objDto.setEventTypeId(rset.getString("EVENT_TYPE_ID"));
				objDto.setCancelReason(rset.getString("CANCEL_REASON"));
				objDto.setCreationDate1(rset.getString("CREATION_DATE"));
				lstM6Task.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstM6Task.size()>0)
			{
			System.err.println("M6 Task History Information Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(strInsertECRMM6TaskHistoryToIOMS);
						
			
			for (Iterator iter = lstM6Task.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				csIOMS.setString(1, element.getCrmOrderId());
				csIOMS.setString(2, element.getServiceNo());
				csIOMS.setString(3, element.getEventTypeId());
				csIOMS.setString(4, element.getCancelReason());
				csIOMS.setString(5, element.getCreationDate1());
				csIOMS.setInt(6, 0);
				csIOMS.setInt(7, 0);
				csIOMS.setString(8, "");
				csIOMS.execute();
				
			}
			 

			if (csIOMS.getInt(7) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("M6 Task History Details Updated....");
			} else {
				System.err.println("M6 Task History Details Not Updated....");
				System.err.println(csIOMS.getString(7));
				iomsConn.rollback();
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("M6 Task History Details Inserted");
			} catch (Exception e) {
			System.out.println("Error in method M6 Task History"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}
	
	public static void InsertECRMM6TaskHistorytoIOMS2()//INSERT INTO IOE.TM6_RESPONSE_HISTORY_2
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetECRMM6TaskHistoryFromIOMS2);
			pstmt = crmcon.prepareStatement(strGetECRMM6TaskHistoryFromIOMS2);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstM6Task = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setCrmOrderId(rset.getString("CRM_ORDER_ID"));
				objDto.setServiceNo(rset.getString("SERVICE_LIST_ID"));
				objDto.setEventTypeId(rset.getString("EVENT_TYPE_ID"));
				objDto.setCancelReason(rset.getString("CANCEL_REASON"));
				objDto.setCreationDate1(rset.getString("CREATION_DATE"));
				lstM6Task.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstM6Task.size()>0)
			{
			System.err.println("M6 Task History Information Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(strInsertECRMM6TaskHistoryToIOMS2);
						
			
			for (Iterator iter = lstM6Task.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				csIOMS.setString(1, element.getCrmOrderId());
				csIOMS.setString(2, element.getServiceNo());
				csIOMS.setString(3, element.getEventTypeId());
				csIOMS.setString(4, element.getCancelReason());
				csIOMS.setString(5, element.getCreationDate1());
				csIOMS.setInt(6, 0);
				csIOMS.setInt(7, 0);
				csIOMS.setString(8, "");
				
				csIOMS.setString(9, element.getServiceNo());
				csIOMS.execute();
				
			}
			 

			if (csIOMS.getInt(7) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("M6 Task History Details Updated....");
			} else {
				System.err.println("M6 Task History Details Not Updated....");
				System.err.println(csIOMS.getString(7));
				iomsConn.rollback();
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("M6 Task History Details Inserted");
			} catch (Exception e) {
			System.out.println("Error in method M6 Task History"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}
	public static void InsertECRMTM6_NewOrder_StatustoIOMS2()//INSERT INTO TM6_NEWORDER_STATUS
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetECRMTM6_NewOrder_StatusFromIOMS2);
			pstmt = crmcon.prepareStatement(strGetECRMTM6_NewOrder_StatusFromIOMS2);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstApprovals = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setCrmOrderId(rset.getString("CRMORDERID"));
				objDto.setServiceNo(rset.getString("SERVICEID"));
				objDto.setStatus(rset.getString("STATUS"));
				objDto.setCreationDate1(rset.getString("CREATEDDATE"));
				objDto.setLastUpdatedDate1(rset.getString("LASTUPDATEDDATE"));
				objDto.setOrderType(rset.getString("ORDERTYPE"));
				lstApprovals.add(objDto);
			}
			System.err.println("Inside Function....");
			if(lstApprovals.size()>0)
			{
			System.err.println("Approval Workflow Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(strInsertECRMM6NewOrderStatusToIOMS2);
			for (Iterator iter = lstApprovals.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				csIOMS.setString(1, element.getCrmOrderId());
				csIOMS.setString(2, element.getServiceNo());
				csIOMS.setString(3, element.getStatus());
				csIOMS.setString(4, element.getCreationDate1());
				csIOMS.setString(5, element.getLastUpdatedDate1());
				csIOMS.setInt(6, 0);
				csIOMS.setInt(7, 0);
				csIOMS.setString(8, "");
				csIOMS.setString(9, element.getOrderType());
				csIOMS.execute();
			}
			if (csIOMS.getInt(7) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("Approval Workflow Details Updated....");
			} else {
				System.err.println("Approval Workflow Details Not Updated....");
				System.err.println(csIOMS.getString(10));
				iomsConn.rollback();
				isInserted = false;
			}
			}
				// Long ServiceSegment = null;
			System.out.println("Approval Workflow Details Inserted");
			} catch (Exception e) {
			System.out.println("Error in method Approval Workflow()"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}

	public static void InsertECRMFXAccountCreationtoIOMS()//INSERT INTO IOE.TFX_ACCOUNTCREATE
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetECRMFXAccountCreateFromIOMS);
			pstmt = crmcon.prepareStatement(strGetECRMFXAccountCreateFromIOMS);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstM6Task = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setCrmOrderId(rset.getString("CRM_ORDER_ID"));
				objDto.setLegalEntityCode(rset.getString("LEGAL_ENTITY"));
				lstM6Task.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstM6Task.size()>0)
			{
			System.err.println("FX Account Create Information And Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(strInsertECRMFXAccountToCreate);
						
			
			for (Iterator iter = lstM6Task.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				csIOMS.setString(1, element.getLegalEntityCode());
				csIOMS.setString(2, element.getCrmOrderId());
				csIOMS.setInt(3, 0);
				csIOMS.setInt(4, 0);
				csIOMS.setString(5, "");
				csIOMS.execute();
				
			}
			 

			if (csIOMS.getInt(4) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("FX Account Details Updated....");
			} else {
				System.err.println("FX Account Details Not Updated....");
				System.err.println(csIOMS.getString(4));
				iomsConn.rollback();
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("FX Account Details Inserted");
			} catch (Exception e) {
			System.out.println("Error in method FX Account"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}
	
	public static void InsertECRMFXServiceCreationtoIOMS()//INSERT INTO IOE.TFX_SERVICECREATE
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetECRMFXServiceCreateFromIOMS);
			pstmt = crmcon.prepareStatement(strGetECRMFXServiceCreateFromIOMS);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstM6Task = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setSubScrNo(rset.getString("SERVICE_INTERNAL_ID"));
				objDto.setSubScrNoReset(rset.getString("SERVICE_INTER_ID_RESET"));
				objDto.setLastUpdatedDate1(rset.getString("UPDATED_ON"));
				objDto.setCreationDate1(rset.getString("CREATED_ON"));
				objDto.setOrderLineId(rset.getString("ORDER_LINE_ID"));
				objDto.setServiceNo(rset.getString("SERVICE_LIST_ID"));
				objDto.setAccExternalId(rset.getString("LEGAL_ENTITY"));
				objDto.setTokenId(rset.getString("FX_TOKEN_NO"));
				lstM6Task.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstM6Task.size()>0)
			{
			System.err.println("FX Service Create Information Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(strInsertECRMFXServiceCreateToIOMS);
						
			
			for (Iterator iter = lstM6Task.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				csIOMS.setString(1, element.getSubScrNo());
				csIOMS.setString(2, element.getSubScrNoReset());
				csIOMS.setString(3, element.getLastUpdatedDate1());
				csIOMS.setString(4, element.getCreationDate1());
				csIOMS.setString(5, element.getOrderLineId());
				csIOMS.setString(6, element.getServiceNo());
				csIOMS.setString(7, element.getAccExternalId());
				csIOMS.setString(8, element.getTokenId());
				csIOMS.setInt(9, 0);
				csIOMS.setInt(10, 0);
				csIOMS.setString(11, "");
				csIOMS.execute();
				
			}
			 

			if (csIOMS.getInt(10) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("FX Service Details Updated....");
			} else {
				System.err.println("FX Service Details Not Updated....");
				System.err.println(csIOMS.getString(10));
				iomsConn.rollback();
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("FX Service Details Inserted");
			} catch (Exception e) {
			System.out.println("Error in method FX Service"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}
	
	public static void InsertECRMFXRCCreationtoIOMS()//INSERT INTO IOE.TFX_RC_CREATE
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetECRMFXRCCreateFromIOMS);
			pstmt = crmcon.prepareStatement(strGetECRMFXRCCreateFromIOMS);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstM6Task = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setCrmOrderId(rset.getString("CRM_ORDER_ID"));
				objDto.setOrderLineId(rset.getString("ORDER_LINE_ID"));
				objDto.setChargeId(rset.getString("PK_CHARGES_ID"));
				objDto.setViewId(rset.getString("SERVICE_VIEW_ID"));
				objDto.setLegalEntityCode(rset.getString("LEGAL_ENTITY"));
				objDto.setLastUpdatedDate1(rset.getString("UPDATED_ON"));
				objDto.setCreationDate1(rset.getString("CREATED_ON"));
				lstM6Task.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstM6Task.size()>0)
			{
			System.err.println("RC Fetched and Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(strInsertECRMFXRCCreateToIOMS);
						
			
			for (Iterator iter = lstM6Task.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				csIOMS.setString(1, element.getCrmOrderId());
				csIOMS.setString(2, element.getOrderLineId());
				csIOMS.setString(3, element.getChargeId());
				csIOMS.setString(4, element.getViewId());
				csIOMS.setString(5, element.getLegalEntityCode());
				csIOMS.setString(6, element.getLastUpdatedDate1());
				csIOMS.setString(7, element.getCreationDate1());
				csIOMS.setInt(8, 0);
				csIOMS.setInt(9, 0);
				csIOMS.setString(10, "");
				csIOMS.execute();
				
			}
			 

			if (csIOMS.getInt(9) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("RC Details Updated....");
			} else {
				System.err.println("RC Details Not Updated....");
				System.err.println(csIOMS.getString(9));
				iomsConn.rollback();
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("RC Details Inserted");
			} catch (Exception e) {
			System.out.println("Error in method RC"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}
	
	public static void InsertECRMFXNRCCreationtoIOMS()//INSERT INTO IOE.TFX_NRC_CREATE
	{
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		DBConnectionRetriever con = new DBConnectionRetriever();
		Connection crmcon = con.getCRMConnection();
		
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		boolean isInserted = false;
		try {
			System.out.println("Connect with IOMS database");
			iomsConn = getConnectionObject();
			System.out.println("query ::" + strGetECRMFXNRCCreateFromIOMS);
			pstmt = crmcon.prepareStatement(strGetECRMFXNRCCreateFromIOMS);
			//pstmt.setString(1,insertDate);
			rset = pstmt.executeQuery();
			int i = 0;
			ArrayList lstM6Task = new ArrayList();
			ECRMMigrationDto objDto = null; 
			while (rset.next()) 
			{
				objDto = new ECRMMigrationDto();
				objDto.setOrderLineId(rset.getString("ORDER_LINE_ID"));
				objDto.setChargeId(rset.getString("PK_CHARGES_ID"));
				objDto.setViewId(rset.getString("SERVICE_VIEW_ID"));
				objDto.setLegalEntityCode(rset.getString("LEGAL_ENTITY"));
				objDto.setLastUpdatedDate1(rset.getString("UPDATED_ON"));
				objDto.setCreationDate1(rset.getString("CREATED_ON"));
				lstM6Task.add(objDto);
				
			}
			
			System.err.println("Inside Function....");
			if(lstM6Task.size()>0)
			{
			System.err.println("NRC Charge Created And Stored In ArrayList");	
			iomsConn.setAutoCommit(false);
			csIOMS = iomsConn.prepareCall(strInsertECRMFXNRCCreateToIOMS);
						
			
			for (Iterator iter = lstM6Task.iterator(); iter.hasNext();) 
			{
				ECRMMigrationDto element = (ECRMMigrationDto) iter.next();
				
				csIOMS.setString(1, element.getOrderLineId());
				csIOMS.setString(2, element.getChargeId());
				csIOMS.setString(3, element.getViewId());
				csIOMS.setString(4, element.getLegalEntityCode());
				csIOMS.setString(5, element.getLastUpdatedDate1());
				csIOMS.setString(6, element.getCreationDate1());
				csIOMS.setInt(7, 0);
				csIOMS.setInt(8, 0);
				csIOMS.setString(9, "");
				csIOMS.execute();
				
			}
			 

			if (csIOMS.getInt(8) == 0) {
				iomsConn.commit();
				//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");									
				//UpdateIOMSDataTracker("insert","TM_ACCOUNTROLEDETAILS",sdf.format(new Date()),sdf.format(new Date()));
				isInserted = true;
				System.err.println("NRC Details Updated....");
			} else {
				System.err.println("NRC Details Not Updated....");
				System.err.println(csIOMS.getString(8));
				iomsConn.rollback();
				isInserted = false;
			}
			
			}

				// Long ServiceSegment = null;
			System.out.println("NRC Details Inserted");
			} catch (Exception e) {
			System.out.println("Error in method NRC"
					+ e.getStackTrace());
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				rset.close();
				iomsConn.close();
			} catch (Exception e) {
				System.out.println("exeption due to : " + e.getMessage());
			}
		}
	}
	
	public static Connection getConnectionObject() throws Exception {
		Connection conn = null;
		try {
			DriverManager.registerDriver(new com.ibm.db2.jcc.DB2Driver());
			//conn = DriverManager.getConnection("jdbc:db2://10.24.62.248:50000/DEV_SIT", "db2admin","password");
			conn = DriverManager.getConnection("jdbc:db2://10.5.153.243:60004/IOES_SIT", "a1448525","apr@2013");
			//conn = getURL();
			
			// System.err.println("conn2"+conn);
		} catch (Exception e) {
			e.printStackTrace();
			throw (Exception) e;
		}
		return conn;
	}
	
	public static void main(String args[]) {
		System.out.println("Starting Procesing");
		//int sucessCount = 0;
		//int failurecount = 0;
	 
		java.util.Date date= new java.util.Date();
		 System.err.println("Order Header And Stored In ArrayList" + new Timestamp(date.getTime()));
		 
//		DBConnectionRetriever con = new DBConnectionRetriever();
//		Connection crmcon = con.getCRMConnection();
		
/*		System.err.println("Order Insertion....Started");
		InsertECRMOrderHeadertoIOMS();
		
		System.err.println("Order Attributes Insertion....Started");
		InsertECRMHeaderAttributesInfotoIOMS();  //NEED TO CHECK
		
		System.err.println("Order Contact Insertion....Started");
		InsertECRMContacttoIOMS();  
		
		System.err.println("Contact Address Insertion....Started");
		InsertECRMAddresstoIOMS();
		
		System.err.println("PO Details Insertion....Started");
		InsertECRMPODetailstoIOMS();

		System.err.println("Service Attribute Insertion....Started");
		InsertECRMServiceAttributestoIOMS();
		
		System.err.println("Order Line Insertion....Started");
		InsertECRMOrderLinetoIOMS();
		
		/*System.err.println("Order Line Attributes Insertion....Started");
		InsertECRMLineAttributestoIOMS();
		
		System.err.println("Billing Info Insertion....Started");
		InsertECRMChargesHeaderBillingInfotoIOMS();
		
		System.err.println("Location Info Insertion....Started");
		InsertECRMLocationInfotoIOMS();
		
		System.err.println("Hardware Info Insertion....Started");
		InsertECRMHardwareInfotoIOMS();
		
		System.err.println("Charges Info Insertion....Started");
		InsertECRMChargestoIOMS();
		
		System.err.println("Approval Workflow Details Insertion....Started");
		InsertECRMApprovalWorkFlowtoIOMS();
		
		System.err.println("Approval Details Insertion....Started");
		//InsertECRMApprovalsInfotoIOMS(); PROCEDURE'S ARGUMENT MISMATCH
		
		System.err.println("M6 Task History Details Insertion....Started");
		InsertECRMM6TaskHistorytoIOMS();
		
		System.err.println("FX Account Creation Details Insertion....Started");
		InsertECRMFXAccountCreationtoIOMS();
		
		System.err.println("FX Service Creation Details Insertion....Started");
		InsertECRMFXServiceCreationtoIOMS();
		
		System.err.println("FX RC Creation Details Insertion....Started");
		InsertECRMFXRCCreationtoIOMS();
		
		System.err.println("FX NRC Creation Details Insertion....Started");
		InsertECRMFXNRCCreationtoIOMS();*/
		 
		 	System.err.println("TPOMASTER....Started");
	 		InsertECRMOrderHeadertoIOMS2();
			
	 		System.err.println("TATTRIBUTEVALUES Insertion....Started");
			InsertECRMHeaderAttributesInfotoIOMS2(); 
			
			System.err.println("TPOCONTACT Insertion....Started");
			InsertECRMContacttoIOMS2(); 
			
			System.err.println("TPOADDRESS Insertion....Started");
			InsertECRMAddresstoIOMS2();
			
			System.err.println("TPODETAILS Insertion....Started");
			InsertECRMPODetailstoIOMS2(); 

			System.err.println("TPOSERVICEMASTER Insertion....Started");
			InsertECRMServicetoIOMS2();
				
			System.err.println("TPOSERVICEDETAILS Insertion....Started");
			InsertECRMOrderLinetoIOMS2();
			
			System.err.println("TPOSERVICEDETAILS_HISTORY Insertion....Started");
			InsertECRMOrderLinetoIOMS3();
			
			System.err.println("TDISCONNECTION_HISTORY Insertion....Started");
			InsertECRMOrderLinetoIOMS4();
			
			System.err.println("TBILLING_INFO Insertion....Started");
	 		InsertECRMChargesHeaderBillingInfotoIOMS2();
	 		
	 		System.err.println("TBILLING_INFO_HISTORY Insertion....Started");
			InsertECRMChargesHeaderBillingInfotoIOMS3();
			
			System.err.println("THARDWARE_INFO_2 Insertion....Started");
			InsertECRMHardwareInfotoIOMS2();
			
			System.err.println("THARDWARE_INFO_HISTORY Insertion....Started");
			InsertECRMHardwareInfotoIOMS3();
			
			System.err.println("TLOCATION_INFO Insertion....Started");
			InsertECRMLocationInfotoIOMS2();
			
			System.err.println("TLOCATION_INFO_HISTORY Insertion....Started");
			InsertECRMLocationInfotoIOMS3();	
			
			System.err.println("TCHAREGES_INFO Insertion....Started");
			InsertECRMChargestoIOMS2();
		
			System.err.println("TCHAREGES_INFO_HISTORY Insertion....Started");
			InsertECRMChargestoIOMS3();	
			
			System.err.println("TPRODUCTLINEATTVALUE Insertion....Started");
			InsertECRMLineAttributestoIOMS2();
			
			System.err.println("TPRODUCTLINEATTVALUE_HISTORY Insertion....Started");
			InsertECRMLineAttributestoIOMS3();
			
			System.err.println("TPOWORKFLOWTASK Insertion....Started");
			InsertECRMApprovalWorkFlowtoIOMS2();
			
			System.err.println("TTASKACTIONHISTORY Insertion....Started");
			InsertECRMApprovalWorkFlowtoIOMS3();
			
			System.err.println("TCHANGE_ORDER_DETAILS Insertion....Started");
			InsertECRMChangeOrderDetailstoIOMS2();
			
			System.err.println("TM6_RESPONSE_HISTORY Insertion....Started");
			InsertECRMM6TaskHistorytoIOMS2();
			
			System.err.println("TM6_NEWORDER_STATUS Insertion....Started");
			InsertECRMTM6_NewOrder_StatustoIOMS2();
		System.err.println("Order Completed Successfully at " + new Timestamp(date.getTime()));
		 
	}
	
}
