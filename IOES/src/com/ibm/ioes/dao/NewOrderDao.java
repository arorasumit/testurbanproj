package com.ibm.ioes.dao; 
//Tag Name Resource Name  Date		CSR No			Description
//[001]	 ROHIT VERMA	4-Feb-11	00-05422		Sending ShortCode on New Order
//[003]	 ROHIT VERMA	18-Feb-11	00-05422		Zone and Region will be Fetched From Account Level
//[008]	 MANISHA GARG	23-Feb-11	00-05422		To Check PONUMBER and PODATE already exists inDatabase for NewOrder
//[009]	 MANISHA GARG	23-Feb-11	00-05422		To Check PONUMBER and PODATE already exists inDatabase for ChangeOrder 

//[010]	 MANISHA GARG	02-MAR-11	00-05422		To add New Field New Order Type in New Order.jsp


//[010]  SAURABH SINGH	28-Feb-11	00-05422		Copy Charge from one line item to another
//[011]	 ROHIT VERMA	3-MAR-11	00-05422		CREATED BY AND MODIFIED BY
//[012]	 Rakshika		4-Mar-11	00-05422		Download Interface
//[013]	 Manisha		14-Mar-11	00-05422		Draft New Search
//[014]	 Manisha		14-Mar-11	00-05422		Draft Change Search

//[004]	 ROHIT VERMA	10-MAR-11	00-05422		ADD CHILD NODE OR PRODUCT
//[015] Vishwa			17-Mar-11	00-05422		Populate Pincode based City and State
//[016] Vishwa			25-Mar-11	00-05422		Prepopulate Service Location Details based on the existing Service product id of Service Type
//[017]    MANISHA GARG   25-MAR-11   00-05422        Deletion Of Products 
//[018] 	 Lawkush 		11-April-2011				In order to validate fields according to database driven mandatory or nonmandatory in all section
//[019] 	 Lawkush 		06-05-2011				Setting paging sorting
//[0020] 	 Sumit Arora 	27-05-2011				For Fetching BCP With Disptach Address
//[0021] 	 Ravneet Singh 	03-06-2011				For Show Tax Sum
//[022]		ANIL KUMAR		21-06-2011				display billing contact and email
// [00044]	 Ashutosh Singh		23-June-11	CSR00-05422     Creating Change Order From Existing order in Billing Queue 
//[023]	 LAWKUSH		28-June-11	CSR00-05422     Added NFA checkbox on product catelog page 
 //[024] LAWKUSH		1-July-11	CSR00-05422     Added isurgent checkbox on neworder page 
//[025]   Manisha		13-July-11	CSR00-05422     Insert Service Id in tcharge_info Table 
//[026]   Manisha		13-July-11	CSR00-05422     TO Fetch Created_Serviceid From TCharge_Info for Product Catelog
//[027]	 LAWKUSH		22-July-11	CSR00-05422     fetching product specific po's and po's from tbillinginfo_history
//[028]	 LAWKUSH	  03-August-11	CSR00-05422     to insert po detail id for in tcharge_info
//[029]	 LAWKUSH	  18-August-11	CSR00-05422     For Copy Charge Validation
//[030]  ASHUTOSH     22-Aug-11     CSR00-05422     To Maintain History for product catalog and updating product catalog
//[031]	 Manisha	  18-August-11	CSR00-05422     Delete Service in change Order

// ==========================================Sumit Arora====================================================================================== -->
// [SUMIT001]  	Sumit Arora	05-Oct-11	00-05422		Changes Made For Currency Should Checked for LSI Listed i.e. Only those LSI having same Currency as Order-->
// ================================================================================================================================ -->
//[032]	 LAWKUSH 		17-OCT-11	00-05422		For making Project Manager   dropdown into textbox 
//[033]  	Lawkush			28-10-11	00-05422		Treeview in change order disabled for hardware sale for all change order except disconnection
//[034] Vishwa			04-Nov-11	00-05422		Updated the Validate PO Method in New and Change Order in Order to Allow Zero PO Amount
//[035]	 ROHIT VERMA	07-NOV-11	CSR00-05422		Report for Copy & Cancal
//[036]    SAURABH SINGH  04-Nov-11   00-05422        Creating Cancel&Copy Order
//[037] Vishwa			09-Nov-11	00-05422		Updated for SaaS
//[077]    ASHUTOSH SINGH  01-DEC-11  00-05422        Changes in PO AMOUNT(Decimal validation) 
//[078]    MANISHA GARG    11-MAY-12  00-05422       For copying Line Item 10 Times, 10 hit goes to DB rather than I hit to DB
//[079]	  Lawkush 	 12-June-12	    CSR00-05422		For making service  summary and service product attributes editable or non editable according to change type , subchange type and SUBCHANGETYPE_NETWORK_CHANGE_EDITABLE flag  in database
//[080]    ASHUTOSH       11-Jun-12	CSR00-05422		Copy Service Product in New and Change Order Using Common Function
//[081]    Raghu       13-July-12	CSR00-05422		add contact name in dispatch hardware detail section on product catalog page
//[082]    Raghu       13-July-12	CSR00-05422		Code change for allowing Maxlength from backend 
//[083]		Vishwa		17-Jul-2012	CSR00-05422		Code Changes for adding extra Extended Attributes in change Order
//[084]	 Vijay Pathak	30-Jan-2013			        fetching Change reason on the behalf of serviceId
//[085]	 Manisha		06-Feb-13	00-05422		Reassign to pm (auto suggest drop down) point no 98
//[086]	 Manisha		06-Feb-13	00-05422		Uploaded document time stamp, milisecond part to be removed defect no 72
//[087]	 LAWKUSH	    07-Feb-2013				Service Location Customer Address like search Point No-5 Hypercare
//[088]	 LAWKUSH	    07-Feb-2013				Alert not generated post COPC approval  
//[088]	 Manisha	    13-Feb-13	00-05422	GET Act Mgr which ORDERS ARE PENDING TO COMPLETE
//[15032013011]	 VIJAY	        27-Feb-2013				Added a another column(upload by) on 'view document for download' page
//[101010] Rampratap changed for LST_NO to be take which is getting updated from CRM
//[15032013017] Rampratap 14-03-13 added for count tolal line items selected.
//[HYPR22032013006] Anil 29-03-13 Update the resong for change value from service attribute pag of change order
//[HYPR22032013003]	 Kalpana	    30-March-13	00-05422	COPC region wise change
//[HYPR22032013001]    Vijay    30-March-2013          Billing Work Queue Report.
//[HYPR09042013001]	Kalpana 16-April-2013 added another procedure with one parameter less,removed @rejectionSendTo and changed index bug ID,procedure SP_INSERT_TASK_ACTION_CHANGE_ORDER 
//[090]	 Neelesh		24-May-13	CSR00-08463     For Addition of Revenue Circle
//[089]	 Rohit Verma    1-Mar-2013	CSR00-08440	New Interface to show Hardware Lines for Cancelation
//[IN1618366] Anil Kumar 21-June-2013 After approval by COPC or SED Mail should also go to PM
//[TRNG22032013037]		Neelesh 06-Jun-2013			Opportunity
//[092]	 Kalpana		13-JUN-13	CBR-CSR-20130404-XX-08714     For M6 Editable fields ,setting isServiceSummReadonly by fetching READONLY in procedure GETSERVICEATTRIBUTEMASTER1,GET_SERVICEATTRIBUTE_MASTER_VALUE1_SOLUTIONCHANGE
//[093] Rohit Verma        		    CSR-IT-09112	Upgrade Order LSI No added on service Level 
//[139] Rahul Tandon  20150225-R1-021112-Modification in Access Matrix in IB2B
//[094] Santosh.S	    29-Nov-13   CSR-IT-09463   	2 New Methods added for Displaying and Saving Advance Payment against Line item
//[095]	 Rohit Verma	26-Nov-13	CSR-IT-09463    Validation to input Advance Payment details at line item level for Channel's Order
//[096] Vipin Saharia 26-Dec-2013 Added getSCMProgressStatus method for SCM Repush Button
//[097] Vipin Saharia 17-Jan-2014 Added getRfsDateForSCM method for fetching rfs date from tpomaster table for need by date column on scm page
//[098] Vipin Saharia 25-Feb-2014 Added getThirdPartyState method to fetch Third party State (Active or Inactive)
//[507]	Anoop Tiwari  10-March-2014 Added to update tposervicemater,& role_order_mapping
//[0099] Nagarjuna     10-March-2014 Added for PM Welcome Mail
//[00101]  Gunjan Singla  11-March-2014              added for cancellation reason
// [100] VIPIN SAHARIA 04-06-2014 Added logic for Fx_ChargeID required for extra logic DC_COLO_SERVICE_TAX Charge (Hardware DC)
//[120]   Gunjan       25-06-14    CSR_20140526_R1_020159     Order Cancellation Post Publish
//[121]	VIPIN SAHARIA 17-07-2014 Added methods to get charge details for Service - Sales charges validation for DC hardware products.
//[122] VIPIN SAHARIA 05-09-2014	Added logic to show alert while clicking SendToCOPC after SED Approval
//[123] Sadananda Behera 01-09-2014 added new column(Service_cancel_resion,service_cancel_remarks,service_cancel_reson,service_cancel_date) for new order in serviceType import java.math.BigDecimal;
//[124] Vipin Saharia	Code to chk if PO present while copying lines in change order (for PM n SED)
//[125]   Neha Maheshwari    added service segment    NORTH STAR ACCOUNT TAGGING
//[126] VIPIN SAHARIA 14 Jan 2015 Commented Exception prone code. No such Proc Exist in DB called by sqlGetEntityMaster i.e. IOE.SPGET_ENTITY_MASTER_FOR_AUTOSUGGEST
//[127]  Gunjan Singla    27-Dec-14     20141113-R1-020802		ParallelUpgrade-Multiple LSI Selection  
//[128]  Raveendra   16-02-2015  20150203-R1-021049  advance payment refund process     
//[129]  Gunjan Singla   4-Mar-15     20150225-R1-021111    LSI and Service No Search required in Lines Tab
//[130]	 	VIPIN SAHARIA	13-Apr-15	CBR_20150202-R2-021036		Sending ePCD and SMS alerts to customer at every order life cycle stage
//[131]   Raveendra      20150403-R1-021203      05-May-2015                 Online Payment fix
//[132] VIPIN SAHARIA 12-May-2015 20150403-R2-021204 Project Satyapan Adding ISP tagging fields to header section (Moved transaction call from dao to model to make changes in same transaction)
//[133] Neha Maheshwari 10-Jun-2015 20141219-R2-020936 Billing Efficiency Program Parallel Upgrade LSI
//[134] Raveendra 06-july-2015 20141219-R2-020936-Billing Efficiency Program_drop2  Auto Billing Trigger
//[135] Priya Gupta  19-Jun-2015 20141219-R2-020936-Billing Efficiency Program_drop2  Added Ld Clause Column
//[136] VIPIN SAHARIA 13th Aug 2015 CBR_20141219-R2-020936-Billing Efficiency Program Drop 3 (BFR 17) Reverting MBIC CC mapping as per L3-VCS mapping
//[137]  Gunjan Singla    11-Aug-15   20141219_R2_020936  Billing efficiency drop2 
//[138] Priya Gupta	 03-Aug-2015 20141219-R2-020936-Billing Efficiency Program_drop3  Added order source column in draft disconnection work queue and list out the orders according to user's customer segment.
//[139] RAHUL TANDON 3-Sept-2015 CBR_20150603-R2-021385-Charge End Date and Short Billing : Alert on order validate if order has charges which have charges which can be re-disconnect
//[140] Gunjan Singla  8-sept-15 20150603-R2-021385    Charge End Date and Short Billing
//[141] Gunjan Singla	24-Nov-2015		M2M:validations on validate order button 
//[142] Rahul Tandon 22/Jan/2016  20150508-R2-021322 SalesForce Opportunity number in iB2B  
//[143] Priya Gupta  31-MAR-2016	Order approves twice in PD orders.
//[144] Gunjan Singla 5-Apr-2016     same tax rate for foreign legal entity
//[145] Priya Gupta  4- May-2016   Completed orders coming in PD queue.
//[147] Nancy Singla  16-May-2016  20160301-xx-022139  New functions added for retrieving/updating  Assigned/Deassigned Standard Reasons
//[146] Nancy Singla  1-JUNE-2016  20160301-xx-022139  New function added to get the saved ePcn No.
//[148] Gunjan Singla  17-Oct-2016 20160219-XX-022117   CBR-ANG bandwidth correction in iB2B and M6
import java.math.BigDecimal;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import javax.sql.rowset.serial.SerialBlob;

import net.sf.json.JSONArray;
import net.sf.json.JsonConfig;

import org.apache.struts.upload.FormFile;


import com.ibm.appsecure.util.Encryption;
import com.ibm.fx.dto.ChargesDto;
import com.ibm.ioes.beans.NewOrderBean;
import com.ibm.ioes.beans.UserInfoDto;
import com.ibm.ioes.beans.ViewOrderDto;
import com.ibm.ioes.clep.CLEPUtility;
import com.ibm.ioes.clep.CLEPXmlDto;
import com.ibm.ioes.clep.ParseXMLForChangeOrder;
import com.ibm.ioes.clep.ParseXMLforCLEP;
import com.ibm.ioes.dbhelper.LabelValue;
import com.ibm.ioes.ei.scm.BL.SCMBL;
import com.ibm.ioes.exception.IOESException;
import com.ibm.ioes.forms.AdvancePaymentDTO;
import com.ibm.ioes.forms.ChannelPartnerDto;
import com.ibm.ioes.forms.ChargeComponentDTO;
import com.ibm.ioes.forms.ChargesDetailDto;
import com.ibm.ioes.forms.CommonDTO;
import com.ibm.ioes.forms.ComponentsDto;
import com.ibm.ioes.forms.ContactDTO;
import com.ibm.ioes.forms.DelayReasonDTO;
import com.ibm.ioes.forms.DisconnectOrderDto;
import com.ibm.ioes.forms.Entity;
import com.ibm.ioes.forms.FieldAttibuteDTO;
import com.ibm.ioes.forms.FieldEnginnerDto;
import com.ibm.ioes.forms.FileAttachmentDto;
import com.ibm.ioes.forms.LSICancellationDto;
import com.ibm.ioes.forms.LineItemDTO;
import com.ibm.ioes.forms.LineItemValueDTO;
import com.ibm.ioes.forms.MigrationOrdersDto;
import com.ibm.ioes.forms.NewOrderDto;
import com.ibm.ioes.forms.OpportunityDTO;
import com.ibm.ioes.forms.OrderHeaderDTO;
import com.ibm.ioes.forms.ParallelUpgradeValidationDto;
import com.ibm.ioes.forms.ReportsDto;
import com.ibm.ioes.forms.SharepointDto;
 
import com.ibm.ioes.forms.PagingCommonDto;
import com.ibm.ioes.forms.PagingDto;
import com.ibm.ioes.forms.PoDetailsDTO;
import com.ibm.ioes.forms.ProductCatelogDTO;
import com.ibm.ioes.forms.ServiceLineDTO;
import com.ibm.ioes.forms.ServiceSubTypeDto;
import com.ibm.ioes.forms.TreeViewDto;
import com.ibm.ioes.forms.WorkflowTaskDTO;
import com.ibm.ioes.model.NewOrderModel;
import com.ibm.ioes.model.NewOrderModel.BillingEfficiencyDto;
import com.ibm.ioes.model.PMWelcomeMailModel;
import com.ibm.ioes.newdesign.dto.AutoBillingLineDto;
//import com.ibm.ioes.model.DemoDaysMailAlertModel;
import com.ibm.ioes.newdesign.dto.OpportunityDto;
import com.ibm.ioes.newdesign.dto.OrderDto;
import com.ibm.ioes.newdesign.dto.PMWelcomeMailDto;
import com.ibm.ioes.newdesign.dto.ServiceDto;
import com.ibm.ioes.newdesign.dto.ServiceLinkingDTO;
import com.ibm.ioes.newdesign.dto.StandardReason;
import com.ibm.ioes.newdesign.form.SelectOpportunityPageForm;
import com.ibm.ioes.utilities.AppConstants;
import com.ibm.ioes.utilities.ApplicationFlags;
import com.ibm.ioes.utilities.CustomerAlertService;
import com.ibm.ioes.utilities.DbConnection;
import com.ibm.ioes.utilities.IB2BMail;
import com.ibm.ioes.utilities.IB2BMailDto;
import com.ibm.ioes.utilities.Messages;
import com.ibm.ioes.utilities.PagingSorting;
import com.ibm.ioes.utilities.Utility;
import com.ibm.ioes.ei.scm.BL.SCMBL;
import com.ibm.ioes.forms.ChargeDetailsSCM;
import com.ibm.ioes.forms.PRDetailsDto;
import com.ibm.ioes.forms.SCMDto;
import com.ibm.ioes.forms.UserAccessMatrixDto;
import com.tivoli.pd.jasn1.boolean32;
  public class NewOrderDao extends CommonBaseDao{

	public static String sqlSpViewDropDownTree= "{call IOE.SP_GET_TREE_FOR_DROPDOWN(?)}";//To Validate PO and update Status
	public static String sqlGetChargeDetails_Fx="{call IOE.FX_GET_CHARGES_FOR_DISCONNECT(?)}";
	//change raghu
    //public static String sqlGetAccount = "{call IOE.SPGETACCOUNT(?,?)}";//To Fetch All Account List from Database
	public static String sqlGet_PODETAILSTATUS="{call IOE.GETPODATESTATUS(?,?)}";
	public static String sqlGet_PODETAILSTATUS_FOR_NEW="{call IOE.GETPODATESTATUS_FOR_NEW(?,?,?)}";
	public static String sqlGetAccount = "{call IOE.SPGETACCOUNT(?,?)}";//To Fetch All Account List from Database
	//added by ashutosh as on date : 03-Oct-2011
	public static String sqlGetCustLogicalSI = "{call IOE.SP_GET_CUSTOMER_LOGICAL_SI(?,?)}";//To Fetch All Customer Logical SI for Account Specific 
	//[083] Updated to 1 parameter
	public static String sqlGetMainDetails = "{call IOE.spGetMainDetails(?)}";//To Fetch All Account List from Database
    //public static String sqlGetCurrency = "{call IOE.spGetCurrency(?)}";//To Fetch All Currency List from Database
	public static String sqlGetMaxOrderValue = "{call IOE.spGetMaxOrderNo(?)}";//To Fetch All Currency List from Database
	public static String sqlGetSource= "{call IOE.SPGETSOURCE(?)}";//To Fetch All Currency List from Database
	public static String sqlGetCountCONTACTNUMBER="{call IOE.SP_COUNT_CONTACT_DELETE(?,?)}";
	public static String sqlGetPrevTaskRoleId="{call IOE.GET_PREV_TASK_ROLE_ID(?,?)}";
	//public static String sqlInsertPOMaster= "{call IOE.SPPOMASTERINSERT(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";//To Insert or Update PO Master
	//public static String sqlInsertUpdateMain= "{call IOE.spUpdateMain(?,?,?,?,?,?,?,?,?,?,?)}";//To Insert or Update PO Master
	public static String sqlDeleteDownLoadFile="{call IOE.SP_DELETE_DOWNLOAD_FILE(?,?,?,?,?)}";
	public static String sqlDeleteProducts="{call IOE.SP_DELETE_PRODUCT(?,?,?,?,?)}";
	public static String sqlDeleteServices="{call IOE.SP_DELETE_SERVICE_IN_CHANGE_ORDER(?,?,?,?,?)}";
	public static String sqlDeleteServices1="{call IOE.SP_DELETE_SERVICE_IN_NEW_ORDER(?,?,?,?)}";
	//[011] Start
	//public static String sqlInsertPOMaster= "{call IOE.spPOMasterInsert1(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";//To Insert or Update PO Master
	//start[024]
	public static String sqlInsertPOMaster= "{call IOE.SPPOMASTERINSERT(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";//To Insert or Update PO Master
	//End[024]
	//public static String sqlInsertUpdateMain= "{call IOE.spUpdateMain(?,?,?,?,?,?,?,?,?,?,?)}";//To Insert or Update PO Master
	public static String sqlInsertUpdateMain= "{call IOE.SPUPDATEMAIN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";//To Insert or Update PO Master
	//	[011] End
	public static String sqlGetAccountDetails= "{call IOE.SPGETACCOUNTDETAILS(?,?,?)}";//To Fetch Account and Main Tab Details along with Values from Database 
	public static String sqlGetMainDetailsWithAttributes= "{call IOE.spGetAttributesValues(?)}";//To Fetch Account and Main Tab Details along with Values from Database
	public static String sqlGetContactDetail= "{call IOE.SPGETCONTACTDETAIL(?)}";//To Get Contact Details
	public static String sqlGetIncompleteOrder="{call IOE.SPGETINCOMPLETEORDRS1(?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	public static String sqlGetIncompleteOrder_change="{call IOE.SPGETINCOMPLETECHANGEORDRS1(?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	//change raghu
	//public static String sqlFetchServiceType= "{call IOE.GETSERVICETYPE(?)}";//To Fetch Service Type from Database
	//Start[019]
	public static String sqlFetchServiceType= "{call IOE.GETSERVICETYPE(?,?,?,?,?,?,?)}";//To Fetch Service Type from Database
	//End[019]
	public static String sqlFetchServiceSubType= "{call IOE.GETSERVICESUBTYPE(?)}";//To Fetch Service Sub Type from Database
	//[011] Start
	//public static String sqlspInsertService = "{call IOE.SPSERVICEINSERT(?,?,?,?,?,?,?,?)}";//To Insert Service in database
	public static String sqlspInsertService = "{call IOE.SPSERVICEINSERT(?,?,?,?,?,?,?,?,?)}";//To Insert Service in database
	//[011] End
	public static String sqlspPoServiceList = "{call IOE.GETPOSERVICELIST(?)}";//To Insert Service in database	
	//Added by Ashutosh for sifting
	public static String sqlspIsPoServiceProductModify= "{call IOE.GETSERVICEPRODUCT_MODIFY(?,?)}";// is modify 
	public static String sqlGetAddressDetail= "{call IOE.SPGETADDRESSDETAIL(?)}";//To Get Address Details
	public static String sqlGetContactTypes= "{call IOE.SPGETCONTACTTYPES(?)}";//To Get Contact Types
	//[011] Start
	//public static String sqlUpdatetServiceAttributes="{call IOE.SPUPDATESERVICEATTRIBUTE(?,?,?,?,?,?,?)}";//To insert update Service Attribute
	//lawkush
	//public static String sqlUpdatetServiceAttributes="{call IOE.SPUPDATESERVICEATTRIBUTE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";//To insert update Service Attribute
	//[011] End
	
	//Shubhranshu
	public static String sqlUpdatetServiceAttributes="{call IOE.SPUPDATESERVICEATTRIBUTE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";//To insert update Service Attribute
	//
	public static String sqlFetchServiceAttributes="{call IOE.spGetServiceAttributesDetails(?)}";//To insert update Service Attribute
	public static String sqlFetchServiceTypeDetails="{call IOE.GETSERVICEDETAILLIST(?,?)}";//To insert update Service Attribute
	public static String sqlFetchServiceAttributeMstr="{call IOE.GETSERVICEATTRIBUTEMASTER1(?,?)}";//To insert update Service Attribute
	public static String sqlSearchContactTypes="{call IOE.SEARCHCONTACTTYPE(?)}";//To insert update Service Attribute
	public static String sqlGetTProductAttributeDetails="{call IOE.SPGET_TPRODUCT_ATT_DETAILS(?,?)}";//To Fetch T Product Attribute Details
	//[011] Start
	//public static String sqlInsertTProductAttributeDetails="{call IOE.SP_INSERT_UPDATE_TPRODUCT_ATT_DETAIL(?,?,?,?,?,?)}";//To Fetch T Product Attribute Details
	public static String sqlInsertTProductAttributeDetails="{call IOE.SP_INSERT_UPDATE_TPRODUCT_ATT_DETAIL(?,?,?,?,?,?,?)}";//To Fetch T Product Attribute Details
	//[011] End
	//for PO
	public static String sqlSpInsertTaskNotes= "{call IOE.SP_INSERT_TASK_NOTES(?,?,?,?,?,?,?)}";//To Insert Task Notes
	public static String sqlSpInsertTaskAction= "{call IOE.SP_INSERT_TASK_ACTION(?,?,?,?,?,?,?,?,?,?)}";//To Insert Task Notes
	public static String sqlSpViewNotes= "{call IOE.SP_VIEW_TASK_NOTES(?)}";//To Insert Task Notes
	public static String sqlSpDeleteNotes= "{call IOE.SP_DELETE_TASK_NOTE(?,?,?,?)}";//To Insert Task Notes
	public static String sqlInsertDisconnectionDate= "{call IOE.SP_INSERT_DISCONNECTION_DATE(?,?,?,?,?)}";//To Insert Task Notes
	//public static String sqlGetPODetail= "Select * from ioe.tPODetails where poNumber=?";
	public static String sqlGetPOMaster= "Select accountid from ioe.tPOMaster where orderNo=?";
	public static String sqlGetPODetail= "{call IOE.SP_GET_PO_DETAILS(?)}";//To Insert Task Notes
	public static String spvalidatetaxrate= "{call IOE.SP_GET_CHHARGES_DIFFERENT_TAX_RATE(?)}";//To Insert Task Notes
	
	public static String sqlGetPendingOrdersforMail = "SELECT * FROM IOE.VW_PENDING_ORDER_MAIL";
	public static String spgetServiceid= "{CALL IOE.SP_GET_CREATED_SERVICEID(?)}";
	//Start[027]
	
	public static String sqlGetPODetailForProduct= "{call IOE.SP_GET_PO_DETAILS_FOR_PRODUCT(?,?)}";//To Insert Task Notes
	private static String sqlGetPODetailsForCustPO = "select * from IOE.TPODETAILS where PODETAILNUMBER = ?";
	//End[027]
	
	//public static String sqlGetPOEntity= "SELECT entityID, EntityName, entityCode FROM ioe.tEntity";
	public static String sqlGetPOEntity= "{call IOE.SP_GET_ENTITY(?)}";//To Insert Task Notes
	public static String sqlGetPOEntity1= "{call IOE.SP_GET_ENTITY1()}";//To Insert Task Notes
	public static String sqlGetPOEntityForBilling= "{call IOE.GETPOENTITY(?)}";
	public static String sqlGetLicCompany= "{call IOE.GETLICENCECOMPANY(?,?,?)}";
	public static String sqlgetCustPoDetailNo="{call IOE.GETCUSTOMERPODETAILNO(?)}";
	public static String sqlFetchServiceLocationDetails="{call IOE.SP_GETSERVICELOCATION_NEWORDER(?)}";
	public static String sqlGetStore="call IOE.GETSTORELIST(?)";
	public static String sqlGetHardwareType="call IOE.SP_GET_HARDWARETYPE()";
	public static String sqlGetSaleNature="call IOE.SP_GET_SALENATURE()";
	public static String sqlGetSaleType="CALL IOE.SP_GET_SALETYPE(?)";
	public static String sqlGetFormAvailble="CALL IOE.SP_GET_FORMAVAILABLE()";
	public static String sqlGetDispatchAddressCode="call IOE.GETDISPATCHADDRESSCODE(?)";
	public static String sqlGetDispatchAddress="call IOE.GETDISPATCHADDRESS(?)";
	public static String sqlGetBCPID="call IOE.GETBCPID(?)";
	public static String sqlGetBCPIDWithDispatch="call IOE.GETBCPDETAILS_WITH_DISPATCH(?)";
	public static String sqlGetBCPDetails="call IOE.GETBCPDETAILS(?)";
	public static String sqlGetPNLocationCode="call IOE.GETPNLOCATION()";
	public static String sqlGetNPAddress="call IOE.Get_Network_Location_Details(?)";
	
	//[011] Start
	//public static String sqlUpdateServiceType="call IOE.SPUPDATE_SERVICE_TYPE(?,?,?,?,?,?,?)";
	public static String sqlUpdateServiceType="call IOE.SPUPDATE_SERVICE_TYPE(?,?,?,?,?,?,?,?)";
	//Added by Ashutosh for updating Change Order
	//public static String sqlUpdateServiceType1="call IOE.SPUPDATE_SERVICE_TYPE(?,?,?,?,?,?,?,?)";
	public static String sqlUpdateServiceType1="call IOE.SPUPDATE_SERVICE_TYPE1(?,?,?,?,?,?,?,?,?)";
	
	//public static String sqlInsertProdLineAttributes="call IOE.SPUPDATE_PRODUCT_CATELOG(?,?,?,?,?,?,?)";
	public static String sqlInsertProdLineAttributes="call IOE.SPUPDATE_PRODUCT_CATELOG(?,?,?,?,?,?,?,?)";
	//[030] Start
	public static String sqlInsertProdLineAttributesForNew="call IOE.SPUPDATE_PRODUCT_CATELOG_FOR_NEW(?,?,?,?,?,?,?,?,?,?,?,?,?)";//Added by Ashutosh For Solution Change
	//[030] End
	//public static String sqlInsertBillingInfo="call IOE.SPUPDATE_BILLING_INFO(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	//Start[023]
	public static String sqlInsertBillingInfo="call IOE.SPUPDATE_BILLING_INFO(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	//End[023]
	//public static String sqlInsertHardwareDetails="call IOE.SPUPDATE_HARDWARE_INFO(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	public static String sqlInsertHardwareDetails="call IOE.SPUPDATE_HARDWARE_INFO(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	
	
	//public static String sqlInsertServiceDetails="call IOE.SPUPDATE_SERVICELOCATION_INFO(?,?,?,?,?,?,?,?,?,?,?,?,?)";
	public static String sqlInsertServiceDetails="call IOE.SPUPDATE_SERVICELOCATION_INFO(?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	//public static String sqlInsertChargeDetails="call IOE.SPUPDATE_CHARGE_INFO1(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	
	
	//public static String sqlInsertChargeDetails="call IOE.SPUPDATE_CHARGE_INFO(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	//public static String sqlInsertChargeDetails="call IOE.SPUPDATE_CHARGE_INFO(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	//start[028]
	//public static String sqlInsertChargeDetails="call IOE.SPUPDATE_CHARGE_INFO(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	public static String sqlInsertChargeDetails="call IOE.SPUPDATE_CHARGE_INFO(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	//End[028]
	//	[011] End
	
//	lk
	public static String sqlGetLineNSubLineItemLabel="{call IOE.SP_GET_LINE_SUBLINEITEMLABEL(?)}";
	//lk
	
	public static String sqlSpDeletePODetail= "{call IOE.SP_DELETE_PO_DETAIL(?,?,?,?)}";//To Insert Task Notes
	public static String sqlSpValidatePO= "{call IOE.SPUPDATEPOSTATUS(?,?,?,?,?)}";//To Validate PO and update Status
	
	public static String sqlSpValidatePO_inEditMode= "{call IOE.SP_UPDATE_PO_STATUS_IN_EDIT_MODE(?,?,?,?,?,?)}";//To Validate PO and update Status
	
	public static String sqlSpViewServiceTree= "{call IOE.SP_GET_TREE_MAPPING(?,?)}";//To Validate PO and update Status
	//public static String sqlFetchServiceAttributeMstrValue="{call IOE.GET_SERVICEATTRIBUTE_MASTER_VALUE1(?,?,?)}";//To Fetch Service Summary Master and Value
	public static String sqlFetchServiceAttributeMstrValue="{call IOE.GET_SERVICEATTRIBUTE_MASTER_VALUE1_SOLUTIONCHANGE(?,?,?,?,?)}";//To Fetch Service Summary Master and Value
	public static String sqlGetDemoDaysDatatoUpdate="{call IOE.GET_DEMO_ORDER_DATA(?,?,?,?,?,?,?,?)}";
	public static String sqlFetchChargeDetails="{call IOE.GET_CHARGE_DETAILS(?,?,?,?,?,?,?)}";//To Fetch Charge Details
	
	//Meenakshi
	public static String sqlFetchChargeDetailsForChangeOrders="{call IOE.GET_CHARGE_DETAILS_FOR_CHANGE_ORDERS(?,?,?,?,?,?,?,?)}";//To Fetch Charge Details
	
	public static String sqlFetchBillingDetails="{call IOE.GET_BILLING_DETAILS(?,?)}";//To Fetch Billing Details
	//[030] Start
	public static String sqlFetchHardwareDetails="{call IOE.GET_HARDWARE_DETAILS(?,?)}";//To Fetch Hardware Details
	public static String sqlFetchLocationDetails="{call IOE.GET_LOCATION_DETAILS(?,?)}";//To Fetch Location Details
	//[030] End
	public static String sqlSpDeleteContactDetail= "{call IOE.SP_DELETE_CONTACT_DETAIL(?,?,?,?,?)}";//To Delete Contact Details
	public static String sqlGetCharge="call IOE.GETCHARGETYPE(?)";//Used to Fetch Charge Type from Database
	public static String sqlGetChargeForHardware="CALL IOE.SP_GET_CHARGETYPE_FORHARDWARE(?,?)";//Used to Fetch Charge Type from Database for hardware
	//--========================Added By Sumit For Charge Name===============================
	public static String sqlGetChargeName="call IOE.GETCHARGENAME(?,?,?)";//Used to Fetch Charge Type from Database
	//--========================Added By Sumit For Charge Name===============================
	
	public static String sqlGetFrequency="call IOE.GETFREQUENCYTYPE(?)";//Used to Fetch Frequency Type from Database
	public static String sqlGetTaxationMaster= "call IOE.SPGET_TAXATION_MASTER_FOR_AUTOSUGGEST(?)";// To Fetch Data From Taxation Master
	public static String sqlGetAllTaxationMaster= " SELECT * FROM IOE.TTAXATION_MASTER WITH UR ";// To Fetch Data From Taxation Master
	public static String sqlGetEntityMaster= "call IOE.SPGET_ENTITY_MASTER_FOR_AUTOSUGGEST(?)";
	public static String sqlGetBillingLevelMaster= " {CALL IOE.SP_GETBILLINGLEVEL(?,?)}";// To Fetch Data From BillingLevel Master
	public static String sqlGetBillingFormatMaster= "call IOE.SP_GET_BILLING_FORMAT_LIST(?,?)";// To Fetch Data From Billing Format Master
	public static String sqlGetBillingTypeMaster= " SELECT * FROM IOE.TBILLING_TYPE_MASTER WITH UR ";// To Fetch Data From Billing Type Master
	public static String sqlGetCreditPeriodMaster= " SELECT * FROM IOE.TCREDIT_PERIOD_MASTER WITH UR ";// To Fetch Data From Credit Period Master
	public static String sqlGetLogiSINO= " SELECT MAX(NUMBER) AS NUMBER FROM IOE.TNUMBER WHERE SEQFOR='LOGICSINUM' ";// To Fetch Data From Credit Period Master
	public static String sqlDeleteProductCatelog="call IOE.SP_DELETE_PRODUCT_CATELOG(?,?,?,?)";//Delete Product catelog on Service Product ID
	public static String sqlCountProduct="call IOE.SP_COUNT_PRODUCT(?,?)";
	public static String sqlSpValidatePoAmount = " {call IOE.SP_VALIDATE_POAMOUNT(?,?)}";// To Fetch Data From Credit Period Master
	public static String sqlGet_IncompleteOrderList = "{call IOE.SPGETINCOMPLETEORDRS()}";//To Fetch All Account List from Database
	public static String sqlGet_IncompleteChangeOrderList = "{call IOE.SPGETINCOMPLETECHANGEORDRS()}";//To Fetch All Account List from Database
	public static String sqlSpValidatePoAmountPoLevel = " {call IOE.SP_VALIDATE_POAMOUNT_PO_LEVEL(?)}";// To Fetch Data From Credit Period Master
	
	
	public static String sqlSpValidatePoAmountPoLevelForChangeorder = " {call IOE.SP_VALIDATE_POAMOUNT_PO_LEVEL_CHANGE_ORDER(?)}";// To Fetch Data From Credit Period Master
	
	
	public static String sqlSpValidatePODetail= "{call IOE.SP_VALIDATE_PODETAIL(?)}";//To Validate PO and update Status
    public static String sqlGetServiceProductID = "{call IOE.SP_GET_SERVICEPRODUCTID(?)}";//To FETCH SERVICE PRODUCT ID FROM SERVICE DETAIL TABLE.
	public static String sqlDeleteServiceMasterDetail = "{call IOE.SP_DELETE_SERVICE_MASTER(?,?,?,?)}";//To DELETE SERVICE DETAILS from Database
	public static String sqlGetCountPODetail_FromBillingInfo= "call IOE.SP_COUNT_PONUMBER_DELETE(?,?)";
	public static String sqlSpFetchProductAccess= "{call IOE.SP_FETCH_PRODUCT_ACCESS(?,?,?)}";//To fetch Product Access
	private static final String sqlSpFetchParentServiceProduct = "{call IOE.SP_FETCH_PARENT_SERVICE_PRODUCTS(?,?)}";//To fetch Parent Service Product 
	private static final String sqlSp_Is_SERVICE_TYPE_LEVEL_ONE = "{call IOE.SP_IS_SERVICE_TYPE_LEVEL_ONE(?,?)}";//to test whether the product is first level or after it
	//private static final String sqlSp_copyServiceProduct = "{call IOE.SP_COPYSERVICEPRODUCT_FOR_CHANGE_ORDER(?,?,?,?,?,?,?,?)}";//to copyServiceProduct in New Order
	//[080] Start : Adding sql string for Copy Service Product For new and Change Order
	private static final String sqlSp_copyServiceProductForNewAndChargeOrder = "{call IOE.SP_COPYSERVICEPRODUCT_FOR_NEW_N_CHANGE_ORDER(?,?,?,?,?,?,?,?,?,?)}";//to copyServiceProduct in New and change Order
	//[080] End
	private static final String countSelectedLineItems = "{call IOE.SP_COUNTSELECTEDLINEITEMS(?,?,?,?)}";//to count selected line items
	public static String sqlGetChangeTypeMaster= "{call IOE.GETCHANGETYPE()}";//To fetch Change Type
	public static String sqlGetSourceName= "{call IOE.GETSOURCENAME()}";//To fetch SOURCE NAME
	public static String sqlGetCurrencyName= "{call IOE.GETCURRENCYNAME}";//To fetch SOURCE NAME
	public static String sqlGetChangeSubTypeMaster= "{call IOE.GETCHANGE_SUB_TYPE(?)}";//To fetch Change SUB  Type
	//Start[019] //[SUMIT001]

	public static String sqlGetLogicalSiNumber= "{call IOE.SPGET_LOGICAL_LSI_FOR_ALL(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";//To fetch Product Access
	//public static String sqlGetLogicalSiNumber= "{call IOE.SPGET_LOGICAL_LSI_FOR_ALL_TEST2(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";//To fetch Product Access
	//End[019]//[SUMIT001]
//	public static String sqlGetServiceNProduct_Disconnect= "{call IOE.SP_GET_SERVICE_NPRODUCT_DISCONNECT(?)}";//To fetch Product Access
	public static String sqlGetServiceNProduct= "{call IOE.SP_GET_SERVICE_NPRODUCT(?)}";//To fetch Product Access
	//added for Disconnection
	//Start[019]
	public static String sqlGetLogicalSiNumberforDisconnection= "{call IOE.SPGET_LOGICAL_LSI_FOR_ALL(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";//To fetch Product Access
	//End[019]
	//Added by Ashutosh For Demo Disconnection
	public static String sqlGetLogicalSiNumberforDemoDisconnection= "{call IOE.SPGET_DEMO_DISCONNECTEDLSINUMBER(?,?,?,?)}";//To fetch Product Access	
	public static String sqlGetServiceNProductforDisconnection= "{call IOE.SP_GET_SERVICE_NPRODUCT_DISCONNECT(?,?,?)}";//To fetch Product Access
	
	// added for Demo Order
	
	// start[019]//[SUMIT001]
	public static String sqlGetLogicalSiNumberforDemo= "{call IOE.SPGET_LOGICAL_LSI_FOR_ALL(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";//To fetch Demo Service Access
	//End[019]
	
	public static String sqlGetServiceNProductforDemo= "{call IOE.SP_GET_SERVICE_NPRODUCT_DEMO(?)}";//To fetch Demo Product Access
	
	public static String sqlSpInsertServiceProduct= "{call IOE.SP_INSERT_SERVICE_PRODUCT(?,?,?,?,?,?,?,?,?,?,?)}";//To Insert Task Notes
	public static String sqlSpUpdateChangeOrderServiceProduct= "{call IOE.SP_UPDATE_CHANGEORDER_SERVICE_PRODUCT(?,?,?,?,?,?,?,?,?,?)}";//To Insert Task Notes
	public static String sqlFetchServiceSummary= "{call IOE.GETSERVICESUMMARY_DROPDOWN_VALUES(?)}";//To Fetch Service Summary dropDown values
	public static String sqlFetchAttLabelValues= "{call IOE.GET_ATT_LABEL__DROPDOWN_VALUES(?)}";//To Fetch Attribute Label Values dropDown values
	public static String getMetaDataInformation= " SELECT SERVICEDETAILID,SERVICEDETDESCRIPTION FROM IOE.TSERVICETYPEDETAIL WHERE SERVICEDETAILID=? ";//Service Description Data For Genarate Excel 
	public static String sqlFetchAllowedSections= "SELECT SERVICEDETAILID, SERVICESUMMARY, BILLINGINFO, CHARGEINFO,HARDWAREINFO,SERVICELOCATION FROM IOE.TSERVICETYPEDETAIL where SERVICEDETAILID=? ";//To Fetch Attribute Label Values dropDown values
	private static final String sqlGet_PrdCatelogTemplateExcelList_BillingInfo = "{call IOE.SP_GET_EXCEL_PRODUCTCATELOGS_BILLING_INFO(?)}";//Fetch Biling Info Data For Product Catelog  for genarate Excel Template 
	private static final String sqlGet_PrdCatelogTemplateExcelList_HardwareInfo = "{call IOE.SP_GET_EXCEL_PRODUCTCATELOGS_HARDWARE_INFO(?)}";//Fetch Hardware Info Data For Product Catelog  for genarate Excel Template
	private static final String sqlGet_PrdCatelogTemplateExcelList_ChargesInfo = "{call IOE.SP_GET_EXCEL_PRODUCTCATELOGS_CHARGES_INFO(?)}";//Fetch Charges Info Data For Product Catelog  for genarate Excel Template
	private static final String sqlGet_PrdCatelogTemplateExcelList_ServiceLocationInfo = "{call IOE.SP_GET_EXCEL_PRODUCTCATELOGS_SERVICELOCATION_INFO(?)}";//Fetch Service Location Info Data For Product Catelog  for genarate Excel Template
	private static final String sqlGet_SummaryHeaderForExcel = "{call IOE.SP_GET_SERVICESUMMARY_HEADER_EXCEL(?)}";//Fetch Service Summary Header a For Product Catelog  for genarate Excel Template
	private static final String sqlGet_SummaryValuesForExcel = "{call IOE.SP_GET_EXCEL_PRODUCTCATELOGS_SERVICESUMMARY_VALUES(?)}";//Fetch Service Summary Values For Product Catelog  for genarate Excel Template
	public static String sqlGetStdReasonMaster= "{call IOE.GET_STD_REASON(?)}";// To Fetch Data From Billing Format Master
	
	private static final String sqlDeleteCharges = "{call IOE.SP_DELETE_CHARGES(?,?,?,?,?)}";//Fetch Account wise Project Manager Name
	private static final String sqlDeleteCharges_old = "{call IOE.SP_DELETE_CHARGES_WITHOUT_PAGING(?,?,?,?,?)}";//Fetch Account wise Project Manager Name
	
	/*Vijay
	 * add a parameter
	*/
	public static String sqlSpDisconnectServiceProduct= "{call IOE.SP_DISCONNECT_SERVICE_PRODUCT(?,?,?,?,?,?,?,?,?,?,?,?)}";
		//public static String sqlSpDisconnectServiceProduct= "{call IOE.SP_DISCONNECT_SERVICE_PRODUCT_1(?,?,?,?,?,?,?,?)}";
		//public static String sqlSpDisconnectServiceProduct= "{call IOE.SP_DISCONNECT_SERVICE_PRODUCT_M(?,?,?,?,?,?,?,?)}";
	//added for suspention update
	//public static String sqlSpSuspentionServiceProduct= "{call IOE.SP_SUSPENTION_SERVICE_PRODUCT(?,?,?,?,?,?,?,?)}";	
	public static String sqlSpSuspentionServiceProduct= "{call IOE.SP_SUSPENTION_SERVICE_PRODUCT(?,?,?,?,?,?,?,?)}";
	//added for Disconnection after suspention update
	//public static String sqlSpDisAftSuspentionServiceProduct= "{call IOE.SP_DIS_AFT_SUSPENTION_SERVICE_PRODUCT(?,?,?,?,?,?,?,?)}";
	public static String sqlSpDisAftSuspentionServiceProduct= "{call IOE.SP_DIS_AFT_SUSPENTION_SERVICE_PRODUCT(?,?,?,?,?,?,?,?)}";
	//added for resumption update
	//public static String sqlSpResumptiontServiceProduct= "{call IOE.SP_RESUMTION_SERVICE_PRODUCT(?,?,?,?,?,?,?,?)}";	
	public static String sqlSpResumptiontServiceProduct= "{call IOE.SP_RESUMTION_SERVICE_PRODUCT(?,?,?,?,?,?,?,?)}";
	
	
	public static String sqlViewServiceTreeAfterDisconnection= "{call IOE.SP_GET_TREE_MAPPING_AFTER_DISCONNECTION(?,?,?,?)}";
	//public static String sqlViewServiceTreeForChangeOrder= "{call IOE.SP_GET_TREE_MAPPING_AFTER_DISCONNECTION_1(?,?,?,?)}";
	public static String sqlViewServiceTreeForChangeOrder= "{call IOE.SP_GET_TREE_MAPPING_FOR_CHANGE_ORDER(?,?,?,?)}";	
	//public static String sqlViewServiceTreeAfterDisconnection= "{call IOE.SP_GET_TREE_MAPPING_AFTER_DISCONNECTION_M(?,?,?,?)}";
	
	//public static String sqlspPoServiceListForChangeOrders= "{call IOE.SP_GET_SERVICE_LIST_FOR_CHANGE_ORDER(?)}";
	//Added by Ashutosh as on 01 mar 2011
	public static String sqlspPoServiceListForChangeOrders= "{call IOE.SP_GET_SERVICE_LIST_FOR_CHANGE_ORDER_WITH_PAGING(?,?,?,?,?,?,?,?,?)}";
	
	
	public static String sqlGetZoneList= "{call IOE.GETZONELIST(?)}";// To Fetch Data from TZONE Table
	public static String sqlGetRegionList= "{call IOE.GETREGIONLIST()}";// To Fetch Data from TREGION Table
	public static String sqlGetQuoteNoList="{call IOE.SP_GET_QUOTESNO_DETAILS(?)}";
	//public static String sqlSpGetRoleWiseFieldMapping= "{call IOE.GET_FIELD_MAPPING(?)}";//To Fetch Attribute Label Values dropDown values
	public static String sqlSpGetRoleWiseFieldMapping= "{call IOE.GET_FIELD_MAPPING_TEST_PERFORMANCE(?,?)}";//To Fetch Attribute Label Values dropDown values
	private static final String sqlGet_ProjectManagerList = "{call IOE.GET_PROJECTMANAGER_LIST(?,?)}";//Fetch Account wise Project Manager Name
	//private static final String sqlGet_ProjectManagerListALL = "{call IOE.GET_PROJECTMANAGER_LISTALL(?)}";//Fetch Account wise Project Manager Name
	private static final String sqlGet_ProjectManagerListALL = "{call IOE.MODIFIED_GET_PROJECTMANAGER_LISTALL(?)}";//Fetch Account wise Project Manager Name
	public static String sqlGetSalutationList= "{call IOE.SP_GET_SALUTATIONLIST(?)}";// To Fetch Data from TPOSALUTATION Table
	public static String sqlSearchSalutation="{call IOE.SP_SEARCH_SALUTATION(?)}";
	//public static  String spGetAllCountries = "{ call IOE.SP_GET_COUNTRIES()}";
	public static  String spGetAllCountries = "{ call IOE.SP_GET_COUNTRIES1(?)}";
	//public static  String spGetStatesOdCountry = "{ call IOE.SP_GET_STATE_OF_COUNTRY(?)}";
	public static  String spGetStatesOfCity = "{ call IOE.SP_GET_STATE_OF_CITY1(?)}";	
	//public static  String spGetCitiesOfState = "{ call IOE.SP_GET_CITY_OF_STATE(?)}";
	public static  String spGetCitiesOfState = "{ call IOE.SP_GET_CITY_OF_STATE1()}";
	//public static String spGetPinOfStateandCity="{ call IOE.SP_GET_PIN_OF_STATE_AND_CITY(?,?)}";
	public static String spGetPinOfStateandCity="{ call IOE.SP_GET_PIN_OF_STATE_AND_CITY(?,?)}";
	//Start[019]
	//public static String sqlSearchCountry="{call IOE.SP_SEARCH_COUNTRY(?,?,?,?,?)}";
	public static String sqlSearchCountry="{call IOE.SP_SEARCH_COUNTRY1(?,?,?,?,?,?)}";
	public static String sqlSearchCountry1="{call IOE.SP_SEARCH_COUNTRY2(?)}";
	public static String sqlSearchState="{call IOE.SP_SEARCH_STATE1(?,?,?,?,?,?)}";
	public static String sqlSearchState1="{call IOE.SP_SEARCH_STATE2(?)}";
	//public static String sqlSearchCity="{call IOE.SP_SEARCH_City(?,?,?,?,?,?)}";
	public static String sqlSearchCity="{call IOE.SP_SEARCH_City1(?,?,?,?,?)}";
	public static String sqlSearchCity1="{call IOE.SP_SEARCH_City2(?)}";
	//End[019]
	//public static String sqlSearchPincode="{call IOE.SP_SEARCH_PINCODE(?,?,?)}";
	public static String sqlSearchPincode="{call IOE.SP_SEARCH_PINCODE(?,?,?)}";
	public static String sqlCheckM6Status="{call IOE.SP_CHECK_M6_STATUS(?)}";
	
	//for Upgrade and Downgrade
	//public static String sqlChangeOrderUpgradeDowngradeLookupAction="{call IOE.CHANGE_ORDER_UPGRADE_DOWNGRADE_LOOKUP_ACTION(?,?,?,?,?,?,?)}";
	//Added by Ashutosh for SubchangetypeId 
	public static String sqlChangeOrderUpgradeDowngradeLookupAction="{call IOE.CHANGE_ORDER_UPGRADE_DOWNGRADE_LOOKUP_ACTION(?,?,?,?,?,?,?,?)}";
	//added by Ashutosh as on 01 mar 2011
	/*Vijay
	 * add a parameter
	 */ 
	public static String sqlSolutionChangeServiceProduct="{call IOE.CHANGE_ORDER_SOLUTIONCHANGE_SERVICEPRODUCT(?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	
	//public static String sqlSolutionChangeServiceProduct="{call IOE.CHANGE_ORDER_SOLUTIONCHANGE_SERVICEPRODUCT_1(?,?,?,?,?,?,?,?,?)}";
	public static String sqlNewServiceProductIDWhoseParentIDReplaced="{call IOE.NEWSERVICEPRODUCT_ID_WHOSE_PARENT_REPLACED(?,?)}";
	public static String sqlParentServiceProductIDUpdation="{call IOE.PARENTSERVICEPRODUCTID_UPDATION(?,?,?)}";
	//Added by Ashutosh for change order Paernt update in TPOSERVICEDETAILS
	public static String sqlParentIdUpdate="{call IOE.UPDATE_CHANGE_ORDER_PARENT(?,?,?,?,?)}";
	
	public static String sqlFetchServiceAttributes_CLSIN="{call IOE.SP_Get_Customer_Logical_SI(?)}";//To insert update Service Attribute
	public static String sqlGetRoleList= "{call IOE.GET_USER_ROLE(?)}";// To Fetch Role List from TM_ACCOUNTROLEDETAILS
	public static String sqlSavingToFromAddressInProductCatalog="{call IOE.SAVING_TO_FROM_ADDRESS_IN_PRODUCT_CATALOG(?,?)}";
	public static String sqlGetlogged_User_Details="{call IOE.GET_USER_DETAILS_FOR_SESSION(?,?,?)}";//by kalpana for copc region change HYPR22032013003
	public static String sqlIsUserValid="SELECT COUNT(1) as isUserValid FROM IOE.TM_ACCOUNTROLEDETAILS WHERE upper(USER_ID) = ?";
	public static String sqlSpDemoRegularize1ServiceProduct="{call IOE.SP_DEMO_REGULARIZE1_PRODUCT(?,?)}";
	public static String sqlSpDemoSaveRegularizeServiceProduct="{call IOE.SP_SAVE_AND_UPDATE_DEMO_REGULARIZE(?,?,?,?,?,?,?,?)}";

	public static String spGetChangeOrderSubType = "{call IOE.GET_CHANGE_ORDER_SUBTYPE(?)}";// To Fetch Change Order Sub type

	public static String spAttachWorkflowForChangeOrder = "{call IOE.SP_ATTACH_CHANGE_ORDER_WORKFLOW(?,?,?,?,?)}";// To Fetch Change Order Sub type
	//lawkush
	//public static String sqlSpInsertTaskActionForChangeOrder= "{call IOE.SP_INSERT_TASK_ACTION_CHANGE_ORDER(?,?,?,?,?,?,?,?,?,?)}";//To Insert Task Notes
	public static String sqlSpInsertTaskActionForChangeOrder= "{call IOE.SP_INSERT_TASK_ACTION_CHANGE_ORDER(?,?,?,?,?,?,?,?,?,?,?)}";//To Insert Task Notes
//lawkush
	//public static String sqlInsertFileUpload="{call IOE.SP_INSERT_FILEUPLOAD(?,?,?,?,?)}"; //To insert file data to database add by anil..
	//[010] Start
	public static String sqlGetProductNameAndId="{call IOE.SP_GETPRODUCT_N_ID(?,?)}";
	public static String sqlVerifyProductType= "{call IOE.VERIFY_PRODUCTID(?,?,?,?,?,?)}";
	//start[028]
	public static String sqlCopyProductCharge= "{call IOE.SP_COPY_CHARGE(?,?,?,?,?,?,?)}";
	//end[028]
	public static String sqlGetChargeType="{call IOE.SP_GETCHARGETYPE(?,?)}";
	//[010] End
	//Get Region List
	public static String sqlGetMailDetails = "SELECT * FROM IOE.VW_MAIL_ACCOUNT_ORDER_DETAILS WHERE ORDERNO = ?";
	public static String spGetSaveActionMailDetails="{call IOE.GET_MAILDETAILS_ACTION_TAKEN_NEWORDER(?,?)}";
	public static String pmEmailId="select EMAILID, PHONE_NO from ioe.TM_ACCOUNTROLEDETAILS where ID = (select CREATED_BY from ioe.TPOWORKFLOWTASK where TASKID = ?)";
	public static String tmAppConfigData="select * from ioe.TM_APPCONFIG where KEYNAME=?";
	public static String spGetSaveActionMailDetailsOnRejection="{call IOE.GET_MAILDETAILS_REJECTION_NEWORDER(?,?)}";

	public static String spcancelOrder="{call IOE.SP_CANCEL_ORDER(?,?,?,?,?,?,?,?)}";
	public static String spcancelLookUpServices="{call IOE.SP_CANCEL_LOOKUP_SERVICES(?,?,?,?)}";
	public static String spcancelworkflow="{call IOE.SP_CANCEL_WORKFLOW(?,?,?,?)}";
	
	//[012]
	public static String sqlInsertFileUpload="{call IOE.SP_INSERT_FILEUPLOAD(?,?,?,?,?,?,?,?)}"; //To insert file data to database add by anil..
	public static String sqlGetTaxRate="{call IOE.SP_GET_TAXRATE(?,?)}";//To Fetch TaxRate in charge section for product catelog
	public static String sqlGetTaxRateForHardware="{call IOE.SP_GET_TAXRATEFORHARDWARE(?,?,?,?,?,?,?)}";//to fecth store code for tax rate in charge section
	//Get Region List
	public static String sqlGetUploaded_FileName="{call IOE.SP_GETUPLOADED_FILENAME(?,?,?)}"; //To insert file data to database add by Rakshika..
	public static String sqlGetDisconnectionData="{call IOE.GET_DISCONNECTION_DATA(?)}";
	public static String sqlDownload_File="{call IOE.SP_DOWNLOAD_FILE(?,?,?,?)}"; //To insert file data to database add by Rakshika..
	//[012] End
	
	//	[013]  Start
	public static String spgetNpdCategory="{call NPD.SP_GETNPDCATEGORY(?,?)}";
	//	[013]  End
	//[004] Start
	private static final String sqlSp_copyChildProduct = "{call IOE.SP_ADDCHILDPRODUCT(?,?,?,?,?,?,?,?,?)}";//to copyServiceProduct
	//[004] End
	
	public static String sqlGetBillingFormat="{call IOE.SP_BILLING_FORMAT(?,?)}"; 
	
	public static String sqlGetCurrencySearch = "{call IOE.SP_GETCURRENCYTYPE_SORTING(?,?,?,?,?,?)}";//To Fetch All Currency List with sorting from Database
	public static String sqlGetCurrency = "{call IOE.SPGETCURRENCY(?)}";
	
	
	
	//pankaj
	
	public static String sqlGetChannelPartner="{call IOE.SP_GET_CHANNELPARTNER(?,?,?,?,?,?,?)}";
	public static String sqlGetFieldEngineer="{call IOE.GET_FIELD_ENGINEER_LIST(?)}";
	//public static String  sqlGetChanelPartnerDetails="{call IOE.GET_CHANNEL_PARTNER_DETAILS}";
	//pankaj 
	
	public static String sqlSp_isParent="{call IOE.SP_IS_PARENT_NODE(?,?)}"; 
	
	public static String sqlGetPODetailForChangeView= "{call IOE.SP_GET_PO_DETAILS_DISCONNECTION(?,?,?)}";
	//[00044] Start
	public static String sqlgenrateChangeOrderNumber= "{call IOE.SP_CREATE_CHANGE_ORDER(?,?,?,?,?,?,?,?,?,?)}";
	//[00044] End
	
	//[SUMIT001]
	public static String sqlGetLogicalSiNumber_For_RateRenew= "{call IOE.SPGET_LOGICALSINUMBER_FOR_RATERENEWAL(?,?,?,?,?,?,?,?,?,?,?)}";//To fetch Product Access
	//[SUMIT001]

	//public static String sqlInsertComponentsDetails="call IOE.SP_UPDATE_COMPONENT_INFO(?,?,?,?,?,?,?,?,?,?)";	
	public static String sqlInsertComponentsDetails="call IOE.SP_UPDATE_COMPONENT_INFO(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";	
	
	public static String sqlSpInsertTaskActionForSED= "{call IOE.SP_INSERT_TASK_ACTION_FOR_SED(?,?,?,?,?,?)}";//To Insert Task Notes after SED Rejection
	
	public static String sqlSpUpdateServiceState= "{call IOE.SP_UPDATE_SERVICE_STATUS(?,?,?,?,?,?,?)}";//To Insert Task Notes after SED Rejection
	public static String sqlInsertLinkageInfoForNew="call IOE.SP_INSERT_TPOSERVICEDETAILS_LINKAGEINFO(?,?,?,?,?,?,?,?,?,?,?,?,?)";
//lawkush start
	public static String sqlspValidatedestinationcharges= "{call IOE.SP_VALIDATE_DESTINATION_CHARGE(?,?,?,?,?)}";//To Insert Task Notes after SED Rejection
	
	//lawkush End
	public static String sqlGetPOEntityForBillingForChange= "{call IOE.GET_PO_ENTITY_FOR_CHANGE(?)}";
	public static String sqlGetLicCompanyForChange= "{call IOE.GET_LICENCE_COMPANY_FOR_CHANGE(?)}";
	
	public static String sqlOrderAlreadyOpened = "{call IOE.SP_GET_ORDER_ALREADYOPENED(?,?,?,?,?)}";// To Fetch Data from TREGION Table
	public static String sqlCloseOrderAlreadyOpened = "{call IOE.SP_CLOSE_ORDER_ALREADYOPENED(?,?,?,?)}";// To Fetch Data from TREGION Table
	public static String sqlgetStandardReasonForChange = "{call IOE.SP_GET_STD_REASON_FOR_CHANGE(?)}";
	
	//sqlFetchHDateLogic
	
	public static String sqlFetchHDateLogic= "{CALL IOE.FETCH_HDATE_LOGIC}";//HARDWARE DATE LOGIC
	
	//[035] Start
	public static String sqlFetchCopyCancelReport= "{CALL IOE.GETCOPYCANCELREPORT(?,?,?)}";
	//[035] End
	public static String sqlSpCancelAndCopy= "{call IOE.SP_CANCEL_AND_COPY_SERVICES(?,?,?,?,?,?,?,?,?,?)}";


	public static String sqlGetGamList= "{call IOE.SP_GET_GAM(?)}";//Fetching Gam List
	public static String sqlGetGamOrderAttachedList= "{call IOE.SP_GET_GAM_ORDER_ATTACHED}";//Fetching Gam already attached with order List
	public static String sqlGetOpportunityIdList="{call IOE.SP_GET_OPPORTUNITYID_LIST(?,?)}";
	public static String sqlGetlistMigrationOrder_DCCOLO="{call IOE.MIGRATION_ORDER_DETAILS_DCCOLO(?)}";
	public static String sqlGetlistMigrationOrder_Teleport="{call IOE.MIGRATION_ORDER_DETAILS_TELEPORT(?)}";
	public static String sqlDeleteComponents= "{call IOE.SP_DELETE_COMPONENT_DETAILS(?,?,?,?,?)}";
	private static final String sqlGet_ActMgrID_For_AutoRenewal = "{CALL IOE.GET_ACTMAGRID_FOR_AUTORENEWALMAIL()}";
	private static final String sqlGet_ChargeDetails_For_AutoRenewal = "{CALL IOE.GET_CHARGEDETAILS_FOR_AUTORENEWALMAIL(?)}";
	public static String spApproveOrder  = "{CALL IOE.SP_VALIDATE_APPROVE_PUBLISH_AUTO_DIS_ORDER(?,?,?,?,?,?,?,?,?,?)}";
	//public static String sqlGetIncompletePDOrders="{call IOE.SPGETINCOMPLETEPERDISCORDERS(?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	//[138]
	public static String sqlGetIncompletePDOrders="{call IOE.SPGETINCOMPLETEPERDISCORDERS(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	public static String sqlApproveDisconnectOrder = "{CALL IOE.SP_APPROVE_ORDER_AUTO_DISCONNECT(?,?,?,?,?)}";
	public static String sqlInsertConfigValue="call IOE.SPUPDATE_CONFIG_FOR_SPID(?,?,?,?,?)";
		//added by Anil for CLEP
	public static String spGetServiceTypeAndOrderSourceClep= "{call IOE.SPCLEP_GETORDERSERVICETYPE(?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
		//end CLEP
			
		//PAGING-SERVICE-LINE-14-10-2012
		//public static String sqlspPoServiceListWithPaging = "{call IOE.GETPOSERVICELIST_PAGING(?,?,?,?,?,?,?)}";//To Insert Service in database
		
	//--[084]--start--//
	/*public static String sqlGetChangeReason = "{CALL IOE.SP_GET_CHANGE_REASON(?)}";	*/
	//--[084]--end--//
	
	//Shubhranshu
	private static final String sqlGetReasonForChange = "call IOE.GETREASONFORCHANGE(?,?)";
	
	private static final String sqlgetChangeReasonNeffectiveDate2 = "{CALL IOE.SP_GET_CHANGE_REASON(?)}";	
	
	
	private static final String sqlgetvalidSpidList=" SELECT tsm.SERVICEID,tsm.LOGICAL_SI_NO,tsm.ORDERNO,tcd.STANDARDREASON_ID,tcd.STANDARDREASON " +
																					" FROM ioe.TPOSERVICEMASTER tsm "+                                                                                    
                                                                                    " inner join ioe.TCHANGE_ORDER_DETAILS tcd on  tsm.SERVICEID=tcd.NEWSERVICEID "+
                                                                                    " WHERE tcd.NEWSERVICEID=? "+
                                                                                    "  and tcd.STANDARDREASON_ID=? ";
	private static final String sqlgetServiceIdsForOrderNumber = " SELECT SERVICEID,ORDERNO " +
			                                                                                                   " FROM ioe.TPOSERVICEMASTER WHERE " +
			                                                                                                   "  ORDERNO=? ";
	
	private static final String sqlGetAllDataPendingForAutoBilling = "{call IOE.SP_GET_DATA_PENDING_FOR_AUTOBILLING} ";
	//Shubhranshu
//	TO get the service details
	public static String sqlspPoServiceListWithPagingModified = "{call IOE.MODIFIED_DETAIL_GETPOSERVICELIST_PAGING(?,?,?,?,?,?,?,?,?)}";
	
	
	
	//To get the count of the services with respect to status
	public static String sqlGetServiceStatusCount = "{call IOE.MODIFIED_COUNT_PROGRESS_STATUS_GETPOSERVICELIST_PAGING(?)}";
	//To get the count of the services
	public static String sqlGetTotalServiceCount = "{call IOE.MODIFIED_TOTAL_COUNT_GETPOSERVICELIST_PAGING(?,?,?)}";
	//--[TRNG22032013037] --start--//
	private String sqlspGetOpportunity = "{call IOE.SP_GETOPPORTUNITY(?,?,?,?,?,?,?,?)}";
	private String sqlUpdateOpportunity = "{call IOE.SP_UPDATE_OPPORTUNITY(?,?,?,?,?,?,?,?)}";
	private String sqlspGetSavedOpportunity = "{call IOE.SP_GET_MULTIPLE_OPPORTUNITY(?)}";
	//--[TRNG22032013037] --end--//
		public static String sqlGetRejectionReasonMaster= " SELECT * FROM IOE.TM_REJECTIONREASONS_MASTER WITH UR ";// To Fetch Data From Billing Type Master
	public static String sqlFetchServiceNameType= "{call IOE.GETSERVICE_NAME_TYPE}";//To Fetch Service Type from Database
		public static String sqlGetCountService_Stage_Updation="{call IOE.GET_COUNT_SERVICE_STAGE_UPDATION(?,?,?)}";
		public static String sqlGetUpdateOrderStage="{call IOE.SP_UPDATE_ORDER_STAGE_PARTIAL_INITIATED(?,?,?,?,?)}";
	//Vijay add a proc for stage list
	public static String sqlGetOrderStage = "{call IOE.GETORDERSTAGE()}";
   //Added by Deepak Kumar for ThirdParty
	
	//public static String sqlspGetUserAccessMatrix="{call IOE.SP_GETUSERACCESSMATRIX(?)}";//To get roles
	public static String sqlGetUserAccessMatrixList="SELECT * FROM ioe.TM_ACCOUNTROLE";
	
	public static String sqlGetUserAccessMatrixDetailLiist="SELECT * FROM  ioe.TM_ACCOUNTROLEDETAILS where ISACTIVE=1 and EMPLOYEEID=?";
	
	
	public static String  getNextIdfromSequence="SELECT NEXTVAL FOR IOE.EMPID_SEQ AS NEXT_ID FROM SYSIBM.SYSDUMMY1";
	
	public static String  sqlFetchDelLocForScm="SELECT DEL_ID,DELIVER_TO_LOCATN FROM ioe.TM_DELIVERTOLOCATN_SCM WHERE ISACTIVE=1 and DEL_ID=?";
	public static String  sqlGetSubInventory="SELECT SUBINV_ID,SUBINVENTORY FROM ioe.TM_SUBINVENTORY_SCM WHERE ISACTIVE=1 and SUBINV_ID=?";
	public static String  sqlGetBudgethead="SELECT AOP1_ID,AOP_BUDGET_HEAD1 FROM ioe.TM_AOPBUDGETHEAD1_SCM WHERE ISACTIVE=1 and AOP1_ID=?";
	public static String  sqlGetBudgethead2="SELECT AOP2_ID,AOP_BUDGET_HEAD2 FROM ioe.TM_AOPBUDGETHEAD2_SCM  WHERE AOP1_ID=?";
	
	
	public static String  sqlGetItemCode="SELECT ITEM_CODE_ID,ITEM_CODE FROM ioe.TM_ITEMCODEMASTER_SCM where ISACTIVE=1 and ITEM_CODE_ID=?";
	public static String  sqlFetchServiceAttributeForSCM="{call IOE.GETSERVICEATTRIBUTEMASTER_SCM(?,?)}";
	public static String  sqlFetchServiceAttributeMstrValueForSCM="{call IOE.GET_SERVICEATTRIBUTE_MASTER_VALUE_SCM_CHANGE(?,?,?,?,?,?)}";
	public static String  sqlFetchItemCodeForScm="SELECT ITEM_CODE_ID,ITEM_CODE FROM IOE.TM_ITEMCODEMASTER_SCM WHERE ITEM_CODE_ID=? AND ISACTIVE=1";
	public static String  sqlFetchDeliverLocForScm="SELECT DEL_ID,DELIVER_TO_LOCATN FROM IOE.TM_DELIVERTOLOCATN_SCM WHERE DEL_ID=? AND ISACTIVE=1";
	public static String  sqlFetchSubinventoryForScm="SELECT SUBINV_ID,SUBINVENTORY FROM IOE.TM_SUBINVENTORY_SCM WHERE SUBINV_ID=1 AND ISACTIVE=1";
	public static String  sqlFetchAop1BudgetForScm="SELECT AOP1_ID,AOP_BUDGET_HEAD1 FROM IOE.TM_AOPBUDGETHEAD1_SCM WHERE  AOP1_ID=? AND ISACTIVE=1";
	public static String  sqlFetchAop2BudgetForScm="SELECT AOP2_ID,AOP_BUDGET_HEAD2 FROM IOE.TM_AOPBUDGETHEAD2_SCM WHERE  AOP2_ID=?";
	public static String  sqlFetchScmLineDetailsForScm="{call IOE.GET_SCM_LINE_DETAILS(?)}";
	public static String  sqlFetchScmPrDetails="{call IOE.GET_SCM_PR_STATUS(?)}";
	public static String  sqlUpadteScmLineDetails="{call IOE.SPUPDATE_CHARGE_INFO_FOR_SCM(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	public static String  sqlFetchDeliverLocForScmByCircle="SELECT DEL_ID,DELIVER_TO_LOCATN FROM IOE.TM_DELIVERTOLOCATN_SCM WHERE CIRCLE=? AND ISACTIVE=1";
	public static String  sqlFetchSubInventoryForScmByCircle="SELECT SUBINV_ID,SUBINVENTORY from ioe.TM_SUBINVENTORY_SCM WHERE CIRCLE=? AND ISACTIVE=1";
	
	public static String  sqlFetchKeyValueForScm="{call IOE.SP_GET_KEYVALUE}";
	public static String sqlInsertProdLineAttributesForNewSCM="call IOE.SPUPDATE_PRODUCT_CATELOG_FOR_NEW_SCM(?,?,?,?,?,?,?,?,?,?,?,?,?)";
	//start for PrResuse
	public static String  sqlGetPRDetails="{call IOE.GET_PR_DETAILS()}";
	public static String  sqlGetPRDetailsForPRReuse="{call IOE.GET_PR_DETAILS_FOR_REUSE(?,?)}";
	public static String  sqlFetchScmLineDetailsForScmForPRReuse="SELECT CHARGEID_SCM,ITEM_CODE,QUANTITY,CHARGEVALUE,DEL_ID,SUBINV_ID, AOP1_ID, AOP2_ID,AOP_YEAR,PO_NUMBER,PO_DATE,PO_AMOUNT,IS_ACTIVE,SCM_MESSAGE FROM IOE.TPRODUCTLINECHARGEVALUE_SCM WHERE pr_id=?";
	public static String sqlFetchSearchPrReuse= "{call IOE.GET_SEARCH_PRDETAILS(?,?,?,?,?,?)}";//To Fetch PR_ID and serviceId from Database
	public static String  sqlUpadteScmLineDetailsForPRresue="{call IOE.SPUPDATE_LINE_INFO_FOR_SCM_PRREUSE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
	public static String sqlUpdatePrId="update ioe.TPOSERVICEDETAILS set PR_ID=?,IS_PR_REUSE=? where SERVICEPRODUCTID=?";
	public static String  sqlFetchScmIsPrReuse="SELECT IS_PR_REUSE,SERVICEID,CHANGE_SERVICEID FROM ioe.TPOSERVICEDETAILS where SERVICEPRODUCTID=?";
	public static String sqlChargeId="SELECT CHARGEID_SCM  FROM IOE.TPRODUCTLINECHARGEVALUE_SCM  WHERE SERVICEPRODUCTID=?";
	public static String sqlDelteChargeId="DELETE FROM ioe.TPRODUCTLINECHARGEVALUE_SCM WHERE SERVICEPRODUCTID=? AND CHARGEID_SCM=?";
	public static String sqlValidatePrNumber="{call IOE.PR_NUMBER_VALIDATION(?)}";
	public static String sqlCountServiceSection="SELECT count(1) as COUNTSERVIECSUMMARY from IOE.TPRODUCTLINEATTVALUE_HISTORY TPRODUCTLINEATTVALUE_HISTORY " +
			"INNER JOIN IOE.TPRODUCTLINEATTMASTER TPRODUCTLINEATTMASTER ON TPRODUCTLINEATTVALUE_HISTORY.ATTMASTERID=TPRODUCTLINEATTMASTER.ATTMASTERID " +
			"where TPRODUCTLINEATTVALUE_HISTORY.SERVICEPRODUCTID=? AND TPRODUCTLINEATTVALUE_HISTORY.ORDERNO=? " +
			"and TPRODUCTLINEATTMASTER.SENDTOSCM=1 and TPRODUCTLINEATTMASTER.ISACTIVE=1 " +
			"and TPRODUCTLINEATTMASTER.SERVICEDETAILID=?";
	public static String sqlCountScmLine="SELECT count(1) AS  COUNTSCMLINE FROM IOE.TPRODUCTLINECHARGEVALUE_SCM where SERVICEPRODUCTID=?";
	public static String sqlDeleteScmLine="DELETE FROM ioe.TPRODUCTLINECHARGEVALUE_SCM WHERE SERVICEPRODUCTID=?";
	public static String sqlIsPrReuseFlag="SELECT  IS_PR_REUSE FROM ioe.TPOSERVICEDETAILS WHERE SERVICEPRODUCTID=?";
	//end for PrReuse
	//end Deepak Kumar for Third Party
	private String sqlsetServicesInitiateTo = "{call IOE.SET_SERVICE_INITIATED(?,?,?,?,?)}";
	private String sqlsetOrderServicesInitiater = "{call IOE.GET_ORDER_SERVICE_INITIATED_TO(?)}";
		//[00101]
	public static String sqlgetReasonForCancel = "{call IOE.SP_GET_REASON_FOR_CANCEL(?)}";
	//[120] start
	public static String sqlgetEligibleLSIForCancelList="{call IOE.SP_GET_LSI_CANCELLATION(?,?,?,?,?,?,?,?,?,?,?,?)}";
	public static String sqlvalidateservicesbeforecancel="{call IOE.SP_VALIDATE_SERVICES_BEFORE_CANCEL(?,?,?,?,?,?,?)}";
	public static String sqlCancelLsi="{call IOE.SP_LSI_CANCELATION(?,?,?,?,?,?,?,?)}";
	public static String sqluserUpdateRolesOnSubmit="{call IOE.SP_ASSIGN_USER_ACCESS(?,?,?,?,?)}";
	//[137]
	public static String isPermanentDisconnection="{call IOE.SP_CHK_SCENARIO_FOR_ORDER(?,?,?,?,?,?)}";
	//[120] end
	public static String sqlCheckProductNameSelected = "select PRODUCTID from ioe.TPOSERVICEMASTER where SERVICEID = ?";
	public static String sqlvalidateProductNameLicCompMap="Select TSD.SERVICEPRODUCTID,TPM.SERVICEID,tslc.LCOMPANYID from ioe.TPOSERVICEMASTER TPM "+
    " inner join ioe.TPOSERVICEDETAILS TSD on TPM.SERVICEID = TSD.SERVICEID  inner join ioe.TBILLING_INFO TBI on tbi.SERVICEPRODUCTID =  TSD.SERVICEPRODUCTID " +
    " inner join ioe.TSERVICETYPEDETAIL tst on  tst.SERVICEDETAILID=tsd.SERVICEDETAILID left join ioe.TM_SERVICEATTPRODUCT_LIC_COMPANY_MAP tslc on tslc.PRODUCTTYPEID = TPM.PRODUCTID and tslc.LCOMPANYID = TBI.LICENCECOID " +
    " where TPM.ORDERNO = ? and TSD.PARENT_SERVICEPRODUCTID != ? and tslc.ID is null and Tpm.IS_SERVICE_INACTIVE = 0 and coalesce(tpm.M6_FX_PROGRESS_STATUS,'') not like '%CANCEL%' " +
    "and tpm.ISPUBLISHED = 0 AND not(ucase(tst.SERVICETYPE) like '%HARDWARE%' and tsd.ADDITIONALNODE=1)";
	//[148] Start
	private static String sqlValidateDropAndCarry="{call IOE.SP_VALIDATE_DROP_AND_CARRY(?,?,?,?,?,?)}";
//[148] End
// nancy
	public static String  sqlQueryToFetchAttributesForFileMigration ="select slno,ORDERNO,FILENAME from ioe.TFILEUPLOAD where IS_UPLOADED='EFS'";
	//public static String sql_create_xml_for_sharepoint_upload="{call IOE.CREATEXMLFORSHAREPOINTUPLOAD_NANCY(?,?,?,?)}";
	public static String sql_create_xml_for_sharepoint_upload="{call IOE.CREATEXMLFORSHAREPOINTUPLOAD(?,?,?,?)}";
	
	public static String  sqlQueryToFetchFileDataForMigration=  "Select FILEDATA FROM IOE.TFILEUPLOAD WHERE SLNO= ?";
	public static String sqlUpdateStatusForFileSavedInSystem= "Update ioe.TFILEUPLOAD SET IS_UPLOADED='DS',PATH_fOR_CSV=? , LOT_ID= ? WHERE SLNO=?";
	public static String sqlUpdateErrorStatusForFileNotSuccess ="Update ioe.TFILEUPLOAD SET IS_UPLOADED=? , LOT_ID=? WHERE SLNO=?";
	//public static String sqlFetchEligibleAttachmentsForShareptMigration= "Select SLNO,FILEDATA FROM IOE.TFILEUPLOAD WHERE IS_UPLOADED='ESU' ";
	//public static String sqlFetchEligibleAttachmentsForShareptMigration= "select SLNO,FILEDATA  from ioe.TFILEUPLOAD where RETRY_COUNT <6 and (IS_UPLOADED ='ESU' OR IS_UPLOADED ='ERR')";
	public static String sqlFetchEligibleAttachmentsForShareptMigration= "select SLNO from ioe.TFILEUPLOAD where RETRY_COUNT <6 and (IS_UPLOADED ='ESU' OR IS_UPLOADED ='ERR')";
// nancy	
	//Gunjan Start
	private static String sqlUpdateAttributesFromServiceToLine="{call IOE.SP_UPDATE_ATTRIBUTES_SERVICE_TO_LINE(?,?,?,?,?)}";
	//Gunjan End
	public ArrayList<OrderHeaderDTO> getRegionList() 
	{
		//		Added by nagarjuna
		String methodName="getRegionList",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		
		Connection connection =null;
		CallableStatement getRegionDetails =null;
		ResultSet rsRegionDetails = null;
		ArrayList<OrderHeaderDTO> regionList = new ArrayList<OrderHeaderDTO>();
		OrderHeaderDTO objNewOrderDto = null;
		
		try
		{
			connection=DbConnection.getConnectionObject();
			getRegionDetails= connection.prepareCall(sqlGetRegionList);
			rsRegionDetails = getRegionDetails.executeQuery();
			while(rsRegionDetails.next())
			{
				objNewOrderDto =  new OrderHeaderDTO();
				objNewOrderDto.setRegionId(rsRegionDetails.getInt("regionID"));
				objNewOrderDto.setRegionName(rsRegionDetails.getString("regionName"));
				
				regionList.add(objNewOrderDto);
			}
			return regionList;
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Exception"+ex, logToFile, logToConsole);//added by nagarjuna 
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsRegionDetails);
				DbConnection.closeCallableStatement(getRegionDetails);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return regionList;
	}	
	public static Lock logicalSILock = new ReentrantLock(); 
	//Method used for Fetching All Accounts
	public ArrayList<OrderHeaderDTO> getAccountDetails(NewOrderDto objDto) 
	{
		//		Added by nagarjuna
		String methodName="getAccountDetails",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement getAllAccountsReport =null;
		ResultSet rsAccountDetails = null;
		ArrayList<OrderHeaderDTO> listAccountDetails = new ArrayList<OrderHeaderDTO>();
		//NewOrderDto objNewOrderDto = null;
		OrderHeaderDTO objNewOrderDto=null;
		
		try
		{
			connection=DbConnection.getConnectionObject();
			getAllAccountsReport= connection.prepareCall(sqlGetAccount);
			String searchAcc=objDto.getAccountName();
			String accountId=objDto.getAccountIDString();
			
			if(accountId==null || accountId.equalsIgnoreCase(""))
			{
				accountId="0";
			}
			if(searchAcc=="")
			{
				searchAcc=null;
			}
			objDto.getAccountID();
			
			getAllAccountsReport.setString(1,searchAcc);
			getAllAccountsReport.setInt(2,Integer.parseInt(accountId));
			rsAccountDetails = getAllAccountsReport.executeQuery();
			while(rsAccountDetails.next())
			{
				objNewOrderDto =  new OrderHeaderDTO();
				objNewOrderDto.setAccountID(rsAccountDetails.getInt("accountID"));
				objNewOrderDto.setCrmAccountId(rsAccountDetails.getInt("CRMACCOUNTNO"));
				objNewOrderDto.setAccountName(rsAccountDetails.getString("accountName"));
				objNewOrderDto.setAccphoneNo(rsAccountDetails.getLong("PhoneNo"));
				objNewOrderDto.setLob(rsAccountDetails.getString("LOB"));
				//[125] Start
				objNewOrderDto.setServiceSegment(rsAccountDetails.getString("SERVICESEGMENT"));
                //[125] End
				objNewOrderDto.setOsp(rsAccountDetails.getString("OSP"));
				objNewOrderDto.setAccountManager(rsAccountDetails.getString("AccountManager"));
				objNewOrderDto.setProjectManager(rsAccountDetails.getString("ProjManager"));
				objNewOrderDto.setProjectManagerID(rsAccountDetails.getLong("PROJECTMGRID"));
				
				objNewOrderDto.setSpFirstname(rsAccountDetails.getString("SPFirstname"));
				objNewOrderDto.setSpLastName(rsAccountDetails.getString("SLastName"));
				//objNewOrderDto.setAcmgrPhno(rsAccountDetails.getLong("acmgrPhone"));//changed by kalpana from long to string for bug id HYPR11042013001
				objNewOrderDto.setAcmgrPhno(rsAccountDetails.getString("acmgrPhone"));
				objNewOrderDto.setAcmgrEmail(rsAccountDetails.getString("acmgrEmail"));
				objNewOrderDto.setSpLPhno(rsAccountDetails.getString("SLPhno"));//changed by kalpana from long to string for bug id HYPR11042013001
				objNewOrderDto.setSpLEmail(rsAccountDetails.getString("emailID"));
				objNewOrderDto.setRegion(rsAccountDetails.getString("Region"));
				objNewOrderDto.setRegionIdNew(rsAccountDetails.getString("REGIONID"));
				objNewOrderDto.setZone(rsAccountDetails.getString("ACCZONE"));
				objNewOrderDto.setM6ShortCode(rsAccountDetails.getString("M6SHORTCODE"));
				objNewOrderDto.setCollectionMgr(rsAccountDetails.getString("CollectionMgr"));
				objNewOrderDto.setCircle(rsAccountDetails.getString("CIRCLE"));//added on 9-jan-2013, Circle work
				objNewOrderDto.setCategory(rsAccountDetails.getString("CATEGORY"));// [090]		
				objNewOrderDto.setGroupName(rsAccountDetails.getString("GROUP_DESC"));
				listAccountDetails.add(objNewOrderDto);
			}
			return listAccountDetails;
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Exception at :"+objDto.getAccountID(), logToFile, logToConsole);//added by nagarjuna 
			listAccountDetails=null;
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsAccountDetails);
				DbConnection.closeCallableStatement(getAllAccountsReport);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listAccountDetails;
	}		
	
	//	Method used for Fetching MAIN TAB Label Values and Text
	public ArrayList<FieldAttibuteDTO> getMainDetails(NewOrderDto objDto) 
	{
		//		Added by nagarjuna
		String methodName="getMainDetails",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement getMainDetails =null;
		ResultSet rsMainDetails = null;
		ArrayList<FieldAttibuteDTO> listMainDetails = new ArrayList<FieldAttibuteDTO>();
		//NewOrderDto objNewOrderDto = null;
		FieldAttibuteDTO objNewOrderDto=null;
		
		try
		{
			connection=DbConnection.getConnectionObject();
			getMainDetails= connection.prepareCall(sqlGetMainDetails);
			//[083] passing added parameter
			getMainDetails.setString(1, objDto.getOrderType());
			rsMainDetails = getMainDetails.executeQuery();
			while(rsMainDetails.next())
			{
				objNewOrderDto =  new FieldAttibuteDTO();
				objNewOrderDto.setAttributeID(rsMainDetails.getInt("attributeID"));
				objNewOrderDto.setAlisName(rsMainDetails.getString("alisName"));
				objNewOrderDto.setAttributeLabel(rsMainDetails.getString("attLabel"));
				objNewOrderDto.setDataType(rsMainDetails.getString("attType"));
				objNewOrderDto.setAttMaxLength(rsMainDetails.getInt("attMaxLength"));
				objNewOrderDto.setExpectedValue(rsMainDetails.getString("EXPECTEDVALUE"));
				objNewOrderDto.setMandatory(rsMainDetails.getString("MANDATORY"));
				listMainDetails.add(objNewOrderDto);
			}
			return listMainDetails;
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Exception at :"+objNewOrderDto.getAttributeID(), logToFile, logToConsole);//added by nagarjuna 
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsMainDetails);
				DbConnection.closeCallableStatement(getMainDetails);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listMainDetails;
	}	

	
	//Rakshika
	
	


//	Method used for Fetching Taxation Details from the Database
	public ArrayList<NewOrderDto> getChangeType() 
	{
		//		Added by nagarjuna
		String methodName="getChangeType",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		PreparedStatement getChangeType =null;
		ResultSet rs = null;
		NewOrderDto objNewOrderDto = null;
		ArrayList<NewOrderDto> listChangeType = new ArrayList<NewOrderDto>();
		try
		{
			connection=DbConnection.getConnectionObject();
			
			getChangeType= connection.prepareCall(sqlGetChangeTypeMaster);
			rs = getChangeType.executeQuery();
			
			while(rs.next())
			{
			 objNewOrderDto =  new NewOrderDto();
			 objNewOrderDto.setChangeTypeId(rs.getInt("GUI_CHANGE_TYPE"));
			 objNewOrderDto.setChangeTypeName(rs.getString("CHANGETYPENAME"));
			 listChangeType.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			 
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Exception"+msg, logToFile, logToConsole);//added by nagarjuna 
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(getChangeType);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listChangeType;
	}
	
	public ArrayList<NewOrderDto> getChangeTypeForParallelUpgradeReport() 
	{
	
		String methodName="getChangeTypeForParallelUpgradeReport",  msg="";
		boolean logToFile=true, logToConsole=true;
		
		Connection connection =null;
		PreparedStatement getChangeType =null;
		ResultSet rs = null;
		NewOrderDto objNewOrderDto = null;
		ArrayList<NewOrderDto> listChangeType = new ArrayList<NewOrderDto>();
		try
		{
			connection=DbConnection.getConnectionObject();
			
			getChangeType= connection.prepareCall("SELECT CHANGETYPEID, CHANGETYPENAME FROM IOE.TCHANGETYPE_MASTER where CHANGETYPEID in (141,2,3) order by CHANGETYPENAME");
			rs = getChangeType.executeQuery();
			
			while(rs.next())
			{
			 objNewOrderDto =  new NewOrderDto();
			 objNewOrderDto.setChangeTypeId(rs.getInt("CHANGETYPEID"));
			 objNewOrderDto.setChangeTypeName(rs.getString("CHANGETYPENAME"));
			 listChangeType.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			 
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Exception"+msg, logToFile, logToConsole);//added by nagarjuna 
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(getChangeType);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listChangeType;
	}
	
	//[00044] Start
	public long genrateChangeOrderNumber(NewOrderDto objDto) 
	{
		//		Added by nagarjuna
		String methodName="genrateChangeOrderNumber",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		long cretadeOrderNO=0;
		Connection connection =null;
		CallableStatement getChangeType =null;
		ResultSet rs = null;
		NewOrderDto objNewOrderDto = null;
		ArrayList<NewOrderDto> listChangeType = new ArrayList<NewOrderDto>();
		try
		{
			connection=DbConnection.getConnectionObject();
			
			getChangeType= connection.prepareCall(sqlgenrateChangeOrderNumber);
			getChangeType.setLong(1, Long.parseLong(objDto.getOrderNo().trim()));
			getChangeType.setInt(2, objDto.getChangeTypeId());
			getChangeType.setInt(3, objDto.getSubChangeTypeId());
			getChangeType.setInt(4, 0);
			getChangeType.setString(5, "");
			getChangeType.setString(6, "");
			getChangeType.setString(7,"");
			getChangeType.setLong(8, 0);
			getChangeType.setString(9,"Change");
			getChangeType.execute();
			if(getChangeType.getLong(8)!=0);
			{
				cretadeOrderNO=getChangeType.getLong(8);
			}
			
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Exception at :"+cretadeOrderNO, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(getChangeType);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return cretadeOrderNO;
	}
	//	[00044] End
	public ArrayList<OrderHeaderDTO> getSourceName()
	{
		//		Added by nagarjuna
		String methodName="getSourceName",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		PreparedStatement getSourceName =null;
		ResultSet rs = null;
		OrderHeaderDTO objNewOrderDto = null;
		ArrayList<OrderHeaderDTO> listSourceName = new ArrayList<OrderHeaderDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
			
			getSourceName= connection.prepareCall(sqlGetSourceName);
			rs = getSourceName.executeQuery();
			
			while(rs.next())
			{
			 objNewOrderDto =  new OrderHeaderDTO();
	
			 objNewOrderDto.setSearchSourceName(rs.getString("SOURCENAME"));
			 listSourceName.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Exception"+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(getSourceName);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listSourceName;
	}
	//010 END
	
//013 start
	// for view order list
	
	public ArrayList<NewOrderDto> viewOrderList(NewOrderDto objDto,long empID)
	throws Exception {
		//		Added by nagarjuna
		String methodName="viewOrderList",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
                        ArrayList<NewOrderDto> objOrderList = new ArrayList<NewOrderDto>();
                           Connection conn = null;
                          ResultSet rs = null;
                          CallableStatement getOrder = null;

try {
	
	conn = DbConnection.getConnectionObject();

	
	
	
	getOrder = conn.prepareCall(sqlGetIncompleteOrder);
	String searchCRMOrder = objDto.getSearchCRMOrder();
	String searchAccountNo  = objDto.getSearchAccountNo();
	String searchAccountName=objDto.getSearchAccountName();

	String searchfromDate=objDto.getSearchfromDate();
	String searchToDate = objDto.getSearchToDate();
	String searchSource=objDto.getSearchSource();
	String searchQuoteNumber=objDto.getSearchQuoteNumber();
	String searchCurrency=objDto.getSearchCurrency();




	if (searchCRMOrder == null || searchCRMOrder.trim().equals("")) {
		getOrder.setNull(1, java.sql.Types.VARCHAR);
	} else {
		getOrder.setString(1, searchCRMOrder);
	}

	if (searchAccountNo == null || searchAccountNo.trim().equals("")) {
		getOrder.setNull(2, java.sql.Types.VARCHAR);
	} else {
		getOrder.setString(2, searchAccountNo);
	}

	if (searchAccountName == null || searchAccountName.trim().equals("")) {
		getOrder.setNull(3, java.sql.Types.VARCHAR);
	} else {
		getOrder.setString(3, searchAccountName);
	}
	
	if (searchfromDate == null || searchfromDate.trim().equals("")) {
		getOrder.setNull(4, java.sql.Types.VARCHAR);
	} else {
		getOrder.setString(4, searchfromDate);
	}
	
	if (searchToDate == null || searchToDate.trim().equals("")) {
		getOrder.setNull(5, java.sql.Types.VARCHAR);
	} else {
		getOrder.setString(5, searchToDate);
	}
	
	if (searchSource == null || searchSource.trim().equals("")) {
		getOrder.setNull(6, java.sql.Types.VARCHAR);
	} else {
		getOrder.setString(6, searchSource);
	}
	
	if (searchQuoteNumber == null || searchQuoteNumber.trim().equals("")) {
		getOrder.setNull(7, java.sql.Types.VARCHAR);
	} else {
		getOrder.setString(7,searchQuoteNumber);
	}
	

	if (searchCurrency == null || searchCurrency.trim().equals("")) {
		getOrder.setNull(8, java.sql.Types.VARCHAR);
	} else {
		getOrder.setString(8, searchCurrency);
	}
	
	PagingSorting pagingSorting = objDto.getPagingSorting();
	pagingSorting.sync();// To calculate start index and Enc Index

	getOrder.setString(9, pagingSorting.getSortByColumn());// columnName
	getOrder.setString(10, PagingSorting.DB_Asc_Desc1(pagingSorting
			.getSortByOrder()));// sort order
	getOrder.setInt(11, pagingSorting.getStartRecordId());// start index
	getOrder.setInt(12, pagingSorting.getEndRecordId());// end index
	getOrder.setInt(13, (pagingSorting.isPagingToBeDone() ? 1 : 0));// end
	getOrder.setLong(14, empID);// end
	// index

	rs = getOrder.executeQuery();

	int countFlag = 0;
	int recordCount = 0;
	while (rs.next() != false) {
		countFlag++;
		
		SimpleDateFormat sdf  = new SimpleDateFormat("dd-MM-yyyy");

		objDto = new NewOrderDto();
		objDto.setSearchCRMOrder(rs.getString("ORDERNO"));
		objDto.setSearchAccountNo(rs.getString("ACCOUNTID"));
		objDto.setSearchAccountName(rs.getString("ACCOUNTNAME"));
		objDto.setSearchOrderType(rs.getString("ORDERTYPE"));
		objDto.setSearchfromDate(sdf.format(rs.getDate("ORDERDATE")));
		
		
		objDto.setSearchSource(rs.getString("SOURCE"));
		objDto.setSearchQuoteNumber(rs.getString("QUOTENO"));
		objDto.setSearchCurrency(rs.getString("CURNAME"));
		objDto.setSearchStageName(rs.getString("STAGE"));
		objDto.setServiceName(rs.getString("SERVICETYPENAME"));
		
		if (pagingSorting.isPagingToBeDone()) {
			recordCount = rs.getInt("FULL_REC_COUNT");
		}

		objOrderList.add(objDto);
	}
	pagingSorting.setRecordCount(recordCount);
} catch (Exception ex) {
	Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Exception at :"+objDto.getSearchCRMOrder(), logToFile, logToConsole);//added by nagarjuna
	//ex.printStackTrace();
	//throw new Exception("SQL Exception : " + ex.getMessage(), ex);
} finally {
	try {
		DbConnection.closeResultset(rs);
		DbConnection.closePreparedStatement(getOrder);
		DbConnection.freeConnection(conn);

	} catch (Exception e) {
		Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
		//e.printStackTrace();
		//throw new Exception("Exception : " + e.getMessage(), e);
	}
}
return objOrderList;
}

//	013 start
	
// for change order
	
	//014 start
	
	public ArrayList<NewOrderDto> viewOrderList_change(NewOrderDto objDto)
	throws Exception {
		
//		Added by nagarjuna
		String methodName="viewOrderList_change",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
                        ArrayList<NewOrderDto> objOrderList = new ArrayList<NewOrderDto>();
                           Connection conn = null;
                          ResultSet rs = null;
                          CallableStatement getOrder = null;

try {
	
	conn = DbConnection.getConnectionObject();

	
	
	
	getOrder = conn.prepareCall(sqlGetIncompleteOrder_change);
	String searchCRMOrder = objDto.getSearchCRMOrder();
	String searchAccountNo  = objDto.getSearchAccountNo();
	String searchAccountName=objDto.getSearchAccountName();

	String searchfromDate=objDto.getSearchfromDate();
	String searchToDate = objDto.getSearchToDate();
	String searchSource=objDto.getSearchSource();
	String searchQuoteNumber=objDto.getSearchQuoteNumber();
	String searchCurrency=objDto.getSearchCurrency();




	if (searchCRMOrder == null || searchCRMOrder.trim().equals("")) {
		getOrder.setNull(1, java.sql.Types.BIGINT);
	} else {
		getOrder.setLong(1, Long.parseLong(searchCRMOrder));
	}

	if (searchAccountNo == null || searchAccountNo.trim().equals("")) {
		getOrder.setNull(2, java.sql.Types.BIGINT);
	} else {
		getOrder.setLong(2, Long.parseLong(searchAccountNo));
	}

	if (searchAccountName == null || searchAccountName.trim().equals("")) {
		getOrder.setNull(3, java.sql.Types.VARCHAR);
	} else {
		getOrder.setString(3, searchAccountName);
	}
	
	if (searchfromDate == null || searchfromDate.trim().equals("")) {
		getOrder.setNull(4, java.sql.Types.VARCHAR);
	} else {
		getOrder.setString(4, searchfromDate);
	}
	
	if (searchToDate == null || searchToDate.trim().equals("")) {
		getOrder.setNull(5, java.sql.Types.VARCHAR);
	} else {
		getOrder.setString(5, searchToDate);
	}
	
	if (searchSource == null || searchSource.trim().equals("")) {
		getOrder.setNull(6, java.sql.Types.VARCHAR);
	} else {
		getOrder.setString(6, searchSource);
	}
	
	if (searchQuoteNumber == null || searchQuoteNumber.trim().equals("")) {
		getOrder.setNull(7, java.sql.Types.VARCHAR);
	} else {
		getOrder.setString(7, searchQuoteNumber);
	}
	

	if (searchCurrency == null || searchCurrency.trim().equals("")) {
		getOrder.setNull(8, java.sql.Types.VARCHAR);
	} else {
		getOrder.setString(8, searchCurrency);
	}
	
	
	

	
	SimpleDateFormat sdf  = new SimpleDateFormat("dd-MM-yyyy");
	PagingSorting pagingSorting = objDto.getPagingSorting();
	pagingSorting.sync();// To calculate start index and Enc Index

	getOrder.setString(9, pagingSorting.getSortByColumn());// columnName
	getOrder.setString(10, PagingSorting.DB_Asc_Desc1(pagingSorting
			.getSortByOrder()));// sort order
	getOrder.setInt(11, pagingSorting.getStartRecordId());// start index
	getOrder.setInt(12, pagingSorting.getEndRecordId());// end index
	getOrder.setInt(13, (pagingSorting.isPagingToBeDone() ? 1 : 0));// end
	// index

	rs = getOrder.executeQuery();

	int countFlag = 0;
	int recordCount = 0;
	while (rs.next() != false) {
		countFlag++;

		objDto = new NewOrderDto();
		objDto.setSearchCRMOrder(rs.getString("ORDERNO"));
		objDto.setSearchAccountNo(rs.getString("ACCOUNTID"));
		objDto.setSearchAccountName(rs.getString("ACCOUNTNAME"));
		objDto.setSearchOrderType(rs.getString("ORDERTYPE"));
		objDto.setSearchfromDate(sdf.format(rs.getDate("ORDERDATE")));
		
		
		objDto.setSearchSource(rs.getString("SOURCE"));
		objDto.setSearchQuoteNumber(rs.getString("QUOTENO"));
		objDto.setSearchCurrency(rs.getString("CURNAME"));
		objDto.setSearchStageName(rs.getString("STAGE"));
		objDto.setServiceName(rs.getString("SERVICETYPENAME"));
		
		if (pagingSorting.isPagingToBeDone()) {
			recordCount = rs.getInt("FULL_REC_COUNT");
		}

		objOrderList.add(objDto);
	}
	pagingSorting.setRecordCount(recordCount);
} catch (Exception ex) {
	
	Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Exception  :"+msg, logToFile, logToConsole);//added by nagarjuna
	//ex.printStackTrace();
	//throw new Exception("SQL Exception : " + ex.getMessage(), ex);
} finally {
	try {
		DbConnection.closeResultset(rs);
		DbConnection.closeCallableStatement(getOrder);
		DbConnection.freeConnection(conn);

	} catch (Exception e) {
		Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
		//e.printStackTrace();
		//throw new Exception("Exception : " + e.getMessage(), e);
	}
}
return objOrderList;
}

//	014 end
	
	
	
	
	
	public ArrayList<OrderHeaderDTO> getCurrency()
	{
		//		Added by nagarjuna
		String methodName="getCurrency",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		PreparedStatement getSourceName =null;
		ResultSet rs = null;
		OrderHeaderDTO objNewOrderDto = null;
		ArrayList<OrderHeaderDTO> listCurrency = new ArrayList<OrderHeaderDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
			
			getSourceName= connection.prepareCall(sqlGetCurrencyName);
			rs = getSourceName.executeQuery();
			objNewOrderDto =  new OrderHeaderDTO();
			while(rs.next())
			{
			 objNewOrderDto.setSearchCurrencyName(rs.getString("CURNAME"));
			 listCurrency.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Exception  :"+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(getSourceName);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listCurrency;
	}
	
	
	public ArrayList<NewOrderDto> getSubChangeType(long changeTypeId) 
	{
//		Added by nagarjuna
		String methodName="getSubChangeType",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		PreparedStatement getChangeType =null;
		ResultSet rs = null;
		NewOrderDto objNewOrderDto = null;
		ArrayList<NewOrderDto> listChangeType = new ArrayList<NewOrderDto>();
		try
		{
			connection=DbConnection.getConnectionObject();
			
			getChangeType= connection.prepareCall(sqlGetChangeSubTypeMaster);
			getChangeType.setLong(1, changeTypeId);
			rs = getChangeType.executeQuery();
			
			while(rs.next())
			{
			 objNewOrderDto =  new NewOrderDto();
			 objNewOrderDto.setSubChangeTypeId(rs.getInt("GUI_CHANGE_TPYE_ID"));
			 objNewOrderDto.setSubChangeTypeName(rs.getString("NAME_SUBTYPE"));
			 listChangeType.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Exception  :"+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(getChangeType);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listChangeType;
	}

	//	Method used for Fetching All Accounts
	
	//
	
	
	public static ArrayList<NewOrderDto> getChargeTypeDetailsinFx(String dto) 
	{
//		Added by nagarjuna
		String methodName="getChargeTypeDetailsinFx",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement csChargeDetails =null;
		ResultSet rsChargeDetails = null;
		ArrayList<NewOrderDto> listChargeDetails = new ArrayList<NewOrderDto>();
		NewOrderDto objNewOrderDto = null;
		
		try
		{
			connection=DbConnection.getConnectionObject();
			csChargeDetails= connection.prepareCall(sqlGetChargeDetails_Fx);
			csChargeDetails.setLong(1, Long.parseLong(dto));
			rsChargeDetails = csChargeDetails.executeQuery();
	              while(rsChargeDetails.next())
	              {
				objNewOrderDto =  new NewOrderDto();
				objNewOrderDto.setChargeType(rsChargeDetails.getInt("CHARGESTYPE"));
				objNewOrderDto.setRcId(rsChargeDetails.getInt("RCID"));
				objNewOrderDto.setNrcId(rsChargeDetails.getInt("NRCID"));
				listChargeDetails.add(objNewOrderDto);
				
				
			}
		}
		
		catch (SQLException e) {
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className,"SQL Exception  :"+msg, logToFile, logToConsole);//added by nagarjuna
			//e.printStackTrace();
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Exception  :"+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsChargeDetails);
				DbConnection.closeCallableStatement(csChargeDetails);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listChargeDetails;		
			
		
	}
	
	public ArrayList<NewOrderDto> getCurrencyDetails(PagingDto objDto) 
	{
		//		Added by nagarjuna
		String methodName="getCurrencyDetails",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement getAllCurrencyReport =null;
		ResultSet rsCurrencyDetails = null;
		ArrayList<NewOrderDto> listAccountDetails = new ArrayList<NewOrderDto>();
		NewOrderDto objNewOrderDto = null;
		int recordCount;		
		try
		{
			connection=DbConnection.getConnectionObject();
			getAllCurrencyReport= connection.prepareCall(sqlGetCurrencySearch);
			String currencyName=objDto.getCurrencyName();
			String currencyCode=objDto.getCurrencyCode();
			if("".equalsIgnoreCase(objDto.getCurrencyName()))
			{
				currencyName=null;
			}
			if("".equalsIgnoreCase(objDto.getCurrencyCode()))
			{
				currencyCode=null;
			}
			getAllCurrencyReport.setString(1, currencyName);
			getAllCurrencyReport.setString(2, currencyCode);
			getAllCurrencyReport.setString(3, objDto.getSortBycolumn());
			getAllCurrencyReport.setString(4, objDto.getSortByOrder());
			getAllCurrencyReport.setInt(5, objDto.getStartIndex());
			getAllCurrencyReport.setInt(6, objDto.getEndIndex());
			rsCurrencyDetails = getAllCurrencyReport.executeQuery();
			while(rsCurrencyDetails.next())
			{
				objNewOrderDto =  new NewOrderDto();
				objNewOrderDto.setCurrencyID(rsCurrencyDetails.getInt("CURRENCYID"));
				objNewOrderDto.setCurrencyName(rsCurrencyDetails.getString("CURNAME"));
				objNewOrderDto.setCurrencyCode(rsCurrencyDetails.getString("CURSHORTCODE"));
				recordCount=rsCurrencyDetails.getInt("FULL_REC_COUNT");
				objNewOrderDto.getPagingSorting().setRecordCount(recordCount);	
				objNewOrderDto.setMaxPageNo(objNewOrderDto.getPagingSorting().getMaxPageNumber());
				msg="Error at CurrencyId"+ objNewOrderDto.getCurrencyID();
				listAccountDetails.add(objNewOrderDto);
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Exception  :"+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsCurrencyDetails);
				DbConnection.closeCallableStatement(getAllCurrencyReport);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listAccountDetails;
	}
	
	//pankaj start

	public ArrayList<FieldEnginnerDto> getFieldEngineerList(Long partnerId) 
	{
		System.out.println(partnerId);
		String methodName="getFieldEngineer",  msg="";
		boolean logToFile=true, logToConsole=true;
		Connection connection =null;
		CallableStatement getAllFE =null;
		ResultSet rsgettingFE = null;
		ArrayList<FieldEnginnerDto> listFEDetails = new ArrayList<FieldEnginnerDto>();
		FieldEnginnerDto objFeDto = null;
		try
		{
			connection=DbConnection.getConnectionObject();
			
				getAllFE= connection.prepareCall(sqlGetFieldEngineer);
				getAllFE.setLong(1, partnerId);
				
				rsgettingFE = getAllFE.executeQuery();
			
			
			while(rsgettingFE.next())
			{
				objFeDto =  new FieldEnginnerDto();
				objFeDto.setFieldEngineer(rsgettingFE.getString("FIELD_ENGINEER"));
				objFeDto.setFieldEngineerId(rsgettingFE.getLong("FIELD_ENGINEER_ID"));
				listFEDetails.add(objFeDto);
			}
		}
		catch(Exception ex )
		{
			msg="Error at getFieldEngineer";
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Exception  :"+msg, logToFile, logToConsole);
			
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsgettingFE);
				DbConnection.closeCallableStatement(getAllFE);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);
			}
		}
		return listFEDetails;
	}
	
	public ArrayList<NewOrderDto> getChannelPartnerList(PagingDto objDto) {
		
		String methodName="getChannelPartnerList",  msg="";
		boolean logToFile=true, logToConsole=true;
		
		Connection connection =null;
		//PreparedStatement prestmt =null;
		CallableStatement  callstmt=null;
		ResultSet rs = null;
		ArrayList<NewOrderDto> listofChannelPartnerNameandCode = new ArrayList<NewOrderDto>() ;
		NewOrderDto objChannelDto = null;
		int recordCount;
		try
		{
			connection=DbConnection.getConnectionObject();
			callstmt= connection.prepareCall(sqlGetChannelPartner);	
			String channelPartnerName=objDto.getChannelPartnerName();
			String channelPartnerCode=objDto.getChannelpartnerCode();
			int crm=objDto.getCrmAccountNo();
			
			if("".equalsIgnoreCase(objDto.getChannelPartnerName()))
			{
				channelPartnerName=null;
			}
			if("".equalsIgnoreCase(objDto.getChannelpartnerCode()))
			{
				channelPartnerCode=null;
			}
			callstmt.setString(1, channelPartnerName);
			callstmt.setString(2, channelPartnerCode);
			callstmt.setString(3, objDto.getSortBycolumn());
			callstmt.setString(4, objDto.getSortByOrder());
			callstmt.setInt(5, objDto.getStartIndex());
			callstmt.setInt(6, objDto.getEndIndex());
			callstmt.setInt(7, objDto.getCrmAccountNo());
			rs = callstmt.executeQuery();
			
			while(rs.next())
			{
				objChannelDto =  new NewOrderDto();
				objChannelDto.setChannelPartnerId (Long.valueOf(rs.getInt("PARTNER_ID")));
				objChannelDto.setChannelPartnerName(rs.getString("PARTNER_NAME"));
				objChannelDto.setChannelpartnerCode(rs.getString("PARTNER_CODE"));
				objChannelDto.setCust_Segment_Id(rs.getInt("CUST_SEGMENT_ID"));
				objChannelDto.setLob(rs.getString("LOB_NAME"));
				recordCount=rs.getInt("FULL_REC_COUNT");
				objChannelDto.getPagingSorting().setRecordCount(recordCount);	
				objChannelDto.setMaxPageNo(objChannelDto.getPagingSorting().getMaxPageNumber());
				msg="Error at CurrencyId"+ objChannelDto.getChannelPartnerId();
				listofChannelPartnerNameandCode.add(objChannelDto);
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Exception  :"+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);
				
			}
		}
		return listofChannelPartnerNameandCode;
	}
		
	//pankaj end
	
	
	//	Method used for Fetching Max Order Nofrom the Database
	public int getMaxOrderNo(NewOrderDto objDto) 
	{
//		Added by nagarjuna
		String methodName="getMaxOrderNo",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement getMainDetails =null;
		int maxOrderValue=0;
		NewOrderDto objNewOrderDto = null;
		try
		{
			connection=DbConnection.getConnectionObject();
			getMainDetails= connection.prepareCall(sqlGetMaxOrderValue);
			getMainDetails.setInt(1,0);
			getMainDetails.execute();
			maxOrderValue=getMainDetails.getInt(1);
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Exception  :"+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeCallableStatement(getMainDetails);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return maxOrderValue;
	}	

	//	Method used for Fetching Source Details from Database
	public ArrayList<NewOrderDto> getSourceDetails(NewOrderDto objDto) 
	{
		//		Added by nagarjuna
		String methodName="getSourceDetails",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement getSourceReport =null;
		ResultSet rsSourceDetails = null;
		ArrayList<NewOrderDto> listSourceDetails = new ArrayList<NewOrderDto>();
		NewOrderDto objNewOrderDto = null;
		
		try
		{
			connection=DbConnection.getConnectionObject();
			getSourceReport= connection.prepareCall(sqlGetSource);
			getSourceReport.setString(1, objDto.getSourceName());
			rsSourceDetails = getSourceReport.executeQuery();
			while(rsSourceDetails.next())
			{
				objNewOrderDto =  new NewOrderDto();
				objNewOrderDto.setSourceID(rsSourceDetails.getInt("sourceID"));
				objNewOrderDto.setSourceName(rsSourceDetails.getString("sourceName"));
				msg="Error at SourceId"+objNewOrderDto.getSourceID();
				listSourceDetails.add(objNewOrderDto);
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Exception  :"+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsSourceDetails);
				DbConnection.closeCallableStatement(getSourceReport);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listSourceDetails;
	}

	//Method used for inserting Main Details in tPOmaster,TattributeValues for Main Tab
	//[011]	Start
	//public long insertUpdateMain(NewOrderBean newOrderBean,int updateType,String[] attributeVal,String[] attributeID)
	public long insertUpdateMain(NewOrderBean newOrderBean,int updateType,String[] attributeVal,String[] attributeID,long empID)
	//[011]	End
	{
		//		Added by nagarjuna
		String methodName="insertUpdateMain",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		long finalStatus=0;
		Connection connection =null;
		CallableStatement getMaxPONumber =null;
		CallableStatement setPOmaster =null;
		CallableStatement setMainDetails =null;
		long maxOrderValue=0;
		int POStatus=0;
		int MainStatus=0;
		String changeTypeId=newOrderBean.getChangeType();
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat(AppConstants.DATE_FORMAT_PROC);
		
		try
		{
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
			
			//To Fetch PO Number from the database 
			getMaxPONumber= connection.prepareCall(sqlGetMaxOrderValue);
			getMaxPONumber.setInt(1,0);
			getMaxPONumber.execute();
			maxOrderValue=getMaxPONumber.getInt(1);
			
			if(updateType==1)//for Inserting New Main Details
			{	
				setPOmaster=connection.prepareCall(sqlInsertPOMaster);
				setPOmaster.setString(1,newOrderBean.getOrderType());
				SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");
				setPOmaster.setDate(2,new java.sql.Date(sdf.parse(newOrderBean.getOrderDate()).getTime()));
				setPOmaster.setString(3,newOrderBean.getSourceName());
				setPOmaster.setString(4,newOrderBean.getQuoteNo());
				setPOmaster.setInt(5,Integer.valueOf(newOrderBean.getCurrencyID()));
				setPOmaster.setString(6,newOrderBean.getStatus());
				setPOmaster.setString(7,newOrderBean.getStageName());
				setPOmaster.setInt(8,Integer.valueOf(newOrderBean.getAccountID()));
				//[003] Start
				setPOmaster.setInt(9,Integer.valueOf(newOrderBean.getRegionId()));
				setPOmaster.setInt(10,Integer.valueOf(newOrderBean.getZone()));
				//setPOmaster.setInt(9,0);
				//setPOmaster.setInt(10,0);
				//[003] End
				if(newOrderBean.getChangeType()==null)
				{
					setPOmaster.setLong(11,141);//for New Order
				}
				else
				{
					setPOmaster.setLong(11,Long.parseLong(newOrderBean.getChangeType()));
				}
				setPOmaster.setInt(12,updateType);
				setPOmaster.setInt(13,0);
				setPOmaster.setInt(14,0);
				setPOmaster.setInt(15,0);
				setPOmaster.setString(16,"");
				setPOmaster.setLong(17,0);
				//start[032]
				setPOmaster.setLong(18,Long.parseLong(newOrderBean.getProjectManagerID()));
//				End[032]
			//Added by Ashutosh for Updating Order_Type in TPOMASTER as 'D'
				if(newOrderBean.getChangeType()==null)
					newOrderBean.setChangeType("0");
				
				//Vijay add modified condition for demo order 
				//if(Integer.valueOf(newOrderBean.getChangeType())==4 && Integer.parseInt(newOrderBean.getSubChangeTypeId())!=12)
				if(Integer.valueOf(newOrderBean.getChangeType())==4 )	
					setPOmaster.setString(19,"D");
				else if(newOrderBean.getChkIsDemo()!=null)
					setPOmaster.setString(19,newOrderBean.getChkIsDemo());
				else	
					setPOmaster.setString(19,"N");
				
				setPOmaster.setString(20,newOrderBean.getNoOfDaysForDemo());
				
				//[011] Start
				setPOmaster.setLong(21,empID);
				//[011] End
				
				//[00044]Start
				if(changeTypeId!=null)
				{				
					setPOmaster.setInt(22,Integer.parseInt(newOrderBean.getSubChangeTypeId()));
					
				}
				else
				{
					setPOmaster.setInt(22,0);
				}
				//[00044] End
				//Start[024]
				setPOmaster.setInt(23, newOrderBean.getIsUrgent());
				//End[024]
				setPOmaster.setString(24, newOrderBean.getSpFirstname());
				setPOmaster.setString(25, newOrderBean.getSpLastName());
				//setPOmaster.setLong(26, Long.parseLong(newOrderBean.getSpLPhno()));//changed by kalpana from long to string for bug id HYPR11042013001
				setPOmaster.setString(26, newOrderBean.getSpLPhno());
				setPOmaster.setString(27, newOrderBean.getSpLEmail());
				//By Saurabh to save opportunityId
				if(newOrderBean.getOpportunityId().equals("0"))
				{
					setPOmaster.setString(28, null);
				}
				else
				{
					setPOmaster.setString(28, newOrderBean.getOpportunityId());
				}
				//[132] Start PROJECT SATYAPAN
				setPOmaster.setInt(29, newOrderBean.getIspTagging());
				setPOmaster.setInt(30, newOrderBean.getIspLicCtgry());
				if(null!=newOrderBean.getIspLicDate())
					if(newOrderBean.getIspLicDate().trim().length()==0)
						setPOmaster.setDate(31,null);
					else
						setPOmaster.setDate(31,new java.sql.Date(simpleDateFormat.parse(newOrderBean.getIspLicDate()).getTime()));
				setPOmaster.setString(32, newOrderBean.getIspLicNo());
				//[132] End PROJECT SATYAPAN
				
				//[142] start CBR SalesForce Opportunity number in iB2B

				  setPOmaster.setString(33, newOrderBean.getChannelMasterTagging());
				  
				  if(newOrderBean.getChannelPartnerId()==0)
				  {
					  setPOmaster.setNull(34,java.sql.Types.VARCHAR);	
				  }
				  else
				  {
					  setPOmaster.setLong(34, newOrderBean.getChannelPartnerId());	  
				  }
				  	
				  if(newOrderBean.getFieldEngineerId()==0)
				  {
					  setPOmaster.setNull(35,java.sql.Types.INTEGER);	
				  }
				  else
				  {
					  setPOmaster.setLong(35, newOrderBean.getFieldEngineerId());
				  }
				 
				//[142] start CBR SalesForce Opportunity number in iB2B

				//By Saurabh to save opportunityId
				setPOmaster.execute();
				POStatus=setPOmaster.getInt(14);
				 System.err.println(setPOmaster.getString(15));
				 System.err.println(setPOmaster.getString(16));
				 System.err.println(setPOmaster.getString(17));
				 
				 
				if(POStatus==0)//Success
				{
					maxOrderValue = setPOmaster.getLong(17);	
					for(int i=0;i<newOrderBean.getAttCount();i++)
					{
						setMainDetails=connection.prepareCall(sqlInsertUpdateMain);
						setMainDetails.setInt(1, Integer.valueOf(attributeID[i]));//AttributeID
						setMainDetails.setLong(2, maxOrderValue);//Order No
						setMainDetails.setInt(3, 1);//Attribute For
						setMainDetails.setString(4, attributeVal[i]);//Attribute Value
						setMainDetails.setInt(5, 1);//Update Type
						setMainDetails.setInt(6,0);//Output Parameter
						setMainDetails.setInt(7,0);//Output Parameter
						setMainDetails.setString(8,"");//Output Parameter
//						start[032]
						setMainDetails.setLong(9,Long.parseLong(newOrderBean.getProjectManagerID()));
//						start[032]
						//[003] Start
						//setMainDetails.setInt(10,Integer.valueOf(newOrderBean.getRegionId()));
						//setMainDetails.setInt(11,Integer.valueOf(newOrderBean.getZoneId()));
						setMainDetails.setInt(10,0);
						setMainDetails.setInt(11,0);
						//[003] End
						
						//[011]	Start
						setMainDetails.setLong(12,empID);
						setMainDetails.setLong(13, Integer.valueOf(newOrderBean.getCurrencyID()));
						setMainDetails.setString(14, newOrderBean.getChkIsDemo());
						setMainDetails.setString(15, newOrderBean.getNoOfDaysForDemo());
						//[011]	End
						//[132] Start PROJECT SATYAPAN
						setMainDetails.setInt(16, newOrderBean.getIspTagging());
						setMainDetails.setInt(17, newOrderBean.getIspLicCtgry());
						if(null!=newOrderBean.getIspLicDate())
							if(newOrderBean.getIspLicDate().trim().length()==0)
								setMainDetails.setDate(18,null);
							else
								setMainDetails.setDate(18,new java.sql.Date(simpleDateFormat.parse(newOrderBean.getIspLicDate()).getTime()));
						setMainDetails.setString(19, newOrderBean.getIspLicNo());
						//[132] End PROJECT SATYAPAN
						
						//[142] start salesopportunity in ib2b
						
						setMainDetails.setString(20, newOrderBean.getChannelMasterTagging());
						
						if(newOrderBean.getChannelPartnerId()==0)
						{
							setMainDetails.setNull(21,java.sql.Types.VARCHAR);
						}
						else
						setMainDetails.setLong(21, newOrderBean.getChannelPartnerId());
						
						if(newOrderBean.getFieldEngineerId()==0)
						{
							setMainDetails.setNull(22,java.sql.Types.INTEGER);
						}
						else
							
						setMainDetails.setLong(22, newOrderBean.getFieldEngineerId());
						
						//[142] end salesopportunity in ib2b
						
						setMainDetails.execute();
						MainStatus=setMainDetails.getInt(6);
						if(MainStatus==1)
						{
							break;
						}
					}
				}
				if((POStatus==0) && (MainStatus==0))
				{
					connection.commit();
					//newOrderBean.setPoNumber(newOrderBean.toString());
					finalStatus=maxOrderValue;
				}
				else
				{
					connection.rollback();
					finalStatus=0;
				}
			}
			if(updateType==2)//for Updating Main Details
			{
				for(int i=0;i<newOrderBean.getAttCount();i++)
				{
					setMainDetails=connection.prepareCall(sqlInsertUpdateMain);
					setMainDetails.setInt(1, Integer.valueOf(attributeID[i]));//AttributeID
					setMainDetails.setInt(2, Integer.valueOf(newOrderBean.getPoNumber()));//Order No
					setMainDetails.setInt(3, 1);//Attribute For
					setMainDetails.setString(4, attributeVal[i].trim());//Attribute Value
					setMainDetails.setInt(5, updateType);//Update Type
					setMainDetails.setInt(6,0);//Output Parameter
					setMainDetails.setInt(7,0);//Output Parameter
					setMainDetails.setString(8,"");//Output Parameter
					setMainDetails.setLong(9,Long.parseLong(newOrderBean.getProjectManagerID()));
					//[003] Start
					setMainDetails.setInt(10,0);
					setMainDetails.setInt(11,0);//
					//setMainDetails.setInt(10,Integer.valueOf(newOrderBean.getRegionId()));
					//setMainDetails.setInt(11,Integer.valueOf(newOrderBean.getZoneId()));
					//[003] End
					//[011]	Start
					setMainDetails.setLong(12,empID);
					setMainDetails.setLong(13, Integer.valueOf(newOrderBean.getCurrencyID()));
					//setMainDetails.setString(14, newOrderBean.getChkIsDemo());
					
					//Vijay start
					if(newOrderBean.getChangeType()==null)
						newOrderBean.setChangeType("0");
					//Vijay end
					//by mohit
					
					if(newOrderBean.getInterfaceName().equalsIgnoreCase("DEMO CHANGE ORDER"))
						setPOmaster.setString(14,"D");
					else	
						setMainDetails.setString(14, newOrderBean.getChkIsDemo());
					//Mahalakshmi start
					if("N".equalsIgnoreCase(newOrderBean.getChkIsDemo()))
						setMainDetails.setString(15,"0");
					else
					
					//Mahalakshmi end
					
					setMainDetails.setString(15, newOrderBean.getNoOfDaysForDemo());
					//[011]	End
					//[132] Start PROJECT SATYAPAN
					setMainDetails.setInt(16, newOrderBean.getIspTagging());
					setMainDetails.setInt(17, newOrderBean.getIspLicCtgry());
					if(null!=newOrderBean.getIspLicDate())
						if(newOrderBean.getIspLicDate().trim().length()==0)
							setMainDetails.setDate(18,null);
						else
							setMainDetails.setDate(18,new java.sql.Date(simpleDateFormat.parse(newOrderBean.getIspLicDate()).getTime()));
					setMainDetails.setString(19, newOrderBean.getIspLicNo());
					//[132] End PROJECT SATYAPAN
					
					setMainDetails.setString(20, newOrderBean.getChannelMasterTagging());

					if(!"0".equals(newOrderBean.getChannelMasterTagging()))
					{
						setMainDetails.setLong(21, newOrderBean.getChannelPartnerId());
						
						if(newOrderBean.getFieldEngineerId()==0)
						  {
							  setMainDetails.setNull(22,java.sql.Types.INTEGER);	
						  }
						  else
						  {
							  setMainDetails.setLong(22, newOrderBean.getFieldEngineerId());
						  }
						
					}
					
					else
					{
						setMainDetails.setNull(21,java.sql.Types.VARCHAR);
						setMainDetails.setNull(22,java.sql.Types.INTEGER);
					}
					
					setMainDetails.execute();
					MainStatus=setMainDetails.getInt(6);
					if(MainStatus==1)
					{
						break;
					}
				}
				if(MainStatus==0)
				{
					connection.commit();
					//newOrderBean.setPoNumber(newOrderBean.toString());
					finalStatus=Integer.valueOf(newOrderBean.getPoNumber());
				}
				else
				{
					connection.rollback();
					finalStatus=0;
				}
			}
		}
		catch(Exception ex )
		{
			try {
				connection.rollback();
			} catch (SQLException e) {
				Utility.onEx_LOG_RET_NEW_EX(e, methodName, className,"SQL Exception  :"+msg, logToFile, logToConsole);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Exception  :"+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeCallableStatement(setMainDetails);
				DbConnection.closeCallableStatement(setPOmaster);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return finalStatus;
	}

	//	Method used for Fetching Account and Main Details from Database
	public ArrayList<OrderHeaderDTO> getAccountDetails(NewOrderDto objDto,long orderNo) 
	{
//		Added by nagarjuna
		String methodName="getAccountDetails",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement getAccountDetails =null;
		ResultSet rsAccountDetails = null;
		ArrayList<OrderHeaderDTO> listAccountDetails = new ArrayList<OrderHeaderDTO>();
		//NewOrderDto objNewOrderDto = null;
		OrderHeaderDTO objNewOrderDto = null;
		
		try
		{
			connection=DbConnection.getConnectionObject();
			getAccountDetails= connection.prepareCall(sqlGetAccountDetails);
			getAccountDetails.setLong(1, orderNo);			
			getAccountDetails.setLong(2, 0);
			getAccountDetails.setLong(3, 0);
			rsAccountDetails = getAccountDetails.executeQuery();
			while(rsAccountDetails.next())
			{
				objNewOrderDto =  new OrderHeaderDTO();
				objNewOrderDto.setAccountManager(rsAccountDetails.getString("AccountManager"));
				objNewOrderDto.setAccountName(rsAccountDetails.getString("accountName"));
				objNewOrderDto.setAccountID(rsAccountDetails.getInt("accountID"));
				objNewOrderDto.setCrmAccountNo(rsAccountDetails.getInt("CRMACCOUNTNO"));//Added by Ashutosh
				objNewOrderDto.setAccphoneNo(rsAccountDetails.getLong("PhoneNo"));
				objNewOrderDto.setLob(rsAccountDetails.getString("LOB"));
				//[125] Start
				objNewOrderDto.setServiceSegment(rsAccountDetails.getString("SERVICESEGMENT"));
				//[125] End
				objNewOrderDto.setOsp(rsAccountDetails.getString("OSP"));
				objNewOrderDto.setProjectManagerID(rsAccountDetails.getLong("PROJECTMANAGET_ID"));
				objNewOrderDto.setProjectManager(rsAccountDetails.getString("PROJECTMANAGER"));
				objNewOrderDto.setOrderType(rsAccountDetails.getString("ORDERTYPE"));
				SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy");
				objNewOrderDto.setOrderDate(sdf.format(rsAccountDetails.getDate("ORDERDATE")));
				
				objNewOrderDto.setSourceName(rsAccountDetails.getString("SOURCE"));
				objNewOrderDto.setQuoteNo(rsAccountDetails.getString("QUOTENO"));
				objNewOrderDto.setTxtquotesNo(rsAccountDetails.getString("QUOTENO"));
				objNewOrderDto.setCurrencyCode(rsAccountDetails.getString("CURSHORTCODE"));
				objNewOrderDto.setCurShortCode(rsAccountDetails.getString("CURSHORTCODE"));
				objNewOrderDto.setCurrencyID(rsAccountDetails.getInt("CURRENCYID"));
				objNewOrderDto.setPoNumber(rsAccountDetails.getInt("ORDERNO"));
				objNewOrderDto.setStageName(rsAccountDetails.getString("STAGE"));
				objNewOrderDto.setOrderStatusValue(rsAccountDetails.getString("STATUS"));
				//[003] Start
				//objNewOrderDto.setRegion(rsAccountDetails.getString("REGIONNAME"));
				//objNewOrderDto.setRegion(rsAccountDetails.getString("REGIONNAME"));
				//objNewOrderDto.setZone(rsAccountDetails.getString("ZONENNAME"));
				objNewOrderDto.setRegion(rsAccountDetails.getString("REGION"));
				objNewOrderDto.setZone(rsAccountDetails.getString("ZONE"));
				//[003] End
				objNewOrderDto.setChangeTypeId(rsAccountDetails.getInt("CHANGETYPEID"));
				objNewOrderDto.setChangeTypeName(rsAccountDetails.getString("CHANGETYPENAME"));
				//[00044]start
				objNewOrderDto.setSubChangeTypeId(rsAccountDetails.getInt("SUBCHANGETYPEID"));
				objNewOrderDto.setSubChangeTypeName(rsAccountDetails.getString("SUBCHANGETYPENAME"));
				//[00044]End
				objNewOrderDto.setSpFirstname(rsAccountDetails.getString("SALES_FIRSTNAME"));
				objNewOrderDto.setSpLastName(rsAccountDetails.getString("SALES_LASTNAME"));
				objNewOrderDto.setSpLPhno(rsAccountDetails.getString("SALES_PHONE"));//changed by kalpana from long to string for bug id HYPR11042013001
				objNewOrderDto.setSpLEmail(rsAccountDetails.getString("SALES_EMAIL"));
				objNewOrderDto.setChkIsDemo(rsAccountDetails.getString("ORDER_TYPE"));
				objNewOrderDto.setNoOfDaysForDemo(rsAccountDetails.getString("NO_OF_DAYS"));
				//[001]	Start
				objNewOrderDto.setM6ShortCode(rsAccountDetails.getString("M6ShortCode"));
				//[001]	End
				//Start[024]
				objNewOrderDto.setIsUrgent(rsAccountDetails.getInt("IS_URGENT"));
				//End[024]
				//Changes Made By Sumit For PM to be Displayed only in Case of PM Present in Workflow :: 20-Oct-2011 :: -->
				objNewOrderDto.setIsPMPresent(rsAccountDetails.getInt("IS_PM_PRESENT"));
				//Changes Made By Sumit For PM to be Displayed only in Case of PM Present in Workflow :: 20-Oct-2011 :: -->
				//By Saurbah to Display OpportunityId 2/1/12
				objNewOrderDto.setOpportunityId(rsAccountDetails.getString("OPPORTUNITYID"));
				objNewOrderDto.setCollectionMgr(rsAccountDetails.getString("collectionMgr"));
				objNewOrderDto.setOrderStageAnnotationName(rsAccountDetails.getString("ORDER_ANNOTATION"));
				//By Saurbah to Display OpportunityId 2/1/12
				objNewOrderDto.setHdnCreatedBy(rsAccountDetails.getInt("CREATEDBY"));
				objNewOrderDto.setContactCount(getAccountDetails.getLong(2));	
				objNewOrderDto.setPoCount(getAccountDetails.getLong(3));	
				objNewOrderDto.setOrder_creation_source(rsAccountDetails.getString("ORDER_CREATION_SOURCE"));
				objNewOrderDto.setCircle(rsAccountDetails.getString("CIRCLE"));//added on 9-jan-2013, Circle work
				objNewOrderDto.setOrderCreationSourceName(rsAccountDetails.getString("ORDER_CREATION_SOURCE_NAME"));//added on 26-Apr-2013 by Ashutosh, 
				objNewOrderDto.setCategory(rsAccountDetails.getString("CATEGORY"));//[090]
				objNewOrderDto.setNoOfServiceInOrder(rsAccountDetails.getInt("no_of_services"));
				objNewOrderDto.setGroupName(rsAccountDetails.getString("GROUP_DESC"));//[092]
				objNewOrderDto.setIspTagging(rsAccountDetails.getInt("ISP_TAGGING"));
				objNewOrderDto.setIspLicCtgry(rsAccountDetails.getInt("ISP_LIC_CTGRY"));
				if(null != rsAccountDetails.getDate("ISP_LIC_DATE"))
					objNewOrderDto.setIspLicDate(sdf.format(rsAccountDetails.getDate("ISP_LIC_DATE")));
				else
					objNewOrderDto.setIspLicDate("");
				objNewOrderDto.setIspLicNo(rsAccountDetails.getString("ISP_LIC_NO"));
				objNewOrderDto.setChannelMasterTagging(rsAccountDetails.getString("CHANNEL_PARTNER_TAGGING"));
			
				if(!"0".equals(rsAccountDetails.getString("CHANNEL_PARTNER_TAGGING")))	
				{
					objNewOrderDto.setChannelPartnerId(rsAccountDetails.getLong("CHANNEL_PARTNER_NAME"));
					objNewOrderDto.setChannelPartnerName(rsAccountDetails.getString("PARTNER_NAME"));
					objNewOrderDto.setChannelpartnerCode(rsAccountDetails.getString("PARTNER_CODE"));
					objNewOrderDto.setFieldEngineer(rsAccountDetails.getString("FIELD_ENGINEER"));
					objNewOrderDto.setFieldEngineerId(rsAccountDetails.getLong("FIELD_ENGINEER_ID"));
				}
				
				/*else
				{
					objNewOrderDto.setChannelPartnerId(0);
					objNewOrderDto.setChannelPartnerName("0");
					objNewOrderDto.setChannelpartnerCode("0");
					objNewOrderDto.setFieldEngineer("0");
					objNewOrderDto.setFieldEngineerId(0);
					
				}
				*/

				listAccountDetails.add(objNewOrderDto);				
			}			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Exception  :"+objNewOrderDto.getAccountID(), logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsAccountDetails);
				DbConnection.closeCallableStatement(getAccountDetails);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listAccountDetails;
	}	
	
	//	Method used for Fetching Account and Main Details With Attributes Infomration from Database
	public ArrayList<FieldAttibuteDTO> getMainDetailsWithAttributes(NewOrderDto objDto,long orderNo) 
	{
		//		Added by nagarjuna
		String methodName="getMainDetailsWithAttributes",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement getAccountDetails =null;
		ResultSet rsAccountDetails = null;
		ArrayList<FieldAttibuteDTO> listMainDetailsWithAttributes = new ArrayList<FieldAttibuteDTO>();
		FieldAttibuteDTO objNewOrderDto = null;
		
		try
		{
			connection=DbConnection.getConnectionObject();
			getAccountDetails= connection.prepareCall(sqlGetMainDetailsWithAttributes);
			getAccountDetails.setString(1, String.valueOf(orderNo));
			rsAccountDetails = getAccountDetails.executeQuery();
			while(rsAccountDetails.next())
			{
				objNewOrderDto =  new FieldAttibuteDTO();
				objNewOrderDto.setAttributeLabel(rsAccountDetails.getString("ATTLABEL"));
				objNewOrderDto.setDataType(rsAccountDetails.getString("ATTTYPE"));
				objNewOrderDto.setAttMaxLength(rsAccountDetails.getInt("ATTMAXLENGTH"));
				objNewOrderDto.setAlisName(rsAccountDetails.getString("ALISNAME"));
				objNewOrderDto.setAttributeValue(rsAccountDetails.getString("ATTVALUE"));
				objNewOrderDto.setAttributeID(rsAccountDetails.getInt("ATTRIBUTEID"));
				objNewOrderDto.setExpectedValue(rsAccountDetails.getString("EXPECTEDVALUE"));
				objNewOrderDto.setMandatory(rsAccountDetails.getString("MANDATORY"));
				listMainDetailsWithAttributes.add(objNewOrderDto);
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Exception  :"+objNewOrderDto.getAttributeID(), logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsAccountDetails);
				DbConnection.closeCallableStatement(getAccountDetails);
				DbConnection.freeConnection(connection);
				
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listMainDetailsWithAttributes;
	}

	//	Method used for inserting CONTACT Details in tPOmaster,TattributeValues for Main Tab
	/*public int insertContact(NewOrderBean newOrderBean,Map<String,String[]> addressMap,Map<String,String[]> contactMap,int count,int updateFlag)
	{
		int finalStatus=0;
		Connection connection =null;
		CallableStatement getMaxPONumber =null;
		CallableStatement setPOmaster =null;
		CallableStatement setAddDetails =null;
		CallableStatement setContactDetails = null;
		int maxOrderValue=0;
		int POStatus=0;
		int MainStatus=0;
		String contactStatus=null;
		String addStatus=null;
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat(AppConstants.DATE_FORMAT_PROC);
		
		try
		{
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
			for(int i=0;i<count;i++)
			{
				setContactDetails = connection.prepareCall("{CALL IOE.SPPOCONTACTINSERT(?,?,?,?,?,?,?,?,?,?,?,?,?)} ");
				if(updateFlag==2)
				{
					if (Long.parseLong(contactMap.get("contactId")[i])==0)
					{
						setContactDetails.setLong(1, 0);
					}
					else
					{
						setContactDetails.setLong(1, Long.parseLong(contactMap.get("contactId")[i]));
					}
				}
				else
				{
					setContactDetails.setLong(1, 0);
				}
				setContactDetails.setInt (2, updateFlag);
				setContactDetails.setString(3, contactMap.get("contactType")[i]);
				setContactDetails.setString(4, contactMap.get("Saluation")[i]);
				setContactDetails.setString(5, contactMap.get("FName")[i]);
				setContactDetails.setString(6, contactMap.get("LName")[i]);
				setContactDetails.setString(7, contactMap.get("CntEmail")[i]);
				setContactDetails.setString(8, contactMap.get("ContactCell")[i]);
				setContactDetails.setLong(9, Long.parseLong(newOrderBean.getPoNumber()));
				setContactDetails.setString(10, contactMap.get("ContactFax")[i]);
				setContactDetails.registerOutParameter(11, java.sql.Types.INTEGER);
				setContactDetails.registerOutParameter(12, java.sql.Types.INTEGER);
				setContactDetails.registerOutParameter(13, java.sql.Types.VARCHAR);
				setContactDetails.execute();
				contactStatus=setContactDetails.getString(13);
				if(!contactStatus.equalsIgnoreCase("SUCCESS"))
				{
					break;
				}
			}
		  if(contactStatus.equalsIgnoreCase("SUCCESS"))
			{
			for(int i=0;i<count;i++)
			{
				setAddDetails = connection.prepareCall("{CALL IOE.SPPOADDRESSINSERT(?,?,?,?,?,?,?,?,?,?,?,?,?)} ");
				if(updateFlag==2)
				{
					if (Long.parseLong(addressMap.get("addID")[i])==0)
					{
						setAddDetails.setLong(1,0);
					}
					else
					{
						setAddDetails.setLong(1, Long.parseLong(addressMap.get("addID")[i]));
					}
					
				}
				else
				{
					setAddDetails.setLong(1,0);
				}
				setAddDetails.setInt (2, updateFlag);
				setAddDetails.setString(3, addressMap.get("Address1")[i]);
				setAddDetails.setString(4, addressMap.get("Address2")[i]);
				setAddDetails.setString(5, addressMap.get("Address3")[i]);
				setAddDetails.setString(6, addressMap.get("CityName")[i]);
				setAddDetails.setString(7, addressMap.get("StateName")[i]);
				setAddDetails.setString(8, addressMap.get("CountyName")[i]);
				setAddDetails.setString(9, addressMap.get("AddPin")[i]);
				setAddDetails.setLong(10, Long.parseLong(newOrderBean.getPoNumber()));
				setAddDetails.registerOutParameter(11, java.sql.Types.INTEGER);
				setAddDetails.registerOutParameter(12, java.sql.Types.INTEGER);
				setAddDetails.registerOutParameter(13, java.sql.Types.VARCHAR);
				
				setAddDetails.execute();
				addStatus=setAddDetails.getString(13);
				if(!addStatus.equalsIgnoreCase("SUCCESS"))
				{
					break;
				}
				
		 	}
		}
			if((contactStatus.equalsIgnoreCase("SUCCESS")) && (addStatus.equalsIgnoreCase("SUCCESS")))
			{
				connection.commit();
				finalStatus=1;
			}
			else
			{
				connection.rollback();
				finalStatus=0;
			}
		}
		catch(Exception ex )
		{
			try {
				connection.rollback();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return finalStatus;
	}*/
	
//	Method used for inserting CONTACT Details in tPOmaster,TattributeValues for Main Tab
	//[011] Start
	//public int insertContact(NewOrderBean newOrderBean,Map<String,String[]> addressMap,Map<String,String[]> contactMap,int count,int updateFlag)
	public int insertContact(Connection connection,NewOrderBean newOrderBean,Map<String,String[]> addressMap,Map<String,String[]> contactMap,int count,int updateFlag,long empID)
	//[011] End
	{
		//		Added by nagarjuna
		String methodName="insertContact",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		System.out.println("=========== insercontact in neworder dao======");
		int finalStatus=0;
		//Connection connection =null;
		CallableStatement setAddDetails =null;
		CallableStatement setContactDetails = null;
		String contactStatus=null;
		String addStatus=null;
		
		try
		{
			//connection=DbConnection.getConnectionObject();
			//connection.setAutoCommit(false);
			int status = updateDemo(newOrderBean.getPoNumber(),newOrderBean.getNoOfDaysForDemo(),newOrderBean.getChkIsDemo() );
			for(int i=0;i< count;i++)
			{
				//setContactDetails = connection.prepareCall("{CALL IOE.SPPOCONTACTINSERT(?,?,?,?,?,?,?,?,?,?,?,?,?,?)} ");
				  setContactDetails = connection.prepareCall("{CALL IOE.SPPOCONTACTINSERT(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)} ");
				if(updateFlag==2)
				{
					if (Long.parseLong(contactMap.get("contactId")[i])==0)
					{
						setContactDetails.setLong(1, 0);
					}
					else
					{
						setContactDetails.setLong(1, Long.parseLong(contactMap.get("contactId")[i]));
					}
				}
				else
				{
					setContactDetails.setLong(1, 0);
				}
				setContactDetails.setInt (2, updateFlag);
				//setContactDetails.setString(3, Utility.trimIfNotNull(contactMap.get("contactType")[i]));
				setContactDetails.setLong(3, Long.parseLong(contactMap.get("contactTypeId")[i]));
				setContactDetails.setString(4, Utility.trimIfNotNull(contactMap.get("SalutationName")[i]));
				setContactDetails.setString(5, Utility.trimIfNotNull(contactMap.get("FName")[i]));
				setContactDetails.setString(6, Utility.trimIfNotNull(contactMap.get("LName")[i]));
				setContactDetails.setString(7, Utility.trimIfNotNull(contactMap.get("CntEmail")[i]));
				setContactDetails.setString(8, Utility.trimIfNotNull(contactMap.get("ContactCell")[i]));
				setContactDetails.setLong(9, Long.parseLong(Utility.trimIfNotNull(newOrderBean.getPoNumber())));
				setContactDetails.setString(10, Utility.trimIfNotNull(contactMap.get("ContactFax")[i]));
				setContactDetails.registerOutParameter(11, java.sql.Types.INTEGER);
				setContactDetails.registerOutParameter(12, java.sql.Types.INTEGER);
				setContactDetails.registerOutParameter(13, java.sql.Types.VARCHAR);
				setContactDetails.registerOutParameter(14, java.sql.Types.INTEGER);
				//[011] Start
				setContactDetails.setLong(15, empID);
				//[011] End
				System.out.println("procedure name  :"+setContactDetails.toString());
				setContactDetails.execute();
				contactStatus=setContactDetails.getString(13);
				if(!contactStatus.equalsIgnoreCase("SUCCESS"))
				{
					break;
				}
				/*}
		  if(contactStatus.equalsIgnoreCase("SUCCESS"))
			{
			for(int i=0;i<count;i++)
			{*/
				//setAddDetails = connection.prepareCall("{CALL IOE.SPPOADDRESSINSERT(?,?,?,?,?,?,?,?,?,?,?,?,?,?)} ");
				setAddDetails = connection.prepareCall("{CALL IOE.SPPOADDRESSINSERT(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)} ");
				if(updateFlag==2)
				{
					if (Long.parseLong(addressMap.get("addID")[i])==0)
					{
						setAddDetails.setLong(1,0);
					}
					else
					{
						setAddDetails.setLong(1, Long.parseLong(addressMap.get("addID")[i]));
					}
					
				}
				else
				{
					setAddDetails.setLong(1,0);
				}
				setAddDetails.setInt (2, updateFlag);
				setAddDetails.setString(3, Utility.trimIfNotNull(addressMap.get("Address1")[i]));
				setAddDetails.setString(4, Utility.trimIfNotNull(addressMap.get("Address2")[i]));
				setAddDetails.setString(5, Utility.trimIfNotNull(addressMap.get("Address3")[i]));
				//setAddDetails.setString(6, Utility.trimIfNotNull(addressMap.get("CityId")[i]));
				//setAddDetails.setString(7, Utility.trimIfNotNull(addressMap.get("StateId")[i]));
				//setAddDetails.setString(8, Utility.trimIfNotNull(addressMap.get("CountyCode")[i]));
				setAddDetails.setInt(6, Integer.parseInt(addressMap.get("CityId")[i]));
				setAddDetails.setInt(7, Integer.parseInt(addressMap.get("StateId")[i]));
				setAddDetails.setInt(8, Integer.parseInt(addressMap.get("CountyCode")[i]));
				setAddDetails.setString(9, Utility.trimIfNotNull(addressMap.get("AddPin")[i]));
				setAddDetails.setLong(10, Long.parseLong(Utility.trimIfNotNull(newOrderBean.getPoNumber())));
				setAddDetails.registerOutParameter(11, java.sql.Types.INTEGER);
				setAddDetails.registerOutParameter(12, java.sql.Types.INTEGER);
				setAddDetails.registerOutParameter(13, java.sql.Types.VARCHAR);
				setAddDetails.setLong(14, setContactDetails.getLong(14));
				//[011] Start
				setAddDetails.setLong(15, empID);
				//[011] End
				setAddDetails.execute();
				addStatus=setAddDetails.getString(13);
				if(!addStatus.equalsIgnoreCase("SUCCESS"))
				{
					break;
				}
				
		 	}
		//}
			if((contactStatus.equalsIgnoreCase("SUCCESS")) && (addStatus.equalsIgnoreCase("SUCCESS")))
			{
				//connection.commit();
				finalStatus=1;
			}
			else
			{
				//connection.rollback();
				finalStatus=0;
			}
		}
		catch(Exception ex )
		{
			/*try {
				connection.rollback();
			} catch (SQLException e) {
				
				Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"SQL Exception  :"+msg, logToFile, logToConsole);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}*/
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Exception  at :"+finalStatus, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeCallableStatement(setAddDetails);
				DbConnection.closeCallableStatement(setContactDetails);
				//DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return finalStatus;
	}
	
	//	Method used for Fetching Contact Details from the Database
	public ArrayList<ContactDTO> getContactDetail(long orderNo) 
	{
		//		Added by nagarjuna
		String methodName="getContactDetail",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement getContactDetails =null;
		ResultSet rsContactDetails = null;
		ContactDTO objNewOrderDto = null;
		ArrayList<ContactDTO> listContactDetails = new ArrayList<ContactDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
			getContactDetails= connection.prepareCall(sqlGetContactDetail);
			getContactDetails.setLong(1,orderNo);
			rsContactDetails = getContactDetails.executeQuery();
			while(rsContactDetails.next())
			{
			objNewOrderDto =  new ContactDTO();
			objNewOrderDto.setContactId(rsContactDetails.getLong("CONTACTID"));
			objNewOrderDto.setContactType(rsContactDetails.getString("CONTACTTYPE"));
			objNewOrderDto.setContactTypeId(rsContactDetails.getString("CONTACTTYPEID"));
			//objNewOrderDto.setSaluation(rsContactDetails.getString("SALUATION"));
			//Added by ashutosh
			objNewOrderDto.setSalutationName(rsContactDetails.getString("SALUATION"));
			objNewOrderDto.setFirstName(rsContactDetails.getString("FIRSTNAME"));
			objNewOrderDto.setLastName(rsContactDetails.getString("LASTNAME"));
			objNewOrderDto.setCntEmail(rsContactDetails.getString("EMAIL"));
			objNewOrderDto.setContactCell(rsContactDetails.getString("CELLNO"));
			objNewOrderDto.setContactFax(rsContactDetails.getString("FAXNO"));
			listContactDetails.add(objNewOrderDto);
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Fetching ContactDetails   : "+msg, logToFile, logToConsole);//added by nagarjuna
		//ex.printStackTrace();	
		}
		finally
		{
		try 
		{
			DbConnection.closeResultset(rsContactDetails);
			DbConnection.closeCallableStatement(getContactDetails);
			DbConnection.freeConnection(connection);
		} 
		catch (Exception e) 
		{
			Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
		//e.printStackTrace();
		}
		}
		return listContactDetails;
	}

	//	Method used for Fetching Contact Details from the Database
	public ArrayList<NewOrderDto> getAddressDetail(long orderNo) 
	{
		//		Added by nagarjuna
		String methodName="getAddressDetail",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement getAddressDetails =null;
		ResultSet rsAddressDetails = null;
		NewOrderDto objNewOrderDto = null;
		ArrayList<NewOrderDto> listAddressDetails = new ArrayList<NewOrderDto>();
		try
		{
			connection=DbConnection.getConnectionObject();
			getAddressDetails= connection.prepareCall(sqlGetAddressDetail);
			getAddressDetails.setLong(1,orderNo);
			rsAddressDetails = getAddressDetails.executeQuery();
			while(rsAddressDetails.next())
			{
			objNewOrderDto =  new NewOrderDto();
			objNewOrderDto.setAddID(rsAddressDetails.getLong("ADDID"));
			objNewOrderDto.setAddress1(rsAddressDetails.getString("ADDRESS1"));
			objNewOrderDto.setAddress2(rsAddressDetails.getString("ADDRESS2"));
			objNewOrderDto.setAddress3(rsAddressDetails.getString("ADDRESS3"));
			objNewOrderDto.setCityName(rsAddressDetails.getString("CITY"));
			objNewOrderDto.setStateName(rsAddressDetails.getString("STATE"));
			objNewOrderDto.setCountyName(rsAddressDetails.getString("COUNTRY"));
			objNewOrderDto.setCityCode(rsAddressDetails.getInt("CITYID"));
			objNewOrderDto.setStateCode(rsAddressDetails.getInt("STATEID"));
			objNewOrderDto.setCountyCode(rsAddressDetails.getInt("COUNTRYCODE"));
			objNewOrderDto.setPinNo(rsAddressDetails.getString("PINCODE"));
			listAddressDetails.add(objNewOrderDto);
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Fetching AddressDetails   : "+msg, logToFile, logToConsole);//added by nagarjuna
		//ex.printStackTrace();	
		}
		finally
		{
		try 
		{
			DbConnection.closeResultset(rsAddressDetails);
			DbConnection.closeCallableStatement(getAddressDetails);
			DbConnection.freeConnection(connection);
		} 
		catch (Exception e) 
		{
			Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
			//e.printStackTrace();
		}
		}
		return listAddressDetails;
	}

	//	Method used for Fetching Contact Details from the Database
	public ArrayList<ContactDTO> getContactTypeDetail(NewOrderDto objDto) 
	{
		//		Added by nagarjuna
		String methodName="getContactTypeDetail",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement clbStmt =null;
		ContactDTO objNewOrderDto = null;
		ArrayList<ContactDTO> listContactTypes = new ArrayList<ContactDTO>();
		ResultSet rs = null;
		try
		{
			connection=DbConnection.getConnectionObject();
			clbStmt= connection.prepareCall(sqlGetContactTypes);
			
			if("".equalsIgnoreCase(objDto.getContactTypeName()) || objDto.getContactTypeName()==null)
			{
				clbStmt.setString(1, "");
			}
			else
			{
				clbStmt.setString(1, objDto.getContactTypeName());
			}
			
			rs = clbStmt.executeQuery();
			while (rs.next()) 
			{
			objNewOrderDto =  new ContactDTO();
			objNewOrderDto.setContactTypeId(rs.getString("CONTACTTYPEID"));
			objNewOrderDto.setContactTypeName(rs.getString("CONTACTTYPENAME"));
			listContactTypes.add(objNewOrderDto);
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Fetching ContactTypeDetails   : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
		try{
			DbConnection.closeResultset(rs);
			DbConnection.closeCallableStatement(clbStmt);
			DbConnection.freeConnection(connection);
			} 
		catch (Exception e) 
		{
			Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
			//e.printStackTrace();
		}
		}
		return listContactTypes;
	}
	
	//	Method used for Fetching Service type and subproduct from Database
	/*public Hashtable getServiceType() 
	{
		Connection connection =null;
		CallableStatement getAccountDetails =null;
		ResultSet rsAccountDetails = null;
		ArrayList<NewOrderDto> listMainDetailsWithAttributes = new ArrayList<NewOrderDto>();
		NewOrderDto objNewOrderDto = null;
		Hashtable htValue = new Hashtable();
		try
		{
			connection=DbConnection.getConnectionObject();
			getAccountDetails= connection.prepareCall(sqlFetchServiceType);
			getAccountDetails.setString(1, "");
			getAccountDetails.setInt(2, 0);
			getAccountDetails.setInt(3, Integer.parseInt(objNewOrderDto.getOrderNo()));
			rsAccountDetails = getAccountDetails.executeQuery();
			ArrayList<ServiceSubTypeDto> lstServiceSubtype = null;
			while(rsAccountDetails.next())
			{
				objNewOrderDto =  new NewOrderDto();
				lstServiceSubtype = new ArrayList<ServiceSubTypeDto>();
				objNewOrderDto.setServiceTypeId(Integer.parseInt(rsAccountDetails.getString("serviceTypeID")));
				objNewOrderDto.setServiceTypeName(rsAccountDetails.getString("serviceTypeName"));
				lstServiceSubtype = getServiceSubType(objNewOrderDto.getServiceTypeId());
				objNewOrderDto.setServiceSubType(lstServiceSubtype);
				listMainDetailsWithAttributes.add(objNewOrderDto);
				
			}
			htValue.put(AppConstants.SERVICE_TYPE, listMainDetailsWithAttributes);
			
		}
		catch(Exception ex )
		{
			ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return htValue;
	}*/
	
		public ArrayList<ServiceLineDTO> getServiceTypeSearch(PagingDto objDto) 
	{
			//Added by nagarjuna
			String methodName="getServiceTypeSearch",  msg="";
			boolean logToFile=true, logToConsole=true;
			//	End nagarjuna
		Connection connection =null;
		CallableStatement getAccountDetails =null;
		ResultSet rsAccountDetails = null;
		ArrayList<ServiceLineDTO> listMainDetailsWithAttributes = new ArrayList<ServiceLineDTO>();
		ServiceLineDTO objNewOrderDto = null;
		
	//	String serviceTypeId=null;
		int recordCount;
		try
		{
			connection=DbConnection.getConnectionObject();
			getAccountDetails= connection.prepareCall(sqlFetchServiceType);	
		/*	
			if(objDto.getServiceIdString()==null || objDto.getServiceIdString().equalsIgnoreCase(""))
			{
				 serviceTypeId="0";
			}
			else
			{
				serviceTypeId=objDto.getServiceIdString();
			}
			*/
			getAccountDetails.setString(1, objDto.getServiceTypeName());
			getAccountDetails.setInt(2, objDto.getServiceTypeId());
			getAccountDetails.setInt(3, Integer.parseInt(objDto.getOrderNo()));
			getAccountDetails.setString(4, objDto.getSortBycolumn());
			getAccountDetails.setString(5, objDto.getSortByOrder());
			getAccountDetails.setInt(6, objDto.getStartIndex());
			getAccountDetails.setInt(7, objDto.getEndIndex());
			rsAccountDetails = getAccountDetails.executeQuery();
			ArrayList<ServiceSubTypeDto> lstServiceSubtype = null;
			while(rsAccountDetails.next())
			{
				objNewOrderDto =  new ServiceLineDTO();
				lstServiceSubtype = new ArrayList<ServiceSubTypeDto>();
				objNewOrderDto.setServiceTypeId(rsAccountDetails.getInt("serviceTypeID"));
				objNewOrderDto.setServiceTypeName(rsAccountDetails.getString("serviceTypeName"));
				recordCount=rsAccountDetails.getInt("FULL_REC_COUNT");
				objNewOrderDto.getPagingSorting().setRecordCount(recordCount);
				objNewOrderDto.setMaxPageNo(objNewOrderDto.getPagingSorting().getMaxPageNumber());
				//lstServiceSubtype = getServiceSubType(objNewOrderDto.getServiceTypeId());
				//objNewOrderDto.setServiceSubType(lstServiceSubtype);
				listMainDetailsWithAttributes.add(objNewOrderDto);
				
			}
			
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Fetching ServiceTypeDetails   : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsAccountDetails);
				DbConnection.closeCallableStatement(getAccountDetails);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listMainDetailsWithAttributes;
	}
	
	public ArrayList<ServiceSubTypeDto> getServiceSubType(int serviceId) 
	{
		//		Added by nagarjuna
		String methodName="getServiceSubType",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement getAccountDetails =null;
		ResultSet rs = null;
		ArrayList<ServiceSubTypeDto> listserviceSubtype = new ArrayList<ServiceSubTypeDto>();
		ServiceSubTypeDto objNewOrderDto = null;
		
		try
		{
			connection=DbConnection.getConnectionObject();
			getAccountDetails= connection.prepareCall(sqlFetchServiceSubType);	
			getAccountDetails.setLong(1, Long.valueOf(serviceId));
			rs = getAccountDetails.executeQuery();
			while(rs.next())
			{
				objNewOrderDto =  new ServiceSubTypeDto();
				
				objNewOrderDto.setServiceSubTypeId(rs.getInt("serviceSubTypeID"));
				objNewOrderDto.setServiceSubTypeName(rs.getString("serviceSubTypeName"));
				listserviceSubtype.add(objNewOrderDto);
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Fetching ServiceSubTypeDetails   : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(getAccountDetails);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listserviceSubtype;
	}
	
	//[011] Start
	//public NewOrderDto insertService(NewOrderDto objDto) throws Exception
	public ServiceLineDTO insertService(ServiceLineDTO objDto,long empID) throws Exception
	//[011] End
	{
		//		Added by nagarjuna
		String methodName="insertService",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		ServiceLineDTO objRetDto = new ServiceLineDTO();
		
		try
		{
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
			callstmt= connection.prepareCall(sqlspInsertService);	
			callstmt.setLong(1, objDto.getPoNumber());
			callstmt.setString(2, objDto.getServiceTypeName());
			callstmt.setLong(3, objDto.getServiceTypeId());
			callstmt.setInt(4, objDto.getRoleID());
			//callstmt.setLong(4, objDto.getServiceSubtypeId());
			callstmt.setLong(5, 0);
			callstmt.setLong(6, 0);
			callstmt.setLong(7, 0);
			callstmt.setString(8, "");
			//[011] Start
			callstmt.setLong(9, empID);
			//[011] End
			callstmt.execute();
			int err = callstmt.getInt(7);
			
			if(err==0)
			{
				objRetDto.setServiceId(callstmt.getInt(5));
				connection.commit();
			}
			else
			{
				connection.rollback();
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While inserting Service   : "+msg, logToFile, logToConsole);//added by nagarjuna
			connection.rollback();
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{

				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return objRetDto;
	}
	// isget Modify
	public String isGetModify(NewOrderDto objDto)throws Exception
	{
		//		Added by nagarjuna
		String methodName="isGetModify",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		String isModify="";
		NewOrderDto objRetDto = new NewOrderDto();
		try
		{
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
			callstmt= connection.prepareCall(sqlspIsPoServiceProductModify);	
			callstmt.setLong(1, Long.valueOf(objDto.getPoNumber()));
			callstmt.setLong(2, Long.valueOf(objDto.getServiceProductID()));			
			rs = callstmt.executeQuery();
			while(rs.next())
			{
				isModify=rs.getString("isModify");
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error  : "+msg, logToFile, logToConsole);//added by nagarjuna
			connection.rollback();
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{

				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return isModify;
	}
	public ArrayList<ServiceLineDTO> fetechServiceList(NewOrderDto objDto) throws Exception 
	{
		//		Added by nagarjuna
		String methodName="fetechServiceList",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		String bundledVCSStatus="";
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		//NewOrderDto objRetDto = new NewOrderDto();
		ServiceLineDTO objRetDto = new ServiceLineDTO();
		ArrayList<ServiceLineDTO> lstServiceList = new ArrayList<ServiceLineDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
			callstmt= connection.prepareCall(sqlspPoServiceList);	
			callstmt.setLong(1, Long.valueOf(objDto.getPoNumber()));
			rs = callstmt.executeQuery();
			while(rs.next())
			{
				//objRetDto =  new NewOrderDto();
				objRetDto =  new ServiceLineDTO();
				objRetDto.setServiceId(rs.getInt("serviceID"));
				objRetDto.setServiceTypeName(rs.getString("serviceTypeName"));
				//objRetDto.setServiceSubTypeName(rs.getString("serviceSubTypeName"));
				objRetDto.setServiceTypeId(rs.getInt("serviceTypeID"));
				objRetDto.setCustomer_logicalSINumber(rs.getInt("CUSTOMER_LOGICAL_SI_NO"));
				objRetDto.setLogicalSINumber(rs.getInt("LOGICAL_SI_NO"));
				objRetDto.setIsPublished(rs.getInt("ISPUBLISHED"));
				if(("Waiting For L3 MPLS M6 End").equalsIgnoreCase(rs.getString("M6_FX_PROGRESS_STATUS")) || ("Waiting For ISP M6 End").equalsIgnoreCase(rs.getString("M6_FX_PROGRESS_STATUS")) )
				{
					bundledVCSStatus=getL3MplPLSServiceList(objDto.getPoNumber(),rs.getInt("serviceID"),connection);
					if(("Waiting For L3 MPLS M6 End").equalsIgnoreCase(rs.getString("M6_FX_PROGRESS_STATUS")))
					objRetDto.setServiceStatus("Waiting For L3 MPLS M6 End("+bundledVCSStatus+")");
					else
						objRetDto.setServiceStatus("Waiting For ISP M6 End("+bundledVCSStatus+")");
				}
				else
				objRetDto.setServiceStatus(rs.getString("M6_FX_PROGRESS_STATUS"));
				int atts=rs.getInt("PRODUCTATT");
				if(atts>0)
				{
					objRetDto.setPrdAttrEntered(1);	
				}
				else
				{
					objRetDto.setPrdAttrEntered(0);
				}
				objRetDto.setServAttrEntered(rs.getInt("isServAttrEntered"));
				int pcatelog=rs.getInt("PRODUCTCATELOG");
				if(pcatelog>0)
				{
					objRetDto.setProductCatelogEntered(1);	
				}
				else
				{
					objRetDto.setProductCatelogEntered(0);
				}
				objRetDto.setIsServiceActive(rs.getInt("IS_SERVICE_INACTIVE"));
				objRetDto.setIsServiceCreatedAfterCancelCopy(rs.getInt("IS_SERVICE_COPIED_AFTER_CANCEL"));
				objRetDto.setIsDummy(rs.getInt("ISDUMMY"));
				objRetDto.setInitiatedTo(rs.getInt("INITIATED_TO"));
				lstServiceList.add(objRetDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error    : "+msg, logToFile, logToConsole);//added by nagarjuna
			connection.rollback();
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{

				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return lstServiceList;
	}
	private String sqlspL3MplsServiceList="{call IOE.GET_L3MPLSE_SERVICELIST(?,?)}";
	private String getL3MplPLSServiceList(int orderNo ,int vcsServiceId,Connection connection) throws Exception 
	{
		//		Added by nagarjuna
		String methodName="getL3MplPLSServiceList",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		String Results="";
		CallableStatement callstmt =null;
		ResultSet rs = null;
		try
		{
			callstmt= connection.prepareCall(sqlspL3MplsServiceList);	
			callstmt.setLong(1, Long.valueOf(orderNo));
			callstmt.setLong(2, Long.valueOf(vcsServiceId));
			rs = callstmt.executeQuery();
			while(rs.next())
			{
				if(Results.equals(""))
					Results=rs.getString("L3_MPLS_SERVICID");
				else
					Results=Results+","+rs.getString("L3_MPLS_SERVICID");
			}
		}
		catch (Exception e) {
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className,"Error While getting L3MplPLSServiceList  : "+msg, logToFile, logToConsole);//added by nagarjuna
			//e.printStackTrace();	
		}
		finally
		{
			try 
			{
				rs.close();	
				callstmt.close();
			} 
			catch (SQLException e) 
			{				
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				//e.printStackTrace();
			}
		}
		return Results;
	}
	/**
	 * fetch the service list in case of change order.
	 * change order no is provided to the method, we retreive original
	 *  orderno associated with the service and get the data.
	 * @param objDto
	 * @return
	 * @throws Exception
	 */
	public ArrayList<NewOrderDto> fetechServiceListForChangeOrder(PagingDto objDto) throws Exception 
	{
		//Added by nagarjuna
		String methodName="fetechServiceListForChangeOrder",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		NewOrderDto objRetDto = new NewOrderDto();
		ArrayList<NewOrderDto> lstServiceList = new ArrayList<NewOrderDto>();
		CallableStatement callstmt3 =null;
		Connection connection3 =null;
		Connection connection2 =null;
		CallableStatement callstmt2 =null;
		ResultSet rs2 = null;
		ResultSet rs3 = null;	
		try
		{
			connection=DbConnection.getConnectionObject();
			connection2=DbConnection.getConnectionObject();
			//getting count progress status
			callstmt2= connection2.prepareCall(sqlGetServiceStatusCount);
			callstmt2.setLong(1, Long.valueOf(objDto.getPoNumber()));
			callstmt2.setMaxRows(10);
			rs2 = callstmt2.executeQuery();
			//Map containing key as the service status and values as count 
			Map<String, Integer> serviceStatusCount = null;
			String m6FXProgresStatus = null;
			Integer count = null;
			Integer iSServiceInactive = null;
			while(rs2.next()){
				if(null == serviceStatusCount)
					serviceStatusCount = new HashMap<String, Integer>();
				m6FXProgresStatus = rs2.getString("M6_FX_PROGRESS_STATUS");
				count = rs2.getInt("COUNT");
				iSServiceInactive = rs2.getInt("IS_SERVICE_INACTIVE");
				if((null == m6FXProgresStatus ||"".equals(m6FXProgresStatus)) && iSServiceInactive == 0)
					serviceStatusCount.put("TOTALNEW", count);
				else if("FX_BT_END".equals(m6FXProgresStatus))
					serviceStatusCount.put("TOT_BILL_TRG_END", count);
				else if("M6_START".equals(m6FXProgresStatus))
					serviceStatusCount.put("TOT_PROS_M6", count);
				else if("M6_FAILED".equals(m6FXProgresStatus))
					serviceStatusCount.put("TOT_M6_FAILED", count);
				else if("M6_SUCCESS".equals(m6FXProgresStatus))
					serviceStatusCount.put("TOT_M6_SUCCESS", count);
				else if("M6_END-FX_BT_START".equals(m6FXProgresStatus))
					serviceStatusCount.put("TOT_READY_BT", count);
				else if("M6_CANCELLED".equals(m6FXProgresStatus))
					serviceStatusCount.put("TOT_CANCEL_M6", count);
				else if(iSServiceInactive == 1)
					serviceStatusCount.put("TOT_CANCEL_CRM", count);
				else if(iSServiceInactive == 2)
					serviceStatusCount.put("TOT_CANCEL_COPY", count);			
			}
			
			connection3=DbConnection.getConnectionObject();			
			Integer totalServicesCount = null;
			//getting total count of services
			callstmt3= connection3.prepareCall(sqlGetTotalServiceCount);
			callstmt3.setLong(1, Long.valueOf(objDto.getPoNumber()));
			//[129] start
			callstmt3.setInt(2,objDto.getSearchLSI());
			callstmt3.setInt(3,objDto.getSearchServiceNo());
			//[129] end
			callstmt3.setMaxRows(1);
			rs3 = callstmt3.executeQuery();
			while(rs3.next()){
				totalServicesCount = rs3.getInt("COUNT");
			}
			
			if(null == totalServicesCount)
				totalServicesCount = 0;
			
			
			callstmt= connection.prepareCall(sqlspPoServiceListForChangeOrders);	
			
			callstmt.setLong(1, Long.valueOf(objDto.getPoNumber()));
			callstmt.setLong(2, 0);
			callstmt.setString(3,"");//SERVICE_STATUS
			callstmt.setString(4,objDto.getSortBycolumn());
			callstmt.setString(5,objDto.getSortByOrder());
			callstmt.setInt(6,objDto.getStartIndex());
			callstmt.setInt(7,objDto.getEndIndex());
			//[129] start
			callstmt.setInt(8,objDto.getSearchLSI());
			callstmt.setInt(9,objDto.getSearchServiceNo());
			//[129] end
			rs = callstmt.executeQuery();
			while(rs.next())
			{
				objRetDto =  new NewOrderDto();
				objRetDto.getPagingSorting().setPageRecords(objDto.getPageRecords());
				objRetDto.setServiceId(rs.getInt("serviceID"));
				objRetDto.setSubChangeTypeId(rs.getInt("SUBCHANGETYPEID"));
				objRetDto.setServiceTypeName(rs.getString("serviceTypeName"));
				//objRetDto.setServiceSubTypeName(rs.getString("serviceSubTypeName"));
				objRetDto.setLogicalSINumber(rs.getInt("LOGICAL_SI_NO"));
				objRetDto.setCustomer_logicalSINumber(rs.getInt("CUSTOMER_LOGICAL_SI_NO"));
				objRetDto.setServiceTypeId(rs.getInt("serviceTypeID"));
				objRetDto.setServiceStatus(rs.getString("M6_FX_PROGRESS_STATUS"));
				objRetDto.setIsDemo(rs.getInt("IS_DEMO"));
				objRetDto.setInitiated_to(rs.getString("INITIATED_TO"));
				
				
				//[123]
				
			    objRetDto.setService_cancelledby(rs.getString("CANCELLEDBY"));
				SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy");
				 
				 if (rs.getString("CANCEL_DATE") != null && !"".equals(rs.getString("CANCEL_DATE")))
					{

	                      objRetDto.setService_cancl_date(sdf.format(rs.getDate("CANCEL_DATE")));

					 }else
						 objRetDto.setService_cancl_date("");
				
				 
				 if (rs.getString("CANCELLATION_REASON") != null && !"".equals(rs.getString("CANCELLATION_REASON")))
					{

					 objRetDto.setServ_cancel_reson(rs.getString("CANCELLATION_REASON"));
					 }else
						 objRetDto.setServ_cancel_reson("");
				 
				 
				
				 if (rs.getString("CANCEL_SERVICE_REASON") != null && !"".equals(rs.getString("CANCEL_SERVICE_REASON")))
					{

					 objRetDto.setServ_cancel_remarks(rs.getString("CANCEL_SERVICE_REASON"));
					 }else
						 objRetDto.setServ_cancel_remarks("");
				 
				 
				 //[123]
				 
				 
				 
				
				objRetDto.setRole_id(rs.getInt("ROLEID"));
				int atts=rs.getInt("PRODUCTATT");
				if(atts>0)
				{
					objRetDto.setPrdAttrEntered(1);	
				}
				else
				{
					objRetDto.setPrdAttrEntered(0);
				}
				objRetDto.setServAttrEntered(rs.getInt("isServAttrEntered"));
				int pcatelog=rs.getInt("PRODUCTCATELOG");
				if(pcatelog>0)
				{
					objRetDto.setProductCatelogEntered(1);	
				}
				else
				{
					objRetDto.setProductCatelogEntered(0);
				}
				objRetDto.setLogicalSINo(rs.getString("LOGICAL_SI_NO"));
				objRetDto.setIsPublished(rs.getInt("ISPUBLISHED"));
				objRetDto.setIsDummy(rs.getInt("ISDUMMY"));
				objRetDto.setTotal_services(totalServicesCount);
				objRetDto.getPagingSorting().setRecordCount(totalServicesCount);	
				objRetDto.setMaxPageNo(objRetDto.getPagingSorting().getMaxPageNumber());
				if(serviceStatusCount.containsKey("TOT_READY_BT"))
					objRetDto.setTotal_billing_trigger(serviceStatusCount.get("TOT_READY_BT"));
				else
					objRetDto.setTotal_billing_trigger(0);
				if(serviceStatusCount.containsKey("TOT_BILL_TRG_END"))
					objRetDto.setTotal_billing_trigger_end(serviceStatusCount.get("TOT_BILL_TRG_END"));
				else
					objRetDto.setTotal_billing_trigger_end(0);
				
				if(serviceStatusCount.containsKey("TOT_CANCEL_COPY"))
					objRetDto.setTotal_cancel_copy(serviceStatusCount.get("TOT_CANCEL_COPY"));
				else
					objRetDto.setTotal_cancel_copy(0);
				
				if(serviceStatusCount.containsKey("TOT_CANCEL_CRM"))
					objRetDto.setTotal_cancel_crm(serviceStatusCount.get("TOT_CANCEL_CRM"));
				else
					objRetDto.setTotal_cancel_crm(0);
				
				if(serviceStatusCount.containsKey("TOT_CANCEL_M6"))
					objRetDto.setTotal_cancel_m6(serviceStatusCount.get("TOT_CANCEL_M6"));
				else
					objRetDto.setTotal_cancel_m6(0);
				
				if(serviceStatusCount.containsKey("TOT_PROS_M6"))
					objRetDto.setTotal_m6_processing(serviceStatusCount.get("TOT_PROS_M6"));
				else
					objRetDto.setTotal_m6_processing(0);
				
				if(serviceStatusCount.containsKey("TOTALNEW"))
					objRetDto.setTotal_new_services(serviceStatusCount.get("TOTALNEW"));
				else
					objRetDto.setTotal_new_services(0);
				
				if(serviceStatusCount.containsKey("TOT_M6_FAILED"))
					objRetDto.setTotal_m6_failed(serviceStatusCount.get("TOT_M6_FAILED"));
				else
					objRetDto.setTotal_m6_failed(0);
				
				if(serviceStatusCount.containsKey("TOT_M6_SUCCESS"))
					objRetDto.setTotal_m6_success(serviceStatusCount.get("TOT_M6_SUCCESS"));
				else
					objRetDto.setTotal_m6_success(0);
				lstServiceList.add(objRetDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Fetching ServiceList For ChangeOrder  : "+msg, logToFile, logToConsole);//added by nagarjuna
			connection.rollback();
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{

				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
				DbConnection.freeConnection(connection2);				
				DbConnection.freeConnection(connection3);
			} 
			catch (SQLException e) 
			{
				DbConnection.freeConnection(connection);
				DbConnection.freeConnection(connection2);
				DbConnection.freeConnection(connection3);
				Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);
			}
		}
		return lstServiceList;
	}
	//Fetch Zone List In Combo
	public ArrayList<OrderHeaderDTO> fetechZoneList(long regionId) throws Exception 
	{
		//		Added by nagarjuna
		String methodName="fetechZoneList",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		//NewOrderDto objRetDto = new NewOrderDto();
		OrderHeaderDTO objRetDto = null;
		ArrayList<OrderHeaderDTO> zoneList = new ArrayList<OrderHeaderDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
			callstmt= connection.prepareCall(sqlGetZoneList);	
			callstmt.setLong(1, regionId);
			rs = callstmt.executeQuery();
			while(rs.next())
			{
				objRetDto =  new OrderHeaderDTO();
				
				objRetDto.setZoneId(rs.getInt("ZONEID"));
				objRetDto.setZoneName(rs.getString("ZONENNAME"));
				zoneList.add(objRetDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Fetching ZoneList  : "+msg, logToFile, logToConsole);//added by nagarjuna
			connection.rollback();
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return zoneList;
	}
	
	//get all Salution Data	
	public ArrayList<ContactDTO> fetechSalutationList(ContactDTO objDto) throws Exception 
	{
		//		Added by nagarjuna
		String methodName="fetechSalutationList",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		ContactDTO objRetDto = null;
		ArrayList<ContactDTO> solutationList = new ArrayList<ContactDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
			callstmt= connection.prepareCall(sqlGetSalutationList);	
			if("".equalsIgnoreCase(objDto.getSalutationName()) || objDto.getSalutationName()==null)
			{
			callstmt.setString(1, "");
			}
			else
			{
				callstmt.setString(1, objDto.getSalutationName());
			}
			rs = callstmt.executeQuery();
			while(rs.next())
			{
				objRetDto =  new ContactDTO();
				
				objRetDto.setSalutationId(rs.getInt("ID"));
				objRetDto.setSalutationName(rs.getString("SALUTATION"));
				solutationList.add(objRetDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Fetching Salutation List : "+msg, logToFile, logToConsole);//added by nagarjuna
			connection.rollback();
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return solutationList;
	}
//	get all Country List	
	public ArrayList<NewOrderDto> fetechCountryList(NewOrderDto frmDto) throws Exception 
	{
		//		Added by nagarjuna
		String methodName="fetechCountryList",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		NewOrderDto objRetDto = new NewOrderDto();
		ArrayList<NewOrderDto> countryList = new ArrayList<NewOrderDto>();
		try
		{
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
			callstmt= connection.prepareCall(spGetAllCountries);
			callstmt.setLong(1, (frmDto.getStateCode()));			
			rs = callstmt.executeQuery();
			while(rs.next())
			{
				objRetDto =  new NewOrderDto();				
				objRetDto.setCountyCode(rs.getInt("COUNTRY_CODE"));
				objRetDto.setCountyName(rs.getString("COUNTRY_NAME"));
				countryList.add(objRetDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Fetching CountryList  : "+msg, logToFile, logToConsole);//added by nagarjuna
			connection.rollback();
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return countryList;
	}
	
//	get all State List	
	public ArrayList<NewOrderDto> fetechStateList(NewOrderDto frmDto) throws Exception 
	{
		//		Added by nagarjuna
		String methodName="fetechStateList",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		NewOrderDto objRetDto = new NewOrderDto();
		ArrayList<NewOrderDto> stateyList = new ArrayList<NewOrderDto>();
		try
		{			
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
			callstmt= connection.prepareCall(spGetStatesOfCity);
			callstmt.setLong(1, (frmDto.getCityCode()));
			//callstmt.setLong(1, 1);
			rs = callstmt.executeQuery();
			while(rs.next())
			{
				objRetDto =  new NewOrderDto();				
				objRetDto.setStateCode(rs.getInt("STATE_ID"));
				objRetDto.setStateName(rs.getString("STATE_NAME"));
				//objRetDto.setCountyCode(rs.getInt("COUNTRY_ID"));
				stateyList.add(objRetDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Fetching StateList  : "+msg, logToFile, logToConsole);//added by nagarjuna
			connection.rollback();
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return stateyList;
	}
//	get all City List	
	public ArrayList<NewOrderDto> fetechCityList() throws Exception 
	{
		//		Added by nagarjuna
		String methodName="fetechCityList",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		NewOrderDto objRetDto = new NewOrderDto();
		ArrayList<NewOrderDto> cityList = new ArrayList<NewOrderDto>();
		try
		{
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
			callstmt= connection.prepareCall(spGetCitiesOfState);				
			//callstmt.setLong(1, (frmDto.getStateCode()));
			rs = callstmt.executeQuery();
			while(rs.next())
			{
				objRetDto =  new NewOrderDto();				
				objRetDto.setCityCode(rs.getInt("CITY_ID"));
				objRetDto.setCityName(rs.getString("CITY_NAME"));
				cityList.add(objRetDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Fetching CityList  : "+msg, logToFile, logToConsole);//added by nagarjuna
			connection.rollback();
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return cityList;
	}
	// [015] Vishwa
	
//	get all Pin List	
	public ArrayList<NewOrderDto> fetchPinList(NewOrderDto frmDto) throws Exception 
	{
		//		Added by nagarjuna
		String methodName="fetchPinList",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		NewOrderDto objRetDto = new NewOrderDto();
		ArrayList<NewOrderDto> pinList = new ArrayList<NewOrderDto>();
		try
		{
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
			callstmt= connection.prepareCall(spGetPinOfStateandCity);				
			callstmt.setInt(2, (frmDto.getStateCode()));
			callstmt.setInt(1, (frmDto.getCityCode()));
			rs = callstmt.executeQuery();
			while(rs.next())
			{
				objRetDto =  new NewOrderDto();				
				objRetDto.setPinCodeId(rs.getInt("PINCODE_ID"));
				objRetDto.setPinCode(rs.getInt("PINCODE"));
				pinList.add(objRetDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Fetching PinCodeList  : "+msg, logToFile, logToConsole);//added by nagarjuna
			connection.rollback();
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return pinList;
	}
	
	// [015] End
	
	//[011] Start
	//public NewOrderDto updateServiceAttributes(NewOrderDto objDto) throws Exception
	public static String sqlinsertPartialPublish="{call IOE.SP_INSERT_PARTIALPUBLISH(?,?,?,?,?,?,?)}";
	//[011] End
	//[127] start
	public static String deleteQuery="DELETE FROM IOE.TPOSERVICE_PARALLEL_UPGRADE WHERE SERVICEID=?";
	public static String insertQuery="INSERT INTO IOE.TPOSERVICE_PARALLEL_UPGRADE(SERVICEID,FIELDID,PARALLEL_UPGRADE_LSI,VALUE_POSITION)"
					   +" VALUES(?,?,?,?)";
	//[127] end
	public int updateServiceAttributes(NewOrderDto objDto,long empID,ArrayList<ParallelUpgradeValidationDto> listLsi1,ArrayList<ParallelUpgradeValidationDto> listLsi2,
			ArrayList<ParallelUpgradeValidationDto> listLsi3) throws Exception
	
	{
		//		Added by nagarjuna
		String methodName="updateServiceAttributes",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		int maxLogicSINum=0;
		NewOrderDto objRetDto = new NewOrderDto();
		NewOrderDaoExt  newDao = new NewOrderDaoExt();
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat(AppConstants.DATE_FORMAT_PROC);
		PreparedStatement pstmtDel=null;
		PreparedStatement pstmtInsert=null;
		int executedFlag=0;
		try
		{
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
			
			logicalSILock.lock();
			//
			//maxLogicSINum=getLogiSINo();
			//
			callstmt= connection.prepareCall(sqlUpdatetServiceAttributes);	
			callstmt.setLong(1, objDto.getServiceId());
		   // callstmt.setString(2, objDto.getLogicalSINo());
			//TODO : make SI nio bigint
			//if(objDto.getUpdateType()==0)
			//{
			//	callstmt.setString(2, String.valueOf(maxLogicSINum));
			//}
			//else
			//{
				callstmt.setInt(2, objDto.getCustomer_logicalSINumber());
			//}
			callstmt.setDate(3, new java.sql.Date(simpleDateFormat.parse(objDto.getEffStartDate()).getTime()));
			//callstmt.setDate(4, new java.sql.Date(simpleDateFormat.parse(objDto.getEffEndDate()).getTime()));
			callstmt.setString(4, objDto.getAttRemarks());
			callstmt.setLong(5, 0);
			callstmt.setInt(6, 0);
			callstmt.setString(7, "");
			//[011] Start
			callstmt.setLong(8, empID);
			//[011] End
			callstmt.setDate(9, new java.sql.Date(simpleDateFormat.parse(objDto.getRfsDate()).getTime()));
			callstmt.setString(10,objDto.getIsAttach().trim());//Added for VCS Bundled Mapping
			//------------------Start[HYPR22032013006]----------------------------------
			callstmt.setString(11, objDto.getOrderType());
			callstmt.setLong(12, objDto.getStdReasonId());
			callstmt.setString(13, objDto.getStdReasonName());
			//------------------End[HYPR22032013006]------------------------------------
			//[091] Start
			callstmt.setString(14, objDto.getCancelledOrderReference());
			//[091] End
			//[093] Start
			//[127] start
		
			callstmt.setString(15, objDto.getParallelUpgradeLSINo1());
			callstmt.setString(16, objDto.getParallelUpgradeLSINo2());
			callstmt.setString(17, objDto.getParallelUpgradeLSINo3());
			//[127] end
			callstmt.setString(18,objDto.getDowntimeClause());
			//[093] End
			//[133] Start
			callstmt.setInt(19, objDto.getParallelUpgradeLSIRequire());
			callstmt.setString(20, objDto.getRemarksParallelUpgrade());
			//Shubhranshu
			callstmt.setDate(21, new java.sql.Date(simpleDateFormat.parse(objDto.getEffRRDate()).getTime()));
			//
			//[133] End
			callstmt.execute();
			int err = callstmt.getInt(6);
			
			//[127] start
			
			if(err==0){
				pstmtDel=connection.prepareStatement(deleteQuery);
				pstmtDel.setLong(1, objDto.getServiceId());
				int count=pstmtDel.executeUpdate();
				//TO INSERT VALUES INTO DATABASE
				pstmtInsert=connection.prepareStatement(insertQuery);
				//iterate arraylist1
				int index=0;
				for(ParallelUpgradeValidationDto obDto:listLsi1){
					
					pstmtInsert.setLong(1, objDto.getServiceId());
					pstmtInsert.setInt(2, 10001);
					pstmtInsert.setLong(3, Long.valueOf(obDto.getLogicalSINumber()));
					pstmtInsert.setInt(4, index);
					pstmtInsert.addBatch();
					index++;
				}
				//iterate arraylist2
				index=0;
				for(ParallelUpgradeValidationDto obDto:listLsi2){
					
					pstmtInsert.setLong(1, objDto.getServiceId());
					pstmtInsert.setInt(2, 10002);
					pstmtInsert.setLong(3, Long.valueOf(obDto.getLogicalSINumber()));
					pstmtInsert.setInt(4, index);
					pstmtInsert.addBatch();
					index++;
				}
				//iterate arraylist3
				index=0;
				for(ParallelUpgradeValidationDto obDto:listLsi3){
					
					pstmtInsert.setLong(1, objDto.getServiceId());
					pstmtInsert.setInt(2, 10003);
					pstmtInsert.setLong(3, Long.valueOf(obDto.getLogicalSINumber()));
					pstmtInsert.setInt(4, index);
					pstmtInsert.addBatch();
					index++;
				}
				int results[]=pstmtInsert.executeBatch();
				for(int i:results){
					if(i==PreparedStatement.EXECUTE_FAILED){
						executedFlag=-1;
						throw new Exception(" Exception occurred during executing pstmtInsert Batch::");
					}
				}
				executedFlag=1;//if everything is successful
				
			}
			//[127] end
			if(executedFlag==1)
			{
				CallableStatement cs=null;
				//String result = newDao.savePublish(objDto.getServiceId(),objDto.getServiceTypeId(),objDto.getServiceSubtypeId(),objDto.getIsPublished());
//				objRetDto.setServiceId(callstmt.getInt(5));
				cs= connection.prepareCall(sqlinsertPartialPublish);
				cs.setInt(1, objDto.getServiceId());
				cs.setInt(2, objDto.getServiceTypeId());
				cs.setInt(3, objDto.getServiceSubtypeId());
				if(objDto.getIsPublished()==2)
				{
					cs.setInt(4, 0);
				}
				else
				{
					cs.setInt(4, objDto.getIsPublished());
				}
				cs.setString(5, "");
				cs.setInt(6, 0);
				cs.setString(7, "");
				cs.execute();
				int status=cs.getInt(5);
				if(status==-1)
				{
					connection.rollback();
					
				}
				else
				{
					
					connection.commit();
				}
				
					
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error   : "+msg, logToFile, logToConsole);//added by nagarjuna
			connection.rollback();
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.closePreparedStatement(pstmtDel);
				DbConnection.closePreparedStatement(pstmtInsert);
				DbConnection.freeConnection(connection);
				logicalSILock.unlock();
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return executedFlag;
	}
  
//	Method used for Fetching Max Order No the Database
	public int getLogiSINo() 
	{
		//		Added by nagarjuna
		String methodName="getLogiSINo",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		PreparedStatement preparedStmt =null;
		ResultSet rs = null;
		int maxLogicSINum=0;
		try
		{
            connection=DbConnection.getConnectionObject();
			preparedStmt= connection.prepareCall(sqlGetLogiSINO);
			rs = preparedStmt.executeQuery();
			while(rs.next())
			{
			 maxLogicSINum=  rs.getInt("NUMBER");
			}
			}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While getting LogicalSINo  : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(preparedStmt);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return (maxLogicSINum+1);
	}
	public ViewOrderDto SaveNotes(ViewOrderDto objDto) throws Exception 
	{
		//		Added by nagarjuna
		String methodName="SaveNotes",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		ViewOrderDto objRetDto = new ViewOrderDto();
		
		try
		{
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
			callstmt= connection.prepareCall(sqlSpInsertTaskNotes);	
			callstmt.setLong(1, Long.valueOf(objDto.getTaskID()));
			callstmt.setString(2, objDto.getNotesType());
			callstmt.setString(3, objDto.getNotesMeaning());
			callstmt.setLong(4, Long.valueOf(objDto.getCreatedBy()));
			callstmt.setLong(5, 0);
			callstmt.setLong(6, 0);
			callstmt.setString(7, "");
			callstmt.execute();
			int err = callstmt.getInt(6);
			
			if(err==0)
			{
				objRetDto.setMsgOut("Notes Inserted Successfully");
				connection.commit();
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Saving  Notes  : "+msg, logToFile, logToConsole);//added by nagarjuna
			connection.rollback();
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return objRetDto;
	}

	public ArrayList<String> getFlagForTaskEmail()
	{
		//		Added by nagarjuna
		String methodName="getFlagForTaskEmail",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		String flag = "";
		Connection iomsConn = null;
		CallableStatement csIOMS = null;
		ArrayList<String> lstFlags = new ArrayList<String>();
		try {
			Utility.LOG(true, true,"Connect with IOMS database For EMail Flag==>");
			iomsConn = DbConnection.getConnectionObject();
			
			csIOMS=iomsConn.prepareCall("SELECT KEYVALUE as EMAIL , (SELECT KEYVALUE FROM IOE.TM_APPCONFIG WHERE KEYNAME = 'TASKSMS') AS SMS FROM IOE.TM_APPCONFIG WHERE KEYNAME = 'TASKEMAIL'");
			rset=csIOMS.executeQuery();
			Utility.LOG(true, true,"fetching Flag");
			while(rset.next())
			{
				lstFlags.add(rset.getString("EMAIL"));
				lstFlags.add(rset.getString("SMS"));				
			}
			Utility.LOG(true, true,"query For Getting Flags::" + lstFlags.get(0) + " Flag For SMS " + lstFlags.get(1));
		
		} catch (Exception e) {
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className,"Error While Getting Flag For TaskEmail  : "+msg, logToFile, logToConsole);//added by nagarjuna
			//System.out.println("Error in method Email()"
			//		+ e.getStackTrace());
			//e.printStackTrace();
		} finally {
			try {
				DbConnection.closeResultset(rset);
				DbConnection.closePreparedStatement(pstmt);
				DbConnection.freeConnection(iomsConn);
			} catch (Exception e) {
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				//System.out.println("exeption due to : " + e.getMessage());
			}
		}
		return lstFlags;
		 
	}
	
	public ViewOrderDto SaveAction(ViewOrderDto objDto , Long createdby,Connection optionalConn) throws Exception{
		//		Added by nagarjuna
		String methodName="SaveAction",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		boolean connCreatedHere=false;
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		ViewOrderDto objRetDto = new ViewOrderDto();
		ArrayList<IB2BMailDto> lstMail = new ArrayList<IB2BMailDto>();
		try{
			if(optionalConn==null){
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
				connCreatedHere=true;
			}else{
				connection=optionalConn;
			}
			long orderNO=objDto.getOrderno();
			/*
			if(objDto.getActionId().equalsIgnoreCase("2"))
			{
				PreparedStatement getMailDetails=null;

				ResultSet rsMailDetails  = null;
				getMailDetails= connection.prepareCall(spGetSaveActionMailDetailsOnRejection);					
				getMailDetails.setLong(1,Long.valueOf(objDto.getTaskID()));
				getMailDetails.setLong(2,Long.valueOf(orderNO));
				rsMailDetails = getMailDetails.executeQuery();
				String toemail = "";
			
				while(rsMailDetails.next())
				{
					IB2BMailDto objMailDto = new IB2BMailDto();						
					objMailDto.setOrderNo(rsMailDetails.getString("ORDERNO"));
					objMailDto.setAccountMgrEmail(rsMailDetails.getString("ACTMGREMAILID"));
					objMailDto.setCreatorEmail(rsMailDetails.getString("EMAILID"));
					objMailDto.setCodinatorEmailId(rsMailDetails.getString("CODINATOR_EMAIL"));
					objMailDto.setAccountName(rsMailDetails.getString("ACCOUNTNAME"));
					objMailDto.setNextTaskAssignedEmail(rsMailDetails.getString("NEXTTASKASSIGNEDEMAIL"));
					objMailDto.setMailTemplateType(AppConstants.SAVEACTIONMAILONREJECTION);
					objMailDto.setTo(new String[]{objMailDto.getCreatorEmail() ,objMailDto.getAccountMgrEmail(),objMailDto.getNextTaskAssignedEmail()});
					objMailDto.setCc(new String[]{objMailDto.getCodinatorEmailId()});
					lstMail.add(objMailDto);
				}

			}
			*/
			
			callstmt= connection.prepareCall(sqlSpInsertTaskAction);	
			callstmt.setLong(1, Long.valueOf(objDto.getTaskID()));
			callstmt.setLong(2, Long.valueOf(objDto.getActionId()));
			callstmt.setLong(3, Long.valueOf(1));
			callstmt.setString(4, objDto.getActionRemraks());
			callstmt.setLong(5, Long.valueOf(objDto.getProjectmanagerassignedId()));
			callstmt.setLong(6, createdby);	
			callstmt.setLong(7, 0);
			callstmt.setLong(8, 0);
			callstmt.setString(9, "");
			callstmt.setString(9, "");
			callstmt.setLong(10, 0);
			
						
			callstmt.execute();
			int err = callstmt.getInt(8);
			Long newTaskid = callstmt.getLong(10);
			
			if(err==0){	
				objRetDto.setSaved(true);
				objRetDto.setMsgOut("Action taken Successfully");
				objRetDto.setIsSuccessApproved(1);
				
				if(objDto.getActionId().equalsIgnoreCase("1")){
						/*if(sendSaveActionMail(objDto, newTaskid, connection)==1)
							objRetDto.setMsgOut("Action taken Successfully and Mail Sent");*/
				}else{
						/*if(sendSaveActionMailOnRejection(objDto, connection)==1)
							objRetDto.setMsgOut("Action taken Successfully and Mail Sent");	*/				
					}
			}else{
				objRetDto.setSaved(false);
		}
		}catch(Exception ex){
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error   : "+msg, logToFile, logToConsole);//added by nagarjuna
			connection.rollback();
			//ex.printStackTrace();	
		}finally{
			try{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callstmt);
				if(connCreatedHere){
					connection.commit();
				DbConnection.freeConnection(connection);
			} 
			}catch (SQLException e){
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return objRetDto;
	}
	/*public ArrayList<UserAccessMatrixDto> GetUserAccessMatrixData(String empId) throws Exception 
	{
		//		Added by nagarjuna
		String methodName="GetUserAccessMatrixData",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		UserAccessMatrixDto objRetDto = null;
		ArrayList<UserAccessMatrixDto> lstServiceList = new ArrayList<UserAccessMatrixDto>(); 
		try
		{
			connection=DbConnection.getConnectionObject();
			callstmt= connection.prepareCall(sqlspGetUserAccessMatrix);	
			callstmt.setLong(1, Long.valueOf(empId));
			rs = callstmt.executeQuery();
			
			while(rs.next())
			{
				objRetDto =  new UserAccessMatrixDto();
				objRetDto.setRoleName(rs.getString("ROLENAME"));
				objRetDto.setIsRoleAssigned(rs.getInt("ISROLEASSIGNED"));
				objRetDto.setRoleId(rs.getLong("ROLEID"));
				lstServiceList.add(objRetDto);
			}			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While GetUserAccessMatrixData  : "+msg, logToFile, logToConsole);//added by nagarjuna
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
			}
		}
		return lstServiceList;
	}*/
	public ArrayList<UserAccessMatrixDto> GetUserAccessMatrixData(String empId) throws Exception 
	{
		//		Added by nagarjuna
		String methodName="GetUserAccessMatrixData",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connectionGettingAccountRole  =null;
		Connection connectionGettingAccountRoleDetails =null;
		CallableStatement callstmtGettingAccountRole =null;
		CallableStatement callstmtGettingAccountRoleDetails =null;
		ResultSet rsGettingAccountRole = null;
		ResultSet rsGettingAccountRoleDetails = null;
		UserAccessMatrixDto objRetDto = null;
		UserAccessMatrixDto objRetDtoDetail =null;
		ArrayList<UserAccessMatrixDto> lstServiceList = new ArrayList<UserAccessMatrixDto>(); 
		ArrayList<UserAccessMatrixDto> userAccessDetailList=new ArrayList<UserAccessMatrixDto>();
		List<String> tempListRoleID=new ArrayList<String>();
		HashSet<String> tempListRoleDetail=new HashSet<String>(tempListRoleID);
		try
		{
			
			connectionGettingAccountRole=DbConnection.getConnectionObject();
			callstmtGettingAccountRole= connectionGettingAccountRole.prepareCall(sqlGetUserAccessMatrixList);
			rsGettingAccountRole = callstmtGettingAccountRole.executeQuery();
			while(rsGettingAccountRole.next()){
				objRetDto =  new UserAccessMatrixDto();
				objRetDto.setRoleId(rsGettingAccountRole.getLong("ROLEID"));
				objRetDto.setRoleName(rsGettingAccountRole.getString("ROLENAME"));
				objRetDto.setIS_ACTIVE(rsGettingAccountRole.getString("ISACTIVE"));
				lstServiceList.add(objRetDto);
			}
			connectionGettingAccountRoleDetails=DbConnection.getConnectionObject();
			callstmtGettingAccountRoleDetails= connectionGettingAccountRoleDetails.prepareCall(sqlGetUserAccessMatrixDetailLiist);
			callstmtGettingAccountRoleDetails.setLong(1, Long.valueOf(empId));
			///callstmt.addBatch(sqlGetUserAccessMatrixDetailLiist);
			rsGettingAccountRoleDetails= callstmtGettingAccountRoleDetails.executeQuery();
			while(rsGettingAccountRoleDetails.next()){
				objRetDtoDetail = new UserAccessMatrixDto();
				objRetDtoDetail.setIsRoleAssigned(rsGettingAccountRoleDetails.getInt("ISACTIVE"));	
				objRetDtoDetail.setRoleId(rsGettingAccountRoleDetails.getLong("ROLEID"));
				//objRetDtoDetail.setIS_ACTIVE(rs2.getString("ISACTIVE"));
				userAccessDetailList.add(objRetDtoDetail);
			}
			
			for(int i=0;i<userAccessDetailList.size();i++){
				UserAccessMatrixDto objDto=userAccessDetailList.get(i);
				tempListRoleDetail.add(""+objDto.getRoleId());
			}
			
			for(int j=0;j<lstServiceList.size();j++){
				if (tempListRoleDetail.contains(""+lstServiceList.get(j).getRoleId())) {	
					//if (tempListRoleDetail.contains(lstServiceList.get(j))) {	
					lstServiceList.get(j).setIsRoleAssigned(1);
				}else {
					lstServiceList.get(j).setIsRoleAssigned(0);
				}
			}
						
		
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While GetUserAccessMatrixData  : "+msg, logToFile, logToConsole);//added by nagarjuna
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsGettingAccountRole);
				DbConnection.closeCallableStatement(callstmtGettingAccountRole);
				DbConnection.freeConnection(connectionGettingAccountRole);
				
				DbConnection.closeResultset(rsGettingAccountRoleDetails);
				DbConnection.closeCallableStatement(callstmtGettingAccountRoleDetails);
				DbConnection.freeConnection(connectionGettingAccountRoleDetails);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
			}
		}
		return lstServiceList;
	}

	
	public ArrayList<ViewOrderDto> ViewNotes(ViewOrderDto objDto) throws Exception 
	{
		//		Added by nagarjuna
		String methodName="ViewNotes",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		ViewOrderDto objRetDto = new ViewOrderDto();
		ArrayList<ViewOrderDto> lstServiceList = new ArrayList<ViewOrderDto>(); 
		try
		{
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
			//callstmt= connection.prepareCall(sqlSpViewNotes);	

			String SQL = " SELECT OWNERTYPE_ID , TASK_NOTES_ID, TASK_ID, TASK_NOTES, TASK_MEANING,  USER_ID as CREATED_BY , ioe.formatdate(IOE.TTASK_NOTES.CREATED_DATE) as  CREATED_DATE";
				SQL+=" FROM IOE.TTASK_NOTES INNER JOIN IOE.TPOWORKFLOWTASK";
				SQL+=" ON TASK_ID = TASKID";
				SQL+=" INNER JOIN IOE.TM_ACCOUNTROLEDETAILS ON ID=IOE.TTASK_NOTES.CREATED_BY";
				SQL+=" where is_delete=0 and TASK_ID = "+ objDto.getTaskID() ;
				SQL+=" UNION  ";
				SQL+=" SELECT TTASK_ACTION_HISTORY.TASK_OWNER_ID , TASK_NOTES_ID, TTASK_ACTION_HISTORY.TASK_ID, TASK_NOTES, TASK_MEANING,";  
				SQL+=" USER_ID as CREATED_BY , ioe.formatdate(TTASK_NOTES.CREATED_DATE) as  CREATED_DATE";
				SQL+=" FROM IOE.TTASK_NOTES AS TTASK_NOTES INNER JOIN IOE.TTASK_ACTION_HISTORY AS TTASK_ACTION_HISTORY";
				SQL+=" ON TTASK_ACTION_HISTORY.TASK_ID = TTASK_NOTES.TASK_ID";
				SQL+=" INNER JOIN IOE.TM_ACCOUNTROLEDETAILS ON ID=TTASK_NOTES.CREATED_BY";
				SQL+=" where is_delete=0 and TTASK_ACTION_HISTORY.TASK_ID = "+ objDto.getTaskID() +"  for read only";
				
			//callstmt.setLong(1, Long.valueOf(objDto.getTaskID()));
			callstmt= connection.prepareCall(SQL);
			rs = callstmt.executeQuery();
			while(rs.next())
			{
				objRetDto =  new ViewOrderDto();
				objRetDto.setTaskNoteId(rs.getString("TASK_NOTES_ID"));
				objRetDto.setNotesType(rs.getString("TASK_NOTES"));
				objRetDto.setNotesMeaning(rs.getString("TASK_MEANING"));
				objRetDto.setCreatedBy(rs.getString("CREATED_BY"));
				objRetDto.setCreatedDate(rs.getString("CREATED_DATE"));
				objRetDto.setTaskID(rs.getString("TASK_ID"));
				objRetDto.setOwnerId(rs.getString("OWNERTYPE_ID"));
				lstServiceList.add(objRetDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Viewing Notes  : "+msg, logToFile, logToConsole);//added by nagarjuna
			connection.rollback();
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return lstServiceList;
	}
	public ViewOrderDto DeleteNotes(ViewOrderDto objDto) throws Exception 
	{
		//		Added by nagarjuna
		String methodName="DeleteNotes",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		ViewOrderDto objRetDto = new ViewOrderDto();
		
		try
		{
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
			callstmt= connection.prepareCall(sqlSpDeleteNotes);	
			callstmt.setLong(1, Long.valueOf(objDto.getTaskNoteId()));
			callstmt.setLong(2, 0);
			callstmt.setLong(3, 0);
			callstmt.setString(4, "");
			callstmt.execute();
			int err = callstmt.getInt(3);
			
			if(err==0)
			{
				objRetDto.setMsgOut("Notes Deleted Successfully");
				connection.commit();
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Deleting Notes  : "+msg, logToFile, logToConsole);//added by nagarjuna
			connection.rollback();
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return objRetDto;
	}
	public ServiceLineDTO fetchServiceAttribute(ServiceLineDTO objDto) throws Exception 
	{
		//		Added by nagarjuna
		String methodName="fetchServiceAttribute",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		CallableStatement callstmtForLSI =null;
		ResultSet rs = null;
		ResultSet rsForLSI = null;
		ServiceLineDTO objRetDto = null;
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat(AppConstants.DATE_FORMAT_PROC);
		try
		{
			connection=DbConnection.getConnectionObject();
			callstmt= connection.prepareCall(sqlFetchServiceAttributes);	
			callstmt.setLong(1, Long.valueOf(objDto.getServiceId()));
			rs = callstmt.executeQuery();
			while(rs.next())
			{
				objRetDto =  new ServiceLineDTO();
				objRetDto.setServiceId(rs.getInt("SERVICEID"));
				objRetDto.setDowntimeClause(rs.getString("DOWNTIME_CLAUSE"));
				if(rs.getDate("EFFSTARTDATE") != null)
				{
				 objRetDto.setEffStartDate(simpleDateFormat.format(rs.getDate("EFFSTARTDATE")));
				 //lawkush
				//objRetDto.setEffEndDate(simpleDateFormat.format(rs.getDate("EFFENDDATE")));
				}
				if(rs.getDate("RFS_DATE") != null){ //adding a condition to prevent null pointer exception  
					 objRetDto.setRfsDate((simpleDateFormat.format(rs.getDate("RFS_DATE"))));
				 }else{
					 objRetDto.setRfsDate("");
				 }
				objRetDto.setAttRemarks(rs.getString("REMARKS"));
				objRetDto.setCustomer_logicalSINumber(rs.getInt("CUSTOMER_LOGICAL_SI_NO"));
				objRetDto.setIsAttach(rs.getString("BUNDLED"));
				//lawkush Start
				objRetDto.setCancelledOrderReference(rs.getString("CANCELLED_ORDER_SERVICE_REF"));
				//lawkush End
				//[127] start
				//[093] Start
				//objRetDto.setParallelUpgradeLSI(rs.getInt("PARALLELUPGRADELSINO"));
				objRetDto.setParallelUpgradeLSINo1(rs.getString("PARALLELUPGRADELSINO1"));
				objRetDto.setParallelUpgradeLSINo2(rs.getString("PARALLELUPGRADELSINO2"));
				objRetDto.setParallelUpgradeLSINo3(rs.getString("PARALLELUPGRADELSINO3"));
				//[093] End
				//[127] end
				//[133] Start
				objRetDto.setParallelUpgradeLSIRequire(rs.getInt("PARALLELUPGRADELSIREQUIRE"));
				objRetDto.setRemarksParallelUpgrade(rs.getString("REMARKSPARALLELUPGRADELSI"));
				//[133] End
			}
			callstmtForLSI= connection.prepareCall(sqlFetchServiceAttributes_CLSIN);	
			callstmtForLSI.setLong(1, Long.valueOf(objDto.getServiceId()));
			rsForLSI = callstmtForLSI.executeQuery();
			ArrayList customer_logicalSINumbers = new ArrayList();
			while(rsForLSI.next())
			{
				customer_logicalSINumbers.add(rsForLSI.getInt("LOGICAL_SI_NO"));
			}
			objRetDto.setCustomer_logicalSINumbers(customer_logicalSINumbers);
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Fetching ServiceAttributes  : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				
				//e.printStackTrace();
			}
		}
		return objRetDto;
	}
	
	//	Method used for Fetching Contact Details from the Database
	public ArrayList<ProductCatelogDTO> getServiceTypeDetails(ServiceLineDTO objDto)  throws Exception
	{
		//		Added by nagarjuna
		String methodName="getServiceTypeDetails",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement clbStmt =null;
		ProductCatelogDTO objNewOrderDto = null;
		ArrayList<ProductCatelogDTO> listServiceTypes = new ArrayList<ProductCatelogDTO>();
		ResultSet rs = null;
		try
		{
			connection=DbConnection.getConnectionObject();
			clbStmt= connection.prepareCall(sqlFetchServiceTypeDetails);
			clbStmt.setLong(1,objDto.getServiceTypeId());
			clbStmt.setLong(2,objDto.getOrderNumber());
			rs = clbStmt.executeQuery();
			while (rs.next()) 
			{
				objNewOrderDto =  new ProductCatelogDTO();
				objNewOrderDto.setServiceDetailID(rs.getInt("SERVICEDETAILID"));
				objNewOrderDto.setServiceDetDescription(rs.getString("SERVICEDETDESCRIPTION"));
				objNewOrderDto.setServiceTypeDescription(rs.getString("SERVICETYPE"));
				listServiceTypes.add(objNewOrderDto);
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Getting ServiceTypeDetails  : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
		try{
			DbConnection.closeResultset(rs);
			DbConnection.closeCallableStatement(clbStmt);
			DbConnection.freeConnection(connection);
			} 
		catch (SQLException e) 
		{
			Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
			//e.printStackTrace();
		}
		}
		return listServiceTypes;
	}

	//To Fetch Attribute List on Product Catelog Interface
	public ArrayList<FieldAttibuteDTO> fetchServiceAttributeList(ServiceLineDTO objDto,String roleid) 
	{
		//		Added by nagarjuna
		String methodName="fetchServiceAttributeList",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement getServiceAttMaster=null;
		ResultSet rs = null;
		ArrayList<FieldAttibuteDTO> listserviceAttMaster = new ArrayList<FieldAttibuteDTO>();
		FieldAttibuteDTO objNewOrderDto = null;
		String attdefaultval;
		
		try
		{
			ArrayList<FieldAttibuteDTO> lstServiceSummary = null;
			connection=DbConnection.getConnectionObject();
			getServiceAttMaster= connection.prepareCall(sqlFetchServiceAttributeMstr);	
			getServiceAttMaster.setInt(1, objDto.getServiceDetailID());
			getServiceAttMaster.setLong(2, Long.valueOf(roleid));
			rs = getServiceAttMaster.executeQuery();
			
			while(rs.next())
			{
				objNewOrderDto =  new FieldAttibuteDTO();
				
				objNewOrderDto.setProdAttributeID(rs.getInt("ATTMASTERID"));
				objNewOrderDto.setProdAttributeLabel(rs.getString("ATTDESCRIPTION"));
				objNewOrderDto.setProdDataType(rs.getString("ATTDATATYPE"));
				objNewOrderDto.setProdAlisName(rs.getString("ALISNAME"));
				objNewOrderDto.setIsServiceSummMandatory(rs.getInt("ISMANDATORY"));
				objNewOrderDto.setIsCommercial(rs.getInt("IS_COMMERCIAL"));
				if(rs.getString("EXPECTEDVALUE").equalsIgnoreCase("DROPDOWN"))
				{
				  lstServiceSummary = getServiceSummary(rs.getInt("ATTMASTERID"));
				  objNewOrderDto.setServiceSummary(lstServiceSummary);
				  objNewOrderDto.setProdExpectedValue(rs.getString("EXPECTEDVALUE"));
				}
				//lawkush Start
				else if(rs.getString("EXPECTEDVALUE").equalsIgnoreCase("LOV"))
				{
				  lstServiceSummary = getServiceSummary(rs.getInt("ATTMASTERID"));
				  objNewOrderDto.setServiceSummaryLov(lstServiceSummary);
				  objNewOrderDto.setProdExpectedValue(rs.getString("EXPECTEDVALUE"));
				}
				//lawkush End
				else
				{
				 objNewOrderDto.setProdExpectedValue(rs.getString("EXPECTEDVALUE"));
				}
				objNewOrderDto.setProdAttMaxLength(rs.getInt("MAXLENGTH"));
				objNewOrderDto.setMandatory(rs.getString("MANDATORY"));
				//[ROHIT START]
				//objNewOrderDto.setDefValue(rs.getString("ATTDEFAULTVAL"));
//				[ROHIT END]
				attdefaultval=rs.getString("ATTDEFAULTVAL");
				if(attdefaultval == null)
				{
					attdefaultval = "";
					objNewOrderDto.setDefValue(attdefaultval);
				}
				else
				{
					objNewOrderDto.setDefValue(rs.getString("ATTDEFAULTVAL"));
				}
				objNewOrderDto.setAttMasterId(rs.getLong("SERVICE_SUMMARY_ATT_ID"));
				objNewOrderDto.setAttributeKey(rs.getString("ATTRIBUTE_KEY"));
				objNewOrderDto.setLinkPopUpId(rs.getString("LINK_POPUP_ID"));
				objNewOrderDto.setFor_validation(rs.getString("FOR_VALIDATION"));
				objNewOrderDto.setIsServiceSummReadonly(rs.getInt("ISREADONLY"));	
				objNewOrderDto.setParntAttId(rs.getInt("PARENT_ATTRMASTERID"));
				objNewOrderDto.setIsParentAtt(rs.getInt("IS_PARENT_ATT"));
				listserviceAttMaster.add(objNewOrderDto);
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Fetching ServiceAttributeList  : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(getServiceAttMaster);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listserviceAttMaster;
	}
	public ArrayList<FieldAttibuteDTO> getServiceSummary(int serviceId) 
	{
		//		Added by nagarjuna
		String methodName="getServiceSummary",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement clbStmt =null;
		ResultSet rs = null;
		ArrayList<FieldAttibuteDTO> lstServiceSummary = new ArrayList<FieldAttibuteDTO>();
		FieldAttibuteDTO objNewOrderDto = null;
		
		try
		{
			connection=DbConnection.getConnectionObject();
			clbStmt= connection.prepareCall(sqlFetchServiceSummary);	
			clbStmt.setLong(1, serviceId);
			rs = clbStmt.executeQuery();
			while(rs.next())
			{
				objNewOrderDto =  new FieldAttibuteDTO();
				
				objNewOrderDto.setServiceSummaryValues(rs.getString("VALUE"));
				objNewOrderDto.setServiceSummaryText(rs.getString("TEXT"));
				lstServiceSummary.add(objNewOrderDto);
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Getting ServiceSummary  : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(clbStmt);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return lstServiceSummary;
	}
	public ArrayList<Entity> getEntityList(Entity entityData){
		//		Added by nagarjuna
		String methodName="getEntityList",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		ArrayList<Entity> list = new ArrayList<Entity>();
		Entity entity = null;
		Connection connection =null;
		PreparedStatement getEntity =null;
		ResultSet rsEntity = null;
		
		try{
			connection=DbConnection.getConnectionObject();
			
			getEntity= connection.prepareCall(sqlGetPOEntity);
			getEntity.setString(1,entityData.getEntityName());
			rsEntity = getEntity.executeQuery();
			
			while(rsEntity.next()){
				entity = new Entity();
				entity.setEntityId(rsEntity.getInt("ENTITYID"));
				entity.setEntityName(rsEntity.getString("ENTITYNAME"));
				entity.setEntityCode(rsEntity.getString("ENTITYCODE"));
				list.add(entity);
			}
		} catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Getting EntityList  : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsEntity);
				DbConnection.closePreparedStatement(getEntity);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				// TODO Auto-generated catch block
				//e.printStackTrace();
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
			}
		}
		
		return list;
		
		
	}
	
	public ArrayList<Entity> getEntityList1(){
		//		Added by nagarjuna
		String methodName="getEntityList1",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		ArrayList<Entity> list = new ArrayList<Entity>();
		Entity entity = null;
		Connection connection =null;
		PreparedStatement getEntity =null;
		ResultSet rsEntity = null;
		
		try{
			connection=DbConnection.getConnectionObject();
			
			getEntity= connection.prepareCall(sqlGetPOEntity1);			
			rsEntity = getEntity.executeQuery();			
			while(rsEntity.next()){
				entity = new Entity();
				entity.setEntityId(rsEntity.getInt("ENTITYID"));
				entity.setEntityName(rsEntity.getString("ENTITYNAME"));
				entity.setEntityCode(rsEntity.getString("ENTITYCODE"));
				list.add(entity);
			}
		} catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Getting EntityList1  : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsEntity);
				DbConnection.closePreparedStatement(getEntity);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		
		return list;
		
		
	}
	
	
	//	Method used for inserting CONTACT Details in tPOmaster,TattributeValues for Main Tab
	//[011] Start
	//public int insertPO(NewOrderBean newOrderBean,Map<String,String[]> poMap,int count,int updateFlag)
	public int insertPO(Connection connection,NewOrderBean newOrderBean,Map<String,String[]> poMap,int count,int updateFlag,long empID)
	//[011] End
	{
		//		Added by nagarjuna
		String methodName="insertPO",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		int finalStatus=0;
		//Connection connection =null;
		//CallableStatement getMaxPONumber =null;
		//CallableStatement setPOmaster =null;
		//CallableStatement setAddDetails =null;
		CallableStatement setPODetails = null;
		//int maxOrderValue=0;
		//int POStatus=0;
		//int MainStatus=0;
		String status=null;
		//String addStatus=null;
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat(AppConstants.DATE_FORMAT_PROC);
		
		try
		{
			//connection=DbConnection.getConnectionObject();
			//connection.setAutoCommit(false);
			int status1 = updateDemo(newOrderBean.getPoNumber(),newOrderBean.getNoOfDaysForDemo(),newOrderBean.getChkIsDemo() );
			for(int i=0;i<poMap.get("poDetailNo").length;i++)
			{
				//[011] Start
				//setPODetails = connection.prepareCall("{CALL IOE.SP_INSERT_PO_DETAILS(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)} ");
                //[135]
				setPODetails = connection.prepareCall("{CALL IOE.SP_INSERT_PO_DETAILS(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)} ");
				//[011] End
				//setPODetails = connection.prepareCall("{CALL IOE.SP_INSERT_PO_DETAILS1(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)} ");
				
				if(!poMap.get("poDetailNo")[i].toString().equalsIgnoreCase(""))
				{
					setPODetails.setLong(1, Long.parseLong(poMap.get("contactId")[i]));
					setPODetails.setInt(3, new Integer(poMap.get("poDetailNo")[i]).intValue());
					updateFlag = 2;
				}
				else
				{
					setPODetails.setLong(1, 0);
					setPODetails.setInt(3, 0);
					updateFlag = 1;
				}
				
				setPODetails.setInt (2, updateFlag);
				setPODetails.setDate(4, new java.sql.Date(simpleDateFormat.parse( poMap.get("poDate")[i]).getTime()));
				setPODetails.setDate(5,new java.sql.Date(simpleDateFormat.parse(poMap.get("poReceiveDate")[i]).getTime()) );
				if(poMap.get("contractStartDate")[i].equals("")) {
					setPODetails.setDate(6,null );
				} else {
					setPODetails.setDate(6,new java.sql.Date(simpleDateFormat.parse(poMap.get("contractStartDate")[i]).getTime()) );
				}
				if(poMap.get("contractEndDate")[i].equals("")) {
					setPODetails.setDate(7,null );
				} else {
					setPODetails.setDate(7,new java.sql.Date(simpleDateFormat.parse(poMap.get("contractEndDate")[i]).getTime()) );
				}
				
				setPODetails.setInt(8, new Integer(poMap.get("periodsInMonths")[i]).intValue());
				setPODetails.setDouble(9, Double.parseDouble(poMap.get("totalPOAmt")[i]));//(9, new Integer(poMap.get("totalPOAmt")[i]).intValue());
				setPODetails.setInt(10, new Integer(poMap.get("entity")[i]).intValue());
				setPODetails.setLong(11, new Long(poMap.get("orderNo")[i]).intValue());
				
				
				setPODetails.setLong(12,new Long(poMap.get("poDefault")[i]).intValue());
				setPODetails.setString(13, (poMap.get("poIssuedBy")[i]));
				setPODetails.setString(14, (poMap.get("poRemarks")[i]));
				setPODetails.setString(15, (poMap.get("poEmailId")[i]));
				if(poMap.get("custPoDetailNo")[i].equals(""))
				{
					setPODetails.setString(16, ("no value"));
				}
				else{
				setPODetails.setString(16, (poMap.get("custPoDetailNo")[i])); // Added by Saurabh
				if(poMap.get("custPoDate")[i].equals("")) {
					setPODetails.setDate(17,null );
				} else {
					setPODetails.setDate(17,new java.sql.Date(simpleDateFormat.parse(poMap.get("custPoDate")[i]).getTime()) );
				}
				//setPODetails.setLong(16,new Long(poMap.get("demoPeriod")[i]).intValue());
				
				
				
				setPODetails.registerOutParameter(18, java.sql.Types.INTEGER);
				setPODetails.registerOutParameter(19, java.sql.Types.INTEGER);
				setPODetails.registerOutParameter(20, java.sql.Types.VARCHAR);
				setPODetails.setLong(21,empID);
				//[135] starts
				setPODetails.setString(22, (poMap.get("ldClause")[i]));
				//[135] ends
				setPODetails.execute();
				status=setPODetails.getString(20);
			}
		  	if(status.equalsIgnoreCase("SUCCESS"))
				{
					//connection.commit();
					finalStatus=1;
				}
				else
				{
					//connection.rollback();
					finalStatus=0;
				}
		}
	}
		catch(Exception ex )
		{
			/*try {
				connection.rollback();
			} catch (SQLException e) {
				Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"SQL Exception While Inserting PO  : "+msg, logToFile, logToConsole);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}*/
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Inserting PO  : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeCallableStatement(setPODetails);
				//DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return finalStatus;
	}
	
	//Method used for Fetching Contact Details from the Database
	public ArrayList<PoDetailsDTO> getPODetail(long orderNo) 
	{
		//		Added by nagarjuna
		String methodName="getPODetail",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement getPODetails =null;
		PreparedStatement getPOMaster =null;
		ResultSet rsPODetails = null;
		ResultSet rsPOMaster = null;
		int count=1;
		PoDetailsDTO objNewOrderDto = null;
		int accountID = 0;
		ArrayList<PoDetailsDTO> listPODetails = new ArrayList<PoDetailsDTO>();
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat(AppConstants.DATE_FORMAT_PROC);
		try
		{
			connection=DbConnection.getConnectionObject();
			
			getPOMaster= connection.prepareCall(sqlGetPOMaster);
			getPOMaster.setLong(1,orderNo);
			rsPOMaster = getPOMaster.executeQuery();
			
			while(rsPOMaster.next()){
				accountID = (rsPOMaster.getInt("ACCOUNTID"));
			}
			getPODetails= connection.prepareCall(sqlGetPODetail);
			getPODetails.setLong(1,orderNo);
			rsPODetails = getPODetails.executeQuery();
			while(rsPODetails.next())
			{
				objNewOrderDto =  new PoDetailsDTO();
				if(rsPODetails.getString("CUSTPONUMBER")==null )
				{
					objNewOrderDto.setCustPoDetailNo("no value"); //by saurabh
				}
				else
				{
					objNewOrderDto.setCustPoDetailNo(rsPODetails.getString("CUSTPONUMBER"));
				}
				if(rsPODetails.getDate("CUSTPODATE")==null)
				{
					objNewOrderDto.setCustPoDate("");
				}
				else
				{
					objNewOrderDto.setCustPoDate(simpleDateFormat.format(rsPODetails.getDate("CUSTPODATE")));
				}
				objNewOrderDto.setPoDetailNo(rsPODetails.getString("PODETAILNUMBER"));
				objNewOrderDto.setPoDate(simpleDateFormat.format(rsPODetails.getDate("PODATE")));
				objNewOrderDto.setPoReceiveDate(simpleDateFormat.format(rsPODetails.getDate("PORECEIVEDATE")));
				if(rsPODetails.getDate("CONTRACTSTARTDATE")==null){
					objNewOrderDto.setContractStartDate("");
				}else {
					objNewOrderDto.setContractStartDate(simpleDateFormat.format(rsPODetails.getDate("CONTRACTSTARTDATE")));
				}
				if(rsPODetails.getDate("CONTRACTENDDATE")==null){
					objNewOrderDto.setContractEndDate("");
				}else {
					objNewOrderDto.setContractEndDate(simpleDateFormat.format(rsPODetails.getDate("CONTRACTENDDATE")));
				}
				objNewOrderDto.setTotalPoAmt(BigDecimal.valueOf(rsPODetails.getDouble("POAMOUNT")).toPlainString());//changes for Exponential number.
				objNewOrderDto.setEntityID(rsPODetails.getInt("LEGALENTITY"));
				objNewOrderDto.setEntity(rsPODetails.getString("ENTITYNAME"));
				objNewOrderDto.setPeriodsInMonths(rsPODetails.getString("CONTRACTPERIOD"));
				
				
				objNewOrderDto.setDefaultPO(rsPODetails.getString("ISDEFAULTPO"));
				objNewOrderDto.setPoDemoContractPeriod(rsPODetails.getString("DEMOCONTRACTPERIOD"));
				objNewOrderDto.setPoEmailId(rsPODetails.getString("EMAILID"));
				objNewOrderDto.setPoRemarks(rsPODetails.getString("POREMARKS"));
				objNewOrderDto.setPoIssueBy(rsPODetails.getString("ISSUEDBY"));
				objNewOrderDto.setNoofuses(rsPODetails.getInt("NO_OF_USES"));
				
				
				objNewOrderDto.setAccountID(accountID);
				objNewOrderDto.setContactId(new Long(count++));
				//[135] starts 
				
			    objNewOrderDto.setLdClause(rsPODetails.getString("LDCLAUSE"));
				
				//[135] ends
				
				listPODetails.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Getting PODetails  : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsPODetails);
				DbConnection.closeResultset(rsPOMaster);
				DbConnection.closeCallableStatement(getPODetails);
				DbConnection.closePreparedStatement(getPOMaster);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listPODetails;
	}
	
	public ArrayList<ContactDTO> searchContactTypes(ContactDTO objDto) throws Exception 
	{
		//		Added by nagarjuna
		String methodName="searchContactTypes",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		ContactDTO objConDto = null;
		ArrayList<ContactDTO> lstContactTypeList = new ArrayList<ContactDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
			callstmt= connection.prepareCall(sqlSearchContactTypes);	
			callstmt.setString(1, objDto.getContactTypeName());
			rs = callstmt.executeQuery();
			while(rs.next())
			{
				objConDto =  new ContactDTO();
				objConDto.setContactTypeName(rs.getString("CONTACTTYPENAME"));
				objConDto.setContactTypeId(rs.getString("CONTACTTYPEID"));
				lstContactTypeList.add(objConDto);
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Searching ContactTypes  : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return lstContactTypeList;
	}
	//for searching Salutation
	public ArrayList<ContactDTO> searchSalutationList(ContactDTO objDto) throws Exception 
	{
		//		Added by nagarjuna
		String methodName="searchSalutationList",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		ContactDTO objConDto = null;
		ArrayList<ContactDTO> salutationList = new ArrayList<ContactDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
			callstmt= connection.prepareCall(sqlSearchSalutation);	
			callstmt.setString(1, objDto.getSalutationName());
			rs = callstmt.executeQuery();
			while(rs.next())
			{
				objConDto =  new ContactDTO();
				objConDto.setSalutationName(rs.getString("SALUTATION"));
				objConDto.setSalutationId(rs.getInt("ID"));
				salutationList.add(objConDto);
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Searching SalutationList  : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{DbConnection.closeResultset(rs);	
			DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return salutationList;
	}
//Start[019]
	public ArrayList<NewOrderDto> searchCountryList(PagingDto objDto) throws Exception 
	{
		//		Added by nagarjuna
		String methodName="searchCountryList",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		NewOrderDto objConDto = new NewOrderDto();
		ArrayList<NewOrderDto> CountryList = new ArrayList<NewOrderDto>();
		int recordCount;
		try
		{
			connection=DbConnection.getConnectionObject();
			callstmt= connection.prepareCall(sqlSearchCountry);	
			callstmt.setString(1, objDto.getCountyName());
			callstmt.setInt(2, objDto.getStateCode());
			callstmt.setString(3,objDto.getSortBycolumn());
			callstmt.setString(4,objDto.getSortByOrder());
			callstmt.setInt(5, objDto.getStartIndex());
			callstmt.setInt(6, objDto.getEndIndex());
			
			rs = callstmt.executeQuery();
			while(rs.next())
			{
				objConDto =  new NewOrderDto();
				objConDto.setCountyName(rs.getString("COUNTRY_NAME"));
				objConDto.setCountyCode(rs.getInt("COUNTRY_CODE"));
				recordCount=rs.getInt("FULL_REC_COUNT");
				objConDto.getPagingSorting().setRecordCount(recordCount);
				objConDto.setMaxPageNo(objConDto.getPagingSorting().getMaxPageNumber());
				CountryList.add(objConDto);
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Searching CountryList  : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);	
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return CountryList;
	}
	
	public ArrayList<NewOrderDto> searchCountryList1(PagingDto objDto) throws Exception 
	{
		//		Added by nagarjuna
		String methodName="searchCountryList1",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		NewOrderDto objConDto = new NewOrderDto();
		ArrayList<NewOrderDto> CountryList = new ArrayList<NewOrderDto>();
		int recordCount;
		try
		{
			connection=DbConnection.getConnectionObject();
			callstmt= connection.prepareCall(sqlSearchCountry1);			
			callstmt.setInt(1, objDto.getStateCode());			
			rs = callstmt.executeQuery();
			while(rs.next())
			{
				objConDto =  new NewOrderDto();
				objConDto.setCountyName(rs.getString("COUNTRY_NAME"));
				objConDto.setCountyCode(rs.getInt("COUNTRY_CODE"));				
				CountryList.add(objConDto);
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Searching CountryList1  : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);	
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return CountryList;
	}
	
//	for searching State
	public ArrayList<NewOrderDto> searchStateList(PagingDto objDto) throws Exception 
	{
		//Added by nagarjuna
		String methodName="searchStateList",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		NewOrderDto objConDto = new NewOrderDto();
		ArrayList<NewOrderDto> StateList = new ArrayList<NewOrderDto>();
		int recordCount;
		try
		{
			connection=DbConnection.getConnectionObject();
			callstmt= connection.prepareCall(sqlSearchState);			
			callstmt.setString(1, objDto.getStateName());
			callstmt.setInt(2, objDto.getCityCode());
			callstmt.setString(3,objDto.getSortBycolumn());
			callstmt.setString(4, objDto.getSortByOrder());
			callstmt.setInt(5, objDto.getStartIndex());
			callstmt.setInt(6, objDto.getEndIndex());
			rs = callstmt.executeQuery();
			while(rs.next())
			{
				objConDto =  new NewOrderDto();
				objConDto.setStateName(rs.getString("STATE_NAME"));
				objConDto.setStateCode(rs.getInt("STATE_ID"));
				recordCount=rs.getInt("FULL_REC_COUNT");
				objConDto.getPagingSorting().setRecordCount(recordCount);
				objConDto.setMaxPageNo(objConDto.getPagingSorting().getMaxPageNumber());
				StateList.add(objConDto);
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Searching StateList  : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);	
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return StateList;
	}
	public ArrayList<ContactDTO> searchStateList1(PagingDto objDto) throws Exception 
	{
		//Added by nagarjuna
		String methodName="searchStateList1",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		ContactDTO objConDto = null;
		ArrayList<ContactDTO> StateList = new ArrayList<ContactDTO>();
		int recordCount;
		try
		{
			connection=DbConnection.getConnectionObject();
			callstmt= connection.prepareCall(sqlSearchState1);				
			callstmt.setInt(1, objDto.getCityCode());			
			rs = callstmt.executeQuery();
			while(rs.next())
			{
				objConDto =  new ContactDTO();
				objConDto.setStateName(rs.getString("STATE_NAME"));
				objConDto.setStateCode(rs.getInt("STATE_ID"));				
				StateList.add(objConDto);
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Searching StateList1  : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);	
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return StateList;
	}
//	for searching Country
	public ArrayList<NewOrderDto> searchCityList(PagingDto objDto) throws Exception 
	{
		//Added by nagarjuna
		String methodName="searchCityList",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		NewOrderDto objConDto = new NewOrderDto();
		ArrayList<NewOrderDto> CityList = new ArrayList<NewOrderDto>();
		int recordCount;
		try
		{
			connection=DbConnection.getConnectionObject();
			callstmt= connection.prepareCall(sqlSearchCity);	
			callstmt.setString(1, objDto.getCityName());
			//callstmt.setInt(2, objDto.getStateCode());
			callstmt.setString(2,objDto.getSortBycolumn());
			callstmt.setString(3, objDto.getSortByOrder());
			callstmt.setInt(4, objDto.getStartIndex());
			callstmt.setInt(5,objDto.getEndIndex());
			rs = callstmt.executeQuery();
			while(rs.next())
			{
				objConDto =  new NewOrderDto();
				objConDto.setCityName(rs.getString("CITY_NAME"));
				objConDto.setCityCode(rs.getInt("CITY_ID"));
				recordCount=rs.getInt("FULL_REC_COUNT");
				objConDto.getPagingSorting().setRecordCount(recordCount);
				objConDto.setMaxPageNo(objConDto.getPagingSorting().getMaxPageNumber());
				CityList.add(objConDto);
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Searching CityList  : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);	
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return CityList;
	}
	//End[019]
	//[015] Start
	public ArrayList<ContactDTO> searchCityList1(PagingDto objDto) throws Exception 
	{
		//Added by nagarjuna
		String methodName="searchCityList1",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		ContactDTO objConDto = null;
		ArrayList<ContactDTO> CityList = new ArrayList<ContactDTO>();
		int recordCount;
		try
		{
			connection=DbConnection.getConnectionObject();
			callstmt= connection.prepareCall(sqlSearchCity1);	
			callstmt.setString(1, objDto.getCityName());			
			rs = callstmt.executeQuery();
			while(rs.next())
			{
				objConDto =  new ContactDTO();
				objConDto.setCityName(rs.getString("CITY_NAME"));
				objConDto.setCityCode(rs.getInt("CITY_ID"));				
				CityList.add(objConDto);
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Searching CityList1  : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);	
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return CityList;
	}
	public static String sqlSearchCity2="{call IOE.SP_SEARCH_CITY3(?)}";
	public ArrayList<NewOrderDto> searchCityList2(PagingDto objDto) throws Exception 
	{
		//Added by nagarjuna
		String methodName="searchCityList2",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		NewOrderDto objConDto = new NewOrderDto();
		ArrayList<NewOrderDto> CityList = new ArrayList<NewOrderDto>();
		int recordCount;
		try
		{
			connection=DbConnection.getConnectionObject();
			callstmt= connection.prepareCall(sqlSearchCity2);	
			callstmt.setString(1, objDto.getCityName());			
			rs = callstmt.executeQuery();
			while(rs.next())
			{
				objConDto =  new NewOrderDto();
				objConDto.setCityName(rs.getString("CITY_NAME"));
				objConDto.setCityCode(rs.getInt("CITY_ID"));				
				CityList.add(objConDto);
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Searching CityList2  : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);	
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return CityList;
	}
	public ArrayList<NewOrderDto> searchPincodeList(PagingDto objDto) throws Exception 
	{
		//		Added by nagarjuna
		String methodName="searchPincodeList",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		NewOrderDto objConDto = new NewOrderDto();
		ArrayList<NewOrderDto> PinList = new ArrayList<NewOrderDto>();
		int recordCount=0;
		try
		{
			connection=DbConnection.getConnectionObject();
			callstmt= connection.prepareCall(sqlSearchPincode);	
			callstmt.setInt(3, objDto.getCityCode());
			callstmt.setInt(2, objDto.getStateCode());
			callstmt.setString(1,objDto.getPinNo());
			
			rs = callstmt.executeQuery();
			while(rs.next())
			{
				objConDto =  new NewOrderDto();
				objConDto.setPinCodeId(rs.getInt("PINCODE_ID"));
				objConDto.setPinCode(rs.getInt("PINCODE"));
				PinList.add(objConDto);
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Searching PinCodeList  : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);	
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return PinList;
	}
	//[015] End
	public ArrayList<ProductCatelogDTO> getTProductAttDetail(long serviceNo, long serviceTypeId) throws Exception 
	{
		//Added by nagarjuna
		String methodName="getTProductAttDetail",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		String query=null;
		ProductCatelogDTO objConDto = null;
		ArrayList<ProductCatelogDTO> lstAttTypeList = new ArrayList<ProductCatelogDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
		/*	Statement stmt=connection.createStatement();
			//query="select *   from ioe.TPRODUCTATTVALUE where LABELATTID='"+serviceNo+"'"; ///
			query="select *   from ioe.TPRODUCTATTVALUE where SERVICEDETAILID="+serviceNo;
			String flag="new";
			rs=stmt.executeQuery(query);
			objConDto =  new NewOrderDto();
			if(rs.next())
			{
				flag="update";
				do
				{
					objConDto.setProdAttributeLabel(rs.getString("LABELATTID"));
				    objConDto.setProdAttributeValue(rs.getString("LABELATTVALUE"));
				    objConDto.setServiceDetailID(rs.getInt("SERVICEDETAILID"));
				
				}while(rs.next());
			}*/
			ArrayList<FieldAttibuteDTO> lstAttributeLabelValues = null;
			callstmt= connection.prepareCall(sqlGetTProductAttributeDetails);	
			callstmt.setLong(1, serviceTypeId);
			callstmt.setLong(2, serviceNo);
			rs = callstmt.executeQuery();
			while(rs.next())
			{
				objConDto = new ProductCatelogDTO();
				objConDto.setAttMasterId(rs.getLong("ATTMASTERID"));
				objConDto.setAttMasterName(rs.getString("ATTDESCRIPTION"));
				objConDto.setProdAttributeValue(rs.getString("LABELATTVALUE"));
//				[082] start
				objConDto.setProdAttributeMaxlength(rs.getString("MAXLENGTH"));
				//[082]end
				objConDto.setExpectedValue(rs.getString("EXPECTEDVALUE"));
				
				if(rs.getString("EXPECTEDVALUE").equalsIgnoreCase("DROPDOWN"))
				{
				  lstAttributeLabelValues = getAttributeLabelValues(rs.getInt("ATTMASTERID"));
					//lstServiceSummary = getAttributeLabelValues(110);
				  objConDto.setServiceSummary(lstAttributeLabelValues);
				  objConDto.setExpectedValue(rs.getString("EXPECTEDVALUE"));
				}
				else
				{
				  objConDto.setExpectedValue(rs.getString("EXPECTEDVALUE"));
				}
				objConDto.setMandatory(rs.getString("MANDATORY"));
				objConDto.setCommercial(rs.getInt("IS_COMMERCIAL"));
				objConDto.setSubchangetypeNetworkChangeEditable(rs.getInt("SUBCHANGETYPE_NETWORK_CHANGE_EDITABLE"));
				lstAttTypeList.add(objConDto);
			}
		
		
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error    : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);	
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				//e.printStackTrace();
			}
		}
		return lstAttTypeList;
	}	
	public ArrayList<FieldAttibuteDTO> getAttributeLabelValues(int serviceId) 
	{
		//		Added by nagarjuna
		String methodName="getAttributeLabelValues",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement clbStmt =null;
		ResultSet rs = null;
		ArrayList<FieldAttibuteDTO> lstServiceSummary = new ArrayList<FieldAttibuteDTO>();
		FieldAttibuteDTO objNewOrderDto = null;
		
		try
		{
			connection=DbConnection.getConnectionObject();
			clbStmt= connection.prepareCall(sqlFetchAttLabelValues);	
			clbStmt.setLong(1, serviceId);
			rs = clbStmt.executeQuery();
			while(rs.next())
			{
				objNewOrderDto =  new FieldAttibuteDTO();
				
				objNewOrderDto.setServiceSummaryValues(rs.getString("VALUE"));
				objNewOrderDto.setServiceSummaryText(rs.getString("TEXT"));
				lstServiceSummary.add(objNewOrderDto);
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Getting AttributeLabelValue   : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);	
				DbConnection.closeCallableStatement(clbStmt);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return lstServiceSummary;
	}
	public ArrayList<PoDetailsDTO> getPOEntity(String poDetailNo) 
	{
		//		Added by nagarjuna
		String methodName="getPOEntity",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		PreparedStatement getContactDetails =null;
		PreparedStatement getContactMaster =null;
		ResultSet rsEntity = null;
		int count=1;
		PoDetailsDTO objNewOrderDto = null;
		ArrayList<PoDetailsDTO> listPOEntity = new ArrayList<PoDetailsDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
			getContactDetails= connection.prepareCall(sqlGetPOEntityForBilling);
			getContactDetails.setLong(1,Long.parseLong(poDetailNo));
			rsEntity = getContactDetails.executeQuery();
			while(rsEntity.next())
			{
				objNewOrderDto =  new PoDetailsDTO();
				objNewOrderDto.setEntity(rsEntity.getString("ENTITYNAME"));
				objNewOrderDto.setEntityID(rsEntity.getInt("ENTITYID"));
				objNewOrderDto.setIsFLEFlag(rsEntity.getInt("ISFLE"));
				listPOEntity.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Getting POEntity   : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsEntity);
				DbConnection.closePreparedStatement(getContactDetails);
				DbConnection.closePreparedStatement(getContactMaster);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listPOEntity;
	}
//[011] Start	
//public int insertTproductATTDetail(NewOrderDto objDto) throws Exception
public int insertTproductATTDetail(NewOrderDto objDto,long empID) throws Exception
//[011] End
{
	//	Added by nagarjuna
	String methodName="insertTproductATTDetail",  msg="";
	boolean logToFile=true, logToConsole=true;
	//	End nagarjuna
	Connection connection =null;
	CallableStatement callstmt =null;
	 int status = 0;
	try
	{
		
		connection=DbConnection.getConnectionObject();
		connection.setAutoCommit(false);
		String err="";
		for (int i=0;i<objDto.getProdAttributeLabelArray().length;i++) 
		{
			objDto.setProdAttributeLabel(objDto.getProdAttributeLabelArray()[i].toString());
			objDto.setProdAttributeValue(objDto.getProdAttributeValueArray()[i].toString());
		
			callstmt= connection.prepareCall(sqlInsertTProductAttributeDetails);	
			callstmt.setString(1, objDto.getProdAttributeValue());
			callstmt.setString(2, Utility.trimIfNotNull(objDto.getProdAttributeLabel()));
			callstmt.setLong(3, objDto.getServiceDetailID());
			callstmt.registerOutParameter(4, java.sql.Types.INTEGER);
			callstmt.registerOutParameter(5, java.sql.Types.INTEGER);
			callstmt.registerOutParameter(6, java.sql.Types.VARCHAR);
			//[011] Start
			callstmt.setLong(7,empID);
			//[011] End
			callstmt.execute();
			err = callstmt.getString(6);	
			if(!err.equalsIgnoreCase("SUCCESS"))
				break;
		}

		if(err.equalsIgnoreCase("SUCCESS"))
		{
			connection.commit();
			status=1;
		}
		else
		{
			connection.rollback();
		}
		
	}
	catch(Exception ex )
	{
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error   : "+msg, logToFile, logToConsole);//added by nagarjuna
		connection.rollback();
		//ex.printStackTrace();	
	}
	finally
	{
		try 
		{
				
			DbConnection.closeCallableStatement(callstmt);
			DbConnection.freeConnection(connection);
		} 
		catch (SQLException e) 
		{
			Utility.LOG(true, true, "Exception"+e);
			// TODO Auto-generated catch block
			//e.printStackTrace();
		}
	}
		return status;
}

	//	Method used for Fetching Licence Company on the basis of Entity from the Database through ajax
	public ArrayList<ProductCatelogDTO> populateLicCompany(long entityID,int serviceDetailID,int productId) 
	{
		//Added by nagarjuna
		String methodName="populateLicCompany",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		PreparedStatement getLicCompany =null;

		ResultSet rsLicCompany = null;
		int count=1;
		ProductCatelogDTO objNewOrderDto = null;
		ArrayList<ProductCatelogDTO> listLicCompany= new ArrayList<ProductCatelogDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
			getLicCompany= connection.prepareCall(sqlGetLicCompany);
			getLicCompany.setLong(1,entityID);
			getLicCompany.setInt(2,serviceDetailID);
			getLicCompany.setLong(3,productId);
			rsLicCompany = getLicCompany.executeQuery();
			while(rsLicCompany.next())
			{
				objNewOrderDto =  new ProductCatelogDTO();
				objNewOrderDto.setLicCompanyName(rsLicCompany.getString("LCOMPANYNAME"));
				objNewOrderDto.setLicCompanyID(rsLicCompany.getInt("LCOMPANYID"));

				listLicCompany.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Populating Lic Companies   : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsLicCompany);	
				DbConnection.closePreparedStatement(getLicCompany);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception"+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listLicCompany;
	}
	
	//[016] Start
	public ArrayList<NewOrderDto> populateOldLocationDetails (long serviceId)
	{
		//Added by nagarjuna
		String methodName="populateOldLocationDetails",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement getLocationMaster=null;
		ResultSet rs = null;
		ArrayList<NewOrderDto> listLocationMaster = new ArrayList<NewOrderDto>();
		NewOrderDto objNewOrderDto = null;
		
		try
			{
			connection=DbConnection.getConnectionObject();
			getLocationMaster= connection.prepareCall(sqlFetchServiceLocationDetails);	
			getLocationMaster.setLong(1,serviceId);
			rs = getLocationMaster.executeQuery();
			while(rs.next())
			{
			objNewOrderDto =  new NewOrderDto();
			
			objNewOrderDto.setToaddress(rs.getString("TO_ADDRESS"));
			objNewOrderDto.setFaddress(rs.getString("FROM_ADDRESS"));
			objNewOrderDto.setSelectedPriLocType(rs.getInt("PRIMARYLOCATIONTYPE"));
			objNewOrderDto.setSelectedSecLocType(rs.getInt("SECONDARYLOCATIONTYPE"));
			int primaryLocation=objNewOrderDto.getSelectedPriLocType();
			int secondaryLocation=objNewOrderDto.getSelectedSecLocType();
			if(primaryLocation==1)
			{
				objNewOrderDto.setSelectedPrimaryBCP(rs.getInt("PRIMARYLOCATIONID"));
			}
			else if(primaryLocation==2)
			{
				objNewOrderDto.setSelectedPNLocation(rs.getInt("PRIMARYLOCATIONID"));
			}
			if(secondaryLocation==1)
			{
				objNewOrderDto.setSelectedSecBCP(rs.getInt("SECONDARYLOCATIONID"));
			}
			else if(secondaryLocation==2)
			{
				objNewOrderDto.setSelectedSNLocation(rs.getInt("SECONDARYLOCATIONID"));
			}	
			listLocationMaster.add(objNewOrderDto);
			
		}
			
	}
	catch(Exception ex )
	{
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Populating OLD Location Details   : "+msg, logToFile, logToConsole);//added by nagarjuna
		//ex.printStackTrace();	
	}
	finally
	{
		try 
		{
			DbConnection.closeResultset(rs);	
			DbConnection.closeCallableStatement(getLocationMaster);
			DbConnection.freeConnection(connection);
		} 
		catch (Exception e) 
		{
			Utility.LOG(true, true, "Exception"+e);
			// TODO Auto-generated catch block
			//e.printStackTrace();
		}
	}
	return listLocationMaster;
	}
	
	//[016] End

//	Method used for Fetching Customer PO Deatil Number on the basis of Entity from the Database through ajax
	public ArrayList<NewOrderDto> populateCustPoDetailNo(long PONumber) 
	{
		//Added by nagarjuna
		String methodName="populateCustPoDetailNo",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		PreparedStatement getCustPODetailNo =null;

		ResultSet rs = null;
		int count=1;
		NewOrderDto objNewOrderDto = null;
		ArrayList<NewOrderDto> listCustPODetail= new ArrayList<NewOrderDto>();
		try
		{
			connection=DbConnection.getConnectionObject();
			getCustPODetailNo= connection.prepareCall(sqlgetCustPoDetailNo);
			getCustPODetailNo.setLong(1,PONumber);
			rs = getCustPODetailNo.executeQuery();
			while(rs.next())
			{
				objNewOrderDto =  new NewOrderDto();
				if(rs.getString("CUSTPONUMBER")==null || rs.getString("CUSTPONUMBER") == " ")
				{
					objNewOrderDto.setCustPoDetailNo("No Customer PO Detail");
				}
				else
				{
					objNewOrderDto.setCustPoDetailNo(rs.getString("CUSTPONUMBER"));
				}
				listCustPODetail.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Populating Customer PO Details No  : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);	
				DbConnection.closePreparedStatement(getCustPODetailNo);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception"+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listCustPODetail;
	}

	
	//	Method used for Fetching Store Details from the Database through ajax
	public ArrayList<ProductCatelogDTO> populateStoreList(int licenseCo) 
	{
		//Added by nagarjuna
		String methodName="populateStoreList",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		PreparedStatement getStore =null;

		ResultSet rsStoreList = null;
		int count=1;
		ProductCatelogDTO objNewOrderDto = null;
		ArrayList<ProductCatelogDTO> listStore= new ArrayList<ProductCatelogDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
			getStore= connection.prepareCall(sqlGetStore);
			getStore.setInt(1, licenseCo);
			rsStoreList = getStore.executeQuery();
			while(rsStoreList.next())
			{
				objNewOrderDto =  new ProductCatelogDTO();
				objNewOrderDto.setStoreName(rsStoreList.getString("STORENAME"));
				objNewOrderDto.setStoreID(rsStoreList.getInt("STOREID"));

				listStore.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Populating StoreList   : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsStoreList);
				DbConnection.closePreparedStatement(getStore);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception"+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listStore;
	}
	/*Function		:populateHardwareType
	 * return type	:ArrayList<NewOrderDto>
	 * @Author		:Anil Kumar
	 * Date			:25-feb-11
	 * purpose		:To fetch Hardware type list
	 * */

	public ArrayList<ProductCatelogDTO> populateHardwareType()throws Exception {
		
		//Added by nagarjuna
		String methodName="populateHardwareType",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		PreparedStatement getHardwareType =null;

		ResultSet rsHardwareTypeList = null;
		//int count=1;
		ProductCatelogDTO objNewOrderDto = null;
		ArrayList<ProductCatelogDTO> listHardwareType= new ArrayList<ProductCatelogDTO>();
		try{
			connection=DbConnection.getConnectionObject();
			getHardwareType= connection.prepareCall(sqlGetHardwareType);
			rsHardwareTypeList = getHardwareType.executeQuery();
			while(rsHardwareTypeList.next()){
				objNewOrderDto =  new ProductCatelogDTO();
				objNewOrderDto.setHardwaretypeId(rsHardwareTypeList.getInt("HARDWARETYPEID"));
				objNewOrderDto.setHardwaretypeName(rsHardwareTypeList.getString("HARDWARETYPENAME"));				
				listHardwareType.add(objNewOrderDto);
			}
		}catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Populating HardWareType   : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}finally{
			try{
				DbConnection.closeResultset(rsHardwareTypeList);
				DbConnection.closePreparedStatement(getHardwareType);
				DbConnection.freeConnection(connection);
			}catch (SQLException e){
				Utility.LOG(true, true, "Exception"+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listHardwareType;
	}
	/*Function		:populateNatureOfSale
	 * return type	:ArrayList<NewOrderDto>
	 * @Author		:Anil Kumar
	 * Date			:25-feb-11
	 * purpose		:To fetch nature of sale list
	 * */

	public ArrayList<ProductCatelogDTO> populateNatureOfSale()throws Exception 
	{
//		Added by nagarjuna
		String methodName="populateNatureOfSale",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		PreparedStatement psSaleNature =null;

		ResultSet rsSaleNatureList = null;
		//int count=1;
		ProductCatelogDTO objNewOrderDto = null;
		ArrayList<ProductCatelogDTO> listSaleNature= new ArrayList<ProductCatelogDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
			psSaleNature= connection.prepareCall(sqlGetSaleNature);
			rsSaleNatureList = psSaleNature.executeQuery();
			while(rsSaleNatureList.next())
			{
				objNewOrderDto =  new ProductCatelogDTO();
				objNewOrderDto.setSaleNatureId(rsSaleNatureList.getInt("SALENATUREID"));
				objNewOrderDto.setSaleNatureName(rsSaleNatureList.getString("SALENATURENAME"));				

				listSaleNature.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Populating Nature of sale   : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsSaleNatureList);
				DbConnection.closePreparedStatement(psSaleNature);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, "Exception"+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listSaleNature;
	}
	/*Function		:populateSaleType
	 * return type	:ArrayList<NewOrderDto>
	 * @Author		:Anil Kumar
	 * Date			:25-feb-11
	 * purpose		:To fetch type of sale list
	 * */

	public ArrayList<ProductCatelogDTO> populateSaleType(String billFormat)throws Exception 
	{
		//Added by nagarjuna
		String methodName="populateSaleType",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		PreparedStatement psSaleType =null;

		ResultSet rsSaleTypeList = null;
		//int count=1;
		ProductCatelogDTO objNewOrderDto = null;
		ArrayList<ProductCatelogDTO> listSaleType= new ArrayList<ProductCatelogDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
			psSaleType= connection.prepareCall(sqlGetSaleType);
			psSaleType.setString(1, billFormat);
			rsSaleTypeList = psSaleType.executeQuery();
			while(rsSaleTypeList.next())
			{
				objNewOrderDto =  new ProductCatelogDTO();
				objNewOrderDto.setSaleTypeId(rsSaleTypeList.getInt("SALETYPEID"));
				objNewOrderDto.setSaleTypeName(rsSaleTypeList.getString("SALETYPENAME"));				

				listSaleType.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Populating Sale Type   : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsSaleTypeList);
				DbConnection.closePreparedStatement(psSaleType);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, "Exception"+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listSaleType;
	}
	/*Function		:populateFormAvailable
	 * return type	:ArrayList<NewOrderDto>
	 * @Author		:Anil Kumar
	 * Date			:25-feb-11
	 * purpose		:To fetch form available list
	 * */

	public ArrayList<ProductCatelogDTO> populateFormAvailable()throws Exception 
	{
		//Added by nagarjuna
		String methodName="populateFormAvailable",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		PreparedStatement psFormAvail =null;

		ResultSet rsFormAvailList = null;
		//int count=1;
		ProductCatelogDTO objNewOrderDto = null;
		ArrayList<ProductCatelogDTO> listFormAvail= new ArrayList<ProductCatelogDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
			psFormAvail= connection.prepareCall(sqlGetFormAvailble);			
			rsFormAvailList = psFormAvail.executeQuery();
			while(rsFormAvailList.next())
			{
				objNewOrderDto =  new ProductCatelogDTO();
				objNewOrderDto.setFormId(rsFormAvailList.getInt("FORMID"));
				objNewOrderDto.setFormName(rsFormAvailList.getString("FORMNAME"));				

				listFormAvail.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error    : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsFormAvailList);
				DbConnection.closePreparedStatement(psFormAvail);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, "Exception"+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listFormAvail;
	}
	//	Method used for Fetching Dispatch Address Code from the Database through ajax
	public ArrayList<NewOrderDto> populateDispatchCode(long accountID) 
	{
		//Added by nagarjuna
		String methodName="populateDispatchCode",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		PreparedStatement getlistDC =null;

		ResultSet rsListDC = null;
		int count=1;
		NewOrderDto objNewOrderDto = null;
		ArrayList<NewOrderDto> listDC = new ArrayList<NewOrderDto>();
		try
		{
			connection=DbConnection.getConnectionObject();
			getlistDC= connection.prepareCall(sqlGetDispatchAddressCode);
			getlistDC.setLong(1,accountID);
			rsListDC = getlistDC.executeQuery();
			while(rsListDC.next())
			{
				objNewOrderDto =  new NewOrderDto();
				objNewOrderDto.setDispatchAddressID(rsListDC.getInt("DISPATCH_ADDRESS_CODE"));
				objNewOrderDto.setDispatchAddressName(rsListDC.getString("DISPATCHNAME"));				
				if(rsListDC.getInt("ISDEFAULT") == 1){
					objNewOrderDto.setDefaultDispatchAddForAccID(rsListDC.getInt("DISPATCH_ADDRESS_CODE"));
				}
				

				listDC.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Populating DispatchCode   : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsListDC);
				DbConnection.closePreparedStatement(getlistDC);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception"+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listDC;
	}
	
	//	Method used for Fetching Dispatch Address Code from the Database through ajax
	public ArrayList<ProductCatelogDTO> populateDispatchAddress(long dispatchAddressID) 
	{
		//Added by nagarjuna
		String methodName="populateDispatchAddress",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		PreparedStatement getDispatchAddress=null;

		ResultSet rsDispatchAddress  = null;
		//int count=1;
		ProductCatelogDTO objNewOrderDto = null;
		SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy");
		ArrayList<ProductCatelogDTO> listDispatchAddress = new ArrayList<ProductCatelogDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
			getDispatchAddress= connection.prepareCall(sqlGetDispatchAddress);
			getDispatchAddress.setLong(1,dispatchAddressID);
			rsDispatchAddress = getDispatchAddress.executeQuery();
			while(rsDispatchAddress.next())
			{
				objNewOrderDto =  new ProductCatelogDTO();
				objNewOrderDto.setDispatchAddressID(rsDispatchAddress.getInt("DISPATCH_ADDRESS_CODE"));
				objNewOrderDto.setDispatchAddress1(rsDispatchAddress.getString("ADDRESS1"));
				objNewOrderDto.setDispatchAddress2(rsDispatchAddress.getString("ADDRESS2"));
				objNewOrderDto.setDispatchAddress3(rsDispatchAddress.getString("ADDRESS3"));
				objNewOrderDto.setDispatchCityName(rsDispatchAddress.getString("CITY_ID"));
				objNewOrderDto.setDispatchStateName(rsDispatchAddress.getString("STATE_ID"));
				objNewOrderDto.setDispatchCountyName(rsDispatchAddress.getString("COUNTRY_CODE"));
				objNewOrderDto.setDispatchPhoneNo(rsDispatchAddress.getString("TELEPHONENO"));
				objNewOrderDto.setDispatchPinNo(rsDispatchAddress.getString("PIN"));
				if(rsDispatchAddress.getTimestamp("LSTDATE")==null)
				{
					objNewOrderDto.setLstDate("NA");
				}
				else
				{
					objNewOrderDto.setLstDate(sdf.format(rsDispatchAddress.getTimestamp("LSTDATE")));
				}
				//[101010] START
				//objNewOrderDto.setLstNo(rsDispatchAddress.getInt("LSTNO"));
				objNewOrderDto.setLst_No(rsDispatchAddress.getString("LST_NO"));
				//[101010] END
				listDispatchAddress.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Populating DispatchAddress  : "+objNewOrderDto.getDispatchAddressID(), logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsDispatchAddress);
				DbConnection.closePreparedStatement(getDispatchAddress);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception"+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listDispatchAddress;
	}
	
	//	Method used for Fetching Dispatch Address Code from the Database through ajax
	public ArrayList<ProductCatelogDTO> populateBCP(long accountID) 
	{
		//Added by nagarjuna
		String methodName="populateBCP",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		PreparedStatement getBCPID=null;

		ResultSet rsBCPID  = null;
		int count=1;
		ProductCatelogDTO objNewOrderDto = null;
		ArrayList<ProductCatelogDTO> listBCPID = new ArrayList<ProductCatelogDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
			getBCPID= connection.prepareCall(sqlGetBCPID);
			getBCPID.setLong(1,accountID);
			rsBCPID = getBCPID.executeQuery();
			while(rsBCPID.next())
			{
				objNewOrderDto =  new ProductCatelogDTO();
				objNewOrderDto.setBcpID(rsBCPID.getInt("BCP_ID"));
				objNewOrderDto.setBcpName(rsBCPID.getString("BCPName"));
				listBCPID.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Populating BCP  : "+objNewOrderDto.getBcpID(), logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsBCPID);
				DbConnection.closePreparedStatement(getBCPID);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception"+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listBCPID;
	}
//	----[0020]--Start
	public ArrayList<ProductCatelogDTO> populateBCPWithDispatch(long accountID) 
	{
		//Added by nagarjuna
		String methodName="populateBCPWithDispatch",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		PreparedStatement getBCPID=null;

		ResultSet rsBCPID  = null;
		int count=1;
		ProductCatelogDTO objNewOrderDto = null;
		ArrayList<ProductCatelogDTO> listBCPID = new ArrayList<ProductCatelogDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
			getBCPID= connection.prepareCall(sqlGetBCPIDWithDispatch);
			getBCPID.setLong(1,accountID);
			rsBCPID = getBCPID.executeQuery();
			while(rsBCPID.next())
			{
				objNewOrderDto =  new ProductCatelogDTO();
				objNewOrderDto.setBcpID(rsBCPID.getInt("BCP_ID"));
				objNewOrderDto.setBcpName(rsBCPID.getString("BCPName"));
				listBCPID.add(objNewOrderDto);
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Populating BCP with Dispatch  : "+objNewOrderDto.getBcpID(), logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsBCPID);
				DbConnection.closePreparedStatement(getBCPID);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception"+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listBCPID;
	}
//	----[0020]--End
	//	Method used for Fetching BCP Details for Primary Customer Location from the Database through ajax on BCP ID
	public ArrayList<ProductCatelogDTO> populateBCPDetails(long bcpID) 
	{
		//Added by nagarjuna
		String methodName="populateBCPDetails",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		PreparedStatement getBCPDetails=null;

		ResultSet rsBCPDetails  = null;
		ProductCatelogDTO objNewOrderDto = null;
		ArrayList<ProductCatelogDTO> listBCPDetails = new ArrayList<ProductCatelogDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
			getBCPDetails= connection.prepareCall(sqlGetBCPDetails);
			getBCPDetails.setLong(1,bcpID);
			rsBCPDetails = getBCPDetails.executeQuery();
			while(rsBCPDetails.next())
			{
				objNewOrderDto =  new ProductCatelogDTO();
				objNewOrderDto.setBcpID(rsBCPDetails.getInt("BCP_ID"));
				objNewOrderDto.setBaddress1(Utility.fnCheckNull(rsBCPDetails.getString("ADDRESS1")));
				objNewOrderDto.setBaddress2(Utility.fnCheckNull(rsBCPDetails.getString("ADDRESS2")));
				objNewOrderDto.setBaddress3(Utility.fnCheckNull(rsBCPDetails.getString("ADDRESS3")));
				objNewOrderDto.setBaddress4(rsBCPDetails.getString("ADDRESS4"));
				objNewOrderDto.setBcity(Utility.fnCheckNull(rsBCPDetails.getString("CITY_ID")));
				objNewOrderDto.setBcountry(Utility.fnCheckNull(rsBCPDetails.getString("COUNTRY_CODE")));
				objNewOrderDto.setBpincode(Utility.fnCheckNull(rsBCPDetails.getString("POSTAL_CODE")));
				objNewOrderDto.setBstate(Utility.fnCheckNull(rsBCPDetails.getString("STATE_ID")));
				//start[022]
				objNewOrderDto.setBcontactNo(Utility.fnCheckNull(rsBCPDetails.getString("TELEPHONENO")));
				objNewOrderDto.setBemailid(Utility.fnCheckNull(rsBCPDetails.getString("EMAIL_ID")));
				objNewOrderDto.setDesignation(Utility.fnCheckNull(rsBCPDetails.getString("DESIGNATION")));
				objNewOrderDto.setLst_No(Utility.fnCheckNull(rsBCPDetails.getString("LST_NO")));
				objNewOrderDto.setLstDate(Utility.fnCheckNull(rsBCPDetails.getDate("LST_DATE")));
				//end[022]
				objNewOrderDto.setBcontactName(Utility.fnCheckNull(rsBCPDetails.getString("BCPCONTACTNAME")));

				//Start[090]
				objNewOrderDto.setRevCircle(Utility.fnCheckNull(rsBCPDetails.getString("REV_CIRCLE")));
				//End[090]

				listBCPDetails.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Populating BCP Details  : "+objNewOrderDto.getBcpID(), logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsBCPDetails);
				DbConnection.closePreparedStatement(getBCPDetails);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception"+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listBCPDetails;
	}
	
	public ArrayList<ProductCatelogDTO> populateprmBCPDetails(long bcpID) 
	{
		//Added by nagarjuna
		String methodName="populateprmBCPDetails",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		PreparedStatement getBCPDetails=null;

		ResultSet rsBCPDetails  = null;
		ProductCatelogDTO objNewOrderDto = null;
		ArrayList<ProductCatelogDTO> listBCPDetails = new ArrayList<ProductCatelogDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
			getBCPDetails= connection.prepareCall(sqlGetBCPDetails);
			getBCPDetails.setLong(1,bcpID);
			rsBCPDetails = getBCPDetails.executeQuery();
			while(rsBCPDetails.next())
			{
				objNewOrderDto =  new ProductCatelogDTO();
				objNewOrderDto.setBcpID(rsBCPDetails.getInt("BCP_ID"));
				//Start [088]
				objNewOrderDto.setBcpName(Utility.fnCheckNull(rsBCPDetails.getString("BCPName")));
//				End [088]
				objNewOrderDto.setPaddress1(Utility.fnCheckNull(rsBCPDetails.getString("ADDRESS1")));
				objNewOrderDto.setPaddress2(Utility.fnCheckNull(rsBCPDetails.getString("ADDRESS2")));
				objNewOrderDto.setPaddress3(Utility.fnCheckNull(rsBCPDetails.getString("ADDRESS3")));
				objNewOrderDto.setPaddress4(Utility.fnCheckNull(rsBCPDetails.getString("ADDRESS4")));
				objNewOrderDto.setPcity(Utility.fnCheckNull(rsBCPDetails.getString("CITY_ID")));
				objNewOrderDto.setPcountry(Utility.fnCheckNull(rsBCPDetails.getString("COUNTRY_CODE")));
				objNewOrderDto.setPpincode(Utility.fnCheckNull(rsBCPDetails.getString("POSTAL_CODE")));
				objNewOrderDto.setPstate(Utility.fnCheckNull(rsBCPDetails.getString("STATE_ID")));
				//start[022]
				objNewOrderDto.setPcontactNO(Utility.fnCheckNull(rsBCPDetails.getString("TELEPHONENO")));
				objNewOrderDto.setPemailId(Utility.fnCheckNull(rsBCPDetails.getString("EMAIL_ID")));
				//end[022]

				//Start[090]
				objNewOrderDto.setRevCircle(Utility.fnCheckNull(rsBCPDetails.getString("REV_CIRCLE")));
				//End[090]
				listBCPDetails.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error  at : "+objNewOrderDto.getBcpID(), logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsBCPDetails);
				DbConnection.closePreparedStatement(getBCPDetails);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception"+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listBCPDetails;
	}
	//	Method used for Fetching BCP Details for Secondary Customer Location from the Database through ajax on BCP ID
	public ArrayList<NewOrderDto> populateBCPSecDetails(long bcpID) 
	{
		//Added by nagarjuna
		String methodName="populateBCPSecDetails",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		PreparedStatement getBCPDetails=null;

		ResultSet rsBCPDetails  = null;
		NewOrderDto objNewOrderDto = null;
		ArrayList<NewOrderDto> listBCPDetails = new ArrayList<NewOrderDto>();
		try
		{
			connection=DbConnection.getConnectionObject();
			getBCPDetails= connection.prepareCall(sqlGetBCPDetails);
			getBCPDetails.setLong(1,bcpID);
			rsBCPDetails = getBCPDetails.executeQuery();
			while(rsBCPDetails.next())
			{
				objNewOrderDto =  new NewOrderDto();
				objNewOrderDto.setBcpID(rsBCPDetails.getInt("BCP_ID"));
				//Start [088]
				objNewOrderDto.setBcpName(Utility.fnCheckNull(rsBCPDetails.getString("BCPName")));
				//End [088]
				objNewOrderDto.setSaddress1(rsBCPDetails.getString("ADDRESS1"));
				objNewOrderDto.setSaddress2(rsBCPDetails.getString("ADDRESS2"));
				objNewOrderDto.setSaddress3(rsBCPDetails.getString("ADDRESS3"));
				objNewOrderDto.setSaddress4(rsBCPDetails.getString("ADDRESS4"));
				objNewOrderDto.setScity(rsBCPDetails.getString("CITY_ID"));
				objNewOrderDto.setScountry(rsBCPDetails.getString("COUNTRY_CODE"));
				objNewOrderDto.setSpincode(rsBCPDetails.getString("POSTAL_CODE"));
				objNewOrderDto.setSstate(rsBCPDetails.getString("STATE_ID"));
				//start[022]
				objNewOrderDto.setScontactNO(rsBCPDetails.getString("TELEPHONENO"));
				objNewOrderDto.setSemailId(rsBCPDetails.getString("EMAIL_ID"));
				//end[022]
				listBCPDetails.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Populating BCPSecDetails  : "+objNewOrderDto.getBcpID(), logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsBCPDetails);
				DbConnection.closePreparedStatement(getBCPDetails);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception"+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listBCPDetails;
	}

	//	Method used for Fetching Primary Netwrok Location Code from the Database through ajax
	public ArrayList<NewOrderDto> populatePNLocation() 
	{
		//Added by nagarjuna
		String methodName="populatePNLocation",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		PreparedStatement getNPLocationCode=null;

		ResultSet rsNPLocationCode = null;
		int count=1;
		NewOrderDto objNewOrderDto = null;
		ArrayList<NewOrderDto> listNPLocationCode = new ArrayList<NewOrderDto>();
		try
		{
			connection=DbConnection.getConnectionObject();
			getNPLocationCode= connection.prepareCall(sqlGetPNLocationCode);
			rsNPLocationCode = getNPLocationCode.executeQuery();
			while(rsNPLocationCode.next())
			{
				objNewOrderDto =  new NewOrderDto();
				objNewOrderDto.setPlocationCode(rsNPLocationCode.getInt("LOCATION_CODE"));
				objNewOrderDto.setNwkLocationName(rsNPLocationCode.getString("NwkLocationName"));
				listNPLocationCode.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Populating PNLocation  : "+objNewOrderDto.getPlocationCode(), logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsNPLocationCode);
				DbConnection.closePreparedStatement(getNPLocationCode);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception"+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listNPLocationCode;
	}

	//	Method used for Fetching Secondary Netwrok Location Code from the Database through ajax
	public ArrayList<NewOrderDto> populateSNLocation() 
	{
		//Added by nagarjuna
		String methodName="populateSNLocation",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		PreparedStatement getNPLocationCode=null;

		ResultSet rsSPLocationCode = null;
		int count=1;
		NewOrderDto objNewOrderDto = null;
		ArrayList<NewOrderDto> listSPLocationCode = new ArrayList<NewOrderDto>();
		try
		{
			connection=DbConnection.getConnectionObject();
			getNPLocationCode= connection.prepareCall(sqlGetPNLocationCode);
			rsSPLocationCode = getNPLocationCode.executeQuery();
			while(rsSPLocationCode.next())
			{
				objNewOrderDto =  new NewOrderDto();
				objNewOrderDto.setSlocationCode(rsSPLocationCode.getInt("LOCATION_CODE"));
				objNewOrderDto.setNwkLocationName(rsSPLocationCode.getString("NwkLocationName"));
				listSPLocationCode.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Populating SNLocation  : "+objNewOrderDto.getSlocationCode(), logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsSPLocationCode);
				DbConnection.closePreparedStatement(getNPLocationCode);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception"+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listSPLocationCode;
	}

	//	Method used for Fetching Primary Netwrok Location Details from the Database through ajax on NEtwork Location COdeID
	public ArrayList<NewOrderDto> populateNPLocationAddress(long pLocationCode) 
	{
		//Added by nagarjuna
		String methodName="populateNPLocationAddress",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		PreparedStatement getNPLocationAddress=null;

		ResultSet rsBCPDetails  = null;
		NewOrderDto objNewOrderDto = null;
		ArrayList<NewOrderDto> listNPLocationAddress = new ArrayList<NewOrderDto>();
		try
		{
			connection=DbConnection.getConnectionObject();
			getNPLocationAddress= connection.prepareCall(sqlGetNPAddress);
			getNPLocationAddress.setLong(1,pLocationCode);
			rsBCPDetails = getNPLocationAddress.executeQuery();
			while(rsBCPDetails.next())
			{
				objNewOrderDto =  new NewOrderDto();
				objNewOrderDto.setPtxtPAddress(rsBCPDetails.getString("ADDRESS"));
				listNPLocationAddress.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Populating NPLocation  : "+objNewOrderDto.getPtxtPAddress(), logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsBCPDetails);
				DbConnection.closePreparedStatement(getNPLocationAddress);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception"+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listNPLocationAddress;
	}
	
	//Method used for Fetching Secondary Netwrok Location Details from the Database through ajax on NEtwork Location COdeID
	public ArrayList<NewOrderDto> populateNSLocationAddress(long pLocationCode) 
	{
		//Added by nagarjuna
		String methodName="populateNSLocationAddress",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		PreparedStatement getNSLocationAddress=null;

		ResultSet rsNSLocationAddress  = null;
		NewOrderDto objNewOrderDto = null;
		ArrayList<NewOrderDto> listNSLocationAddress = new ArrayList<NewOrderDto>();
		try
		{
			connection=DbConnection.getConnectionObject();
			getNSLocationAddress= connection.prepareCall(sqlGetNPAddress);
			getNSLocationAddress.setLong(1,pLocationCode);
			rsNSLocationAddress = getNSLocationAddress.executeQuery();
			while(rsNSLocationAddress.next())
			{
				objNewOrderDto =  new NewOrderDto();
				objNewOrderDto.setStxtSAddress(rsNSLocationAddress.getString("ADDRESS"));
				listNSLocationAddress.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Populating NSLocationAddress  : "+objNewOrderDto.getStxtSAddress(), logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsNSLocationAddress);
				DbConnection.closePreparedStatement(getNSLocationAddress);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception"+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listNSLocationAddress;
	}

	/*public NewOrderDto insertProductCatelog(NewOrderDto objDto)
	{
		int finalStatus=0;
		int serviceProductID=0;
		
		NewOrderBean formBean=new NewOrderBean();
		Connection connection =null;
		String[] attributeVal=new String [objDto.getHdnSeriveAttCounter()];
		String[] attributeID=new String [objDto.getHdnSeriveAttCounter()];
		String[] dataType=new String [objDto.getHdnSeriveAttCounter()];
		String[] attributeName=new String [objDto.getHdnSeriveAttCounter()];
		String[] attributeExpectedValue=new String [objDto.getHdnSeriveAttCounter()];
		CallableStatement insertServiceAttDet =null;
		CallableStatement insertServiceTypeSTR =null;
		CallableStatement insertBillingInfo=null;
		CallableStatement insertHardwareInfo=null;
		CallableStatement insertServiceInfo=null;
		CallableStatement insertChargeInfo=null;
		try
		{
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
			//For Inserting Data in Service Product Table Start
			//insertServiceTypeSTR=connection.prepareCall(sqlUpdateServiceType);
			insertServiceTypeSTR=connection.prepareCall(sqlUpdateServiceType1);
			insertServiceTypeSTR.setInt(1, objDto.getServiceId());
			insertServiceTypeSTR.setInt(2, objDto.getServiceDetailID());
			insertServiceTypeSTR.setInt(3, 0);
			insertServiceTypeSTR.setInt(4, 0);
			insertServiceTypeSTR.setString(5, "");
			insertServiceTypeSTR.setInt(6, 0);
			insertServiceTypeSTR.setLong(7, Long.parseLong(objDto.getParentServiceProductId()));	
			insertServiceTypeSTR.execute();
			finalStatus=insertServiceTypeSTR.getInt(4);
			serviceProductID=insertServiceTypeSTR.getInt(6);
			
			if(objDto.getServiceInfoValue()==1 && finalStatus==0)//If Service Value in Master table is 1
			{
				//FOR INSERTING DATA IN PRODUCTLINEATTRIBUTE TABLE
				for(int j=0;j<=(objDto.getHdnSeriveAttCounter())-1;j++)
				{
					attributeVal[j] =objDto.getProdAttValue()[j];
					attributeID[j]=objDto.getProdAttID()[j];
					attributeExpectedValue[j]=objDto.getProdAttExptdValue()[j];
					attributeName[j]=objDto.getProdAttName()[j];
					insertServiceAttDet=connection.prepareCall(sqlInsertProdLineAttributes);
					insertServiceAttDet.setInt(1, Integer.valueOf(attributeID[j]));//AttributeID
					insertServiceAttDet.setString(2, attributeVal[j]);//Attribute Value
					insertServiceAttDet.setInt(3, serviceProductID);//service Product ID
					insertServiceAttDet.setInt(4, 1);//Update Type
					insertServiceAttDet.setInt(5,0);//Output Parameter
					insertServiceAttDet.setInt(6,0);//Output Parameter
					insertServiceAttDet.setString(7,"");//Output Parameter
					insertServiceAttDet.execute();
					finalStatus=insertServiceAttDet.getInt(6);
					if(finalStatus==1)
					{
						break;
					}
				}
			}
			
			if(objDto.getBillingInfoValue()==1 && finalStatus==0)//If Billing Info Value in Master table is 1
			{
				//FOR INSERTING DATA IN BILLING INFO TABLE
				insertBillingInfo=connection.prepareCall(sqlInsertBillingInfo);
				insertBillingInfo.setInt(1, objDto.getPodetailID());//PO DetailID
				insertBillingInfo.setInt(2, objDto.getAccountID());//ACCOUNT ID
				insertBillingInfo.setInt(3, objDto.getCreditPeriod());//CREDIT PERIOD
				insertBillingInfo.setInt(4, objDto.getEntityID());//ENTITY ID
				insertBillingInfo.setString(5, objDto.getBillingMode());//BILLING MODE
				insertBillingInfo.setString(6, objDto.getBillingformat());//BILLING FORMAT
				insertBillingInfo.setInt(7, objDto.getLicenceCoID());//LICENCE COMPANY ID
				insertBillingInfo.setString(8, objDto.getTaxation());//TAXATION
				insertBillingInfo.setString(9, objDto.getBillingLevel());//BILLING LEVEL
				insertBillingInfo.setInt(10, objDto.getCommitmentPeriod());//COMMITMENT PERIOD
				insertBillingInfo.setString(11, objDto.getPenaltyClause());//PENALTY CLAUSE
				insertBillingInfo.setInt(12, serviceProductID);//SERVICE PRODUCT ID
				insertBillingInfo.setInt(13, objDto.getBillingType());//Billing Type
				insertBillingInfo.setInt(14, 0);//Billing Info ID
				insertBillingInfo.setInt(15, 1);//UPDATE FLAG
				insertBillingInfo.setInt(16,0);//Output Parameter
				insertBillingInfo.setInt(17,0);//Output Parameter
				insertBillingInfo.setString(18,"");//Output Parameter		
				insertBillingInfo.setLong(19, Long.parseLong(objDto.getBillingBCPId()));
				insertBillingInfo.execute();
				finalStatus=insertBillingInfo.getInt(17);
			}
			
			if(objDto.getLocationInfoValue()==1 && finalStatus==0)//If LOCATION Info Value in Master table is 1
			{
				//FOR INSERTING DATA IN LOCATION INFO TABLE
				int primaryLocation=0;
				if(objDto.getSelectedPriLocType()==1)
				{
					primaryLocation=objDto.getSelectedPrimaryBCP();
				}
				else if(objDto.getSelectedPriLocType()==2)
				{
					primaryLocation=objDto.getSelectedPNLocation();
				}
				int secondaryLocation=0;
				if(objDto.getSelectedSecLocType()==1)
				{
					secondaryLocation=objDto.getSelectedSecBCP();
				}
				else if(objDto.getSelectedSecLocType()==2)
				{
					secondaryLocation=objDto.getSelectedSNLocation();
				}
				insertServiceInfo=connection.prepareCall(sqlInsertServiceDetails);
				insertServiceInfo.setInt(1, objDto.getSelectedPriLocType());//Primary Location Type
				insertServiceInfo.setInt(2, objDto.getSelectedSecLocType());//Secomdary Location Type
				insertServiceInfo.setInt(3, primaryLocation);//Primary Location
				insertServiceInfo.setInt(4, secondaryLocation);//Secondary Location
				insertServiceInfo.setInt(5, objDto.getAccountID());//Account ID
				insertServiceInfo.setInt(6, serviceProductID);//Service Product ID
				insertServiceInfo.setInt(7, 1);//UPDATE FLAG
				insertServiceInfo.setInt(8, 0);//LOCATION INFO ID
				insertServiceInfo.setInt(9,0);//Output Parameter
				insertServiceInfo.setInt(10,0);//Output Parameter
				insertServiceInfo.setString(11,"");//Output Parameter	
				insertServiceInfo.execute();
				finalStatus=insertServiceInfo.getInt(10);
			}
			
			if(objDto.getHardwareInfoValue()==1 && finalStatus==0)//If Hardware Info Value in Master table is 1
			{
				//FOR Hardware DATA IN LOCATION INFO TABLE
				insertHardwareInfo=connection.prepareCall(sqlInsertHardwareDetails);
				insertHardwareInfo.setInt(1, 0);//Hardware DetailID
				insertHardwareInfo.setInt(2, objDto.getSelectedStoreID());//ACCOUNT ID
				insertHardwareInfo.setString(3, objDto.getHardwareType());//CREDIT PERIOD
				insertHardwareInfo.setString(4, objDto.getFormAvailable());//ENTITY ID
				insertHardwareInfo.setString(6, objDto.getSaleNature());//BILLING MODE
				insertHardwareInfo.setString(5, objDto.getSaleType());//BILLING FORMAT
				insertHardwareInfo.setInt(7, objDto.getSelectedDispatchID());//LICENCE COMPANY ID
				insertHardwareInfo.setInt(8, objDto.getAccountID());//TAXATION
				insertHardwareInfo.setInt(9, serviceProductID);//BILLING LEVEL
				insertHardwareInfo.setInt(10, 1);//UPDATE FLAG
				insertHardwareInfo.setInt(11, 0);//HARDWARE DETAIL ID
				insertHardwareInfo.setInt(12,0);//Output Parameter
				insertHardwareInfo.setInt(13,0);//Output Parameter
				insertHardwareInfo.setString(14,"");//Output Parameter		
				insertHardwareInfo.execute();
				finalStatus=insertHardwareInfo.getInt(13);
			}
			
			if(objDto.getChargeInfoValue()==1 && finalStatus==0)//If Charge Info Value in Master table is 1
			{
				//FOR Charge DATA IN LOCATION INFO TABLE
				insertChargeInfo=connection.prepareCall(sqlInsertChargeDetails);
				insertChargeInfo.setInt(1, objDto.getAccountID());//Account ID
				insertChargeInfo.setInt(2, serviceProductID);//SERVICE PRODUCT ID
				insertChargeInfo.setString(3, objDto.getChargeName());//CHARGE NAME
				insertChargeInfo.setInt(4, objDto.getChargePeriod());//CHARGE PERIOD
				Double chargeAmount=Double.parseDouble(objDto.getChargeAmount_String());
				insertChargeInfo.setDouble(5, chargeAmount);//CHARGE AMOUNT
				insertChargeInfo.setInt(6, objDto.getChargeType());//CHARGE TYPE I.E. RC OR NRC
				insertChargeInfo.setString(7, objDto.getChargeFrequency());//CHARGE FRQUENCY
				Double chargeFrequencyAmt=Double.parseDouble(objDto.getChargeFrequencyAmt_String());
				insertChargeInfo.setDouble(8, chargeFrequencyAmt);//CHARGE FRQUENCY AMT
				insertChargeInfo.setString(9, objDto.getStartDateLogic());//START DATE LOGIC
				insertChargeInfo.setString(10, objDto.getEndDateLogic());//END DATE LOGIC
				insertChargeInfo.setInt(11, 1);//UPDATE FLAG
				insertChargeInfo.setInt(12, 0);//CHARGE ID
				insertChargeInfo.setInt(13,0);//Output Parameter
				insertChargeInfo.setInt(14,0);//Output Parameter
				insertChargeInfo.setString(15,"");//Output Parameter		
				insertChargeInfo.execute();
				finalStatus=insertChargeInfo.getInt(14);
			}
			
			
			if(finalStatus==0)
			{
				objDto.setMsgOut("Data Saved SuccessFully!!");
				connection.commit();
			}
			else
			{
				objDto.setMsgOut("Some Error has Occured,Please Try Again!!");
				connection.rollback();
			}
			
		}
		catch(Exception ex )
		{
			try {
				objDto.setMsgOut("Some Error has Occured,Please Try Again!!");
				connection.rollback();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return objDto;
	}*/
	
	//[011] Start
	//public NewOrderDto insertProductCatelog(NewOrderDto objDto)
	private static final String sqlInsertTProdLineAttributes =
		"INSERT INTO  IOE.TPRODUCTLINEATTVALUE(ATTMASTERID, ATTVALUE, SERVICEPRODUCTID,CREATEDBY) " +
		" VALUES(?,?,?,?)";
	private static final String sqlspUpdateVcsBundledService =
		"UPDATE IOE.TPOSERVICEDETAILS SET VCS_BUNDLED_SERVICE=? WHERE SERVICEPRODUCTID=? ";
	private static final String sqlInsertTProdLineAttValueHistoryChange =
		" INSERT INTO IOE.TPRODUCTLINEATTVALUE_HISTORY(ATTVALUEID, ATTMASTERID, ATTVALUE,ATTVALUE_NEW, SERVICEPRODUCTID,ORDERNO,ORDERTYPE,MAIN_SERVICE_ID) " +
		"	SELECT ATTVALUEID, ATTMASTERID, ATTVALUE, ATTVALUE, SERVICEPRODUCTID, ?,'C', ? FROM IOE.TPRODUCTLINEATTVALUE WHERE SERVICEPRODUCTID = ? WITH UR ";
	private static final String sqlInsertTProdLineAttValueHistoryNew =
		" INSERT INTO IOE.TPRODUCTLINEATTVALUE_HISTORY(ATTVALUEID, ATTMASTERID, ATTVALUE_NEW, SERVICEPRODUCTID,ORDERNO,ORDERTYPE,MAIN_SERVICE_ID) " +
		"	SELECT ATTVALUEID, ATTMASTERID, ATTVALUE, SERVICEPRODUCTID, ?,'N', ? FROM IOE.TPRODUCTLINEATTVALUE WHERE SERVICEPRODUCTID = ? WITH UR ";
	private static final String sqlGetNewOrderLineCount = "SELECT count(1) FROM ioe.TDISCONNECTION_HISTORY tdh WHERE ORDERNO=? and tdh.ORDER_TYPE='New'";
	private static final String sqlGetServiceCount = "SELECT count(1) FROM ioe.tposervicemaster WHERE orderno=?";
	private static final String sqlGetWithUrServiceCount = "SELECT count(1) FROM ioe.tposervicemaster WHERE orderno=? with ur";
	public NewOrderDto insertProductCatelog(NewOrderDto objDto,long empID)
	//[011] End
	{
		//Added by nagarjuna
		String methodName="insertProductCatelog",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		int finalStatus=0;
		int serviceProductID=0;
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat(AppConstants.DATE_FORMAT_PROC);
		//NewOrderBean formBean=new NewOrderBean();
		Connection connection =null;
		//String[] attributeVal=new String [objDto.getHdnSeriveAttCounter()];
		//String[] attributeID=new String [objDto.getHdnSeriveAttCounter()];
		//String[] dataType=new String [objDto.getHdnSeriveAttCounter()];
		//String[] attributeName=new String [objDto.getHdnSeriveAttCounter()];
		//String[] attributeExpectedValue=new String [objDto.getHdnSeriveAttCounter()];
		CallableStatement insertServiceTypeSTR =null;
		//CallableStatement insertServiceAttDet =null;
		CallableStatement insertBillingInfo=null;
		CallableStatement insertHardwareInfo=null;
		CallableStatement insertServiceInfo=null;
		CallableStatement insertChargeInfo=null;
		CallableStatement insertComponentInfo=null;
		CallableStatement insertLinkageInfo=null;
		//CallableStatement insertConfigData=null;
		PreparedStatement psInsertServiceAttDet =null;
		PreparedStatement psUpdateVCSBundledService =null;
		PreparedStatement psInsertServiceAttDetHistory=null;
		try
		{
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
			boolean isBatchServiceAttDet=false;
			boolean isBatchVCSBundledService=false;
			boolean isBatchServiceAttDetHistory=false;
			//For Inserting Data in Service Product Table Start
			
			if(objDto.getChangeTypeId()==2 || objDto.getChangeTypeId()==4 || objDto.getChangeTypeId()==5)
				insertServiceTypeSTR=connection.prepareCall(sqlUpdateServiceType1);
			else
				insertServiceTypeSTR=connection.prepareCall(sqlUpdateServiceType);
			insertServiceTypeSTR.setInt(1, objDto.getServiceId());
			insertServiceTypeSTR.setInt(2, objDto.getServiceDetailID());
			insertServiceTypeSTR.setInt(3, 0);
			insertServiceTypeSTR.setInt(4, 0);
			insertServiceTypeSTR.setString(5, "");
			insertServiceTypeSTR.setInt(6, 0);
			insertServiceTypeSTR.setLong(7, Long.parseLong(objDto.getParentServiceProductId()));
			insertServiceTypeSTR.setLong(8, empID);
			if(objDto.getChangeTypeId()==2 || objDto.getChangeTypeId()==4 || objDto.getChangeTypeId()==5)
				insertServiceTypeSTR.setLong(9, objDto.getPoNumber());
			
			insertServiceTypeSTR.execute();
			finalStatus=insertServiceTypeSTR.getInt(4);
			serviceProductID=insertServiceTypeSTR.getInt(6);
			objDto.setServiceProductID(serviceProductID);
			
			if(objDto.getServiceInfoValue()==1 && finalStatus==0)//If Service Value in Master table is 1
			{
				//FOR INSERTING DATA IN PRODUCTLINEATTRIBUTE TABLE
				//Only for New and Solution Change. For Other Change Type, we dont add any new line with service summary attributes
				psInsertServiceAttDet=connection.prepareCall(sqlInsertTProdLineAttributes);
				psInsertServiceAttDet.setInt(3, serviceProductID);//service Product ID
				psInsertServiceAttDet.setLong(4, empID);//Update Type
				
				psUpdateVCSBundledService = connection.prepareCall(sqlspUpdateVcsBundledService);
				psUpdateVCSBundledService.setInt(2, serviceProductID);//ServiceProductId
				
				//Inserting data in TPRODUCTLINEATTVALUE_HISTORY table
				if(objDto.getChangeTypeId()==0) //For New Order
					psInsertServiceAttDetHistory=connection.prepareCall(sqlInsertTProdLineAttValueHistoryNew);
				else if(objDto.getChangeTypeId()==2)
					psInsertServiceAttDetHistory=connection.prepareCall(sqlInsertTProdLineAttValueHistoryChange);
				if(objDto.getChangeTypeId()==0 || objDto.getChangeTypeId()==2)
				{
					psInsertServiceAttDetHistory.setLong(1, objDto.getPoNumber());//Order No
					psInsertServiceAttDetHistory.setInt(2, objDto.getServiceId());
					psInsertServiceAttDetHistory.setInt(3, serviceProductID);
					psInsertServiceAttDetHistory.addBatch();
					isBatchServiceAttDetHistory=true;
				}
				
				for(int j=0;j<=(objDto.getHdnSeriveAttCounter())-1;j++)
				{
					//attributeVal[j] = objDto.getProdAttValue()[j];
					//attributeID[j]=objDto.getProdAttID()[j];
					//attributeExpectedValue[j]=objDto.getProdAttExptdValue()[j];
					//attributeName[j]=objDto.getProdAttName()[j];
					
					//Inserting data in TPRODUCTLINEATTVALUE table
					psInsertServiceAttDet.setInt(1, Integer.valueOf(objDto.getProdAttID()[j]));//AttributeID
					psInsertServiceAttDet.setString(2, objDto.getProdAttValue()[j]);//Attribute Value
					psInsertServiceAttDet.addBatch();
					isBatchServiceAttDet=true;
					
					//Updating VCSBundledService Data in TPOSERVICEDETAILS table
					//[136] Removing hardcoding for linking LSIs attmasterids
					if(ApplicationFlags.SERVICE_LINKING_ATTMASTERIDS_SET.contains(Long.valueOf(objDto.getProdAttID()[j])))//Integer.valueOf(objDto.getProdAttID()[j])==3969 || Integer.valueOf(objDto.getProdAttID()[j])==4093 || Integer.valueOf(objDto.getProdAttID()[j])==5000327) //at last att id(5000327) added by anoop for OVCC 
					{    //if(objDto.getProdAttValue()[j]=="")
						 
						if(objDto.getProdAttValue()[j].equalsIgnoreCase(""))
							psUpdateVCSBundledService.setInt(1, 0);
						else
							psUpdateVCSBundledService.setInt(1, Integer.valueOf(objDto.getProdAttValue()[j]));//AttributeID
							
						psUpdateVCSBundledService.addBatch();
						isBatchVCSBundledService=true;
					}
				}
				if(isBatchServiceAttDet==true){
					int[]results1=psInsertServiceAttDet.executeBatch();
					for (int i : results1) {
						if(i!=1){
							finalStatus=1;
							break;
						}
					}
				}
				
				if(isBatchVCSBundledService==true && finalStatus==0){
					int[]results2=psUpdateVCSBundledService.executeBatch();
					for (int j : results2) {
						if(j!=1){
							finalStatus=1;
							break;
						}
					}
				}
				
				if(isBatchServiceAttDetHistory==true && finalStatus==0){
					int[]results3=psInsertServiceAttDetHistory.executeBatch();
					for (int k : results3) {
						if(k!=1){
							finalStatus=1;
							break;
						}
					}
				}
					
					/*
					 * //if(objDto.getChangeTypeId()==0 || objDto.getChangeTypeId()==2)
						//psInsertServiceAttDet=connection.prepareCall(sqlInsertProdLineAttributesForNew);
					//else
						//psInsertServiceAttDet=connection.prepareCall(sqlInsertProdLineAttributes);
					* psInsertServiceAttDet.setInt(1, Integer.valueOf(attributeID[j]));//AttributeID
					psInsertServiceAttDet.setString(2, attributeVal[j]);//Attribute Value
					psInsertServiceAttDet.setInt(3, serviceProductID);//service Product ID
					psInsertServiceAttDet.setInt(4, 1);//Update Type
					psInsertServiceAttDet.setInt(5,0);//Output Parameter
					psInsertServiceAttDet.setInt(6,0);//Output Parameter
					psInsertServiceAttDet.setString(7,"");//Output Parameter
					psInsertServiceAttDet.setLong(8, empID);
					if(objDto.getChangeTypeId()==0 || objDto.getChangeTypeId()==2)
					{
						psInsertServiceAttDet.setLong(9, objDto.getPoNumber());//OrderNo
						psInsertServiceAttDet.setLong(10, objDto.getChangeTypeId());
						psInsertServiceAttDet.setString(11, "0");
						psInsertServiceAttDet.setInt(12, 0);
						psInsertServiceAttDet.setInt(13,objDto.getServiceId());//Added by Ashutosh For mainting History of Product catalog 
					}
					psInsertServiceAttDet.execute();
					finalStatus=insertServiceAttDet.getInt(6);
					psInsertServiceAttDet.addBatch();
					if(finalStatus==1)
					{
						break;
					}*/
				
				//raghu
				insertLinkageInfo=connection.prepareCall(sqlInsertLinkageInfoForNew);
				insertLinkageInfo.setInt(1, serviceProductID);
				insertLinkageInfo.setInt(2, objDto.getChangeTypeId());
				insertLinkageInfo.setString(3, objDto.getLogicalCircuitId());
				insertLinkageInfo.setString(4, objDto.getInfraOderNo());
				insertLinkageInfo.setString(5, objDto.getMetasolvCircuitId());
				insertLinkageInfo.setInt(6, 0);
				insertLinkageInfo.setInt(7, 0);
				insertLinkageInfo.setString(8, "");
				insertLinkageInfo.setString(9, objDto.getLinkageInfoFlag());//BILLING MODE
				insertLinkageInfo.setString(10, "");//BILLING MODE
				insertLinkageInfo.setString(11, "");//BILLING MODE
				insertLinkageInfo.setString(12, "");//BILLING MODE
				insertLinkageInfo.setLong(13, objDto.getServiceId());//BILLING MODE
				insertLinkageInfo.execute();
				finalStatus=insertLinkageInfo.getInt(6);
		
			}
			
			if(objDto.getBillingInfoValue()==1 && finalStatus==0)//If Billing Info Value in Master table is 1
			{
				//FOR INSERTING DATA IN BILLING INFO TABLE
				insertBillingInfo=connection.prepareCall(sqlInsertBillingInfo);
				insertBillingInfo.setInt(1, objDto.getPodetailID());//PO DetailID
				insertBillingInfo.setInt(2, objDto.getAccountID());//ACCOUNT ID
				insertBillingInfo.setInt(3, objDto.getCreditPeriod());//CREDIT PERIOD
				insertBillingInfo.setInt(4, objDto.getEntityID());//ENTITY ID
				insertBillingInfo.setString(5, objDto.getBillingMode());//BILLING MODE
				insertBillingInfo.setString(6, objDto.getBillingformat());//BILLING FORMAT
				insertBillingInfo.setInt(7, objDto.getLicenceCoID());//LICENCE COMPANY ID
				insertBillingInfo.setString(8, objDto.getTaxation());//TAXATION
				insertBillingInfo.setString(9, objDto.getBillingLevel());//BILLING LEVEL
				insertBillingInfo.setInt(10, objDto.getCommitmentPeriod());//COMMITMENT PERIOD
				insertBillingInfo.setString(11, objDto.getPenaltyClause());//PENALTY CLAUSE
				insertBillingInfo.setInt(12, serviceProductID);//SERVICE PRODUCT ID
				insertBillingInfo.setInt(13, objDto.getBillingType());//Billing Type
				insertBillingInfo.setInt(14, 0);//Billing Info ID
				insertBillingInfo.setInt(15, 1);//UPDATE FLAG
				insertBillingInfo.setLong(16, objDto.getBillingLevelNo());//Billing Level No
				
				insertBillingInfo.setInt(17,0);//Output Parameter
				insertBillingInfo.setInt(18,0);//Output Parameter
				insertBillingInfo.setString(19,"");//Output Parameter		
				insertBillingInfo.setLong(20, Long.parseLong(objDto.getBillingBCPId()));
				insertBillingInfo.setLong(21,objDto.getNoticePeriod());
				//[011] Start
				insertBillingInfo.setLong(22, empID);
				//[011] End
				//Start[023]
				insertBillingInfo.setInt(23, objDto.getIsNfa());//Is  Nfa 
				//End[023]
				insertBillingInfo.setLong(24, objDto.getStdReasonId());//Std reason
				insertBillingInfo.setInt(25, objDto.getIsUsage());//Used to show Comp. based or Charge based
				insertBillingInfo.setInt(26, objDto.getBillingScenario());
				insertBillingInfo.setInt(27, objDto.getFxRedirectionLSI());
				insertBillingInfo.setInt(28, objDto.getFxRedirectionSPID());
				//WARRANTY CLAUSE ADDED BY MANISHA START
				insertBillingInfo.setString(29, Utility.fnCheckNull(objDto.getWarrantyClause()));//WARRANTY CLAUSE
				//WARRANTY CLAUSE ADDED BY MANISHA END
				//  bcp details for services ADDED BY MANISHA START
				if("".equals(objDto.getBillingBCPIdService()) || objDto.getBillingBCPIdService()==null)
				{
					insertBillingInfo.setLong(30, 0);//WARRANTY CLAUSE
				}
				else
				{
					insertBillingInfo.setLong(30,  Long.parseLong(objDto.getBillingBCPIdService()));//WARRANTY CLAUSE
				}	
				//satyapan osp tagging
				if(objDto.getIsOSPTagging()!=null){
				insertBillingInfo.setLong(31,Long.parseLong(objDto.getIsOSPTagging()));//osp Tagging
				}else{
					insertBillingInfo.setLong(31,0);
				}
				if("".equals(objDto.getTxtOSPRegNo()) || objDto.getTxtOSPRegNo()==null)
				{
					insertBillingInfo.setString(32, null);//osp Tagging
				}
				else
				{
					insertBillingInfo.setString(32, objDto.getTxtOSPRegNo());//osp Tagging
				}
				if(null!=objDto.getTxtOSPRegDate()){
					if(objDto.getTxtOSPRegDate().trim().length()==0){
					insertBillingInfo.setDate(33,null);
					}else{
					insertBillingInfo.setDate(33,new java.sql.Date(simpleDateFormat.parse(objDto.getTxtOSPRegDate()).getTime()));//osp Tagging
					}
				}else{
					insertBillingInfo.setDate(33,null);
				}
				//END satyapan osp tagging
				// bcp details for services ADDED BY MANISHA end
				insertBillingInfo.execute();
				finalStatus=insertBillingInfo.getInt(18);
			}
			
			if(objDto.getLocationInfoValue()==1 && finalStatus==0)//If LOCATION Info Value in Master table is 1
			{
				//FOR INSERTING DATA IN LOCATION INFO TABLE
				int primaryLocation=0;
				if(objDto.getSelectedPriLocType()==1)
				{
					primaryLocation=objDto.getSelectedPrimaryBCP();
				}
				else if(objDto.getSelectedPriLocType()==2)
				{
					primaryLocation=objDto.getSelectedPNLocation();
				}
				int secondaryLocation=0;
				if(objDto.getSelectedSecLocType()==1)
				{
					secondaryLocation=objDto.getSelectedSecBCP();
				}
				else if(objDto.getSelectedSecLocType()==2)
				{
					secondaryLocation=objDto.getSelectedSNLocation();
				}
				insertServiceInfo=connection.prepareCall(sqlInsertServiceDetails);
				insertServiceInfo.setInt(1, objDto.getSelectedPriLocType());//Primary Location Type
				insertServiceInfo.setInt(2, objDto.getSelectedSecLocType());//Secomdary Location Type
				insertServiceInfo.setInt(3, primaryLocation);//Primary Location
				insertServiceInfo.setInt(4, secondaryLocation);//Secondary Location
				insertServiceInfo.setInt(5, objDto.getAccountID());//Account ID
				insertServiceInfo.setInt(6, serviceProductID);//Service Product ID
				insertServiceInfo.setInt(7, 1);//UPDATE FLAG
				insertServiceInfo.setInt(8, 0);//LOCATION INFO ID
				insertServiceInfo.setInt(9,0);//Output Parameter
				insertServiceInfo.setInt(10,0);//Output Parameter
				insertServiceInfo.setString(11,"");//Output Parameter
				insertServiceInfo.setString(12, objDto.getFromLocation());
				insertServiceInfo.setString(13, objDto.getToLocation());
				//[011] Start
				insertServiceInfo.setLong(14, empID);
				//[011] End
				insertServiceInfo.execute();
				finalStatus=insertServiceInfo.getInt(10);
			}
			
			if(objDto.getHardwareInfoValue()==1 && finalStatus==0)//If Hardware Info Value in Master table is 1
			{
				//FOR Hardware DATA IN LOCATION INFO TABLE
				insertHardwareInfo=connection.prepareCall(sqlInsertHardwareDetails);
				insertHardwareInfo.setInt(1, 0);//Hardware DetailID
				insertHardwareInfo.setInt(2, objDto.getSelectedStoreID());//ACCOUNT ID
				insertHardwareInfo.setString(3, objDto.getHardwareType());//CREDIT PERIOD
				insertHardwareInfo.setString(4, objDto.getFormAvailable());//ENTITY ID
				insertHardwareInfo.setString(6, objDto.getSaleNature());//BILLING MODE
				insertHardwareInfo.setString(5, objDto.getSaleType());//BILLING FORMAT
				insertHardwareInfo.setInt(7, objDto.getSelectedDispatchID());//LICENCE COMPANY ID
				insertHardwareInfo.setInt(8, objDto.getAccountID());//TAXATION
				insertHardwareInfo.setInt(9, serviceProductID);//BILLING LEVEL
				insertHardwareInfo.setInt(10, 1);//UPDATE FLAG
				insertHardwareInfo.setInt(11, 0);//HARDWARE DETAIL ID				
				insertHardwareInfo.setString(12,objDto.getStartHWDateLogic());//START DATE LOGIC
				insertHardwareInfo.setString(13,objDto.getEndHWDateLogic());//END DATE LOGIC
			//	insertHardwareInfo.setInt(14, objDto.getWarrentyMonths());//WARRENTY MONTHS
				if(objDto.getStartDate()==null || "".equalsIgnoreCase(objDto.getStartDate())||"0".equalsIgnoreCase(objDto.getStartDate()))
				{
					insertHardwareInfo.setNull(14, java.sql.Types.DATE);
				}
				else
				insertHardwareInfo.setDate(14, new java.sql.Date(simpleDateFormat.parse(objDto.getStartDate()).getTime()));//START DATE
			//	insertHardwareInfo.setNull(14, java.sql.Types.DATE);
				if(objDto.getEndDate()==null || "".equalsIgnoreCase(objDto.getEndDate())||"0".equalsIgnoreCase(objDto.getEndDate()))
				{
					insertHardwareInfo.setNull(15, java.sql.Types.DATE);
				}
				else
				insertHardwareInfo.setDate(15, new java.sql.Date(simpleDateFormat.parse(objDto.getEndDate()).getTime()));//END DATE
				insertHardwareInfo.setDouble(16, objDto.getPrincipalAmount());//Principal Amount
				insertHardwareInfo.setDouble(17, objDto.getInterestRate());//Interset Rate
				
				insertHardwareInfo.setInt(18,0);//
				insertHardwareInfo.setInt(19,0);//
				insertHardwareInfo.setString(20,"");//
				//[011] Start
				insertHardwareInfo.setLong(21, empID);
				//[011] End
				//lawkush start
				insertHardwareInfo.setInt(22, objDto.getTxtStartMonth());
				insertHardwareInfo.setInt(23, objDto.getTxtStartDays());
				insertHardwareInfo.setInt(24, objDto.getTxtEndMonth());
				insertHardwareInfo.setInt(25, objDto.getTxtEndDays());
				insertHardwareInfo.setInt(26, objDto.getTxtExtMonth());
				insertHardwareInfo.setInt(27, objDto.getTxtExtDays());
				if(objDto.getTxtExtDate()==null || "".equalsIgnoreCase(objDto.getTxtExtDate()) ||"00/00/0000".equalsIgnoreCase(objDto.getTxtExtDate()))
				{
				insertHardwareInfo.setNull(28, java.sql.Types.DATE);
				}
				else
				insertHardwareInfo.setDate(28,new java.sql.Date(simpleDateFormat.parse( objDto.getTxtExtDate()).getTime()));
				//lawkush end
//				[081] start
				insertHardwareInfo.setString(29, objDto.getDispatchContactName());
				//[081] end
				insertHardwareInfo.execute();
				finalStatus=insertHardwareInfo.getInt(19);
			}
			
			if(objDto.getChargeInfoValue()==1 && finalStatus==0)//If Charge Info Value in Master table is 1
			{
				//FOR Charge DATA IN LOCATION INFO TABLE
				insertChargeInfo=connection.prepareCall(sqlInsertChargeDetails);
				ArrayList<ChargesDetailDto> chargesDetails = objDto.getChargesDetails();
				ArrayList<Integer> listChargeInfoId = new ArrayList<Integer>();
				for (ChargesDetailDto chargeDto : chargesDetails) {
					insertChargeInfo.clearParameters();
					insertChargeInfo.setInt(1, objDto.getAccountID());//Account ID
					insertChargeInfo.setInt(2, serviceProductID);//SERVICE PRODUCT ID
					insertChargeInfo.setString(3, chargeDto.getChargeName());//CHARGE NAME
					insertChargeInfo.setInt(4, chargeDto.getChargePeriod());//CHARGE PERIOD
					Double chargeAmount=Double.parseDouble(chargeDto.getChargeAmount_String());
					insertChargeInfo.setDouble(5, chargeAmount);//CHARGE AMOUNT
					insertChargeInfo.setInt(6, chargeDto.getChargeType());//CHARGE TYPE I.E. RC OR NRC
					insertChargeInfo.setString(7, chargeDto.getChargeFrequency());//CHARGE FRQUENCY
					Double chargeFrequencyAmt=Double.parseDouble(chargeDto.getChargeFrequencyAmt_String());
					insertChargeInfo.setDouble(8, chargeFrequencyAmt);//CHARGE FRQUENCY AMT
					insertChargeInfo.setString(9, chargeDto.getStartDateLogic());//START DATE LOGIC
					insertChargeInfo.setString(10, chargeDto.getEndDateLogic());//END DATE LOGIC
					insertChargeInfo.setInt(11, 1);//UPDATE FLAG
					insertChargeInfo.setInt(12, 0);//CHARGE ID
					insertChargeInfo.setInt(13, chargeDto.getStartDateDays());//Start Date Days
					insertChargeInfo.setInt(14, chargeDto.getStartDateMonth());//Start Date Month
					insertChargeInfo.setInt(15, chargeDto.getEndDateDays());//End Date Days
					insertChargeInfo.setInt(16, chargeDto.getEndDateMonth());//End Date Month
					insertChargeInfo.setString(17,chargeDto.getChargeAnnotation());					
					insertChargeInfo.setInt(18,0);//Output Parameter
					insertChargeInfo.setInt(19,0);//Output Parameter
					insertChargeInfo.setString(20,"");//Output Parameter
					insertChargeInfo.setInt(21, Integer.parseInt(chargeDto.getChargeName()));//CHARGE NAME ID
					//[011] Start
					insertChargeInfo.setLong(22, empID);
					//[011] End
					//25 start
					insertChargeInfo.setLong(23,objDto.getServiceId()); // service id 
					
					//025 end
					
					insertChargeInfo.setLong(24,chargeDto.getExcludecheck()); // 
					insertChargeInfo.setInt(25, objDto.getPodetailID());//PO DetailID
					insertChargeInfo.setInt(26, objDto.getPoNumber());//PO No
					insertChargeInfo.setString(27, chargeDto.getChargeRemarks());//Remarks By Saurabh
					insertChargeInfo.setInt(28, chargeDto.getPaymentTerm1());
					insertChargeInfo.setInt(29, chargeDto.getPaymentTerm2());
					insertChargeInfo.setInt(30, chargeDto.getPaymentTerm3());
					insertChargeInfo.setInt(31, chargeDto.getPaymentTerm4());
					insertChargeInfo.setString(32, chargeDto.getTaxRate());
					insertChargeInfo.setInt(33, 0);//Integer.parseInt(chargeDto.getLineItemName()));
					insertChargeInfo.setInt(34, 0);//Integer.parseInt(chargeDto.getSubLineItemName()));
					insertChargeInfo.setInt(35, 0);
					//below code added by Anil for CLEP
					insertChargeInfo.setString(36, "0");//default charge cretion source from ib2b gui
					//end CLEP
					if(chargeDto.getLdDateClause().equals(""))
						insertChargeInfo.setDate(37,null);
					else
						insertChargeInfo.setDate(37,new java.sql.Date(simpleDateFormat.parse(chargeDto.getLdDateClause()).getTime()));
					insertChargeInfo.setInt(38, chargeDto.getDelayedTimeInDayes());
					insertChargeInfo.setInt(39, chargeDto.getLdPercentage());
					insertChargeInfo.setInt(40, chargeDto.getMaxPercentage());
					insertChargeInfo.setLong(41, 0);//linked charge [default is 0]
					if(objDto.getPodetailID() == 0)
					{
						finalStatus = 29;
						break;
					}
					insertChargeInfo.execute();
					listChargeInfoId.add(insertChargeInfo.getInt(35));
					//Raghu: fetch charge info id after save charge details
					
					finalStatus=insertChargeInfo.getInt(19);
					if(finalStatus!=0)
					{
						break;
					}
				}
				objDto.setListChargeInfoIdList(listChargeInfoId);
				
			}
			
			if(objDto.getComponentInfoValue()==1 && finalStatus==0)//If Charge Info Value in Master table is 1
			{
				//FOR Charge DATA IN LOCATION INFO TABLE
				insertComponentInfo=connection.prepareCall(sqlInsertComponentsDetails);
				ArrayList<ComponentsDto> componentDetails = objDto.getComponentDetails();
				ArrayList<Integer> listComponentId = new ArrayList<Integer>();
				for (ComponentsDto componentDto : componentDetails) {
					insertComponentInfo.clearParameters();
					insertComponentInfo.setInt(1, objDto.getAccountID());
					insertComponentInfo.setInt(2, serviceProductID);
					insertComponentInfo.setInt(3, componentDto.getComponentID());
					insertComponentInfo.setNull(4,java.sql.Types.INTEGER);
					insertComponentInfo.setNull(5,java.sql.Types.INTEGER);
					insertComponentInfo.setNull(6,java.sql.Types.VARCHAR);
					insertComponentInfo.setInt(7, 1);
					insertComponentInfo.setInt(8, 0);
					insertComponentInfo.setInt(9, componentDto.getPackageID());
					insertComponentInfo.setInt(10, objDto.getServiceId());
					insertComponentInfo.setInt(11, 0);
					insertComponentInfo.setInt(12, 0);
					insertComponentInfo.setString(13, componentDto.getStartDateLogic());
					insertComponentInfo.setString(14, componentDto.getEndDateLogic());
					insertComponentInfo.setInt(15, componentDto.getStartDateDays());//Start Date Days
					insertComponentInfo.setInt(16, componentDto.getStartDateMonth());//Start Date Month
					insertComponentInfo.setInt(17, componentDto.getEndDateDays());//End Date Days
					insertComponentInfo.setInt(18, componentDto.getEndDateMonth());//End Date Month
					insertComponentInfo.execute();
					listComponentId.add(insertComponentInfo.getInt(11));
					//Raghu: fetch Component Info id after save charge details
				
					finalStatus=insertComponentInfo.getInt(5);
					if(finalStatus!=0)
					{
						break;
					}
				}
				objDto.setListComponent(listComponentId);
				
			} 
			
			
			if(finalStatus==0)//Insert Config Values for Arbor Related Products
			{
				insertBillingInfo=connection.prepareCall(sqlInsertConfigValue);
				insertBillingInfo.setLong(1, serviceProductID);
				insertBillingInfo.setLong(2, objDto.getConfigValue());
				insertBillingInfo.setInt(3, 0);
				insertBillingInfo.setInt(4, 0);
				insertBillingInfo.setString(5, "");
				insertBillingInfo.execute();
				finalStatus=insertBillingInfo.getInt(4);
			}
			if(finalStatus==0)
			{
				objDto.setMsgOut("Data Saved SuccessFully!!");
				connection.commit();
			} else if(finalStatus==29)
			{
				objDto.setMsgOut("Please Select PO for the Charge you have added.");
				connection.rollback();
			}
			else
			{
				objDto.setMsgOut("Some Error has Occured,Please Try Again!!");
				connection.rollback();
			}
			
		}
		catch(Exception ex )
		{
			try {
				objDto.setMsgOut("Some Error has Occured,Please Try Again!!");
				connection.rollback();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Inserting ProductCatalog  : "+objDto.getServiceDetailID(), logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				//DbConnection.closeCallableStatement(insertServiceAttDet);
				DbConnection.closeCallableStatement(insertServiceTypeSTR);
				DbConnection.closePreparedStatement(psInsertServiceAttDet);
				DbConnection.closePreparedStatement(psUpdateVCSBundledService);
				DbConnection.closePreparedStatement(psInsertServiceAttDetHistory);
				DbConnection.closeCallableStatement(insertBillingInfo);
				DbConnection.closeCallableStatement(insertHardwareInfo);
				DbConnection.closeCallableStatement(insertServiceInfo);
				DbConnection.closeCallableStatement(insertChargeInfo);
				DbConnection.closeCallableStatement(insertComponentInfo);
				DbConnection.closeCallableStatement(insertLinkageInfo);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception"+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return objDto;
	}
		
	public NewOrderDto DeletePODetailRows(NewOrderDto objDto) throws Exception 
	{
		//Added by nagarjuna
		String methodName="DeletePODetailRows",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		NewOrderDto objRetDto = new NewOrderDto(); 
		
		try
		{
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
			callstmt= connection.prepareCall(sqlSpDeletePODetail);	
			callstmt.setString(1, objDto.getPoSearchDetailNumber());
			callstmt.setLong(2, 0);
			callstmt.setLong(3, 0);
			callstmt.setString(4, "");
			callstmt.execute();
			int err = callstmt.getInt(3);
			
			if(err==0)
			{
				objRetDto.setMsgOut("PO Detail Deleted Successfully");
				connection.commit();
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Deleting PODetails Row  : "+msg, logToFile, logToConsole);//added by nagarjuna
			connection.rollback();
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, "Exception"+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return objRetDto;
	}
	
	public CommonDTO ValidatePO(PoDetailsDTO objDto) throws Exception 
	{
		//Added by nagarjuna
		String methodName="ValidatePO",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		CommonDTO objRetDto = new CommonDTO(); 
		
		try
		{
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
			callstmt= connection.prepareCall(sqlSpValidatePO);	
			callstmt.setLong(1, objDto.getPoNumber());
			callstmt.setLong(2, 1);
			callstmt.setString(3, "");
			callstmt.setLong(4, 0);
			callstmt.setString(5, "");
			callstmt.execute();
			int err = callstmt.getInt(4);
			
			if(err==0)
			{
				objRetDto.setMsgOut("PO Validated Successfully");
				connection.commit();
				if(sendValidateOrderMail(objDto)==1)
					objRetDto.setMsgOut("PO Validated Successfully and Mail Send Successfully");
					
			}
			else
			{
				objRetDto.setMsgOut("Error While Validating PO");
				connection.rollback();
				
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Validating PO  : "+msg, logToFile, logToConsole);//added by nagarjuna
			connection.rollback();
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{

				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, "Exception"+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return objRetDto;
	}
	
	public int sendValidateOrderMail(PoDetailsDTO objDto)
	{
		//Added by nagarjuna
		String methodName="sendValidateOrderMail",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		int isMailSend = 0;
		Connection connection =null;
		PreparedStatement getMailDetails=null;

		ResultSet rsMailDetails  = null;
		//NewOrderDto objNewOrderDto = null;
		try
		{
			connection=DbConnection.getConnectionObject();
			IB2BMailDto objMailDto = new IB2BMailDto();
			getMailDetails= connection.prepareCall(sqlGetMailDetails);
			getMailDetails.setLong(1,objDto.getPoNumber());
			rsMailDetails = getMailDetails.executeQuery();
			
			while(rsMailDetails.next())
			{
				objMailDto.setOrderNo(rsMailDetails.getString("ORDERNO"));
				objMailDto.setAccountMgrEmail(rsMailDetails.getString("ACCOUNT_MANAGER_EMAILID"));
				objMailDto.setCreatorEmail(rsMailDetails.getString("CREATOR_EMAILID"));
				objMailDto.setCodinatorEmailId(rsMailDetails.getString("CODINATOR_EMAIL"));
				objMailDto.setAccountName(rsMailDetails.getString("ACCOUNTNAME"));
			}
									
			objMailDto.setMailTemplateType(AppConstants.NEWORDERTEMPLATE);
			objMailDto.setTo(new String[]{objMailDto.getCreatorEmail() ,objMailDto.getAccountMgrEmail(),objMailDto.getNextTaskAssignedEmail()});
			objMailDto.setCc(new String[]{objMailDto.getCodinatorEmailId()});
			
			ArrayList<String> mailflags = getFlagForTaskEmail();			
			
			//objMailDto.setTo(new String[]{objMailDto.getAccountMgrEmail()});
			//objMailDto.setCc(new String[]{objMailDto.getCreatorEmail()});
			
			if(mailflags.get(0).toString().equalsIgnoreCase("Y"))
			{
				//isMailSend = IB2BMail.sendiB2BMail(objMailDto, connection,true);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error   : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsMailDetails);
				DbConnection.closePreparedStatement(getMailDetails);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception"+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return isMailSend;
	}
	
	public int sendValidateChangeOrderMail(NewOrderDto objDto)
	{
		//Added by nagarjuna
		String methodName="sendValidateChangeOrderMail",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		int isMailSend = 0;
		Connection connection =null;
		PreparedStatement getMailDetails=null;

		ResultSet rsMailDetails  = null;
		NewOrderDto objNewOrderDto = null;
		try
		{
			connection=DbConnection.getConnectionObject();
			IB2BMailDto objMailDto = new IB2BMailDto();
			getMailDetails= connection.prepareCall(sqlGetMailDetails);
			getMailDetails.setLong(1,objDto.getPoNumber());
			rsMailDetails = getMailDetails.executeQuery();
			
			while(rsMailDetails.next())
			{
				objMailDto.setOrderNo(rsMailDetails.getString("ORDERNO"));
				objMailDto.setAccountMgrEmail(rsMailDetails.getString("ACCOUNT_MANAGER_EMAILID"));
				objMailDto.setCreatorEmail(rsMailDetails.getString("CREATOR_EMAILID"));
			}
			objMailDto.setTo(new String[]{objMailDto.getAccountMgrEmail()});
			objMailDto.setCc(new String[]{objMailDto.getCreatorEmail()});
			
			//isMailSend = IB2BMail.sendiB2BMail(objMailDto, connection,true);
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error  : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsMailDetails);
				DbConnection.closePreparedStatement(getMailDetails);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception"+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return isMailSend;
	}
	public int sendPartialInitiatedMail(ViewOrderDto objDto, String serviceID){
		String methodName="sendPartialInitiatedMail",  msg="";
		boolean logToFile=true, logToConsole=true;
		int isMailSend = 0;
		Connection connection =null;
		PreparedStatement getMailDetails=null;
		ResultSet rsMailDetails  = null;
		NewOrderDto objNewOrderDto = null;
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		String pmEmailID=null;
		String pmPhoneNo=null;
		String sedEmailId=null;
		String sedPhoneNo=null;
		try{
			connection=DbConnection.getConnectionObject();
			IB2BMailDto objMailDto = new IB2BMailDto();
			
			getMailDetails= connection.prepareCall(pmEmailId);
			getMailDetails.setLong(1,Long.valueOf(objDto.getPartialInitiateTaskID()));
			rsMailDetails = getMailDetails.executeQuery();
			
			while(rsMailDetails.next()){
				pmEmailID = rsMailDetails.getString("EMAILID");
				pmPhoneNo = rsMailDetails.getString("PHONE_NO");
			}
			
			getMailDetails= connection.prepareCall(tmAppConfigData);
			getMailDetails.setString(1,AppConstants.SED_EMAIL);
			rsMailDetails = getMailDetails.executeQuery();
			
			while(rsMailDetails.next()){
				sedEmailId = rsMailDetails.getString("KEYVALUE");
			}
			
			getMailDetails= connection.prepareCall(tmAppConfigData);
			getMailDetails.setString(1,AppConstants.SED_PHONE);
			rsMailDetails = getMailDetails.executeQuery();
			
			while(rsMailDetails.next()){
				sedPhoneNo = rsMailDetails.getString("KEYVALUE");
			}
			ArrayList objMobile = new ArrayList();
			objMailDto.setCreatorEmail(pmEmailID);
			objMailDto.setNextTaskAssignedEmail(sedEmailId);
			objMobile.add(pmPhoneNo);
			objMobile.add(sedPhoneNo);
			objMailDto.setMailTemplateType(AppConstants.PIEMAILTEMPLATE);
			objMailDto.setTo(new String[]{objMailDto.getNextTaskAssignedEmail()});
			objMailDto.setCc(new String[]{objMailDto.getCreatorEmail()});
			
			ArrayList<String> mailflags = getFlagForTaskEmail();
			IB2BMail objSMS = null;

			if(sedPhoneNo !=null){
				if(sedPhoneNo.contains(",") == true){
					String[] mobileNo = sedPhoneNo.split(",");
					for(int iCount=0;iCount<mobileNo.length;iCount++)
						objMobile.add(mobileNo[iCount]);
				}else
					objMobile.add(sedPhoneNo);
			}
				
			objMailDto.setSms_mobileNo(objMobile); 
			objMailDto.setServiceID(serviceID);
			isMailSend = IB2BMail.sendiB2BMail(objMailDto, null,true,true);
		}catch(Exception ex ){
			/*try {
				connection.rollback();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}*/
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While sending SaveActionMail  : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}finally{
			try{
				DbConnection.closeResultset(rsMailDetails);
				DbConnection.closePreparedStatement(getMailDetails);
				DbConnection.freeConnection(connection);
			}catch (Exception e){
				Utility.LOG(true, true, "Exception"+e);
			}
		}
		return isMailSend;
	}
	public int sendSaveActionMail(ViewOrderDto objDto,Long newTaskid, Connection optionalConn){
		
		//Added by nagarjuna
		String methodName="sendSaveActionMail",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		int isMailSend = 0;
		Connection connection =null;
		Boolean connCreatedHere = false;
		PreparedStatement getMailDetails=null;

		ResultSet rsMailDetails  = null;
		NewOrderDto objNewOrderDto = null;
		//Start[088]
		//Utility utility=new Utility();
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		
		try{
			if(optionalConn==null){
			connection=DbConnection.getConnectionObject();
				connection.setAutoCommit(false);
				connCreatedHere=true;
			}else{
				connection=optionalConn;
			}
			IB2BMailDto objMailDto = new IB2BMailDto();
			getMailDetails= connection.prepareCall(spGetSaveActionMailDetails);
			
			
			//------------========================================================================================================================================
			//---------- Commented by Sumit on 5-Mar-2013 For Temeprary Purpose and It Should be Deployed Through Proc 
			// ----------It was in Concern with Dhiraj for Making This Change instead of Proc
			//---------- Using Of Proc was COmmented and a New Function Was Made "getQryString" Which is having Query Same as Proc
			//------------========================================================================================================================================
			//------------========================================================================================================================================
			//rsMailDetails = getQryString(Long.valueOf(objDto.getTaskID()), connection);

			getMailDetails.setLong(1,Long.valueOf(objDto.getTaskID()));
			getMailDetails.setLong(2,objDto.getOrderno());
			
			rsMailDetails = getMailDetails.executeQuery();

			ArrayList objMobile = new ArrayList();
			String strNextTaskPhoneNos = null;
			String strPrevTaskPhoneNos=null;
			
			while(rsMailDetails.next()){
				msg=""+objMailDto.getOrderNo();
				objMailDto.setOrderNo(rsMailDetails.getString("ORDERNO"));
				objMailDto.setAccountMgrEmail(rsMailDetails.getString("ACTMGREMAILID"));
				objMailDto.setCreatorEmail(rsMailDetails.getString("EMAILID")); //current task email id, who is approving order
				objMailDto.setCodinatorEmailId(rsMailDetails.getString("CODINATOR_EMAIL"));
				objMobile.add(rsMailDetails.getString("CODINATOR_PHONE"));
				//objMobile.add(rsMailDetails.getString("PHONENO"));//current task mobile number, who is approving order
				objMailDto.setAccountName(rsMailDetails.getString("ACCOUNTNAME"));
				objMailDto.setTaskName(rsMailDetails.getString("TASK_NAME"));
				objMailDto.setIsApproved(rsMailDetails.getString("IS_APPROVED"));
				objMailDto.setTaskStartDate(rsMailDetails.getString("TASKSTARTDATE"));
				if (rsMailDetails.getString("TASKSTARTDATE") != null && 
						!"".equals(rsMailDetails.getString("TASKSTARTDATE"))){
					
					Date start_date=df.parse(objMailDto.getTaskStartDate());
					objMailDto.setTaskStartDate((Utility.showDate_Report(start_date)).toUpperCase());
				}
				objMailDto.setTaskEndDate(rsMailDetails.getString("TASKENDDATE"));
				if (rsMailDetails.getString("TASKENDDATE") != null && 
						!"".equals(rsMailDetails.getString("TASKENDDATE"))){
					
					Date end_date=df.parse(objMailDto.getTaskEndDate());
					objMailDto.setTaskEndDate((Utility.showDate_Report(end_date)).toUpperCase());
				}
				objMailDto.setOrderType(rsMailDetails.getString("ORDERTYPE"));
				objMailDto.setNextOwner(rsMailDetails.getString("NEXTOWNER"));
				objMailDto.setRemarks(rsMailDetails.getString("REMARKS"));
				objMailDto.setTaskOwner(rsMailDetails.getString("TASKWONER"));
				objMailDto.setProductName(rsMailDetails.getString("PRODUCTNAME"));
				objMailDto.setNextTaskName(rsMailDetails.getString("NEXTTASKNAME"));
				objMailDto.setNextTaskAssignedEmail(rsMailDetails.getString("NEXTTASKASSIGNEDEMAIL"));
				objMailDto.setCurrentTaskOwner(rsMailDetails.getString("OWNERTYPE_ID"));
				if(!rsMailDetails.getString("OWNERTYPE_ID").equalsIgnoreCase("2")){
					objMailDto.setPrevTaskAssignedEmail(rsMailDetails.getString("PM_EMAILID")); //PM Task
					objMobile.add(rsMailDetails.getString("PM_PHONENO"));
				}else{
					objMailDto.setPrevTaskAssignedEmail("");
				}
				System.err.println("Group Email Id for COPC:->" + rsMailDetails.getString("NEXTTASKASSIGNEDEMAIL") + "..................");
				
				objMobile.add(rsMailDetails.getString("ACTMGREPHONE"));
				strNextTaskPhoneNos = rsMailDetails.getString("NEXTTASKASSIGNEDPHONE");
				objMailDto.setIslasttask( rsMailDetails.getString("IS_LAST_TASK"));
				//strPrevTaskPhoneNos = rsMailDetails.getString("PREVTASKASSIGNEDPHONE");//Start IN1618366
			}

			
			if("New".equalsIgnoreCase(objMailDto.getOrderType())){
				objMailDto.setMailTemplateType(AppConstants.NEWMAILTEMPLATE);
			}else if("Change".equalsIgnoreCase(objMailDto.getOrderType())){
				objMailDto.setMailTemplateType(AppConstants.NEWMAILTEMPLATE_CHANGE);
			}
//			End[088]
			//Comment below code for mail should not go the user who is approving order
			//objMailDto.setTo(new String[]{objMailDto.getCreatorEmail() ,objMailDto.getAccountMgrEmail(),objMailDto.getNextTaskAssignedEmail(),objMailDto.getPrevTaskAssignedEmail()});
			objMailDto.setTo(new String[]{objMailDto.getAccountMgrEmail(),objMailDto.getNextTaskAssignedEmail(),objMailDto.getPrevTaskAssignedEmail()});
			objMailDto.setCc(new String[]{objMailDto.getCodinatorEmailId()});
			
			ArrayList<String> mailflags = getFlagForTaskEmail();
			IB2BMail objSMS = null;
			

			if(newTaskid!=0){
				if(strNextTaskPhoneNos !=null){
					if(strNextTaskPhoneNos.contains(",") == true){
					  String[] mobileNo = 	strNextTaskPhoneNos.split(",");
					  for(int iCount=0;iCount<mobileNo.length;iCount++)
						  objMobile.add(mobileNo[iCount]);
					}else
						objMobile.add(strNextTaskPhoneNos);
				}
				
				//objMailDto = new IB2BMailDto();
				objMailDto.setSms_mobileNo(objMobile); 
				boolean smsFlag = true;

				if (mailflags.get(1).toString().equalsIgnoreCase("N"))
					smsFlag = false;
				
				boolean mailFlag = true;

				if (mailflags.get(0).toString().equalsIgnoreCase("N"))
					mailFlag = false;

				
				isMailSend = IB2BMail.sendiB2BMail(objMailDto, connection,smsFlag,mailFlag);

			}else{
				
				
				objMailDto.setSms_mobileNo(objMobile); 
				boolean smsFlag = true;

				if (mailflags.get(1).toString().equalsIgnoreCase("N"))
					smsFlag = false;
				
				boolean mailFlag = true;

				if (mailflags.get(0).toString().equalsIgnoreCase("N"))
					mailFlag = false;
				
				if(mailflags.get(0).toString().equalsIgnoreCase("Y"))
					isMailSend = IB2BMail.sendiB2BMail(objMailDto, connection,smsFlag,mailFlag);
			}	
		}catch(Exception ex ){
			/*try {
				connection.rollback();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}*/
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While sending SaveActionMail  : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}finally{
			try{
				DbConnection.closeResultset(rsMailDetails);
				DbConnection.closePreparedStatement(getMailDetails);
				if(connCreatedHere)
				DbConnection.freeConnection(connection);
			}catch (Exception e){
				Utility.LOG(true, true, "Exception"+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return isMailSend;
	}
	
	//------------========================================================================================================================================
	//----------- New Function Created by Sumit on 5-Mar-2013 For Sending Mails and It should be Removed After Deployment Using Proc
	//------------========================================================================================================================================
	private ResultSet getQryString(Long taskid,Connection con)
	{
		
		String methodName="getQryString",  msg="";
		boolean logToFile=true, logToConsole=true;
		
		ResultSet rsMailDetails  = null;
		PreparedStatement getMailDetails=null;
		String SQL = "";
		try
		{
			
				
			 
			
				SQL = "  SELECT COALESCE(TPOMASTER.SALES_EMAIL,'-') AS CODINATOR_EMAIL ,TPOMASTER.ORDERNO , ACCOUNTNAME ,  ";
				SQL = SQL + "            COALESCE((SELECT ROLENAME || ' ' || 'Task' FROM IOE.TM_ACCOUNTROLE where roleid = OWNERTYPE_ID),'-')    as TASK_NAME,  ";
				SQL = SQL + "        (SELECT EMAILID FROM IOE.TM_ACCOUNTROLEDETAILS where ID=(SELECT EMPLOYEEID ";
				SQL = SQL + "        FROM IOE.TPOMASTER  ";
				SQL = SQL + "        WHERE ORDERNO =(SELECT distinct Orderno FROM IOE.TPOWORKFLOWTASK WHERE taskid="+ taskid +"))) AS EMAILID,  ";
				SQL = SQL + "         (SELECT PHONE_NO FROM IOE.TM_ACCOUNTROLEDETAILS where ID=(SELECT TASK_ASSIGNED_TO ";
				SQL = SQL + "        FROM IOE.TPOWORKFLOWTASK  ";
				SQL = SQL + "        WHERE PREV_TASK_ID = "+ taskid +")) AS PHONENO,    ACCTMGRDETAILS.EMAILID AS ACTMGREMAILID , ";
				SQL = SQL + "        'Approved' ";
				SQL = SQL + "         as IS_APPROVED,IOE.DATE_FORMAT_DDMMYYYY(TASKSTARTDATE) AS TASKSTARTDATE,IOE.DATE_FORMAT_DDMMYYYY(TASKENDDATE) AS TASKENDDATE, ";
				SQL = SQL + "            ORDERTYPE , ";
				SQL = SQL + "        case when ((SELECT count(1) FROM ioe.TPOWORKFLOWTASK WHERE PREV_TASK_ID="+ taskid +" )!=0) then ";
				SQL = SQL + "            case when ( SELECT FIRSTNAME || ' '|| LASTNAME  FROM IOE.TM_ACCOUNTROLEDETAILS WHERE ID = ";
				SQL = SQL + "        ( ";
				SQL = SQL + "        SELECT TASK_ASSIGNED_TO ";
				SQL = SQL + "        FROM IOE.TPOWORKFLOWTASK  ";
				SQL = SQL + "        WHERE PREV_TASK_ID="+ taskid +" ";
				SQL = SQL + "        )) is null then (( ";
				SQL = SQL + "        SELECT ROLENAME FROM IOE.TM_ACCOUNTROLE WHERE ROLEID = ";
				SQL = SQL + "        ( ";
				SQL = SQL + "        SELECT OWNERTYPE_ID ";
				SQL = SQL + "        FROM IOE.TPOWORKFLOWTASK  ";
				SQL = SQL + "        WHERE PREV_TASK_ID="+ taskid +"  ";
				SQL = SQL + "        ) ";
				SQL = SQL + "        ) || ' Group')  ";
				SQL = SQL + "        else ";
				SQL = SQL + "        ( SELECT FIRSTNAME || ' '|| LASTNAME  FROM IOE.TM_ACCOUNTROLEDETAILS WHERE ID = ";
				SQL = SQL + "        ( ";
				SQL = SQL + "        SELECT TASK_ASSIGNED_TO ";
				SQL = SQL + "        FROM IOE.TPOWORKFLOWTASK  ";
				SQL = SQL + "        WHERE PREV_TASK_ID="+ taskid +"  ";
				SQL = SQL + "        )) end  ";
				SQL = SQL + "        else case when (upper(ORDERTYPE)='CHANGE' and ((SELECT OWNERTYPE_ID ";
				SQL = SQL + "        FROM IOE.TPOWORKFLOWTASK  ";
				SQL = SQL + "        WHERE taskid="+ taskid +")=3)) then 'COPC Group' else 'SED Group' END END  AS NEXTOWNER, ";
				SQL = SQL + "        CASE when ((SELECT TASK_ASSIGNED_TO ";
				SQL = SQL + "        FROM IOE.TPOWORKFLOWTASK  ";
				SQL = SQL + "        WHERE PREV_TASK_ID="+ taskid +") is not null) and ((    SELECT ";
				SQL = SQL + "                    TASK_ASSIGNED_TO  ";
				SQL = SQL + "                FROM ";
				SQL = SQL + "                    IOE.TPOWORKFLOWTASK  ";
				SQL = SQL + "                WHERE ";
				SQL = SQL + "                    PREV_TASK_ID="+ taskid +"   ";
				SQL = SQL + "        ) ";
				SQL = SQL + "        <> 0) then (SELECT EMAILID FROM IOE.TM_ACCOUNTROLEDETAILS WHERE ID = ( ";
				SQL = SQL + "        SELECT TASK_ASSIGNED_TO ";
				SQL = SQL + "        FROM IOE.TPOWORKFLOWTASK  ";
				SQL = SQL + "        WHERE PREV_TASK_ID="+ taskid +" ";
				SQL = SQL + "        ))  else  case when (((SELECT OWNERTYPE_ID ";
				SQL = SQL + "        FROM IOE.TPOWORKFLOWTASK  ";
				SQL = SQL + "        WHERE taskid="+ taskid +")=3)) then (SELECT KEYVALUE FROM ioe.TM_APPCONFIG WHERE KEYNAME='COPC_EMAIL') else ";
				SQL = SQL + "        (SELECT KEYVALUE FROM ioe.TM_APPCONFIG WHERE KEYNAME=(SELECT trim(char(REGIONID)) FROM IOE.TPOMASTER   WHERE ORDERNO =  (select  ORDERNO from ioe.TPOWORKFLOWTASK where TASKID="+ taskid +"))) END END AS NEXTTASKASSIGNEDEMAIL, ";
				SQL = SQL + "            (SELECT ACTION_REMARKS FROM IOE.TPOWORKFLOWTASK WHERE TASKID ="+ taskid +" ) AS REMARKS, ";
				SQL = SQL + "            (SELECT FIRSTNAME|| ' ' || LASTNAME  FROM IOE.TM_ACCOUNTROLEDETAILS WHERE ID = (SELECT CREATED_BY FROM IOE.TPOWORKFLOWTASK WHERE TASKID ="+ taskid +" )) AS TASKWONER, ";
				SQL = SQL + "            ( ";
				SQL = SQL + "                    SELECT COALESCE(SERVICETYPENAME ,'-') || '  '|| COALESCE(SERVICESUBTYPENAME,'-') FROM IOE.TPOSERVICEMASTER  ";
				SQL = SQL + "        INNER JOIN (select SERVICESUBTYPEID,PRODUCTTYPEID AS SERVICEID,SERVICESUBTYPENAME ,PRODUCTNAME AS SERVICETYPENAME  ";
				SQL = SQL + "from ioe.TSERVICESUBTYPE inner join ioe.TPRODUCTTYPE on SERVICEID = PRODUCTTYPEID) AS PRODUCTDETAIL ";
				SQL = SQL + "        ON PRODUCTID = PRODUCTDETAIL.SERVICEID  ";
				SQL = SQL + "        AND SERVICESUBTYPEID = SUBPRODUCTID ";
				SQL = SQL + "        WHERE ORDERNO = (SELECT ORDERNO FROM IOE.TPOWORKFLOWTASK WHERE TASKID="+ taskid +" ) ";
				SQL = SQL + "        fetch first row only) AS PRODUCTNAME, ";
				SQL = SQL + "        CASE when ( ";
				SQL = SQL + "        SELECT ROLENAME FROM IOE.TM_ACCOUNTROLE WHERE ROLEID = ";
				SQL = SQL + "        ( ";
				SQL = SQL + "        SELECT OWNERTYPE_ID ";
				SQL = SQL + "        FROM IOE.TPOWORKFLOWTASK  ";
				SQL = SQL + "        WHERE PREV_TASK_ID="+ taskid +" ";
				SQL = SQL + "        )) is not null then ( ";
				SQL = SQL + "        SELECT ROLENAME FROM IOE.TM_ACCOUNTROLE WHERE ROLEID = ";
				SQL = SQL + "        ( ";
				SQL = SQL + "        SELECT OWNERTYPE_ID ";
				SQL = SQL + "        FROM IOE.TPOWORKFLOWTASK  ";
				SQL = SQL + "        WHERE PREV_TASK_ID="+ taskid +" ";
				SQL = SQL + "        ) ";
				SQL = SQL + "        ) ";
				SQL = SQL + "         else  case when (upper(ORDERTYPE)='CHANGE' and ((SELECT OWNERTYPE_ID ";
				SQL = SQL + "        FROM IOE.TPOWORKFLOWTASK  ";
				SQL = SQL + "        WHERE taskid="+ taskid +")=3)) then 'COPC' else ";
				SQL = SQL + "        'SED' END END AS NEXTTASKNAME ";
				SQL = SQL + "            FROM IOE.TPOWORKFLOWTASK TPOWORKFLOWTASK ";
				SQL = SQL + "            INNER JOIN IOE.TPOMASTER TPOMASTER ";
				SQL = SQL + "                ON TPOWORKFLOWTASK.ORDERNO = TPOMASTER.ORDERNO  ";
				SQL = SQL + "            INNER JOIN IOE.TM_ACCOUNT TM_ACCOUNT ";
				SQL = SQL + "                ON TPOMASTER.ACCOUNTID = TM_ACCOUNT.ACCOUNTID ";
				SQL = SQL + "            INNER JOIN IOE.TM_ACCOUNTROLEDETAILS AS ACCTMGRDETAILS    ";
				SQL = SQL + "                ON ACCTMGRDETAILS.ID = TM_ACCOUNT.ACCOUNTMGRID ";
				SQL = SQL + "            WHERE taskid =  "+ taskid +" ";

				System.err.println(SQL);
				
				getMailDetails= con.prepareCall(SQL);	
				rsMailDetails = getMailDetails.executeQuery();
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While getting QueryString: ", logToFile, logToConsole);
			//ex.printStackTrace();	
		}
	
		return rsMailDetails;
	}

	public int sendSaveActionMailOnRejection(ViewOrderDto objDto, Connection optionalConn){
		//Added by nagarjuna
		String methodName="sendSaveActionMailOnRejection",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		int isMailSend = 0;
		Connection connection =null;
		PreparedStatement getMailDetails=null;
		//Start [088]
		IB2BMailDto objMailDto = new IB2BMailDto();
		ResultSet rsMailDetails  = null;
		NewOrderDto objNewOrderDto = null;
		ArrayList<IB2BMailDto> lstMail = new ArrayList<IB2BMailDto>();		
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		ArrayList objMobile = new ArrayList();
		boolean connCreatedHere = false;
		try{
			if(optionalConn==null){
				connection=DbConnection.getConnectionObject();
				connection.setAutoCommit(false);
				connCreatedHere=true;
			}else{
				connection=optionalConn;
			}
				getMailDetails= connection.prepareCall(spGetSaveActionMailDetailsOnRejection);					
				if(objDto.getTaskID()==null)//for send SED to COPC Rejection
					getMailDetails.setLong(1,0);
				else
					getMailDetails.setLong(1,Long.valueOf(objDto.getTaskID()));
				if(objDto.getOrderNo()==null)
					getMailDetails.setLong(2,Long.valueOf(objDto.getOrderno()));
				else
					getMailDetails.setLong(2,Long.valueOf(objDto.getOrderNo()));
				rsMailDetails = getMailDetails.executeQuery();
				String toemail = "";
			
				while(rsMailDetails.next())
				{
					objMailDto.setOrderNo(rsMailDetails.getString("ORDERNO"));
					objMailDto.setAccountMgrEmail(rsMailDetails.getString("ACTMGREMAILID"));
					objMailDto.setCreatorEmail(rsMailDetails.getString("EMAILID"));//current emailid who is rejecting order
					objMailDto.setCodinatorEmailId(rsMailDetails.getString("CODINATOR_EMAIL"));
					objMailDto.setAccountName(rsMailDetails.getString("ACCOUNTNAME"));
					objMailDto.setNextTaskAssignedEmail(rsMailDetails.getString("NEXTTASKASSIGNEDEMAIL"));
					objMailDto.setTaskName(rsMailDetails.getString("TASK_NAME"));
					objMailDto.setIsApproved(rsMailDetails.getString("IS_APPROVED"));
					objMailDto.setTaskStartDate(rsMailDetails.getString("TASK_START_DATE"));
					if (rsMailDetails.getString("TASK_START_DATE") != null && !"".equals(rsMailDetails.getString("TASK_START_DATE")))
					{
						
						objMailDto.setTaskStartDate((Utility.showDate_Report(new Date(rsMailDetails.getTimestamp("TASK_START_DATE").getTime()))).toUpperCase());
					}
					objMailDto.setTaskEndDate(rsMailDetails.getString("TASK_END_DATE"));
					if (rsMailDetails.getString("TASK_END_DATE") != null && !"".equals(rsMailDetails.getString("TASK_END_DATE")))
					{
						
						objMailDto.setTaskEndDate((Utility.showDate_Report(new Date(rsMailDetails.getTimestamp("TASK_END_DATE").getTime()))).toUpperCase());
					}
					objMailDto.setOrderType(rsMailDetails.getString("ORDERTYPE"));
					objMailDto.setNextOwner(rsMailDetails.getString("NEXTOWNER"));
					objMailDto.setRemarks(rsMailDetails.getString("REMARKS"));
					objMailDto.setTaskOwner(rsMailDetails.getString("TASKWONER"));
					objMailDto.setProductName(rsMailDetails.getString("PRODUCTNAME"));
					objMailDto.setNextTaskName(rsMailDetails.getString("NEXTTASKNAME"));
					
					//------------Change Made By Sumit For Mail to Sent to PM on Rejection -------------------15032013008------Start
					if(!"2".equalsIgnoreCase(rsMailDetails.getString("TASK_OWNER_ID"))){
						objMobile.add(rsMailDetails.getString("PM_PHONE"));
						if(!rsMailDetails.getString("PM_EMAILID").equalsIgnoreCase("NA") && 
								!rsMailDetails.getString("PM_EMAILID").equalsIgnoreCase(" "))
							objMailDto.setpMEmailId(rsMailDetails.getString("PM_EMAILID"));
						else
							objMailDto.setpMEmailId(rsMailDetails.getString("ACTMGREMAILID"));
					}else{
						objMailDto.setpMEmailId("");
					}
					//------------Change Made By Sumit For Mail to Sent to PM on Rejection -------------------15032013008------Start

					objMobile.add(rsMailDetails.getString("COORDINATOR_PHONE"));
					objMobile.add(rsMailDetails.getString("ACTMGRPHONE"));
					
					

					
					
					lstMail.add(objMailDto);
				}
				//objMailDto.setTo(new String[]{objMailDto.getCreatorEmail() ,objMailDto.getAccountMgrEmail(),objMailDto.getpMEmailId(),objMailDto.getNextTaskAssignedEmail()});
				objMailDto.setTo(new String[]{objMailDto.getAccountMgrEmail(),objMailDto.getpMEmailId(),objMailDto.getNextTaskAssignedEmail()});
				objMailDto.setCc(new String[]{objMailDto.getCodinatorEmailId()});
				objMailDto.setSms_mobileNo(objMobile); 
				if("New".equalsIgnoreCase(objMailDto.getOrderType()))
				{
					objMailDto.setMailTemplateType(AppConstants.SAVEACTIONMAILONREJECTION);
				}
				else if("Change".equalsIgnoreCase(objMailDto.getOrderType()))
				{
					objMailDto.setMailTemplateType(AppConstants.SAVEACTIONMAILONREJECTION_CHANGE);
				}
//				End [088]
				
			ArrayList<String> mailflags = getFlagForTaskEmail();
			//for (IB2BMailDto dto : objMailDto) 
			if("2".equalsIgnoreCase(objDto.getActionId())) 
			{
				boolean smsFlag = true;

				if (mailflags.get(1).toString().equalsIgnoreCase("N"))
					smsFlag = false;
				
				boolean mailFlag = true;

				if (mailflags.get(0).toString().equalsIgnoreCase("N"))
					mailFlag = false;
				

			    isMailSend = IB2BMail.sendiB2BMail(objMailDto, connection,smsFlag,mailFlag);
				
				
				
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error at sending SaveActionMail on Rejection: "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsMailDetails);
				DbConnection.closePreparedStatement(getMailDetails);
				if(connCreatedHere)
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception"+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return isMailSend;
	}

	
	public String ValidatePODetail(OrderHeaderDTO objDto) throws Exception 
	{
		//Added by nagarjuna
		String methodName="ValidatePODetail",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		//NewOrderDto objRetDto = new NewOrderDto(); 
		String poDetailNo = "";
		String serviceId = "";
		String retString = "";
		try
		{
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
			callstmt= connection.prepareCall(sqlSpValidatePODetail);	
			callstmt.setLong(1, objDto.getPoNumber());
			rs = callstmt.executeQuery();
			
			if(rs.next())
			{
					poDetailNo = rs.getString("PODETAILNUMBER");
					serviceId = rs.getString("SERVICEID");
					retString = "Contract Period Does not Match with Frequency Seleceted for PO Detail No " +  poDetailNo + " For Service Id " + serviceId;	
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error at Validate PoDetails: "+msg, logToFile, logToConsole);//added by nagarjuna
			connection.rollback();
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, "Exception"+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return retString;
	}
	
	public ArrayList<NewOrderDto> getServiceTreeView(long pLocationCode) 
	{
		//Added by nagarjuna
		String methodName="getServiceTreeView",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		PreparedStatement getNSLocationAddress=null;

		ResultSet rsNSLocationAddress  = null;
		NewOrderDto objNewOrderDto = null;
		ArrayList<NewOrderDto> listNSLocationAddress = new ArrayList<NewOrderDto>();
		try
		{
			connection=DbConnection.getConnectionObject();
			getNSLocationAddress= connection.prepareCall(sqlGetNPAddress);
			getNSLocationAddress.setLong(1,pLocationCode);
			rsNSLocationAddress = getNSLocationAddress.executeQuery();
			while(rsNSLocationAddress.next())
			{
				objNewOrderDto =  new NewOrderDto();
				objNewOrderDto.setStxtSAddress(rsNSLocationAddress.getString("ADDRESS"));
				listNSLocationAddress.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error at getting Service Tree View: "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsNSLocationAddress);
				DbConnection.closePreparedStatement(getNSLocationAddress);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception"+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listNSLocationAddress;
	}

	public NewOrderDto ViewServiceTreeView(NewOrderDto objDto) 
	{
		//Added by nagarjuna
		String methodName="ViewServiceTreeView",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		PreparedStatement getChildMenuItems=null;

		ResultSet rsNSLocationAddress  = null;
		NewOrderDto objNewOrderDto = new NewOrderDto();
		ArrayList<NewOrderDto> listChildMenuItems = new ArrayList<NewOrderDto>();
		try
		{
			connection=DbConnection.getConnectionObject();
			getChildMenuItems= connection.prepareCall(sqlSpViewServiceTree);
			getChildMenuItems.setLong(1,objDto.getServiceId());
			getChildMenuItems.setLong(2,objDto.getOrderNumber());
			rsNSLocationAddress = getChildMenuItems.executeQuery();
			ArrayList<TreeViewDto> lstChildItems = new ArrayList<TreeViewDto>();
			TreeViewDto objTreeView = null;
			String parentNode = "";
			while(rsNSLocationAddress.next())
			{
				objTreeView = new TreeViewDto();
				objTreeView.setTreeViewText(rsNSLocationAddress.getString("SERVICEDETDESCRIPTION"));
				objTreeView.setTreeViewURL(rsNSLocationAddress.getString("LINK"));
				objTreeView.setServiceChildId(rsNSLocationAddress.getString("SERVICEDETAILID"));
				objTreeView.setServiceParentId(rsNSLocationAddress.getString("SERVICEDETPARENTID"));
				
				objTreeView.setServiceProductChildId(rsNSLocationAddress.getString("SERVICEPRODUCTID"));
				objTreeView.setServiceProductParentId(rsNSLocationAddress.getString("PARENT_SERVICEPRODUCTID"));
				objTreeView.setIsChargePresent(rsNSLocationAddress.getInt("ISCHARGEPRESENT"));
				if(rsNSLocationAddress.getInt("ISCOMMERCIALATTRIBUTEPRESENT") == 1 || rsNSLocationAddress.getInt("ISCHARGEPRESENT") == 1){
					objTreeView.setIsCommercial(1);
				}else{
					objTreeView.setIsCommercial(0);
				}
				//System.err.println(rsNSLocationAddress.getInt("ISCHARGEPRESENT"));
				
				lstChildItems.add(objTreeView);
			}
			objNewOrderDto.setLstTreeItems(lstChildItems);
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error at getting view Service Tree View: "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsNSLocationAddress);
				DbConnection.closePreparedStatement(getChildMenuItems);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception"+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return objNewOrderDto;
	}
	
//	To Fetch Attribute List & Values on View Product Catelog Interface
	public ArrayList<FieldAttibuteDTO> fetchServiceAttributeMasterValue(ProductCatelogDTO objDto,Long roleid) 
	{
		//Added by nagarjuna
		String methodName="fetchServiceAttributeMasterValue",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement getServiceAttMaster=null;
		ResultSet rs = null;
		ArrayList<FieldAttibuteDTO> listserviceAttMaster = new ArrayList<FieldAttibuteDTO>();
		FieldAttibuteDTO objNewOrderDto = null;
		
		try
		{
			ArrayList<FieldAttibuteDTO> lstServiceSummary = null;
			connection=DbConnection.getConnectionObject();
			getServiceAttMaster= connection.prepareCall(sqlFetchServiceAttributeMstrValue);	
			getServiceAttMaster.setInt(1, objDto.getServiceProductID());
			getServiceAttMaster.setInt(2, objDto.getServiceDetailID());
			getServiceAttMaster.setLong(3, roleid);
			getServiceAttMaster.setLong(4, objDto.getPoNumber());
			getServiceAttMaster.setLong(5, java.sql.Types.INTEGER);
			rs = getServiceAttMaster.executeQuery();
			int attValue_NEW=getServiceAttMaster.getInt(5);
			while(rs.next())
			{
				objNewOrderDto =  new FieldAttibuteDTO();
				objNewOrderDto.setAttributeID(rs.getInt("ATTVALUEID"));
				objNewOrderDto.setProdAttributeID(rs.getInt("ATTMASTERID"));
				objNewOrderDto.setProdAttributeLabel(rs.getString("ATTDESCRIPTION"));
				objNewOrderDto.setProdDataType(rs.getString("ATTDATATYPE"));
				objNewOrderDto.setProdAlisName(rs.getString("ALISNAME"));
				objNewOrderDto.setProdExpectedValue(rs.getString("EXPECTEDVALUE"));
				objNewOrderDto.setIsCommercial(rs.getInt("IS_COMMERCIAL"));
				if(rs.getString("EXPECTEDVALUE").equalsIgnoreCase("DROPDOWN"))
				{
					//Puneet commenting for performance tuning as directly fetching the text
					if(null != objDto.getOrderType() && !"New".equalsIgnoreCase(objDto.getOrderType().trim())){
						lstServiceSummary = getServiceSummary(rs.getInt("ATTMASTERID"));
						objNewOrderDto.setServiceSummary(lstServiceSummary);
					}
				  objNewOrderDto.setProdExpectedValue(rs.getString("EXPECTEDVALUE"));
				  objNewOrderDto.setDestText(rs.getString("DISPLAY_TEXT"));
				}
				//	lawkush Start
				else if(rs.getString("EXPECTEDVALUE").equalsIgnoreCase("LOV"))
				{
					if(null != objDto.getOrderType() && !"New".equalsIgnoreCase(objDto.getOrderType().trim())){
						lstServiceSummary = getServiceSummary(rs.getInt("ATTMASTERID"));
						objNewOrderDto.setServiceSummaryLov(lstServiceSummary);
					}
				  objNewOrderDto.setProdExpectedValue(rs.getString("EXPECTEDVALUE"));
				  objNewOrderDto.setDestText(rs.getString("DISPLAY_TEXT"));
				}
				//lawkush End
				else
				{
				 objNewOrderDto.setProdExpectedValue(rs.getString("EXPECTEDVALUE"));
				}
				objNewOrderDto.setProdAttMaxLength(rs.getInt("MAXLENGTH"));
				objNewOrderDto.setProdAttVal(rs.getString("ATTVALUE"));
				objNewOrderDto.setMandatory(rs.getString("MANDATORY"));
				objNewOrderDto.setIsServiceSummMandatory(rs.getInt("ISMANDATORY"));
				if(attValue_NEW==1)
				{
					objNewOrderDto.setNewProdAttVal(rs.getString("ATTVALUE_NEW"));
				}
				if(attValue_NEW==0 && (objDto.getOrderType().equals("New")) )
				{
					objNewOrderDto.setNewProdAttVal(rs.getString("ATTVALUE"));
					
				}
				//[037] Start
				objNewOrderDto.setAttServiceName(rs.getString("SERVICETYPENAME"));
				//[037] End
				//Start[079]
				objNewOrderDto.setSubchangetypeNetworkChangeEditable(rs.getInt("SUBCHANGETYPE_NETWORK_CHANGE_EDITABLE"));
				//End[079]
				objNewOrderDto.setChangetypeSolutionChangeEditable(rs.getInt("CHANGETYPE_SOLCHANGE_EDITABLE"));
				objNewOrderDto.setAttMasterId(rs.getInt("SERVICE_SUMMARY_ATT_ID"));
				if(rs.getString("ALERT")!=null)
				{
					objNewOrderDto.setGuiAlert(Messages.getMessageValue(rs.getString("ALERT")));
				}
				else
				{
					objNewOrderDto.setGuiAlert(rs.getString("ALERT"));
				}
				objNewOrderDto.setAttributeKey(rs.getString("ATTRIBUTE_KEY"));
				objNewOrderDto.setLinkPopUpId(rs.getString("LINK_POPUP_ID"));
				objNewOrderDto.setFor_validation(rs.getString("FOR_VALIDATION"));
				objNewOrderDto.setIsServiceSummReadonly(rs.getInt("ISREADONLY"));
				objNewOrderDto.setParntAttId(rs.getInt("PARENT_ATTRMASTERID"));
				objNewOrderDto.setIsParentAtt(rs.getInt("IS_PARENT_ATT"));
				
				listserviceAttMaster.add(objNewOrderDto);
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error at : "+objNewOrderDto.getAttributeID(), logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(getServiceAttMaster);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception"+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listserviceAttMaster;
	}
//	To Fetch Linkage  Info on View Product Catelog Interface
	public static String sqlFetchLinkageDetails="call IOE.GET_LINKAGE_DETAILS(?,?,?)";
	public ArrayList<ProductCatelogDTO> populateLinkageDetails(ServiceLineDTO objDto,String linakageUpdateFlag) 
	{
		//		Added by nagarjuna
		String methodName="populateLinkageDetails",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement getLinkageInfo=null;
		ResultSet rs = null;
		ArrayList<ProductCatelogDTO> listLinkageInfo = new ArrayList<ProductCatelogDTO>();
		ProductCatelogDTO objNewOrderDto = null;
		try
		{
			connection=DbConnection.getConnectionObject();
			getLinkageInfo= connection.prepareCall(sqlFetchLinkageDetails);	
			getLinkageInfo.setInt(1, objDto.getServiceProductID());
			getLinkageInfo.setString(2, linakageUpdateFlag);
			getLinkageInfo.setLong(3, objDto.getServiceId());
			rs = getLinkageInfo.executeQuery();
			while(rs.next())
			{
				objNewOrderDto =  new ProductCatelogDTO();
				if(rs.getString("LOGICALCIRCUITID")== null)
				{
				objNewOrderDto.setLogicalCircuitId("");
				}else
				objNewOrderDto.setLogicalCircuitId(rs.getString("LOGICALCIRCUITID"));
				if(rs.getString("INFRAORDERNO")== null)
				{
					objNewOrderDto.setInfraOderNo("");
				}else
				objNewOrderDto.setInfraOderNo(rs.getString("INFRAORDERNO"));
				if(rs.getString("METASOLVCIRCUITID")== null)
				{
				 objNewOrderDto.setMetasolvCircuitId("");
				}else
				objNewOrderDto.setMetasolvCircuitId(rs.getString("METASOLVCIRCUITID"));
				
				if(rs.getString("LOGICALCIRCUITID_NEW")== null)
				{
				objNewOrderDto.setLogicalCircuitId_new("");
				}else
				objNewOrderDto.setLogicalCircuitId_new(rs.getString("LOGICALCIRCUITID_NEW"));
				if(rs.getString("INFRAORDERNO_NEW")== null)
				{
					objNewOrderDto.setInfraOderNo_new("");
				}else
				objNewOrderDto.setInfraOderNo_new(rs.getString("INFRAORDERNO_NEW"));
				if(rs.getString("METASOLVCIRCUITID_NEW")== null)
				{
				 objNewOrderDto.setMetasolvCircuitId_new("");
				}else
				objNewOrderDto.setMetasolvCircuitId_new(rs.getString("METASOLVCIRCUITID_NEW"));
				
				listLinkageInfo.add(objNewOrderDto);
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error at populating Linkage Details: "+objNewOrderDto.getLogicalCircuitId(), logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(getLinkageInfo);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception"+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listLinkageInfo;
	}
	//	To Fetch Charge Details on View Product Catelog Interface
	public ArrayList<ChargeComponentDTO> fetchChargeDetails(ServiceLineDTO objDto){
		
		//Added by nagarjuna
		String methodName="fetchChargeDetails",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement getChargeMaster=null;
		ResultSet rs = null;
		ArrayList<ChargeComponentDTO> listChargeMaster = new ArrayList<ChargeComponentDTO>();
		ChargeComponentDTO objNewOrderDto = null;
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat(AppConstants.DATE_FORMAT_PROC);
		int recordCount;
		try
		{
			connection=DbConnection.getConnectionObject();
			getChargeMaster= connection.prepareCall(sqlFetchChargeDetails);
			getChargeMaster.setInt(1,objDto.getStartIndex());
			getChargeMaster.setInt(2,objDto.getEndIndex());	
			getChargeMaster.setString(3,objDto.getSortBycolumn());
			getChargeMaster.setString(4,objDto.getSortByOrder());			
			getChargeMaster.setInt(5, objDto.getServiceProductID());
			getChargeMaster.setInt(6, objDto.getServiceId());
			getChargeMaster.setDouble(7, 0);
			rs = getChargeMaster.executeQuery();
			while(rs.next())
			{
				objNewOrderDto =  new ChargeComponentDTO();
				objDto.getPagingSorting().setPageRecords(objDto.getPageRecords());
				objNewOrderDto.setChargeInfoID(rs.getInt("CHARGEINFOID"));
				objNewOrderDto.setChargeName(rs.getString("CHARGENAME"));
				objNewOrderDto.setChargeAnnotation(rs.getString("ANNOTATION"));
				objNewOrderDto.setChargePeriod(rs.getInt("CHARGEPERIOD"));
				objNewOrderDto.setChargeType(rs.getInt("CHARGESTYPE"));
				objNewOrderDto.setChargeAmount(rs.getDouble("CHARGEAMOUNT"));
				objNewOrderDto.setChargeFrequency(rs.getString("CHARGEFREQUENCY"));
				objNewOrderDto.setChargeFrequencyAmt(rs.getDouble("CHARGEFREQUENCYAMT"));
				objNewOrderDto.setStartDateLogic(rs.getString("STARTDATELOGIC"));
				objNewOrderDto.setEndDateLogic(rs.getString("ENDDATELOGIC"));
				objNewOrderDto.setStartDateDays(rs.getInt("START_DATE_DAYS"));
				objNewOrderDto.setStartDateMonth(rs.getInt("START_DATE_MONTH"));
				objNewOrderDto.setEndDateDays(rs.getInt("END_DATE_DAYS"));
				objNewOrderDto.setEndDateMonth(rs.getInt("END_DATE_MONTH"));
				objNewOrderDto.setChargeNameID(rs.getInt("CHARGENAME_ID"));
				objNewOrderDto.setChargeNameVal(rs.getString("CHARGE_NAME_VAL"));
				//Puneet adding line item type and subline item type
				objNewOrderDto.setLineItemType(rs.getString("LINEITEMTYPE"));
				objNewOrderDto.setSubLineItemType(rs.getString("SUBLINEITEMTYPE"));
				//026 start
				objNewOrderDto.setCreated_serviceid(rs.getLong("CREATEDIN_SERVICEID"));//Added by manisha
				//026 end
				objNewOrderDto.setExcludecheck(rs.getInt("EXCLUDE"));//Added by manisha
				objNewOrderDto.setChargeRemarks(rs.getString("REMARKS"));
				objNewOrderDto.setStartDate(rs.getString("START_DATE"));
				objNewOrderDto.setEndDate(rs.getString("END_DATE"));
				objNewOrderDto.setPaymentTerm1(rs.getInt("PAYMENTTERM1"));
				objNewOrderDto.setPaymentTerm2(rs.getInt("PAYMENTTERM2"));
				objNewOrderDto.setPaymentTerm3(rs.getInt("PAYMENTTERM3"));
				objNewOrderDto.setPaymentTerm4(rs.getInt("PAYMENTTERM4"));
				objNewOrderDto.setLineItemId(rs.getInt("LINEITEMID"));
				objNewOrderDto.setSublineItemId(rs.getInt("SUBLINEITEMID"));
				objNewOrderDto.setFxChargeId(rs.getInt("FX_CHARGEID")); //[100]
				//below line add by Anil for CLEP requirement
					objNewOrderDto.setCharge_creation_source(rs.getString("CHARGE_CREATE_SOURCE"));
				//end CLEP
				if(rs.getDate("LD_DATE_CLAUSE")==null)
					objNewOrderDto.setLdDateClause("");
				else
					objNewOrderDto.setLdDateClause(simpleDateFormat.format(rs.getDate("LD_DATE_CLAUSE")));
				if(rs.getInt("DELAYED_TIME_IN_DAYES")==0)
					objNewOrderDto.setDelayedTimeInDayes("");
				else
					objNewOrderDto.setDelayedTimeInDayes(String.valueOf(rs.getInt("DELAYED_TIME_IN_DAYES")));
				if(rs.getInt("LD_PERCENTAGE")==0)
				 objNewOrderDto.setLdPercentage("");
				else				
					objNewOrderDto.setLdPercentage(String.valueOf(rs.getInt("LD_PERCENTAGE")));
				if(rs.getInt("MAX_PENALTY_PERCENTAGE")==0)
					 objNewOrderDto.setMaxPercentage("");
				else				
					objNewOrderDto.setMaxPercentage(String.valueOf(rs.getInt("MAX_PENALTY_PERCENTAGE")));
				String taxrate = rs.getString("TAXRATE");
				if(rs.wasNull()){
					//Fetching tax rate as discussed with Ravneet
					taxrate = populateTaxRate(objDto.getPonum(), Long.valueOf(rs.getString("CHARGENAME")), null);
				}
				if(null == taxrate || "null".equalsIgnoreCase(taxrate.trim()))
					taxrate = "";
				objNewOrderDto.setTaxRate(taxrate);
				objNewOrderDto.setTotalChargeAmount(getChargeMaster.getDouble(7));
				recordCount=rs.getInt("FULL_REC_COUNT");
				objDto.getPagingSorting().setRecordCount(recordCount);	
				objNewOrderDto.setMaxPageNo(objDto.getPagingSorting().getMaxPageNumber());				
				listChargeMaster.add(objNewOrderDto);
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error at fetching Charge Details: "+objNewOrderDto.getChargeInfoID(), logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(getChargeMaster);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listChargeMaster;
	}
	
	//Meenakshi
//	To Fetch Charge Details on View Product Catelog Interface
	public ArrayList<ChargeComponentDTO> fetchChargeDetailsForChangeOrders(ServiceLineDTO objDto) 
	{
		//Added by nagarjuna
		String methodName="fetchChargeDetailsForChangeOrders",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement getChargeMaster=null;
		ResultSet rs = null;
		ArrayList<ChargeComponentDTO> listChargeMaster = new ArrayList<ChargeComponentDTO>();
		ChargeComponentDTO objNewOrderDto = null;
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat(AppConstants.DATE_FORMAT_PROC);
		int recordCount;
		try
		{
			connection=DbConnection.getConnectionObject();
			getChargeMaster= connection.prepareCall(sqlFetchChargeDetailsForChangeOrders);	
			getChargeMaster.setInt(1,objDto.getStartIndex());
			getChargeMaster.setInt(2,objDto.getEndIndex());	
			getChargeMaster.setString(3,objDto.getSortBycolumn());
			getChargeMaster.setString(4,objDto.getSortByOrder());			
			getChargeMaster.setInt(5, objDto.getServiceProductID());
			getChargeMaster.setInt(6, objDto.getServiceId());		
			getChargeMaster.setInt(7, objDto.getChangeTypeId());			
			getChargeMaster.setDouble(8, 0);
			rs = getChargeMaster.executeQuery();
			while(rs.next())
			{
				objNewOrderDto =  new ChargeComponentDTO();
				objNewOrderDto.setLineItemType(rs.getString("LINEITEMTYPE"));
				objNewOrderDto.setSubLineItemType(rs.getString("SUBLINEITEMTYPE"));
				objNewOrderDto.setTaxRate(rs.getString("TAXRATE"));
				objDto.getPagingSorting().setPageRecords(objDto.getPageRecords());
				objNewOrderDto.setChargeInfoID(rs.getInt("CHARGEINFOID"));
				objNewOrderDto.setChargeName(rs.getString("CHARGENAME"));
				objNewOrderDto.setChargeAnnotation(rs.getString("ANNOTATION"));
				objNewOrderDto.setChargePeriod(rs.getInt("CHARGEPERIOD"));
				objNewOrderDto.setChargeType(rs.getInt("CHARGESTYPE"));
				objNewOrderDto.setChargeAmount(rs.getDouble("CHARGEAMOUNT"));
				objNewOrderDto.setChargeFrequency(rs.getString("CHARGEFREQUENCY"));
				objNewOrderDto.setChargeFrequencyAmt(rs.getDouble("CHARGEFREQUENCYAMT"));
				objNewOrderDto.setStartDateLogic(rs.getString("STARTDATELOGIC"));
				objNewOrderDto.setEndDateLogic(rs.getString("ENDDATELOGIC"));
				objNewOrderDto.setStartDateDays(rs.getInt("START_DATE_DAYS"));
				objNewOrderDto.setStartDateMonth(rs.getInt("START_DATE_MONTH"));
				objNewOrderDto.setEndDateDays(rs.getInt("END_DATE_DAYS"));
				objNewOrderDto.setEndDateMonth(rs.getInt("END_DATE_MONTH"));
				objNewOrderDto.setChargeNameID(rs.getInt("CHARGENAME_ID"));
				objNewOrderDto.setIsdisconnected(rs.getInt("ISDISCONNECTED"));//Added by Ashutosh
				//027 start
				objNewOrderDto.setCreated_serviceid(rs.getLong("CREATEDIN_SERVICEID"));//Added by manisha
				//027 end
				objNewOrderDto.setExcludecheck(rs.getInt("EXCLUDE"));//Added by manisha
				objNewOrderDto.setPoNoOfCharge(rs.getString("PODETAILNO"));
				objNewOrderDto.setChargeRemarks(rs.getString("REMARKS"));
				objNewOrderDto.setStartDate(rs.getString("START_DATE"));
				objNewOrderDto.setEndDate(rs.getString("END_DATE"));
				objNewOrderDto.setPaymentTerm1(rs.getInt("PAYMENTTERM1"));
				objNewOrderDto.setPaymentTerm2(rs.getInt("PAYMENTTERM2"));
				objNewOrderDto.setPaymentTerm3(rs.getInt("PAYMENTTERM3"));
				objNewOrderDto.setPaymentTerm4(rs.getInt("PAYMENTTERM4"));
				objNewOrderDto.setChargeNameVal(rs.getString("CHARGE_NAME_VAL"));
				objNewOrderDto.setDisconnected_orderno(rs.getString("DISCONNECTED_IN_ORDER_NO"));
				objNewOrderDto.setObLinkChargeId(rs.getLong("OB_LINK_CHARGEID"));
				objNewOrderDto.setFxChargeId(rs.getInt("FX_CHARGEID")); //100
				
				
				if(rs.getInt("CHARGESTYPE") == 1 && rs.getInt("ISRCACTIVE") == 1)
				{
					
					objNewOrderDto.setRcActiveDateCrossed("1");
				}else if(rs.getInt("CHARGESTYPE") == 1 && rs.getInt("ISRCACTIVE") == 0){
					objNewOrderDto.setRcActiveDateCrossed("0");
				}
				
				if(rs.getInt("CHARGESTYPE") == 2 && rs.getInt("ISNRCACTIVE") == 1)
				{
					
					objNewOrderDto.setNrcActiveDateCrossed("1");
				}else if(rs.getInt("CHARGESTYPE") == 2 && rs.getInt("ISNRCACTIVE") == 0){
					objNewOrderDto.setNrcActiveDateCrossed("0");
				}
				if(rs.getInt("CHARGESTYPE") == 1 && rs.getInt("ISRCINACTIVE_DATE_MEET") == 1)
				{
					
					objNewOrderDto.setRcInactiveDateCrossed("1");
				}else if(rs.getInt("CHARGESTYPE") == 1 && rs.getInt("ISRCINACTIVE_DATE_MEET") == 0){
					objNewOrderDto.setRcInactiveDateCrossed("0");
				}
				
				objNewOrderDto.setDisconnection_type(rs.getString("DISCONNECTION_TYPE"));//Added by manisha
				objNewOrderDto.setLineItemId(rs.getInt("LINEITEMID"));
				objNewOrderDto.setSublineItemId(rs.getInt("SUBLINEITEMID"));
				
					//==================[ start clep changes add by anil]==========================================================
						objNewOrderDto.setCharge_creation_source(rs.getString("CHARGE_CREATE_SOURCE"));
					//==================[ end clep changes]==========================================================
				if(rs.getDate("LD_DATE_CLAUSE")==null)
					objNewOrderDto.setLdDateClause("");
				else
					objNewOrderDto.setLdDateClause(simpleDateFormat.format(rs.getDate("LD_DATE_CLAUSE")));
				if(rs.getInt("DELAYED_TIME_IN_DAYES")==0)
					objNewOrderDto.setDelayedTimeInDayes("");
				else
					objNewOrderDto.setDelayedTimeInDayes(String.valueOf(rs.getInt("DELAYED_TIME_IN_DAYES")));
				if(rs.getInt("LD_PERCENTAGE")==0)
				 objNewOrderDto.setLdPercentage("");
				else				
					objNewOrderDto.setLdPercentage(String.valueOf(rs.getInt("LD_PERCENTAGE")));
				if(rs.getInt("MAX_PENALTY_PERCENTAGE")==0)
					 objNewOrderDto.setMaxPercentage("");
					else				
						objNewOrderDto.setMaxPercentage(String.valueOf(rs.getInt("MAX_PENALTY_PERCENTAGE")));
				objNewOrderDto.setTotalChargeAmount(getChargeMaster.getDouble(8));
				//[140] start
				objNewOrderDto.setIsRedisconnected(rs.getInt("IS_REDISCONNECTED"));
				//[140] end
				recordCount=rs.getInt("FULL_REC_COUNT");
				objDto.getPagingSorting().setRecordCount(recordCount);	
				objNewOrderDto.setMaxPageNo(objDto.getPagingSorting().getMaxPageNumber());				
				listChargeMaster.add(objNewOrderDto);
			}
		}catch(Exception ex){
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error at fetch Charge Details for Change order: "+objNewOrderDto.getChargeInfoID(), logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}finally{
			try{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(getChargeMaster);
				DbConnection.freeConnection(connection);
			}catch (Exception e){
				Utility.LOG(true, true, "Exception "+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listChargeMaster;
	}
	
	//	To Fetch Billing Info on View Product Catelog Interface
	public ArrayList<ProductCatelogDTO> fetchBillingDetails(ServiceLineDTO objDto){
	
		//Added by nagarjuna
		String methodName="fetchBillingDetails",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement getBillingMaster=null;
		ResultSet rs = null;
		ArrayList<ProductCatelogDTO> listBillingMaster = new ArrayList<ProductCatelogDTO>();
		ProductCatelogDTO objNewOrderDto = null;
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat(AppConstants.DATE_FORMAT_PROC);
		try{
			connection=DbConnection.getConnectionObject();
			getBillingMaster= connection.prepareCall(sqlFetchBillingDetails);	
			getBillingMaster.setInt(1, objDto.getServiceProductID());
			//start[027]
			getBillingMaster.setLong(2, objDto.getServiceId());
			//End[027]
			rs = getBillingMaster.executeQuery();
			while(rs.next()){
				objNewOrderDto =  new ProductCatelogDTO();
				
				objNewOrderDto.setBillingInfoID(rs.getInt("BILLINGINFOID"));
				objNewOrderDto.setPodetailID(rs.getInt("PODETAILID"));
				
				//Start by Saurabh to remove null date with blank in solution change view product catelog
				if(rs.getDate("PODATE")==null){
					objNewOrderDto.setPoDate("");
				}else{
					objNewOrderDto.setPoDate(simpleDateFormat.format(rs.getDate("PODATE")));
				}
				//End by Saurabh
				//Start by Lawkush
				if(rs.getDate("CUSTPODATE")==null){
					objNewOrderDto.setCustPoDate("");
				}else{
					objNewOrderDto.setCustPoDate(simpleDateFormat.format(rs.getDate("CUSTPODATE")));
				}
				//End by Lawkush

				objNewOrderDto.setAccountID(rs.getInt("ACCOUNTID"));
				objNewOrderDto.setCreditPeriod(rs.getInt("CREDITPERIOD"));
				objNewOrderDto.setCurrencyCode(rs.getString("CURSHORTCODE"));
				objNewOrderDto.setEntityID(rs.getInt("ENTITYID"));
				objNewOrderDto.setBillingMode(rs.getString("BILLINGMODE"));
				objNewOrderDto.setBillingformat(rs.getString("BILLINGFORMAT"));
				objNewOrderDto.setLicCompanyID(rs.getInt("LICENCECOID"));
				if(null == rs.getString("LCOMPANYNAME"))
					objNewOrderDto.setLicCompanyName("");
				else
					objNewOrderDto.setLicCompanyName(rs.getString("LCOMPANYNAME"));
				
				objNewOrderDto.setBillingType(rs.getInt("BILLINGTYPE"));
				objNewOrderDto.setBillingTypeName(rs.getString("BILLING_TYPENAME"));
				objNewOrderDto.setTaxation(rs.getString("TAXATION"));
				objNewOrderDto.setCommitmentPeriod(rs.getInt("COMMITMENTPERIOD"));
				objNewOrderDto.setBillingLevel(rs.getString("BILLINGLEVEL"));
				objNewOrderDto.setBillingLevelName(rs.getString("BILLING_LEVELNAME"));
				objNewOrderDto.setPenaltyClause(rs.getString("PENALTYCLAUSE"));
				objNewOrderDto.setBillingBCPId(rs.getString("BCPID"));
				objNewOrderDto.setBcpName(rs.getString("BCPNAME"));
				objNewOrderDto.setNoticePeriod(rs.getLong("NOTICEPERIOD"));
				objNewOrderDto.setBaddress1(rs.getString("ADDRESS1"));
				objNewOrderDto.setBaddress2(rs.getString("ADDRESS2"));
				objNewOrderDto.setBaddress3(rs.getString("ADDRESS3"));
				objNewOrderDto.setBaddress4(rs.getString("ADDRESS4"));
				objNewOrderDto.setBstate(rs.getString("STATE_NAME"));
				objNewOrderDto.setBcity(rs.getString("CITY_NAME"));
				objNewOrderDto.setBcountry(rs.getString("COUNTRY_NAME"));
				objNewOrderDto.setBpincode(rs.getString("POSTAL_CODE"));
				objNewOrderDto.setBcontactNo(rs.getString("TELEPHONENO"));
				objNewOrderDto.setBemailid(rs.getString("EMAIL_ID"));
				objNewOrderDto.setBillingLevelNo(rs.getLong("BILLING_LEVEL_NO"));
				//Start[023]
				objNewOrderDto.setIsNfa(rs.getInt("IS_NFA"));
				objNewOrderDto.setDesignation(rs.getString("DESIGNATION"));
				objNewOrderDto.setLst_No(rs.getString("LST_NO"));
				objNewOrderDto.setLstDate(rs.getString("LST_DATE"));
				//End[023]
				objNewOrderDto.setStdReasonId(rs.getInt("STDREASION_ID"));
				objNewOrderDto.setIsUsage(rs.getInt("ISUSAGE"));
				objNewOrderDto.setBillingScenario(rs.getInt("BILLING_SCENARIO"));
				objNewOrderDto.setFxRedirectionLSI(rs.getInt("FX_REDIRECTION_LSI"));
				objNewOrderDto.setFxRedirectionSPID(rs.getInt("FX_REDIRECTION_SPID"));
				objNewOrderDto.setBcontactName(rs.getString("BCPCONTACTNAME"));
				objNewOrderDto.setReasonName(rs.getString("REASONNAME"));
				//Start[090]
				objNewOrderDto.setRevCircle(rs.getString("REV_CIRCLE"));
				//End[090]
				//Puneet for auto suggest adding taxation value
				objNewOrderDto.setTaxationName(rs.getString("TAXATIONVALUE"));
				//Puneet for auto suggest adding entity value
				if(null == rs.getString("ENTITYNAME") )
					objNewOrderDto.setEntityName("");
				else
					objNewOrderDto.setEntityName(rs.getString("ENTITYNAME"));
				objNewOrderDto.setIsFLE(rs.getString("ISFLE"));
				if(null == rs.getString("CUSTPONUMBER") || "".equals(rs.getString("CUSTPONUMBER").trim()))
					objNewOrderDto.setCustPONumber("");
				else
					objNewOrderDto.setCustPONumber(rs.getString("CUSTPONUMBER"));
				if(null == rs.getString("POREMARKS") || "".equals(rs.getString("POREMARKS").trim()))
					objNewOrderDto.setPoRemarks("");
				else
					objNewOrderDto.setPoRemarks(rs.getString("POREMARKS"));
				objNewOrderDto.setPeriodInMonths(rs.getString("CONTRACTPERIOD"));
				if(rs.getDate("CUSTPODATE")==null){
					objNewOrderDto.setCustPoDate("");
				}else{
					objNewOrderDto.setCustPoDate(simpleDateFormat.format(rs.getDate("CUSTPODATE")));
				}
				if(rs.getString("CREDIT_PERIODNAME")==null){
					objNewOrderDto.setCreditPeriodName("");
				}else{
					objNewOrderDto.setCreditPeriodName(rs.getString("CREDIT_PERIODNAME"));
				}
				objNewOrderDto.setBillingFormatName(rs.getString("BILLING_FORMATNAME"));
				if(rs.getString("BILLINGMODENAME")==null){
					objNewOrderDto.setBillingModeName("");
				}else{
					objNewOrderDto.setBillingModeName(rs.getString("BILLINGMODENAME"));
				}
				//WARRANTY CLAUSE ADDED BY MANISHA start
				objNewOrderDto.setWarrantyClause(rs.getString("WARRANTYCLAUSE"));
				//WARRANTY CLAUSE ADDED BY MANISHA end
				//  bcp details for services ADDED BY MANISHA START
				objNewOrderDto.setBillingBCPIDService(rs.getString("SERVICE_BCPID"));
				objNewOrderDto.setBillingBCPNameService(rs.getString("SERVICE_BCPNAME"));
				objNewOrderDto.setBcpAddress1Service(rs.getString("SERVICE_ADDRESS1"));
				objNewOrderDto.setBcpAddress2Service(rs.getString("SERVICE_ADDRESS2"));
				objNewOrderDto.setBcpAddress3Service(rs.getString("SERVICE_ADDRESS3"));
				objNewOrderDto.setBcpAddress4Service(rs.getString("SERVICE_ADDRESS4"));
				objNewOrderDto.setBcpstateservice(rs.getString("SERVICE_STATE_NAME"));
				objNewOrderDto.setBcpcityservice(rs.getString("SERVICE_CITY_NAME"));
				objNewOrderDto.setBcpcountryservice(rs.getString("SERVICE_COUNTRY_NAME"));
				objNewOrderDto.setBpin_code_service(rs.getString("SERVICE_POSTAL_CODE"));
				objNewOrderDto.setBcontact_no_service(rs.getString("SERVICE_TELEPHONENO"));
				objNewOrderDto.setBcontactname_service(rs.getString("SERVICE_BCPCONTACTNAME"));
				objNewOrderDto.setBemailid_service(rs.getString("SERVICE_EMAIL_ID"));
				objNewOrderDto.setBdesignation_service(rs.getString("SERVICE_DESIGNATION"));
				objNewOrderDto.setBlsi_no_service(rs.getString("SERVICE_LSI_NO"));
				objNewOrderDto.setBlsi_date_service(rs.getString("SERVICE_LST_DATE"));
				objNewOrderDto.setBcircle_service(rs.getString("SERVICE_REV_CIRCLE"));
				
				//satyapan OSP By Nagarjuna
				objNewOrderDto.setIsOSPTagging(rs.getInt("IS_OSP"));
				if(rs.getString("OSP_REG_NO")==null && rs.getString("OSP_REG_NO")==""){
					objNewOrderDto.setTxtOSPRegNo("");
				}else{
					objNewOrderDto.setTxtOSPRegNo(rs.getString("OSP_REG_NO"));
				}
				if (rs.getDate("OSP_REG_DATE")==null ){
					objNewOrderDto.setTxtOSPRegDate("");
				}else{
					objNewOrderDto.setTxtOSPRegDate((Utility.showDate_std_fmt(rs.getDate("OSP_REG_DATE"))).toUpperCase());
				}
				//End satyapan OSP By Nagarjuna
				//  bcp details for services ADDED BY MANISHA end
				listBillingMaster.add(objNewOrderDto);
			}
		}catch(Exception ex){
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error at fetch Billing Details : "+objNewOrderDto.getAccountID(), logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}finally{
			try{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(getBillingMaster);
			
				DbConnection.freeConnection(connection);
			}catch (Exception e){
				
				Utility.LOG(true, true, "Exception "+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listBillingMaster;
	}
	
	//	To Fetch Hardware Info on View Product Catelog Interface
	public ArrayList<ProductCatelogDTO> fetchHardwareDetails(ServiceLineDTO objDto) 
	{
		//Added by nagarjuna
		String methodName="fetchHardwareDetails",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement getHardwareMaster=null;
		ResultSet rs = null;
		ArrayList<ProductCatelogDTO> listHardwareMaster = new ArrayList<ProductCatelogDTO>();
		ProductCatelogDTO objNewOrderDto = null;
		//SimpleDateFormat simpleDateFormat = new SimpleDateFormat(AppConstants.DATE_FORMAT_PROC);
		try
		{
			connection=DbConnection.getConnectionObject();
			getHardwareMaster= connection.prepareCall(sqlFetchHardwareDetails);	
			getHardwareMaster.setInt(1, objDto.getServiceProductID());
			//[030] Start
			getHardwareMaster.setInt(2, objDto.getServiceId());
			//[030] End
			rs = getHardwareMaster.executeQuery();
			while(rs.next())
			{
				objNewOrderDto =  new ProductCatelogDTO();
				objNewOrderDto.setHardwareDetailID(rs.getInt("HARDWAREDETAILSID"));
				objNewOrderDto.setSelectedDispatchID(rs.getInt("DISPATCHADDCODE"));
				objNewOrderDto.setDispatchName(rs.getString("DISPATCH_NAME"));
				objNewOrderDto.setSelectedStoreID(rs.getInt("STOREID"));
				objNewOrderDto.setStoreName(rs.getString("STORENAME"));
				objNewOrderDto.setFormAvailable(rs.getString("FORMAVAILABLE"));
				objNewOrderDto.setHardwareType(rs.getString("HARDWARETYPE"));
				objNewOrderDto.setHardwaretypeName(rs.getString("HARDWARETYPENAME"));
				objNewOrderDto.setSaleNature(rs.getString("SALENATURE"));
				objNewOrderDto.setSaleNatureName(rs.getString("SALENATURENAME"));
				objNewOrderDto.setSaleType(rs.getString("SALETYPE"));
				objNewOrderDto.setSaleTypeName(rs.getString("SALETYPENAME"));
				objNewOrderDto.setStartDateLogic(rs.getString("STARTDATELOGIC"));
				objNewOrderDto.setEndDateLogic(rs.getString("ENDDATELOGIC"));
			//	objNewOrderDto.setWarrentyMonths(rs.getInt("WARRENTYMONTHS"));
				objNewOrderDto.setStartDate(rs.getString("STARTDATE"));
				objNewOrderDto.setEndDate(rs.getString("ENDDATE"));
				//lawkush start
				objNewOrderDto.setTxtStartMonth(rs.getInt("START_MONTHS"));
				objNewOrderDto.setTxtStartDays(rs.getInt("START_DAYS"));
				objNewOrderDto.setTxtEndMonth(rs.getInt("END_MONTH"));
				objNewOrderDto.setTxtEndDays(rs.getInt("END_DAYS"));
				objNewOrderDto.setTxtExtMonth(rs.getInt("EXT_MONTHS"));
				objNewOrderDto.setTxtExtDays(rs.getInt("EXT_DAYS"));
				objNewOrderDto.setFormName(rs.getString("FORMNAME"));
				objNewOrderDto.setDispatchContactName(rs.getString("DISPATCH_CONTACTNAME"));
				SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy");
				if(rs.getDate("EXT_SUPPORT_END_DATE")==null){
					objNewOrderDto.setTxtExtDate(rs.getString("EXT_SUPPORT_END_DATE"));
				}else{
					objNewOrderDto.setTxtExtDate(sdf.format(rs.getDate("EXT_SUPPORT_END_DATE")));
				}
				//lawkush end
				listHardwareMaster.add(objNewOrderDto);
			}
		}catch(Exception ex ){
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error at fetch Hardware Details : "+objNewOrderDto.getHardwareDetailID(), logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}finally{
			try{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(getHardwareMaster);
				DbConnection.freeConnection(connection);
			}catch (Exception e){
				
				Utility.LOG(true, true, "Exception "+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listHardwareMaster;
	}
	
	//	To Fetch LOCATION Info on View Product Catelog Interface
	public ArrayList<NewOrderDto> fetchLocationDetails(NewOrderDto objDto){
		
		//Added by nagarjuna
		String methodName="fetchLocationDetails",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement getLocationMaster=null;
		ResultSet rs = null;
		ArrayList<NewOrderDto> listLocationMaster = new ArrayList<NewOrderDto>();
		NewOrderDto objNewOrderDto = null;
		
		try{
			connection=DbConnection.getConnectionObject();
			getLocationMaster= connection.prepareCall(sqlFetchLocationDetails);	
			getLocationMaster.setInt(1, objDto.getServiceProductID());
			//[030] Start
			getLocationMaster.setInt(2, objDto.getServiceId());
			//[030] Start
			rs = getLocationMaster.executeQuery();
			while(rs.next()){
				objNewOrderDto =  new NewOrderDto();
				
				objNewOrderDto.setLocationInfoID(rs.getInt("LOCATIONID"));
				objNewOrderDto.setToaddress(rs.getString("TO_ADDRESS"));
				objNewOrderDto.setFaddress(rs.getString("FROM_ADDRESS"));
				objNewOrderDto.setSelectedPriLocType(rs.getInt("PRIMARYLOCATIONTYPE"));
				objNewOrderDto.setSelectedSecLocType(rs.getInt("SECONDARYLOCATIONTYPE"));
				int primaryLocation=objNewOrderDto.getSelectedPriLocType();
				int secondaryLocation=objNewOrderDto.getSelectedSecLocType();
				if(primaryLocation==1){
					objNewOrderDto.setSelectedPrimaryBCP(rs.getInt("PRIMARYLOCATIONID"));
				}else if(primaryLocation==2){
					objNewOrderDto.setSelectedPNLocation(rs.getInt("PRIMARYLOCATIONID"));
				}
				if(secondaryLocation==1){
					objNewOrderDto.setSelectedSecBCP(rs.getInt("SECONDARYLOCATIONID"));
				}else if(secondaryLocation==2){
					objNewOrderDto.setSelectedSNLocation(rs.getInt("SECONDARYLOCATIONID"));
				}	
				listLocationMaster.add(objNewOrderDto);
			}
		}catch(Exception ex ){
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error at fetching Location Details : "+objNewOrderDto.getLocationInfoID(), logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}finally{
			try{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(getLocationMaster);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listLocationMaster;
	}
	
	public NewOrderDto DeleteContactDetailRows(NewOrderDto objDto) throws Exception 
	{
		//Added by nagarjuna
		String methodName="DeleteContactDetailRows",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		NewOrderDto objRetDto = new NewOrderDto(); 
		
		try
		{
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
			callstmt= connection.prepareCall(sqlSpDeleteContactDetail);	
			callstmt.setString(1, objDto.getContactIDList());
			callstmt.setString(2, objDto.getAddressIDList());
			callstmt.setLong(3, 0);
			callstmt.setLong(4, 0);
			callstmt.setString(5, "");
			callstmt.execute();
			int err = callstmt.getInt(4);
			
			if(err==0)
			{
				objRetDto.setMsgOut("Contact And Address Detail Deleted Successfully");
				connection.commit();
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error at Deleting Contact Details : "+msg, logToFile, logToConsole);//added by nagarjuna
			connection.rollback();
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, "Exception "+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return objRetDto;
	}
	
	//[011] Start
	//public NewOrderDto updateProductCatelog(NewOrderDto objDto)
	public NewOrderDto updateProductCatelog(NewOrderDto objDto,long empID)
	//[011] End
	{
		//Added by nagarjuna
		String methodName="updateProductCatelog",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		int finalStatus=0;
		int serviceProductID=0;
		int serviceProductServiceStatus=0;
		int billingInfoStatus=0;
		int serviceHardwareStatus=0;
		int chargeStatus=0;
		int locationStatus=0;
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat(AppConstants.DATE_FORMAT_PROC);
		NewOrderBean formBean=new NewOrderBean();
		Connection connection =null;
		String[] attributeVal=new String [objDto.getHdnSeriveAttCounter()];
		String[] attributeID=new String [objDto.getHdnSeriveAttCounter()];
		String[] dataType=new String [objDto.getHdnSeriveAttCounter()];
		String[] attributeName=new String [objDto.getHdnSeriveAttCounter()];
		String[] attributeExpectedValue=new String [objDto.getHdnSeriveAttCounter()];
		String[] newAttributeVal=new String [objDto.getHdnSeriveAttCounter()];
		String[] attributeValIDs=new String [objDto.getHdnSeriveAttCounter()];
		CallableStatement insertServiceAttDet =null;
		CallableStatement insertServiceTypeSTR =null;
		CallableStatement insertBillingInfo=null;
		CallableStatement insertHardwareInfo=null;
		CallableStatement insertServiceInfo=null;
		CallableStatement insertChargeInfo=null;
		CallableStatement insertComponentInfo=null;
		CallableStatement insertLinkageInfo=null;
		StringBuffer chargeIDs = new StringBuffer();
		StringBuffer componentsIDs = new StringBuffer();
		CallableStatement  insertConfigData=null;
		try
		{
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
			
			serviceProductID=objDto.getServiceProductID();
			
			if(objDto.getServiceInfoValue()==1 && finalStatus==0)//If Service Value in Master table is 1
			{
				//FOR INSERTING DATA IN PRODUCTLINEATTRIBUTE TABLE
				for(int j=0;j<=(objDto.getHdnSeriveAttCounter())-1;j++)
				{
					/*if(objDto.getProdAttValue()[j]==null || objDto.getProdAttValue()[j].equalsIgnoreCase(""))
						attributeVal[j] ="0";
					else*/
						attributeVal[j] =objDto.getProdAttValue()[j];
					attributeID[j]=objDto.getProdAttID()[j];
					attributeExpectedValue[j]=objDto.getProdAttExptdValue()[j];
					attributeName[j]=objDto.getProdAttName()[j];
					//Added by Ashutosh
					if(objDto.getChangeTypeId()==2 ||objDto.getChangeTypeId()==1 )
					{
						/*if(objDto.getNewProdAttValue()[j]==null || objDto.getNewProdAttValue()[j].equalsIgnoreCase(""))
							newAttributeVal[j] ="0";
						else*/
							newAttributeVal[j] =objDto.getNewProdAttValue()[j];
					
					/*if(objDto.getAttributeValuIDs()[j]==null || objDto.getAttributeValuIDs()[j].equalsIgnoreCase(""))
						attributeValIDs[j]="0";
					else*/
						attributeValIDs[j]=objDto.getAttributeValuIDs()[j];
					}
					if(objDto.getChangeTypeId()==2 ||objDto.getChangeTypeId()==0 ||objDto.getChangeTypeId()==1)
					{
						insertServiceAttDet=connection.prepareCall(sqlInsertProdLineAttributesForNew);
					}	
					else
					{
						insertServiceAttDet=connection.prepareCall(sqlInsertProdLineAttributes);
					}
					insertServiceAttDet.setInt(1, Integer.valueOf(attributeID[j]));//AttributeID
					insertServiceAttDet.setString(2, attributeVal[j]);//Attribute Value
					insertServiceAttDet.setInt(3, serviceProductID);//service Product ID
					insertServiceAttDet.setInt(4, 2);//Update Type
					insertServiceAttDet.setInt(5,0);//Output Parameter
					insertServiceAttDet.setInt(6,0);//Output Parameter
					insertServiceAttDet.setString(7,"");//Output Parameter
					//[011] Start
					insertServiceAttDet.setLong(8,empID);
					//[011] End
					if(objDto.getChangeTypeId()==2 ||objDto.getChangeTypeId()==0 ||objDto.getChangeTypeId()==1)
					{
						insertServiceAttDet.setLong(9, objDto.getPoNumber());
						insertServiceAttDet.setLong(10, objDto.getChangeTypeId());
						if(objDto.getChangeTypeId()==0)
						{
							insertServiceAttDet.setString(11,"0");
							insertServiceAttDet.setInt(12,0);
							//[030] Start
							insertServiceAttDet.setInt(13,objDto.getServiceId());//Added by Ashutosh For mainting History of Product catalog 
							//[030] End
						}
						else
						{
							insertServiceAttDet.setString(11,newAttributeVal[j]);
							insertServiceAttDet.setInt(12,Integer.valueOf(attributeValIDs[j]));
							//[030] Start
							insertServiceAttDet.setInt(13,objDto.getServiceId());//Added by Ashutosh For mainting History of Product catalog
							//[030] End
						}
						
						
					}
					insertServiceAttDet.execute();
					finalStatus=insertServiceAttDet.getInt(6);
					if(finalStatus==1)
					{
						break;
					}
				}
//				raghu
				Utility.SysOut("service id:  >  "+objDto.getServiceId());
					insertLinkageInfo=connection.prepareCall(sqlInsertLinkageInfoForNew);
					insertLinkageInfo.setInt(1, serviceProductID);//PO DetailID
					insertLinkageInfo.setInt(2, objDto.getChangeTypeId());//ACCOUNT ID
					insertLinkageInfo.setString(3, objDto.getLogicalCircuitId());//CREDIT PERIOD
					insertLinkageInfo.setString(4, objDto.getInfraOderNo());//ENTITY ID
					insertLinkageInfo.setString(5, objDto.getMetasolvCircuitId());//BILLING MODE
					insertLinkageInfo.setInt(6, 0);//CREDIT PERIOD
					insertLinkageInfo.setInt(7, 0);//ENTITY ID
					insertLinkageInfo.setInt(8, 0);//BILLING MODE
					insertLinkageInfo.setString(9, objDto.getLinkageInfoFlag());//BILLING MODE
					insertLinkageInfo.setString(10, objDto.getLogicalCircuitId_new());//BILLING MODE
					insertLinkageInfo.setString(11, objDto.getInfraOderNo_new());//BILLING MODE
					insertLinkageInfo.setString(12, objDto.getMetasolvCircuitId_new());//BILLING MODE
					insertLinkageInfo.setLong(13, objDto.getServiceId());//BILLING MODE
					insertLinkageInfo.execute();
					finalStatus=insertLinkageInfo.getInt(6);
		
			}
			if(objDto.getBillingInfoValue()==1 && finalStatus==0)//If Billing Info Value in Master table is 1
			{
				insertBillingInfo=connection.prepareCall(sqlInsertBillingInfo);
				/*insertBillingInfo.setInt(1, objDto.getPodetailID());//PO DetailID
				insertBillingInfo.setInt(2, objDto.getAccountID());//ACCOUNT ID
				insertBillingInfo.setInt(3, objDto.getCreditPeriod());//CREDIT PERIOD
				insertBillingInfo.setInt(4, objDto.getEntityID());//ENTITY ID
				insertBillingInfo.setString(5, objDto.getBillingMode());//BILLING MODE
				insertBillingInfo.setString(6, objDto.getBillingformat());//BILLING FORMAT
				insertBillingInfo.setInt(7, objDto.getLicenceCoID());//LICENCE COMPANY ID
				insertBillingInfo.setString(8, objDto.getTaxation());//TAXATION
				insertBillingInfo.setString(9, objDto.getBillingLevel());//BILLING LEVEL
				insertBillingInfo.setInt(10, objDto.getCommitmentPeriod());//COMMITMENT PERIOD
				insertBillingInfo.setString(11, objDto.getPenaltyClause());//PENALTY CLAUSE
				insertBillingInfo.setInt(12, serviceProductID);//SERVICE PRODUCT ID
				insertBillingInfo.setInt(13, objDto.getBillingType());//Billing Type
				insertBillingInfo.setInt(14, objDto.getBillingInfoID());//Billing Info ID
				insertBillingInfo.setInt(15, 2);//UPDATE FLAG
				insertBillingInfo.setInt(16,0);//Output Parameter
				insertBillingInfo.setInt(17,0);//Output Parameter
				insertBillingInfo.setString(18,"");//Output Parameter		
				insertBillingInfo.setLong(19, Long.parseLong(objDto.getBillingBCPId()));*/
				insertBillingInfo.setInt(1, objDto.getPodetailID());//PO DetailID
				insertBillingInfo.setInt(2, objDto.getAccountID());//ACCOUNT ID
				insertBillingInfo.setInt(3, objDto.getCreditPeriod());//CREDIT PERIOD
				insertBillingInfo.setInt(4, objDto.getEntityID());//ENTITY ID
				insertBillingInfo.setString(5, objDto.getBillingMode());//BILLING MODE
				insertBillingInfo.setString(6, objDto.getBillingformat());//BILLING FORMAT
				insertBillingInfo.setInt(7, objDto.getLicenceCoID());//LICENCE COMPANY ID
				insertBillingInfo.setString(8, objDto.getTaxation());//TAXATION
				insertBillingInfo.setString(9, objDto.getBillingLevel());//BILLING LEVEL
				insertBillingInfo.setInt(10, objDto.getCommitmentPeriod());//COMMITMENT PERIOD
				insertBillingInfo.setString(11, objDto.getPenaltyClause());//PENALTY CLAUSE
				insertBillingInfo.setInt(12, serviceProductID);//SERVICE PRODUCT ID
				insertBillingInfo.setInt(13, objDto.getBillingType());//Billing Type
				insertBillingInfo.setInt(14, objDto.getBillingInfoID());//Billing Info ID
				insertBillingInfo.setInt(15, 2);//UPDATE FLAG
				insertBillingInfo.setLong(16, objDto.getBillingLevelNo());//Billing Level No
								
				insertBillingInfo.setInt(17,0);//Output Parameter
				insertBillingInfo.setInt(18,0);//Output Parameter
				insertBillingInfo.setString(19,"");//Output Parameter		
				insertBillingInfo.setLong(20, Long.parseLong(objDto.getBillingBCPId()));
				insertBillingInfo.setLong(21,objDto.getNoticePeriod());
				//[011] Start
				insertBillingInfo.setLong(22,empID);
				//[011] End
				//Start[023]
				insertBillingInfo.setInt(23,objDto.getIsNfa());
				//End[023]
				insertBillingInfo.setLong(24, objDto.getStdReasonId());//Std Reason
				insertBillingInfo.setInt(25, objDto.getIsUsage());//Used to show Comp. based or Charge based
				insertBillingInfo.setInt(26, objDto.getBillingScenario());
				insertBillingInfo.setInt(27, objDto.getFxRedirectionLSI());
				insertBillingInfo.setInt(28, objDto.getFxRedirectionSPID());
				//WARRANTY CLAUSE ADDED BY MANISHA START
				insertBillingInfo.setString(29, Utility.fnCheckNull(objDto.getWarrantyClause()));//WARRANTY CLAUSE
				//WARRANTY CLAUSE ADDED BY MANISHA END
				//  bcp details for services ADDED BY MANISHA START
				if("".equalsIgnoreCase(objDto.getBillingBCPIdService()) || objDto.getBillingBCPIdService()==null||"null".equalsIgnoreCase(objDto.getBillingBCPIdService()))//last OR condition added by Anoop to avoid Exception
				{
					insertBillingInfo.setLong(30, 0);//WARRANTY CLAUSE
				}
				else
				{
					insertBillingInfo.setLong(30,  Long.parseLong(objDto.getBillingBCPIdService()));//WARRANTY CLAUSE
				}
				//satyapan osp tagging
				if (objDto.getIsOSPTagging() != null){
				insertBillingInfo.setLong(31, Long.parseLong(objDto.getIsOSPTagging()));//osp Tagging
				}else{
				insertBillingInfo.setLong(31,0);
				}
				if("".equals(objDto.getTxtOSPRegNo()) || objDto.getTxtOSPRegNo()==null)
				{
					insertBillingInfo.setString(32, null);//osp Tagging
				}
				else
				{
					insertBillingInfo.setString(32, objDto.getTxtOSPRegNo());//osp Tagging
				}
				if(null!=objDto.getTxtOSPRegDate()){
					if(objDto.getTxtOSPRegDate().trim().length()==0){
					insertBillingInfo.setDate(33,null);
					}else{
					insertBillingInfo.setDate(33,new java.sql.Date(simpleDateFormat.parse(objDto.getTxtOSPRegDate()).getTime()));//osp Tagging
					}
				}else{
					insertBillingInfo.setDate(33,null);
				}
				//END satyapan osp tagging
				// bcp details for services ADDED BY MANISHA end
				insertBillingInfo.execute();
				finalStatus=insertBillingInfo.getInt(17);
			}
			if(objDto.getLocationInfoValue()==1 && finalStatus==0 && objDto.getLocationInfoID()!=0)//If LOCATION Info Value in Master table is 1
			{
				int primaryLocation=0;
				if(objDto.getSelectedPriLocType()==1)
				{
					primaryLocation=objDto.getSelectedPrimaryBCP();
				}
				else if(objDto.getSelectedPriLocType()==2)
				{
					primaryLocation=objDto.getSelectedPNLocation();
				}
				int secondaryLocation=0;
				if(objDto.getSelectedSecLocType()==1)
				{
					secondaryLocation=objDto.getSelectedSecBCP();
				}
				else if(objDto.getSelectedSecLocType()==2)
				{
					secondaryLocation=objDto.getSelectedSNLocation();
				}
				insertServiceInfo=connection.prepareCall(sqlInsertServiceDetails);
				insertServiceInfo.setInt(1, objDto.getSelectedPriLocType());//Primary Location Type
				insertServiceInfo.setInt(2, objDto.getSelectedSecLocType());//Secomdary Location Type
				insertServiceInfo.setInt(3, primaryLocation);//Primary Location
				insertServiceInfo.setInt(4, secondaryLocation);//Secondary Location
				insertServiceInfo.setInt(5, objDto.getAccountID());//Account ID
				insertServiceInfo.setInt(6, serviceProductID);//Service Product ID
				insertServiceInfo.setInt(7, 2);//UPDATE FLAG
				insertServiceInfo.setInt(8, objDto.getLocationInfoID());//LOCATION INFO ID
				insertServiceInfo.setInt(9,0);//Output Parameter
				insertServiceInfo.setInt(10,0);//Output Parameter
				insertServiceInfo.setString(11,"");//Output Parameter	
				insertServiceInfo.setString(12, objDto.getFromLocation());
				insertServiceInfo.setString(13, objDto.getToLocation());
				//[011] Start
				insertServiceInfo.setLong(14,empID);
				//[011] End
				insertServiceInfo.execute();
				finalStatus=insertServiceInfo.getInt(10);
			}
			if(objDto.getHardwareInfoValue()==1 && finalStatus==0)//If Hardware Info Value in Master table is 1
			{
				insertHardwareInfo=connection.prepareCall(sqlInsertHardwareDetails);
				insertHardwareInfo.setInt(1, 0);//Hardware DetailID
				insertHardwareInfo.setInt(2, objDto.getSelectedStoreID());//ACCOUNT ID
				insertHardwareInfo.setString(3, objDto.getHardwareType());//CREDIT PERIOD
				insertHardwareInfo.setString(4, objDto.getFormAvailable());//ENTITY ID
				insertHardwareInfo.setString(6, objDto.getSaleNature());//BILLING MODE
				insertHardwareInfo.setString(5, objDto.getSaleType());//BILLING FORMAT
				insertHardwareInfo.setInt(7, objDto.getSelectedDispatchID());//LICENCE COMPANY ID
				insertHardwareInfo.setInt(8, objDto.getAccountID());//TAXATION
				insertHardwareInfo.setInt(9, serviceProductID);//BILLING LEVEL
				insertHardwareInfo.setInt(10, 2);//UPDATE FLAG
				insertHardwareInfo.setInt(11, objDto.getHardwareDetailID());//HARDWARE DETAIL ID
				insertHardwareInfo.setString(12,objDto.getStartHWDateLogic());//START DATE LOGIC
				insertHardwareInfo.setString(13,objDto.getEndHWDateLogic());//END DATE LOGIC
			//	insertHardwareInfo.setInt(14, objDto.getWarrentyMonths());//WARRENTY MONTHS
				if(objDto.getStartDate()==null || "".equalsIgnoreCase(objDto.getStartDate().trim())||"0".equalsIgnoreCase(objDto.getStartDate()))
				{
				insertHardwareInfo.setNull(14, java.sql.Types.DATE);
				}
				else{
				insertHardwareInfo.setDate(14, new java.sql.Date(simpleDateFormat.parse(objDto.getStartDate()).getTime()));//START DATE
				}
				if(objDto.getEndDate()==null || "".equalsIgnoreCase(objDto.getEndDate().trim())||"0".equalsIgnoreCase(objDto.getEndDate()))//trim charge end date : Done by Ashutosh
				{
				insertHardwareInfo.setNull(15, java.sql.Types.DATE);
				}
				else{
				insertHardwareInfo.setDate(15, new java.sql.Date(simpleDateFormat.parse(objDto.getEndDate()).getTime()));//END DATE
				}
				insertHardwareInfo.setDouble(16, objDto.getPrincipalAmount());
				insertHardwareInfo.setDouble(17, objDto.getInterestRate());
				insertHardwareInfo.setInt(18,0);//Output Parameter
				insertHardwareInfo.setInt(19,0);//Output Parameter
				insertHardwareInfo.setString(20,"");//Output Parameter	
				//[011] Start
				insertHardwareInfo.setLong(21,empID);
				//[011] End
//				lawkush start
				insertHardwareInfo.setInt(22, objDto.getTxtStartMonth());
				insertHardwareInfo.setInt(23, objDto.getTxtStartDays());
				insertHardwareInfo.setInt(24, objDto.getTxtEndMonth());
				insertHardwareInfo.setInt(25, objDto.getTxtEndDays());
				insertHardwareInfo.setInt(26, objDto.getTxtExtMonth());
				insertHardwareInfo.setInt(27, objDto.getTxtExtDays());
				//insertHardwareInfo.setDate(28,new java.sql.Date(simpleDateFormat.parse( objDto.getTxtExtDate()).getTime()));
			//	insertHardwareInfo.setNull(28, java.sql.Types.DATE);
				if(objDto.getTxtExtDate()==null || "".equalsIgnoreCase(objDto.getTxtExtDate())||"0".equalsIgnoreCase(objDto.getTxtExtDate()))
				{
				insertHardwareInfo.setNull(28, java.sql.Types.DATE);
				}
				else
				insertHardwareInfo.setDate(28, new java.sql.Date(simpleDateFormat.parse(objDto.getTxtExtDate()).getTime()));//
				
				//lawkush end
				insertHardwareInfo.setString(29, objDto.getDispatchContactName());
				insertHardwareInfo.execute();
				finalStatus=insertHardwareInfo.getInt(19);
				/*
				insertHardwareInfo.setInt(12,0);//Output Parameter
				insertHardwareInfo.setInt(13,0);//Output Parameter
				insertHardwareInfo.setString(14,"");//Output Parameter		
				insertHardwareInfo.execute();
				finalStatus=insertHardwareInfo.getInt(13);*/
			}
			if(objDto.getChargeInfoValue()==1 && finalStatus==0)//If Charge Info Value in Master table is 1
			{
				/*for (int count = 0; count< objDto.getChargesDetails().size();count++){
					//charges code will come here
						ChargesDetailDto charges = objDto.getChargesDetails().get(count);
						if(!(charges.getChargeInfoID_String()==null || "".equals(charges.getChargeInfoID_String()))){
								//chargeIDs = chargeIDs.append(charges.getChargeInfoID_String() + ",") ;
							}
				
				}*/
				if(objDto.getDeletedChargesList() !=null){
				chargeIDs=chargeIDs.append(objDto.getDeletedChargesList());
				String chargeID= null;
				PreparedStatement prpdStmt= connection.prepareCall(sqlDeleteCharges);
				if(chargeIDs.length() >1){
					chargeID = chargeIDs.deleteCharAt(chargeIDs.length()-1).toString();
				}else{
					chargeID="";
				}				
					if((!"".equalsIgnoreCase(chargeID)) && (!"0".equalsIgnoreCase(chargeID)) && chargeID !=null){
						prpdStmt.setString(1, chargeID);
						prpdStmt.setLong(2, objDto.getServiceProductID());
						prpdStmt.setInt(3, 0);
						prpdStmt.setInt(4, 0);
						prpdStmt.setString(5, "");
						prpdStmt.execute();
					}
				}else{
					//this below will remove when charge paging will inserted in changeview prodcatelog page order also
					for (int count = 0; count< objDto.getChargesDetails().size();count++){
						//charges code will come here
							ChargesDetailDto charges = objDto.getChargesDetails().get(count);
							if(!(charges.getChargeInfoID_String()==null || "".equals(charges.getChargeInfoID_String())))
								chargeIDs = chargeIDs.append(charges.getChargeInfoID_String() + ",") ;
					
					}
					String chargeID= null;
					PreparedStatement prpdStmt= connection.prepareCall(sqlDeleteCharges_old);
					if(chargeIDs.length() >1){
						chargeID = chargeIDs.deleteCharAt(chargeIDs.length()-1).toString();
					}				
					prpdStmt.setString(1, chargeID);
					prpdStmt.setLong(2, objDto.getServiceProductID());
					prpdStmt.setInt(3, 0);
					prpdStmt.setInt(4, 0);
					prpdStmt.setString(5, "");
					prpdStmt.execute();
				}
					
				ArrayList<Integer> listChargeInfoId = new ArrayList<Integer>();
					for (int count = 0; count< objDto.getChargesDetails().size();count++){
						//charges code will come here
							ChargesDetailDto chargeDto = objDto.getChargesDetails().get(count);
						insertChargeInfo=connection.prepareCall(sqlInsertChargeDetails);
						/*insertChargeInfo.setInt(1, objDto.getAccountID());//Account ID
						insertChargeInfo.setInt(2, serviceProductID);//SERVICE PRODUCT ID
						insertChargeInfo.setString(3, charges.getChargeName());//CHARGE NAME
						insertChargeInfo.setInt(4, charges.getChargePeriod());//CHARGE PERIOD
						
						Double chargeAmount=Double.parseDouble(charges.getChargeAmount_String());
						insertChargeInfo.setDouble(5,chargeAmount);//CHARGE AMOUNT
						
						insertChargeInfo.setInt(6, charges.getChargeType());//CHARGE TYPE I.E. RC OR NRC
						insertChargeInfo.setString(7, charges.getChargeFrequency());//CHARGE FRQUENCY
						
						Double chargeFrequencyAmt=Double.parseDouble(charges.getChargeFrequencyAmt_String());
						insertChargeInfo.setDouble(8, chargeFrequencyAmt);//CHARGE FRQUENCY AMT
						
						insertChargeInfo.setString(9, charges.getStartDateLogic());//START DATE LOGIC
						insertChargeInfo.setString(10, charges.getEndDateLogic());//END DATE LOGIC
						if(charges.getChargeInfoID_String() == null){
							insertChargeInfo.setInt(11, 1);//UPDATE FLAG
							insertChargeInfo.setInt(12, 0);//CHARGE ID
						}else {
						insertChargeInfo.setInt(11, 2);//UPDATE FLAG
						insertChargeInfo.setInt(12, Integer.parseInt(charges.getChargeInfoID_String()));//CHARGE ID
						//chargeIDs = chargeIDs.append(charges.getChargeInfoID_String() + ",") ;
						}
						insertChargeInfo.setInt(13, charges.getStartDateDays());//Start Date Days
						insertChargeInfo.setInt(14, charges.getStartDateMonth());//Start Date Month
						insertChargeInfo.setInt(15, charges.getEndDateDays());//End Date Days
						insertChargeInfo.setInt(16, charges.getEndDateMonth());//End Date Month
						insertChargeInfo.setInt(17,0);//Output Parameter
						insertChargeInfo.setInt(18,0);//Output Parameter
						insertChargeInfo.setString(19,"");//Output Parameter		
						insertChargeInfo.execute();
						finalStatus=insertChargeInfo.getInt(18);	*/
						insertChargeInfo.setInt(1, objDto.getAccountID());//Account ID
						insertChargeInfo.setInt(2, serviceProductID);//SERVICE PRODUCT ID
						insertChargeInfo.setString(3, chargeDto.getChargeName());//CHARGE NAME
						insertChargeInfo.setInt(4, chargeDto.getChargePeriod());//CHARGE PERIOD
						Double chargeAmount=Double.parseDouble(chargeDto.getChargeAmount_String());
						insertChargeInfo.setDouble(5, chargeAmount);//CHARGE AMOUNT
						insertChargeInfo.setInt(6, chargeDto.getChargeType());//CHARGE TYPE I.E. RC OR NRC
						insertChargeInfo.setString(7, chargeDto.getChargeFrequency());//CHARGE FRQUENCY
						Double chargeFrequencyAmt=Double.parseDouble(chargeDto.getChargeFrequencyAmt_String());
						insertChargeInfo.setDouble(8, chargeFrequencyAmt);//CHARGE FRQUENCY AMT
						insertChargeInfo.setString(9, chargeDto.getStartDateLogic());//START DATE LOGIC
						insertChargeInfo.setString(10, chargeDto.getEndDateLogic());//END DATE LOGIC
						/*insertChargeInfo.setInt(11, 1);//UPDATE FLAG
						insertChargeInfo.setInt(12, 0);//CHARGE ID */
						if(chargeDto.getChargeInfoID_String().equals("")){
							insertChargeInfo.setInt(11, 1);//UPDATE FLAG
							insertChargeInfo.setInt(12, 0);//CHARGE ID
							if(objDto.getPodetailID() == 0){
								finalStatus = 29;
								break;
							}
						}else {
						insertChargeInfo.setInt(11, 2);//UPDATE FLAG
						insertChargeInfo.setInt(12, Integer.parseInt(chargeDto.getChargeInfoID_String()));//CHARGE ID
						//chargeIDs = chargeIDs.append(charges.getChargeInfoID_String() + ",") ;
						}
						insertChargeInfo.setInt(13, chargeDto.getStartDateDays());//Start Date Days
						insertChargeInfo.setInt(14, chargeDto.getStartDateMonth());//Start Date Month
						insertChargeInfo.setInt(15, chargeDto.getEndDateDays());//End Date Days
						insertChargeInfo.setInt(16, chargeDto.getEndDateMonth());//End Date Month
						insertChargeInfo.setString(17,chargeDto.getChargeAnnotation());//Charge Annotation
						insertChargeInfo.setInt(18,0);//Output Parameter
						insertChargeInfo.setInt(19,0);//Output Parameter
						insertChargeInfo.setString(20,"");//Output Parameter	
						insertChargeInfo.setInt(21, Integer.parseInt(chargeDto.getChargeName()));//CHARGE NAME ID
						//[011] Start
						insertChargeInfo.setLong(22,empID);
						//[011] End
						//025 start
						insertChargeInfo.setLong(23, objDto.getServiceId());
					      //025 end
						insertChargeInfo.setLong(24,chargeDto.getExcludecheck()); // 
						
						//Start[028]
						insertChargeInfo.setInt(25, objDto.getPodetailID());//PO DetailID
						insertChargeInfo.setInt(26, objDto.getPoNumber());//PO No
						//end[028]
						insertChargeInfo.setString(27, chargeDto.getChargeRemarks());//Remarks By Saurabh
						insertChargeInfo.setInt(28, chargeDto.getPaymentTerm1());
						insertChargeInfo.setInt(29, chargeDto.getPaymentTerm2());
						insertChargeInfo.setInt(30, chargeDto.getPaymentTerm3());
						insertChargeInfo.setInt(31, chargeDto.getPaymentTerm4());
						insertChargeInfo.setString(32, chargeDto.getTaxRate());
						insertChargeInfo.setInt(33, 0);//Integer.parseInt(chargeDto.getLineItemName()));
						insertChargeInfo.setInt(34, 0);//Integer.parseInt(chargeDto.getSubLineItemName()));
						insertChargeInfo.setInt(35, 0);
						//below code added by Anil for CLEP
						insertChargeInfo.setString(36, "0");//default charge cretion source from ib2b gui
						//end CLEP
						if(("".equals(chargeDto.getLdDateClause() )) || chargeDto.getLdDateClause()== null)
							insertChargeInfo.setDate(37,null);
						else
							insertChargeInfo.setDate(37,new java.sql.Date(simpleDateFormat.parse(chargeDto.getLdDateClause()).getTime()));
						insertChargeInfo.setInt(38, chargeDto.getDelayedTimeInDayes());
						insertChargeInfo.setInt(39, chargeDto.getLdPercentage());
						insertChargeInfo.setInt(40, chargeDto.getMaxPercentage());
						insertChargeInfo.setLong(41, chargeDto.getObLinkChargeId());
						insertChargeInfo.execute();
						finalStatus=insertChargeInfo.getInt(19); 
//						Raghu: fetch ChargeInfo id after save charge details
						listChargeInfoId.add(insertChargeInfo.getInt(35));
						}
					objDto.setListChargeInfoIdList(listChargeInfoId);
					}
			if(objDto.getComponentInfoValue()==1 && finalStatus==0)
			{
				/*for (int count = 0; count< objDto.getComponentDetails().size();count++){
					
				ComponentsDto components = objDto.getComponentDetails().get(count);
				if(!(components.getComponentInfoID_String()==null || "".equals(components.getComponentInfoID_String())))
				componentsIDs = componentsIDs.append(components.getComponentInfoID_String() + ",") ;
				
				}
				String compoenentId= null;
				PreparedStatement prpdStmt= connection.prepareCall(sqlDeleteComponents);
				if(componentsIDs.length() >1){
					compoenentId = componentsIDs.deleteCharAt(componentsIDs.length()-1).toString();
				}				
				prpdStmt.setString(1, compoenentId);
				prpdStmt.setLong(2, objDto.getServiceProductID());
				prpdStmt.setInt(3, 0);
				prpdStmt.setInt(4, 0);
				prpdStmt.setString(5, "");
				prpdStmt.execute();              new function create for deleteing components*/ 
				
				 ArrayList<Integer> listComponentId = new ArrayList<Integer>();
					String compoenentId= "";
					for (int count = 0; count< objDto.getComponentDetails().size();count++){
						//charges code will come here
							ComponentsDto componentDto = objDto.getComponentDetails().get(count);
						if(componentDto.getComponentInfoID() != 0){
							componentsIDs = componentsIDs.append(String.valueOf(componentDto.getComponentInfoID()) + ",") ;
						}									
					}
					if(componentsIDs.length() >1){
						compoenentId = componentsIDs.deleteCharAt(componentsIDs.length()-1).toString();
					}	
					PreparedStatement prpdStmt= connection.prepareCall(sqlDeleteComponents);
					prpdStmt.setString(1, compoenentId);
					prpdStmt.setLong(2, objDto.getServiceProductID());
					prpdStmt.setInt(3, 0);
					prpdStmt.setInt(4, 0);
					prpdStmt.setString(5, "");
					prpdStmt.execute();  	
				
				//---------------------[End:Deleting Components which componets info Id is/are not present here]---------------------------------------------
					for (int count = 0; count< objDto.getComponentDetails().size();count++){
						
						ComponentsDto componentDto = objDto.getComponentDetails().get(count);						
						insertComponentInfo=connection.prepareCall(sqlInsertComponentsDetails);

						insertComponentInfo.clearParameters();
						insertComponentInfo.setInt(1, objDto.getAccountID());
						insertComponentInfo.setInt(2, serviceProductID);
						insertComponentInfo.setInt(3, componentDto.getComponentID());
						//insertComponentInfo.setDate(4, new java.sql.Date(simpleDateFormat.parse("12/12/2012").getTime()) );
						//insertComponentInfo.setDate(5, new java.sql.Date(simpleDateFormat.parse("12/12/2012").getTime()) );
						//insertComponentInfo.setDate(4, new java.sql.Date(simpleDateFormat.parse(componentDto.getActiveDate().trim()).getTime()) );
						//insertComponentInfo.setDate(5, new java.sql.Date(simpleDateFormat.parse(componentDto.getInactiveDate().trim()).getTime()) );
						insertComponentInfo.setNull(4,java.sql.Types.INTEGER);
						insertComponentInfo.setNull(5,java.sql.Types.INTEGER);
						insertComponentInfo.setNull(6,java.sql.Types.VARCHAR);
						if(componentDto.getComponentInfoID() == 0)
						{
							insertComponentInfo.setInt(7, 1);
							insertComponentInfo.setInt(8, 0);
							
						}else
						{
							insertComponentInfo.setInt(7, 2);
							insertComponentInfo.setInt(8, componentDto.getComponentInfoID());
						}
						
						insertComponentInfo.setInt(9, componentDto.getPackageID());
						insertComponentInfo.setInt(10, objDto.getServiceId());
						insertComponentInfo.setNull(11,java.sql.Types.INTEGER);
						insertComponentInfo.setNull(12,java.sql.Types.INTEGER);
						insertComponentInfo.setString(13, componentDto.getStartDateLogic());
						insertComponentInfo.setString(14, componentDto.getEndDateLogic());
						insertComponentInfo.setInt(15, componentDto.getStartDateDays());
						insertComponentInfo.setInt(16, componentDto.getStartDateMonth());
						insertComponentInfo.setInt(17, componentDto.getEndDateDays());
						insertComponentInfo.setInt(18, componentDto.getEndDateMonth());
						insertComponentInfo.execute();
						finalStatus=insertComponentInfo.getInt(5);
//						Raghu: fetch ComponentInfo id after save charge details
						listComponentId.add(insertComponentInfo.getInt(11));
			
						if(finalStatus!=0)
						{
							break;
						}
				}
					objDto.setListComponent(listComponentId);
			}
			if(finalStatus==0)//Insert Config Values for Arbor Related Products
			{
				insertBillingInfo=connection.prepareCall(sqlInsertConfigValue);
				insertBillingInfo.setLong(1, serviceProductID);
				insertBillingInfo.setLong(2, objDto.getConfigValue());
				insertBillingInfo.setInt(3, 0);
				insertBillingInfo.setInt(4, 0);
				insertBillingInfo.setString(5, "");
				insertBillingInfo.execute();
				finalStatus=insertBillingInfo.getInt(4);
			}
			if(finalStatus==0)
			{
				objDto.setMsgOut("Data Updated SuccessFully!!");
				connection.commit();
			} else if(finalStatus == 29)
			{
				objDto.setMsgOut("Please Select PO for the Charge you have added.");
				connection.rollback();
			}
			else
			{
				objDto.setMsgOut("Some Error has Occured,Please Try Again!!");
				connection.rollback();
			}
		}
		catch(Exception ex )
		{
			try {
				objDto.setMsgOut("Some Error has Occured,Please Try Again!!");
				connection.rollback();
			} catch (SQLException e) {
				Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"SQL Error at Updating Product Catalog : "+msg, logToFile, logToConsole);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error at Updating Product Catalog : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				
				DbConnection.closeCallableStatement(insertServiceTypeSTR);
				DbConnection.closeCallableStatement(insertBillingInfo);
				DbConnection.closeCallableStatement(insertHardwareInfo);
				DbConnection.closeCallableStatement(insertServiceInfo);
				DbConnection.closeCallableStatement(insertChargeInfo);
				DbConnection.closeCallableStatement(insertComponentInfo);
				DbConnection.closeCallableStatement(insertLinkageInfo);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return objDto;
	}
	
	//	Method used for Fetching CHARGE TYPE Details from the Database through ajax
	public ArrayList<ProductCatelogDTO> populateChargeType(Integer productId) 
	{
		//Added by nagarjuna
		String methodName="populateChargeType",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		PreparedStatement getCharge =null;

		ResultSet rsChargeTypeList = null;
		ProductCatelogDTO objNewOrderDto = null;
		ArrayList<ProductCatelogDTO> listChargeType= new ArrayList<ProductCatelogDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
			getCharge= connection.prepareCall(sqlGetCharge);
			getCharge.setInt(1, productId);
			//getCharge.setString(2,billFormatType );// add by anil for requirement
			rsChargeTypeList = getCharge.executeQuery();
			while(rsChargeTypeList.next())
			{
				objNewOrderDto =  new ProductCatelogDTO();
				objNewOrderDto.setChargeTypeName(rsChargeTypeList.getString("CHARGENAME"));
				objNewOrderDto.setChargeTypeID(rsChargeTypeList.getInt("CHARGETYPEID"));
				listChargeType.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error at Populating Charge Type: "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsChargeTypeList);
				DbConnection.closePreparedStatement(getCharge);
				
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listChargeType;
	}
	/*Function		:populateChargeTypeForHardware
	 * return type	:ArrayList<NewOrderDto>
	 * @Author		:Anil Kumar
	 * Date			:25-feb-11
	 * Purpose		:to fetch charge type based on billformat for hardware
	 * */
	public ArrayList<ChargeComponentDTO> populateChargeTypeForHardware(Integer productId,Integer billformat) throws Exception
	{
		//Added by nagarjuna
		String methodName="populateChargeTypeForHardware",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		PreparedStatement getCharge =null;

		ResultSet rsChargeTypeList = null;
		ChargeComponentDTO objNewOrderDto = null;
		ArrayList<ChargeComponentDTO> listChargeType= new ArrayList<ChargeComponentDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
			getCharge= connection.prepareCall(sqlGetChargeForHardware);
			getCharge.setInt(1, productId);
			getCharge.setInt(2, billformat);
			//getCharge.setString(2,billFormatType );// add by anil for requirement
			rsChargeTypeList = getCharge.executeQuery();
			while(rsChargeTypeList.next())
			{
				objNewOrderDto =  new ChargeComponentDTO();
				objNewOrderDto.setChargeTypeName(rsChargeTypeList.getString("CHARGENAME"));
				objNewOrderDto.setChargeTypeID(rsChargeTypeList.getInt("CHARGETYPEID"));
				listChargeType.add(objNewOrderDto);
			}						
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error at Populating Charge Type For Hardware: "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsChargeTypeList);
				DbConnection.closePreparedStatement(getCharge);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, "Exception "+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listChargeType;
	}
//	Method used for Fetching CHARGE NAME Details from the Database through ajax
	public ArrayList<ProductCatelogDTO> populateChargeName(Integer chargename , Integer productid,int entityid ) 
	{
		//Added by nagarjuna
		String methodName="populateChargeName",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		PreparedStatement getCharge =null;

		ResultSet rsChargeTypeList = null;
		ProductCatelogDTO objNewOrderDto = null;
		ArrayList<ProductCatelogDTO> listChargeType= new ArrayList<ProductCatelogDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
			getCharge= connection.prepareCall(sqlGetChargeName);
			getCharge.setInt(1, chargename);
			getCharge.setInt(2, productid);
			getCharge.setInt(3, entityid);
			
			int i=0;
			rsChargeTypeList = getCharge.executeQuery();
			while(rsChargeTypeList.next())
			{
				objNewOrderDto =  new ProductCatelogDTO();
				objNewOrderDto.setChargeName(rsChargeTypeList.getString("CHARGE_NAME"));
				objNewOrderDto.setChargeNameID(rsChargeTypeList.getInt("MAPPING_ID"));
				
				objNewOrderDto.setChargeTypeID(chargename);
				listChargeType.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error at Populating Charge Name : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsChargeTypeList);
				DbConnection.closePreparedStatement(getCharge);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listChargeType;
	}
	
//	Method used for Fetching FREQUENCY Details from the Database through ajax
	public ArrayList<ProductCatelogDTO> populateFrequencyType(int contractperiod) 
	{
		//Added by nagarjuna
		String methodName="populateFrequencyType",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		PreparedStatement getCharge =null;

		ResultSet rsFrequencyList = null;
		ProductCatelogDTO objNewOrderDto = null;
		ArrayList<ProductCatelogDTO> listFrequency= new ArrayList<ProductCatelogDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
			getCharge= connection.prepareCall(sqlGetFrequency);
			getCharge.setInt(1, contractperiod);
			rsFrequencyList = getCharge.executeQuery();
			while(rsFrequencyList.next())
			{
				objNewOrderDto =  new ProductCatelogDTO();
				objNewOrderDto.setFrequencyName(rsFrequencyList.getString("FREQUENCYNAME"));
				objNewOrderDto.setFrequencyID(rsFrequencyList.getInt("FREQUENCYID"));
				objNewOrderDto.setFactor(rsFrequencyList.getInt("FACTOR"));
				listFrequency.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error at Populating Frequency Type : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsFrequencyList);
				DbConnection.closePreparedStatement(getCharge);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listFrequency;
	}
	
	//	Method used for Fetching Taxation Details from the Database
	public ArrayList<ProductCatelogDTO> getTaxationDetail() 
	{
		//Added by nagarjuna
		String methodName="getTaxationDetail",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		PreparedStatement getTaxationDetails =null;
		ResultSet rs = null;
		ProductCatelogDTO objNewOrderDto = null;
		ArrayList<ProductCatelogDTO> listTaxationDetails = new ArrayList<ProductCatelogDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
			
			getTaxationDetails= connection.prepareCall(sqlGetAllTaxationMaster);
			rs = getTaxationDetails.executeQuery();
			
			while(rs.next())
			{
			 objNewOrderDto =  new ProductCatelogDTO();
			 objNewOrderDto.setTaxationId(rs.getLong("TAXATIONID"));
			 objNewOrderDto.setTaxationName(rs.getString("TAXATIONVALUE"));
			 listTaxationDetails.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error  : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(getTaxationDetails);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listTaxationDetails;
	}
	
//	Method used for Fetching BillingLevel Details from the Database
	public ArrayList<ProductCatelogDTO> populateBillingLevelDetails(int configValue,long currentSPID) 
	{
		//Added by nagarjuna
		String methodName="populateBillingLevelDetails",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		PreparedStatement preparedStmt =null;
		ResultSet rs = null;
		ProductCatelogDTO objNewOrderDto = null;
		ArrayList<ProductCatelogDTO> listBillingLevelDetails = new ArrayList<ProductCatelogDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
			
			preparedStmt= connection.prepareCall(sqlGetBillingLevelMaster);
			preparedStmt.setInt(1, configValue);
			preparedStmt.setLong(2, currentSPID);
			rs = preparedStmt.executeQuery();
			
			while(rs.next())
			{
			 objNewOrderDto =  new ProductCatelogDTO();
			 objNewOrderDto.setBillingLevelId(rs.getLong("BILLING_LEVELID"));
			 objNewOrderDto.setBillingLevelName(rs.getString("BILLING_LEVELNAME"));
			 listBillingLevelDetails.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error at Populating Billing level Details : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(preparedStmt);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listBillingLevelDetails;
	}
//	Method used for Fetching BillingFormatDetails from the Database
	public ArrayList<ProductCatelogDTO> populateBillingFormatDetails(String serviceType,int configValue) 
	{
		//Added by nagarjuna
		String methodName="populateBillingFormatDetails",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		PreparedStatement preparedStmt =null;
		ResultSet rs = null;
		ProductCatelogDTO objNewOrderDto = null;
		ArrayList<ProductCatelogDTO> listBillingFormatDetails = new ArrayList<ProductCatelogDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
			
			preparedStmt= connection.prepareCall(sqlGetBillingFormatMaster);
			preparedStmt.setString(1,serviceType);
			preparedStmt.setInt(2,configValue);
			rs = preparedStmt.executeQuery();
			
			while(rs.next())
			{
			 objNewOrderDto =  new ProductCatelogDTO();
			 objNewOrderDto.setBillingFormatId(rs.getLong("BILLING_FORMATID"));
			 objNewOrderDto.setBillingFormatName(rs.getString("BILLING_FORMATNAME"));
			 listBillingFormatDetails.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error at Populating Billing Format Details : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(preparedStmt);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listBillingFormatDetails;
	}
//	Method used for Fetching BillingTypeDetails from the Database
	public ArrayList<ProductCatelogDTO> populateBillingTypeDetails() 
	{
		//Added by nagarjuna
		String methodName="populateBillingTypeDetails",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		PreparedStatement preparedStmt =null;
		ResultSet rs = null;
		ProductCatelogDTO objNewOrderDto = null;
		ArrayList<ProductCatelogDTO> listBillingTypeDetails = new ArrayList<ProductCatelogDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
			
			preparedStmt= connection.prepareCall(sqlGetBillingTypeMaster);
			rs = preparedStmt.executeQuery();
			
			while(rs.next())
			{
			 objNewOrderDto =  new ProductCatelogDTO();
			 objNewOrderDto.setBillingTypeId(rs.getLong("BILLING_TYPEID"));
			 objNewOrderDto.setBillingTypeName(rs.getString("BILLING_TYPENAME"));
			 listBillingTypeDetails.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error at Populating Billing Type Details : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(preparedStmt);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listBillingTypeDetails;
	}
//	Method used for Fetching BillingTypeDetails from the Database
	public ArrayList<ProductCatelogDTO> getCreditPeriodDetails() 
	{
		//Added by nagarjuna
		String methodName="getCreditPeriodDetails",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		Connection connection =null;
		PreparedStatement preparedStmt =null;
		ResultSet rs = null;
		ProductCatelogDTO objNewOrderDto = null;
		ArrayList<ProductCatelogDTO> creditPeriodDetails = new ArrayList<ProductCatelogDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
			
			preparedStmt= connection.prepareCall(sqlGetCreditPeriodMaster);
			rs = preparedStmt.executeQuery();
			
			while(rs.next())
			{
			 objNewOrderDto =  new ProductCatelogDTO();
			 objNewOrderDto.setCreditPeriodId(rs.getLong("CREDIT_PERIODID"));
			 objNewOrderDto.setCreditPeriodName(rs.getString("CREDIT_PERIODNAME"));
			 creditPeriodDetails.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error while  getting Credit Period Details  : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(preparedStmt);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return creditPeriodDetails;
	}
	
	//delete Product catelog on the basis of Service Product ID
	public NewOrderDto deleteProductCatelog(NewOrderDto objDto)
	{
		
		//Added by nagarjuna
		String methodName="deleteProductCatelog",  msg="";
		boolean logToFile=true, logToConsole=true;
		//	End nagarjuna
		int deleteStatus=0;
		int serviceProductID=0;
		String statusMsg=null;
		NewOrderBean formBean=new NewOrderBean();
		Connection connection =null;
		CallableStatement deleteProductInfo=null;
		try
		{
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
			
			serviceProductID=objDto.getServiceProductID();
			
			//FOR INSERTING DATA IN PRODUCTLINEATTRIBUTE TABLE
		
			deleteProductInfo=connection.prepareCall(sqlDeleteProductCatelog);
			deleteProductInfo.setString(1, String.valueOf(serviceProductID));//Service Product ID
			deleteProductInfo.setInt(2,0);//Output Parameter
			deleteProductInfo.setInt(3,0);//Output Parameter
			deleteProductInfo.setString(4,"");//Output Parameter		
			deleteProductInfo.execute();
			deleteStatus=deleteProductInfo.getInt(3);
			statusMsg=deleteProductInfo.getString(4);
			if(deleteStatus==0)
			{
				objDto.setMsgOut(statusMsg);
				connection.commit();	
			}
			else
			{
				objDto.setMsgOut(statusMsg);
				connection.rollback();	
			}
		}
		catch(Exception ex )
		{
			try {
				objDto.setMsgOut("Some Error has Occured,Please Try Again!!");
				connection.rollback();
			} catch (SQLException e) {
				Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"SQL Error while delting Product Catalog  : "+msg, logToFile, logToConsole);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error while delting Product Catalog  : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeCallableStatement(deleteProductInfo);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return objDto;
	}
	
	//	Count Product on the basis of Service ID
	public NewOrderDto countProduct(NewOrderDto objDto)
	{
		//Added by nagarjuna
		String methodName="countProduct",  msg="";
		boolean logToFile=true, logToConsole=true;
		//End nagarjuna
		int countProductVal=0;
		int serviceID=0;
		String statusMsg=null;
		NewOrderBean formBean=new NewOrderBean();
		Connection connection =null;
		CallableStatement deleteProductInfo=null;
		try
		{
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
			
			serviceID=objDto.getServiceId();
			
			//FOR INSERTING DATA IN PRODUCTLINEATTRIBUTE TABLE
		
			deleteProductInfo=connection.prepareCall(sqlCountProduct);
			deleteProductInfo.setInt(1, serviceID);//Service Product ID
			deleteProductInfo.setInt(2,0);//Output Parameter
				
			deleteProductInfo.execute();
			countProductVal=deleteProductInfo.getInt(2);
			objDto.setProductCount(countProductVal);
			connection.commit();	
		}
		catch(Exception ex )
		{
			try {
				objDto.setMsgOut("Some Error has Occured,Please Try Again!!");
				connection.rollback();
			} catch (SQLException e) {
				Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"SQL Error while counting Product  : ", logToFile, logToConsole);//added by nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error while counting Product  : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeCallableStatement(deleteProductInfo);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);
				// TODO Auto-generated catch block
			//	e.printStackTrace();
			}
		}
		return objDto;
	}
		public ArrayList getIncompleteOrderList() throws Exception{
			//Added by nagarjuna
			String methodName="getIncompleteOrderList",  msg="";
			boolean logToFile=true, logToConsole=true;
			//End nagarjuna
		Connection conn = null;
		ResultSet rs = null;
		CallableStatement callableStatement =null;
		NewOrderDto objNewOrderDto=null;
		ArrayList<NewOrderDto> allIncompleteOrderList = new ArrayList<NewOrderDto>();
		try {
			conn = DbConnection.getConnectionObject();
			callableStatement = conn.prepareCall(sqlGet_IncompleteOrderList);
			rs=callableStatement.executeQuery();
			while (rs.next()) {
				objNewOrderDto =  new NewOrderDto();
				objNewOrderDto.setPoNumber(rs.getInt("ORDERNO"));
				objNewOrderDto.setOrderType(Utility.fnCheckNull(rs.getString("ORDERTYPE")));
				objNewOrderDto.setOrderDate(Utility.fnCheckNull(rs.getString("ORDERDATE")));
				objNewOrderDto.setSourceName(Utility.fnCheckNull(rs.getString("SOURCE")));
				objNewOrderDto.setQuoteNo(Utility.fnCheckNull(rs.getString("QUOTENO")));
				objNewOrderDto.setCurrencyName(Utility.fnCheckNull(rs.getString("CURNAME")));
				//objNewOrderDto.setStatus(Integer.parseInt(rs.getString("STATUS")));
				objNewOrderDto.setStageName(Utility.fnCheckNull(rs.getString("STAGE")));
				allIncompleteOrderList.add(objNewOrderDto);
			}
		
		} catch (Exception e) {
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className,"Error while getting Incomplete OrderList  : "+msg, logToFile, logToConsole);//added by nagarjuna
			//e.printStackTrace();
			throw new Exception("No Record Found");
		} finally {
			try {
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callableStatement);
				DbConnection.freeConnection(conn);
			} catch (Exception e) {
				Utility.LOG(true, true, "Exception "+e);
				//e.printStackTrace();
				throw new Exception("No Record Found");
			}
}

		return allIncompleteOrderList;
}

		public ArrayList getIncompleteChangeOrderList() throws Exception{
			//Added by nagarjuna
			String methodName="getIncompleteChangeOrderList",  msg="";
			boolean logToFile=true, logToConsole=true;
			//End nagarjuna
			Connection conn = null;
			ResultSet rs = null;
			CallableStatement callableStatement =null;
			NewOrderDto objNewOrderDto=null;
			ArrayList<NewOrderDto> allIncompleteOrderList = new ArrayList<NewOrderDto>();
			try {
				conn = DbConnection.getConnectionObject();
				callableStatement = conn.prepareCall(sqlGet_IncompleteChangeOrderList);
				rs=callableStatement.executeQuery();
				while (rs.next()) {
					objNewOrderDto =  new NewOrderDto();
					objNewOrderDto.setPoNumber(rs.getInt("ORDERNO"));
					objNewOrderDto.setOrderType(Utility.fnCheckNull(rs.getString("ORDERTYPE")));
					objNewOrderDto.setOrderDate(Utility.fnCheckNull(rs.getString("ORDERDATE")));
					objNewOrderDto.setSourceName(Utility.fnCheckNull(rs.getString("SOURCE")));
					objNewOrderDto.setQuoteNo(Utility.fnCheckNull(rs.getString("QUOTENO")));
					objNewOrderDto.setCurrencyName(Utility.fnCheckNull(rs.getString("CURNAME")));
					//objNewOrderDto.setStatus(Integer.parseInt(rs.getString("STATUS")));
					objNewOrderDto.setStageName(Utility.fnCheckNull(rs.getString("STAGE")));
					allIncompleteOrderList.add(objNewOrderDto);
				}
			
			} catch (Exception e) {
				Utility.onEx_LOG_RET_NEW_EX(e, methodName, className,"Error while getting Incomplete Change OrderList  : "+msg, logToFile, logToConsole);//added by nagarjuna
				//e.printStackTrace();
				throw new Exception("No Record Found");
			} finally {
				try {
					DbConnection.closeResultset(rs);
					DbConnection.closeCallableStatement(callableStatement);
					DbConnection.freeConnection(conn);
				} catch (Exception e) {
					Utility.LOG(true, true, "Exception "+e);
					//e.printStackTrace();
					throw new Exception("No Record Found");
				}
	}

			return allIncompleteOrderList;
	}		
		
	public NewOrderDto validateCharges(NewOrderDto objDto) 
	{
		//Added by nagarjuna
		String methodName="validateCharges",  msg="";
		boolean logToFile=true, logToConsole=true;
		//End nagarjuna
		Connection connection =null;
		PreparedStatement preparedStmt =null;
		ResultSet rs = null;
		NewOrderDto objNewOrderDto = null;
		NewOrderDto objRetDto = new NewOrderDto();
		double poTotalAmount = 0;
		double poProductAmount = 0;
		try
		{
			connection=DbConnection.getConnectionObject();
			
			preparedStmt= connection.prepareCall(sqlSpValidatePoAmount);
			preparedStmt.setLong(1,objDto.getPodetailID());
			preparedStmt.setLong(2,objDto.getServiceProductID());
			
			rs = preparedStmt.executeQuery();
			
			while(rs.next())
			{
				 poTotalAmount = rs.getDouble("POAMOUNT");
				 poProductAmount = rs.getDouble("TOTALPRODUCTCHARGES");
			}
			
			ArrayList<ChargesDetailDto> chargesDetails =  objDto.getChargesDetails();
			double enteredCharges=0;
			if (chargesDetails!=null){
			for (ChargesDetailDto dto : chargesDetails) {
				enteredCharges+=dto.getChargeAmount();
			}
			}
			if(poTotalAmount<(poProductAmount+ enteredCharges))
			{
				objRetDto.setIsChargesValid(0);
				objRetDto.setTotalPoAmt(String.valueOf(poTotalAmount));
				objRetDto.setTotalAmountIncludingCurrent((poProductAmount+ objDto.getChargeAmount()));
			}	
			else
				objRetDto.setIsChargesValid(1);
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error while validating Charges  : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(preparedStmt);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return objRetDto;
	}
	
	public String validateChargesPoLevel(OrderHeaderDTO objDto) 
	{
		//Added by nagarjuna
		String methodName="validateChargesPoLevel",  msg="";
		boolean logToFile=true, logToConsole=true;
		//End nagarjuna
		Connection connection =null;
		PreparedStatement preparedStmt =null;
		ResultSet rs = null;
	//	NewOrderDto objNewOrderDto = null;
		//NewOrderDto objRetDto = new NewOrderDto();
		double poTotalAmount = 0;
		double poProductAmount = 0;
		long poDetailNo = 0;
		int component_id=0;
		String retString = "";
		try
		{
			connection=DbConnection.getConnectionObject();
			
				preparedStmt= connection.prepareCall(sqlSpValidatePoAmountPoLevel);
				preparedStmt.setLong(1,objDto.getPoNumber());
	
				rs = preparedStmt.executeQuery();
				
	   //	Rakshika : Total Amount checked for Validate Order and alert added as per condition : Defect 00156613 : start
				while(rs.next())
				{	int i=0;
					 poTotalAmount = rs.getDouble("podetailAmount");
					 poProductAmount = rs.getDouble("ChargeAmountProduct");
					 poDetailNo=  rs.getLong("poDetailNo");
					 //component_id = rs.getInt("COMPONENT_ID");
			
			if(component_id > 0 && poProductAmount ==0)	 
			{	
				
			}else if(poTotalAmount!=poProductAmount)
				{
					if (poProductAmount==0)
					{
						String a= "No Charges Amount At Product Level for PO Detail No : "+ poDetailNo +"\n";
						
						retString=retString.concat(a);
						i++;
					}else
					{
						String a= "Total Charges Amount At Product Level Should be equal to Total PO Amount for PO Detail No : "+ poDetailNo +"\n"+ "PO Total Amount = " + BigDecimal.valueOf(poTotalAmount).toPlainString() + "\n"+ "Charge Amount of Line Items = " + BigDecimal.valueOf(poProductAmount).toPlainString() + "\n" ;
						
						retString=retString.concat(a);
						i++;
					}

				
				}	
//				[034] Start
				else if (poTotalAmount!=0 && (poTotalAmount!=poProductAmount))
				{
					String a= "Total Charges Amount At Product Level Should be equal to Total PO Amount for PO Detail No : "+ poDetailNo +"\n"+ "PO Total Amount = " + BigDecimal.valueOf(poTotalAmount).toPlainString() + "\n"+ "Charge Amount of Line Items = " + BigDecimal.valueOf(poProductAmount).toPlainString() + "\n" ;
					
					retString=retString.concat(a);
					i++;
				}
//				[034] End
				
			}
	//	Rakshika : Total Amount checked for Validate Order and alert added as per condition : Defect 00156613 : end
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error while validating Charges at Po Level : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(preparedStmt);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return retString;
	}
	private String sqlgetCountOfCharges = " {call IOE.SP_GET_NO_OF_CHARGES(?)}";// To Fetch Data From Credit Period Master
	public String validateChargesPoLevelForChangeOrder(OrderHeaderDTO objDto,Connection optionalConnection) 
	{
		//Added by nagarjuna
		String methodName="validateChargesPoLevelForChangeOrder",  msg="";
		boolean logToFile=true, logToConsole=true;
		//End nagarjuna
		Connection connection =null;
		PreparedStatement preparedStmt =null;
		ResultSet rs = null;
		double poTotalAmount = 0;
		double poProductAmount = 0;
		long poDetailNo = 0;
		String retString = "";
		PreparedStatement preparedSt =null;
		ResultSet rsNoOfCharges = null;
		int noOfcharges =0;
		try
		{
			//below code add by Anil for CLEP
			if(optionalConnection==null){
				connection=DbConnection.getConnectionObject();
			}else{
				connection=optionalConnection;
			}
			//end CLEP
			preparedSt=connection.prepareCall(sqlgetCountOfCharges);
			
			preparedSt.setLong(1,objDto.getPoNumber());

			rsNoOfCharges = preparedSt.executeQuery();
			while(rsNoOfCharges.next())
			{
				noOfcharges =  rsNoOfCharges.getInt("NO_OF_CHARGES");
			}
//			[034] Start
			/*if(noOfcharges > 0)
			{*/
//			[034] End
				preparedStmt= connection.prepareCall(sqlSpValidatePoAmountPoLevelForChangeorder);
				preparedStmt.setLong(1,objDto.getPoNumber());

				rs = preparedStmt.executeQuery();
				
	   //	Rakshika : Total Amount checked for Validate Order and alert added as per condition : Defect 00156613 : start
				while(rs.next())
				{	int i=0;
					 poTotalAmount = rs.getDouble("podetailAmount");
					 poProductAmount = rs.getDouble("ChargeAmountProduct");
					 poDetailNo=  rs.getLong("poDetailNo");
				
				if(poTotalAmount!=poProductAmount)
				{
					if (poProductAmount==0)
					{
						String a= "No Charges Amount At Product Level for PO Detail No : "+ poDetailNo +"\n";
						
						retString=retString.concat(a);
						i++;
					}else
					{
						String a= "Total Charges Amount At Product Level Should be equal to Total PO Amount for PO Detail No : "+ poDetailNo +"\n" + "PO Total Amount = " + BigDecimal.valueOf(poTotalAmount).toPlainString() + "\n"+ "Charge Amount of Line Items = " + BigDecimal.valueOf(poProductAmount).toPlainString() + "\n" ;
						
						retString=retString.concat(a);
						i++;
					}
				}	
//				[034] Start
				else if (poTotalAmount!=0 && (poTotalAmount!=poProductAmount))
				{
					String a= "Total Charges Amount At Product Level Should be equal to Total PO Amount for PO Detail No : "+ poDetailNo +"\n"+ "PO Total Amount = " + BigDecimal.valueOf(poTotalAmount).toPlainString() + "\n"+ "Charge Amount of Line Items = " + BigDecimal.valueOf(poProductAmount).toPlainString() + "\n" ;
					
					retString=retString.concat(a);
					i++;
				}
			/*	}*/
		//	Rakshika : Total Amount checked for Validate Order and alert added as per condition : Defect 00156613 : end
			} /*else 
			{
				retString = "No Charges Amount At Product Level for PO Detail No : "+ poDetailNo +"\n";
			}*/
//				[034] End
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error while validating Charges at Po Level for Change Order : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				
					DbConnection.closeResultset(rs);
					DbConnection.closePreparedStatement(preparedStmt);
					if(optionalConnection==null){
						DbConnection.freeConnection(connection);
					}
				
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return retString;
	}
	public NewOrderDto DeleteServiceDetails(NewOrderDto objDto,String employeeid) throws Exception 
		{
		//Added by nagarjuna
		String methodName="DeleteServiceDetails",  msg="";
		boolean logToFile=true, logToConsole=true;
		//End nagarjuna
			
			Connection connection =null;
			CallableStatement clblstmt =null;
			CallableStatement clblstmt1 =null;
			ResultSet rs = null;
			NewOrderDto objNewOrderDto = new NewOrderDto();
			int cancelStatus=0;
			long serviceProductID=0;
			String statusMsg=null;
			
				try
				{
					connection=DbConnection.getConnectionObject();
					clblstmt= connection.prepareCall(sqlGetServiceProductID);
					clblstmt.setLong(1,objDto.getServiceId());
					rs = clblstmt.executeQuery();
					ArrayList<Long> list = new ArrayList<Long>();
					while(rs.next())
					{
					
					 serviceProductID=rs.getLong("SERVICEPRODUCTID");
					 list.add(serviceProductID);
					}
					int breaked=0;
					/*for(int i=0;i<list.size();i++)
					{
					clblstmt=connection.prepareCall(sqlDeleteProductCatelog);
					clblstmt.setString(1, String.valueOf(list.get(i)));//Service Product ID
					clblstmt.setInt(2,0);//Output Parameter
					clblstmt.setInt(3,0);//Output Parameter
					clblstmt.setString(4,"");//Output Parameter		
					clblstmt.execute();
					deleteStatus=clblstmt.getInt(3);
					statusMsg=clblstmt.getString(4);
					
						if(deleteStatus!=0)
						{
							objNewOrderDto.setMsgOut(statusMsg);
							connection.rollback();
							breaked++;
							break;
						}
					} */
					
					/*Vijay
					 * In Service cancelation Case
					 * insert records into OB_Scheduler in case of Cancelation and if COPC approval is prsent.
					 * OB Calculation would be performed by scheduler later.
					 */
					boolean isObDataSuccessfullySave = OBCalculationDao.validateAndsaveDataIntoObScheduler(objDto.getServiceId(),
								OBCalculationDao.No, OBCalculationDao.ServiceCancel,
								OBCalculationDao.Yes, connection);
					
					//clblstmt1= connection.prepareCall(sqlDeleteServiceMasterDetail);
					clblstmt1= connection.prepareCall(sqlSpUpdateServiceState);
					clblstmt1.setLong(1,objDto.getServiceId());
					clblstmt1.setInt(2,0);//Output Parameter
					clblstmt1.setInt(3,0);//Output Parameter
					clblstmt1.setString(4,"");//Output Parameter	
					clblstmt1.setString(5,objDto.getCancelServiceReason());
					//[00101]
					clblstmt1.setLong(6,objDto.getCancelReasonId());
					if(employeeid !=null){
						clblstmt1.setLong(7,Long.valueOf(employeeid));
					}else{
						clblstmt1.setNull(7,java.sql.Types.BIGINT);
					}
					clblstmt1.execute();
					cancelStatus=clblstmt1.getInt(3);
					statusMsg=clblstmt1.getString(4);
					if(breaked==0 && cancelStatus == 0 && isObDataSuccessfullySave) //add one more condition
					{
						objNewOrderDto.setMsgOut(statusMsg);
						connection.commit();
					}
					else
						
					{
						connection.rollback();
					}
					
					
			}
			catch(Exception ex )
			{
				Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error at Delete Service Details : "+msg, logToFile, logToConsole);//added by nagarjuna
				connection.rollback();
				//ex.printStackTrace();	
			}
			finally
			{
				try 
				{
					DbConnection.closeResultset(rs);
					DbConnection.closeCallableStatement(clblstmt);
					DbConnection.closeCallableStatement(clblstmt1);
					DbConnection.freeConnection(connection);
				} 
				catch (SQLException e) 
				{
					Utility.LOG(true, true, "Exception "+e);
					// TODO Auto-generated catch block
					//e.printStackTrace();
				}
			}
			return objNewOrderDto;
		}	
	// Method used for Fetching get Count PODetailNumber from the Database
	public NewOrderDto DeleteDownLoadFile(String str,String empId) throws Exception 
	{
		//Added by nagarjuna
		String methodName="DeleteDownLoadFile",  msg="";
		boolean logToFile=true, logToConsole=true;
		//End nagarjuna
		int retCode = 0;
		
		Connection con = null;		
		CallableStatement csChangeUserAccess = null;
		ResultSet rsMatrixId = null;
		NewOrderDto objNewOrderDto = new NewOrderDto();
		try
		{
			
				
				
				
				
			con=DbConnection.getConnectionObject();
			csChangeUserAccess = con.prepareCall(sqlDeleteDownLoadFile);			
			
			
			csChangeUserAccess.setString(1,str);
	
			csChangeUserAccess.setInt(2,0);//Output Parameter
			csChangeUserAccess.setInt(3,0);//Output Parameter
			csChangeUserAccess.setString(4,"");//Output Parameter	
			csChangeUserAccess.setString(5,empId);
			csChangeUserAccess.execute();
			
			con.commit();
			retCode=1;
		}
		catch(Exception ex)
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error at Delete DownloadFile : "+msg, logToFile, logToConsole);//added by nagarjuna
			con.rollback();
			//ex.printStackTrace();
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsMatrixId);
				DbConnection.closeCallableStatement(csChangeUserAccess);
				//csChangeUserAccess.close();
				//DbConnection.freeConnection(conn);;
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);
				//e.printStackTrace();
			}
		}
		return objNewOrderDto;
		
	}	
	
	public int getCountPODetailNumber(NewOrderDto objDto)
	{
		//Added by nagarjuna
		String methodName="getCountPODetailNumber",  msg="";
		boolean logToFile=true, logToConsole=true;
		//End nagarjuna
		Connection connection = null;
		PreparedStatement preparedStmt = null;
		ResultSet rs = null;
		int poCount = 0;
		try {
			connection = DbConnection.getConnectionObject();
			preparedStmt = connection.prepareCall(sqlGetCountPODetail_FromBillingInfo);
			preparedStmt.setString(1, objDto.getPoSearchDetailNumber());
                        preparedStmt.setInt(2, objDto.getPoNumber());

			rs = preparedStmt.executeQuery();
			while (rs.next()) {
				poCount = rs.getInt("PODETAILCOUNT");
			}
		} catch (Exception ex) {
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error at Count Po DetailNumber : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();
		} finally {
			try {
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(preparedStmt);
				DbConnection.freeConnection(connection);
			} catch (Exception e) {
				Utility.LOG(true, true, "Exception "+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return poCount;
	}
	public static String sqlGetPoExistency="call IOE.GET_PO_EXISTENCY(?)";
	public int getPoExistency(PoDetailsDTO objDto)
	{
		//Added by nagarjuna
		String methodName="getPoExistency",  msg="";
		boolean logToFile=true, logToConsole=true;
		//End nagarjuna
		Connection connection = null;
		PreparedStatement preparedStmt = null;
		ResultSet rs = null;
		int poCount = 0;
		try {
			connection = DbConnection.getConnectionObject();
			preparedStmt = connection.prepareCall(sqlGetPoExistency);			
            preparedStmt.setInt(1, objDto.getPoNumber());

			rs = preparedStmt.executeQuery();
			while (rs.next()) {
				poCount = rs.getInt("PODETAILCOUNT");
			}
		} catch (Exception ex) {
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error at Po Existency : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();
		} finally {
			try {
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(preparedStmt);
				DbConnection.freeConnection(connection);
			} catch (Exception e) {
				Utility.LOG(true, true, "Exception "+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return poCount;
	}
	
	//To Fetch Product Access i.e. Billing Info etc values from TPOSERVICETYPEDETAIL 
	public ArrayList<ProductCatelogDTO> populateProductAccess(long serviceDetailID,long serviceProductId) 
	{
		//Added by nagarjuna
		String methodName="populateProductAccess",  msg="";
		boolean logToFile=true, logToConsole=true;
		//End nagarjuna
		Connection connection =null;
		CallableStatement preparedStmt =null;
		ResultSet rs = null;		
		//NewOrderDto objNewOrderDto = null;
		ProductCatelogDTO objRetDto = new ProductCatelogDTO();
		ArrayList<ProductCatelogDTO> listAccess= new ArrayList<ProductCatelogDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
			preparedStmt= connection.prepareCall(sqlSpFetchProductAccess);
			preparedStmt.setLong(1,serviceDetailID);
			preparedStmt.setLong(2, serviceProductId);
			preparedStmt.setLong(3, 0);//OUT Config Value
			rs = preparedStmt.executeQuery();
			
			while(rs.next())
			{
				objRetDto.setBillingInfoValue(rs.getInt("BILLINGINFO"));
				objRetDto.setChargeInfoValue(rs.getInt("CHARGEINFO"));
				objRetDto.setHardwareInfoValue(rs.getInt("HARDWAREINFO"));
				objRetDto.setLocationInfoValue(rs.getInt("SERVICELOCATION"));
				objRetDto.setServiceInfoValue(rs.getInt("SERVICESUMMARY"));
				objRetDto.setComponentInfoValue(rs.getInt("COMPONENTINFO"));
				objRetDto.setConfigValue(preparedStmt.getInt(3));
				listAccess.add(objRetDto);
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error  : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(preparedStmt);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listAccess;
	}
	
//	To Fetch Product Access i.e. Billing Info etc values from TPOSERVICETYPEDETAIL 
	public ArrayList<ProductCatelogDTO> populateHdnProductCatelogValue(long serviceDetailID,long serviceProductId) 
	{
		//Added by nagarjuna
		String methodName="populateHdnProductCatelogValue",  msg="";
		boolean logToFile=true, logToConsole=true;
		//End nagarjuna
		Connection connection =null;
		CallableStatement preparedStmt =null;
		ResultSet rs = null;		
		//NewOrderDto objNewOrderDto = null;
		ProductCatelogDTO objRetDto = new ProductCatelogDTO();
		ArrayList<ProductCatelogDTO> listAccess= new ArrayList<ProductCatelogDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
			preparedStmt= connection.prepareCall(sqlSpFetchProductAccess);
			preparedStmt.setLong(1,serviceDetailID);
			preparedStmt.setLong(2, serviceProductId);
			preparedStmt.setLong(3, 0);//OUT Config Value
			rs = preparedStmt.executeQuery();
			
			while(rs.next())
			{
				objRetDto.setBillingInfoValue(rs.getInt("BILLINGINFO"));
				objRetDto.setChargeInfoValue(rs.getInt("CHARGEINFO"));
				objRetDto.setHardwareInfoValue(rs.getInt("HARDWAREINFO"));
				objRetDto.setLocationInfoValue(rs.getInt("SERVICELOCATION"));
				objRetDto.setServiceInfoValue(rs.getInt("SERVICESUMMARY"));
				objRetDto.setComponentInfoValue(rs.getInt("COMPONENTINFO"));
				/*objRetDto.setPrServiceSummary(rs.getInt("PRSERVICESUMMARY"));
				objRetDto.setPrLineDetail(rs.getInt("PRLINEDETAIL"));*/
				objRetDto.setConfigValue(preparedStmt.getInt(3));
				listAccess.add(objRetDto);
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error  : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(preparedStmt);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Exception "+e);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listAccess;
	}
	//	Method used for Fetching All LogicalSINumber
	//l9
	public ArrayList<NewOrderDto> getLogicalSINumber(PagingDto objDto) throws Exception
	{
		//Added by nagarjuna
		String methodName="getLogicalSINumber",  msg="";
		boolean logToFile=true, logToConsole=true;
		//End nagarjuna
		Connection connection =null;
		CallableStatement clbStmt =null;
		ResultSet rs = null;
		ArrayList<NewOrderDto> listLogicalSINumber = new ArrayList<NewOrderDto>();
		NewOrderDto objNewOrderDto = null;
		int recordCount=0;
		String IRN_Number="";
		try
		{
			connection=DbConnection.getConnectionObject();
			if((objDto.getIRN_Number()!=null) && (!"".equalsIgnoreCase(objDto.getIRN_Number()))){
				IRN_Number=objDto.getIRN_Number().trim();
			}			
			
			clbStmt= connection.prepareCall(sqlGetLogicalSiNumber);
			clbStmt.setLong(1, Long.parseLong(objDto.getAccountIDString()));
			if("".equalsIgnoreCase(objDto.getCustSINo()))
				clbStmt.setInt(2, 0);
			else
				clbStmt.setInt(2, Integer.parseInt(objDto.getCustSINo()));
			clbStmt.setString(3, objDto.getServiceName());
			clbStmt.setInt(4, objDto.getIssuspended());
			clbStmt.setInt(5, objDto.getIsdisconnected());
			clbStmt.setString(6, objDto.getSortBycolumn());
			clbStmt.setString(7, objDto.getSortByOrder());
			clbStmt.setInt(8, objDto.getStartIndex());
			clbStmt.setInt(9, objDto.getEndIndex());
			clbStmt.setString(10, objDto.getOrderNo());
			clbStmt.setString(11, IRN_Number);
			clbStmt.setString(12, objDto.getLookupmode());
			clbStmt.setInt(13, objDto.getFxInternalId());//Added by Ashutosh For Child Accound
			//Vijay set 'D' for demo order other wise 'N'
			if(objDto.getOrder_type() !=null && objDto.getOrder_type().equalsIgnoreCase("D"))
				clbStmt.setString(14, "D");//For Demo Orders
			else
				clbStmt.setString(14, "N");//For non Demo Orders
				
			clbStmt.setString(15,objDto.getOrderStage());	
			//vijay end
			
			rs = clbStmt.executeQuery();
			while(rs.next())
			{
				objNewOrderDto =  new NewOrderDto();
				objNewOrderDto.setCustSINo(rs.getString("LOGICAL_SI_NO"));
				objNewOrderDto.setServiceName(rs.getString("SERVICESTAGE"));
				objNewOrderDto.setServiceId(rs.getInt("SERVICEID"));
				objNewOrderDto.setAttributeValue(rs.getString("ATTVALUE"));
				//objNewOrderDto.setMbicServiceId(rs.getString("MBIC_CC_LSI_SERVICE_ID")); //[136]
				objNewOrderDto.setServiceTypeId(rs.getInt("SERVICETYPEID"));
				objNewOrderDto.setFxInternalId(rs.getInt("CHILD_ACCOUNT"));
				/*Vijay. add M6_FX_Progress_status */
				objNewOrderDto.setCc_M6_Progress_status(rs.getString("M6_FX_PROGRESS_STATUS"));
				objNewOrderDto.setOrderNumber(rs.getInt("ORDERNO"));
				objNewOrderDto.setStageName(rs.getString("STAGE"));
				/*Vijay. end */
				if(recordCount ==0){
					recordCount = rs.getInt("FULL_REC_COUNT");
				}				
				objNewOrderDto.getPagingSorting().setRecordCount(recordCount);
				objNewOrderDto.setMaxPageNo(objNewOrderDto.getPagingSorting().getMaxPageNumber());
				listLogicalSINumber.add(objNewOrderDto);
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error while getting LogicalSI No : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try {
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(clbStmt);
				DbConnection.freeConnection(connection);


			} catch (Exception e) {

				Utility.LOG(true, true, e, "");
				throw new Exception("No Record Found");
			}
		}
		return listLogicalSINumber;
	}
	
	//Method for Fetching disconnected LogicalSI NO
	//Start[019]
	public ArrayList<NewOrderDto> getDisconnectedLogicalSINumber(PagingDto objDto) throws Exception 
	{
		//Added by nagarjuna
		String methodName="getDisconnectedLogicalSINumber",  msg="";
		boolean logToFile=true, logToConsole=true;
		//End nagarjuna
		Connection connection =null;
		CallableStatement clbStmt =null;
		ResultSet rs = null;
		ArrayList<NewOrderDto> listLogicalSINumber = new ArrayList<NewOrderDto>();
		NewOrderDto objNewOrderDto = null;
		int recordCount=0;
		String IRN_Number="";
		try
		{
			connection=DbConnection.getConnectionObject();
			if((objDto.getIRN_Number()!=null) && (!"".equalsIgnoreCase(objDto.getIRN_Number()))){
				IRN_Number=objDto.getIRN_Number().trim();
			}
			clbStmt= connection.prepareCall(sqlGetLogicalSiNumberforDisconnection);
			clbStmt.setLong(1, Long.parseLong(objDto.getAccountIDString()));
			if("".equalsIgnoreCase(objDto.getCustSINo()))
				clbStmt.setInt(2, 0);
			else
				clbStmt.setInt(2, Integer.parseInt(objDto.getCustSINo()));
			clbStmt.setString(3, objDto.getServiceName());
			clbStmt.setInt(4, objDto.getIssuspended());
			clbStmt.setInt(5, objDto.getIsdisconnected());
			clbStmt.setString(6, objDto.getSortBycolumn());
			clbStmt.setString(7, objDto.getSortByOrder());
			clbStmt.setInt(8, objDto.getStartIndex());
			clbStmt.setInt(9, objDto.getEndIndex());
			clbStmt.setString(10, objDto.getOrderNo());
			clbStmt.setString(11, IRN_Number);
			clbStmt.setString(12, objDto.getLookupmode());
			clbStmt.setInt(13, objDto.getFxInternalId());//Added by Ashutosh For Child Accound
			
			//vijay start. set order type 'D' if order_type is D other than 'N' in below method
			if(objDto.getOrder_type() !=null && objDto.getOrder_type().equalsIgnoreCase("D"))
				clbStmt.setString(14, "D");//For Demo Orders
			else
				clbStmt.setString(14, "N");//For non Demo Orders
				
			clbStmt.setString(15,objDto.getOrderStage());	
			//vijay end

			rs = clbStmt.executeQuery();
			while(rs.next())
			{
				objNewOrderDto =  new NewOrderDto();
				objNewOrderDto.setCustSINo(rs.getString("LOGICAL_SI_NO"));
				objNewOrderDto.setServiceName(rs.getString("SERVICESTAGE"));
				objNewOrderDto.setServiceId(rs.getInt("SERVICEID"));
				objNewOrderDto.setAttributeValue(rs.getString("ATTVALUE"));
				//objNewOrderDto.setMbicServiceId(rs.getString("MBIC_CC_LSI_SERVICE_ID")); //[136]
				objNewOrderDto.setServiceTypeId(rs.getInt("SERVICETYPEID"));
				objNewOrderDto.setFxInternalId(rs.getInt("CHILD_ACCOUNT"));
				/*Vijay. add M6_FX_Progress_status */
				objNewOrderDto.setCc_M6_Progress_status(rs.getString("M6_FX_PROGRESS_STATUS"));
				objNewOrderDto.setOrderNumber(rs.getInt("ORDERNO"));
				objNewOrderDto.setStageName(rs.getString("STAGE"));
				/*Vijay. end */
				if(recordCount ==0){
					recordCount = rs.getInt("FULL_REC_COUNT");
				}
				objNewOrderDto.getPagingSorting().setRecordCount(recordCount);
				objNewOrderDto.setMaxPageNo(objNewOrderDto.getPagingSorting().getMaxPageNumber());
				listLogicalSINumber.add(objNewOrderDto);
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error while getting Disconnected LogicalSI No : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try {
			Statement stmt=connection.createStatement();
				//Meenakshi : commenting drop statement as proc no more create session table
				//stmt.executeUpdate("DROP TABLE SESSION.LOGICALSI_LIST");
			DbConnection.closeResultset(rs);
			DbConnection.closeCallableStatement(clbStmt);
			
			
		} catch (Exception e) {
			
			Utility.LOG(true, true, e, "");
			throw new Exception("No Record Found");
		}finally
		{
			DbConnection.closeResultset(rs);
			DbConnection.closeCallableStatement(clbStmt);
			DbConnection.freeConnection(connection);
		}}
		return listLogicalSINumber;
	}
	//End[019]
	//Added by Ashutosh for Demo Disconnection
//	Method for Fetching disconnected LogicalSI NO
	//l7
	public ArrayList<NewOrderDto> getDemoDisconnectedLogicalSINumber(PagingDto objDto) 
	{
		//Added by nagarjuna
		String methodName="getDemoDisconnectedLogicalSINumber",  msg="";
		boolean logToFile=true, logToConsole=true;
		//End nagarjuna
		Connection connection =null;
		CallableStatement clbStmt =null;
		ResultSet rs = null;
		ArrayList<NewOrderDto> listLogicalSINumber = new ArrayList<NewOrderDto>();
		NewOrderDto objNewOrderDto = null;
		int recordCount;
		
		try
		{
			connection=DbConnection.getConnectionObject();
			clbStmt= connection.prepareCall(sqlGetLogicalSiNumberforDemoDisconnection);
			clbStmt.setLong(1, Long.parseLong(objDto.getAccountIDString()));
			if("".equalsIgnoreCase(objDto.getCustSINo()))
				clbStmt.setInt(2, 0);
			else
				clbStmt.setInt(2, Integer.parseInt(objDto.getCustSINo()));
			clbStmt.setInt(3, objDto.getIssuspended());
			clbStmt.setInt(4, objDto.getIsdisconnected());
			clbStmt.setString(5, objDto.getSortBycolumn());
			clbStmt.setString(6, objDto.getSortByOrder());
			clbStmt.setInt(7, objDto.getStartIndex());
			clbStmt.setInt(8, objDto.getEndIndex());
			rs = clbStmt.executeQuery();
			while(rs.next())
			{
				objNewOrderDto =  new NewOrderDto();
				objNewOrderDto.setCustSINo(rs.getString("LOGICAL_SI_NO"));
				objNewOrderDto.setServiceName(rs.getString("SERVICESTAGE"));
				objNewOrderDto.setServiceId(rs.getInt("SERVICEID"));
				recordCount=rs.getInt("FULL_REC_COUNT");
				objNewOrderDto.getPagingSorting().setRecordCount(recordCount);
				objNewOrderDto.setMaxPageNo(objNewOrderDto.getPagingSorting().getMaxPageNumber());
				listLogicalSINumber.add(objNewOrderDto);
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error while getting Demo  Disconnected LogicalSI No : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(clbStmt);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, e, "");
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listLogicalSINumber;
	}//end method
	
	
//	Method for Fetching DEMO LogicalSI NO
	//l8
	public ArrayList<NewOrderDto> getDemoLogicalSINumber(PagingDto objDto) 
	{
		//Added by nagarjuna
		String methodName="getDemoLogicalSINumber",  msg="";
		boolean logToFile=true, logToConsole=true;
		//End nagarjuna
		Connection connection =null;
		CallableStatement clbStmt =null;
		ResultSet rs = null;
		ArrayList<NewOrderDto> listLogicalSINumber = new ArrayList<NewOrderDto>();
		NewOrderDto objNewOrderDto = null;
		int recordCount=0;
		String IRN_Number="";
		try
		{
			connection=DbConnection.getConnectionObject();
			if((objDto.getIRN_Number()!=null) && (!"".equalsIgnoreCase(objDto.getIRN_Number()))){
				IRN_Number=objDto.getIRN_Number().trim();
			}
			//if(objDto.getIsUDS() == 1){
			//	clbStmt= connection.prepareCall(sqlGetLogicalSiNumberforDemoForUDS);
		//	}else{
				clbStmt= connection.prepareCall(sqlGetLogicalSiNumberforDemo);	
		//	}
			clbStmt.setLong(1, Long.parseLong(objDto.getAccountIDString()));
			if(objDto.getCustSINo().equals(""))
				clbStmt.setInt(2, 0);
			else
				clbStmt.setInt(2, Integer.parseInt(objDto.getCustSINo()));
			clbStmt.setString(3, objDto.getServiceName());
			clbStmt.setInt(4,objDto.getIssuspended());
			clbStmt.setInt(5, objDto.getIsdisconnected());
			clbStmt.setString(6, objDto.getSortBycolumn());
			clbStmt.setString(7, objDto.getSortByOrder());
			clbStmt.setInt(8, objDto.getStartIndex());
			clbStmt.setInt(9, objDto.getEndIndex());
			clbStmt.setString(10, objDto.getOrderNo());
			clbStmt.setString(11, IRN_Number);
			clbStmt.setString(12, objDto.getLookupmode());	
			clbStmt.setInt(13, objDto.getFxInternalId());//Added by Ashutosh For Child Accound
			clbStmt.setString(14, "D");//For Demo Orders
			clbStmt.setString(15,objDto.getOrderStage());
			
			rs = clbStmt.executeQuery();
			while(rs.next())
			{
				objNewOrderDto =  new NewOrderDto();
				objNewOrderDto.setCustSINo(rs.getString("LOGICAL_SI_NO"));
				objNewOrderDto.setServiceName(rs.getString("SERVICESTAGE"));
				objNewOrderDto.setServiceId(rs.getInt("SERVICEID"));
				objNewOrderDto.setAttributeValue(rs.getString("ATTVALUE"));
				objNewOrderDto.setFxInternalId(rs.getInt("CHILD_ACCOUNT"));
				/*Vijay. add M6_FX_Progress_status */
				objNewOrderDto.setCc_M6_Progress_status(rs.getString("M6_FX_PROGRESS_STATUS"));
				objNewOrderDto.setOrderNumber(rs.getInt("ORDERNO"));
				
				objNewOrderDto.setStageName(rs.getString("STAGE"));
				/*Vijay. end */
				if(recordCount ==0){
					recordCount = rs.getInt("FULL_REC_COUNT");
				}
				objNewOrderDto.getPagingSorting().setRecordCount(recordCount);
				objNewOrderDto.setMaxPageNo(objNewOrderDto.getPagingSorting().getMaxPageNumber());
				listLogicalSINumber.add(objNewOrderDto);
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error while getting Demo LogicalSI No : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				Statement stmt=connection.createStatement();
				//Meenakshi : commenting drop statement as proc no more create session table
				//stmt.executeUpdate("DROP TABLE SESSION.LOGICALSI_LIST_NEW_2");
					
					DbConnection.closeCallableStatement(clbStmt);
		} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, e, "");
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
			finally
			{
				try {
					DbConnection.closeResultset(rs);
					DbConnection.closeCallableStatement(clbStmt);
					
					DbConnection.freeConnection(connection);
				} catch (Exception e) {
					Utility.LOG(true, true, e, "");
					// TODO Auto-generated catch block
					//e.printStackTrace();
				}
			}
		}
		return listLogicalSINumber;
	}
//	Method used for Fetching All LogicalSINumber
	public ArrayList<NewOrderDto> getServiceNProduct(NewOrderDto objDto) 
	{
		//Added by nagarjuna
		String methodName="getServiceNProduct",  msg="";
		boolean logToFile=true, logToConsole=true;
		//End nagarjuna
		Connection connection =null;
		CallableStatement clbStmt =null;
		ResultSet rs = null;
		ArrayList<NewOrderDto> listServiceNProduct = new ArrayList<NewOrderDto>();
		NewOrderDto objNewOrderDto = null;
		
		try
		{
			connection=DbConnection.getConnectionObject();
			clbStmt= connection.prepareCall(sqlGetServiceNProduct);
			if(objDto.getServiceIdString()== null || objDto.getServiceIdString().equalsIgnoreCase(""))
			{
				clbStmt.setString(1, ""+0);
			}
			else
			{
				clbStmt.setString(1, objDto.getServiceIdString());
			}
			
			rs = clbStmt.executeQuery();
			while(rs.next())
			{
				objNewOrderDto =  new NewOrderDto();
				//Added for getting service ID
				objNewOrderDto.setServiceId(rs.getInt("SERVICEID"));
				objNewOrderDto.setServiceProductID(rs.getInt("SERVICEPRODUCTID"));
				objNewOrderDto.setServiceDetDescription(rs.getString("SERVICEDETDESCRIPTION"));
				objNewOrderDto.setParent_serviceProductID(rs.getInt("PARENT_SERVICEPRODUCTID"));
				objNewOrderDto.setTreeViewURL(rs.getString("LINK"));
				objNewOrderDto.setServiceChildId(rs.getString("SERVICEDETAILID"));
				objNewOrderDto.setServiceParentId(rs.getString("SERVICEDETPARENTID"));
				listServiceNProduct.add(objNewOrderDto);
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error  : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(clbStmt);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, e, "");
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listServiceNProduct;
	}
	
	//Method used for Fetching Disconnected ServiceNProduct 
	public ArrayList<NewOrderDto> getDisconnectedServiceNProduct(NewOrderDto objDto) 
	{
		//Added by nagarjuna
		String methodName="getDisconnectedServiceNProduct",  msg="";
		boolean logToFile=true, logToConsole=true;
		//End nagarjuna
		Connection connection =null;
		CallableStatement clbStmt =null;
		ResultSet rs = null;
		ArrayList<NewOrderDto> listServiceNProduct = new ArrayList<NewOrderDto>();
		NewOrderDto objNewOrderDto = null;
		
		try
		{
			connection=DbConnection.getConnectionObject();
			clbStmt= connection.prepareCall(sqlGetServiceNProductforDisconnection);
			if(objDto.getServiceIdString()== null || objDto.getServiceIdString().equalsIgnoreCase(""))
			{
				clbStmt.setString(1, ""+0);
			}
			else
			{
				clbStmt.setString(1, objDto.getServiceIdString());
			}
			clbStmt.setInt(2, objDto.getIssuspended());
			clbStmt.setInt(3, objDto.getIsdisconnected());
			rs = clbStmt.executeQuery();
			while(rs.next())
			{
				objNewOrderDto =  new NewOrderDto();
				//Added for getting service ID
				objNewOrderDto.setServiceId(rs.getInt("SERVICEID"));
				objNewOrderDto.setCustomer_logicalSINumber(rs.getInt("CUSTOMER_LOGICAL_SI_NO"));
				objNewOrderDto.setLogicalSINumber(rs.getInt("LOGICAL_SI_NO"));
				objNewOrderDto.setOrderNumber(rs.getInt("ORDERNO"));
				objNewOrderDto.setServiceProductID(rs.getInt("SERVICEPRODUCTID"));
				objNewOrderDto.setServiceDetDescription(rs.getString("SERVICEDETDESCRIPTION"));
				objNewOrderDto.setParent_serviceProductID(rs.getInt("PARENT_SERVICEPRODUCTID"));
				objNewOrderDto.setTreeViewURL(rs.getString("LINK"));
				objNewOrderDto.setServiceChildId(rs.getString("SERVICEDETAILID"));
				objNewOrderDto.setServiceParentId(rs.getString("SERVICEDETPARENTID"));
				listServiceNProduct.add(objNewOrderDto);
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error while getting DisconnectedServiceNProduct : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(clbStmt);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, e, "");
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listServiceNProduct;
	}
	//	Method used for Fetching Demo ServiceNProduct 
	public ArrayList<NewOrderDto> getDemoServiceNProduct(NewOrderDto objDto) 
	{
		//Added by nagarjuna
		String methodName="getDemoServiceNProduct",  msg="";
		boolean logToFile=true, logToConsole=true;
		//End nagarjuna
		Connection connection =null;
		CallableStatement clbStmt =null;
		ResultSet rs = null;
		ArrayList<NewOrderDto> listServiceNProduct = new ArrayList<NewOrderDto>();
		NewOrderDto objNewOrderDto = null;
		
		try
		{
			connection=DbConnection.getConnectionObject();
			clbStmt= connection.prepareCall(sqlGetServiceNProductforDemo);
			if(objDto.getServiceIdString()== null || objDto.getServiceIdString().equalsIgnoreCase(""))
			{
				clbStmt.setString(1, ""+0);
			}
			else
			{
				clbStmt.setString(1, objDto.getServiceIdString());
			}
			rs = clbStmt.executeQuery();
			while(rs.next())
			{
				objNewOrderDto =  new NewOrderDto();
				//Added for getting service ID
				objNewOrderDto.setServiceId(rs.getInt("SERVICEID"));
				objNewOrderDto.setCustomer_logicalSINumber(rs.getInt("CUSTOMER_LOGICAL_SI_NO"));
				objNewOrderDto.setLogicalSINumber(rs.getInt("LOGICAL_SI_NO"));
				objNewOrderDto.setOrderNumber(rs.getInt("ORDERNO"));
				objNewOrderDto.setServiceProductID(rs.getInt("SERVICEPRODUCTID"));
				objNewOrderDto.setServiceDetDescription(rs.getString("SERVICEDETDESCRIPTION"));
				objNewOrderDto.setParent_serviceProductID(rs.getInt("PARENT_SERVICEPRODUCTID"));
				objNewOrderDto.setTreeViewURL(rs.getString("LINK"));
				objNewOrderDto.setServiceChildId(rs.getString("SERVICEDETAILID"));
				objNewOrderDto.setServiceParentId(rs.getString("SERVICEDETPARENTID"));
				listServiceNProduct.add(objNewOrderDto);
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error while getting Demo ServiceNProduct : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(clbStmt);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, e, "");
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listServiceNProduct;
	}

	public NewOrderDto SaveServiceProduct(NewOrderDto objDto) throws Exception 
	{
		//Added by nagarjuna
		String methodName="SaveServiceProduct",  msg="";
		boolean logToFile=true, logToConsole=true;
		//End nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		CallableStatement callstmt1 =null;
		int maxLogicSINum=0;
		int err1=0;
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat(AppConstants.DATE_FORMAT_PROC);
		try
		{
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
			callstmt= connection.prepareCall(sqlSpInsertServiceProduct);	
			callstmt.setLong(1, Long.parseLong(objDto.getServiceIdString()));
			callstmt.setLong(2, Long.parseLong(objDto.getHdnOrderNo()));
			maxLogicSINum=getLogiSINo();
			callstmt.setString(3, String.valueOf(maxLogicSINum));
			callstmt.setDate(4, new java.sql.Date(simpleDateFormat.parse(objDto.getEffStartDate()).getTime()));
			callstmt.setDate(5, new java.sql.Date(simpleDateFormat.parse(objDto.getEffEndDate()).getTime()));
		
			callstmt.setString(6,objDto.getAttRemarks());
			//Change for Rate Renewal
			callstmt.setInt(7,objDto.getChangeTypeId());
			callstmt.setLong(8,0);
			
			callstmt.setLong(9, 0);
			callstmt.setLong(10, 0);
			callstmt.setString(11, "");
			callstmt.execute();
			int err = callstmt.getInt(10);
			String abc = callstmt.getString(11);
			int s = objDto.getServiceProductIds().length;
			long newServiceID=callstmt.getLong(8);
			if(err == 0)
			{
				for(int i=0;i < objDto.getServiceProductIds().length;i++)
				{
					callstmt1= connection.prepareCall(sqlSpUpdateChangeOrderServiceProduct);
					callstmt1.setLong(1, newServiceID);
					callstmt1.setLong(2, Long.parseLong(objDto.getServiceIdString()));
					callstmt1.setLong(3, Long.parseLong(objDto.getServiceProductIds()[i]));
					
					callstmt1.setLong(4, Long.parseLong(objDto.getHdnOrderNo()));
					callstmt1.setTimestamp(5, new Timestamp(simpleDateFormat.parse(objDto.getEffectiveDate()[i]).getTime()));
					callstmt1.setLong(6, Long.parseLong(objDto.getStdReason()[i]));
					callstmt1.setLong(7,  Long.parseLong(objDto.getRateChange()[i]));
					
					
					
					callstmt1.setLong(8, 0);
					callstmt1.setLong(9, 0); 
					callstmt1.setString(10, "");
					callstmt1.execute();
					String abc1 = callstmt1.getString(10);
					err1 = callstmt1.getInt(9);
				}
			}
			
			if(err==0 )
			{
				objDto.setMsgOut("Data Inserted Successfully");
				connection.commit();
			}
			else
			{
				connection.rollback();
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error while saving Service, Product : "+msg, logToFile, logToConsole);//added by nagarjuna
			connection.rollback();
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.closeCallableStatement(callstmt1);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, e, "");
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return objDto;
	}
		public NewOrderDto disconnectServiceProduct(NewOrderDto objDto) throws Exception 
	{
			//Added by nagarjuna
			String methodName="disconnectServiceProduct",  msg="";
			boolean logToFile=true, logToConsole=true;
			//End nagarjuna
		Connection connection =null;
		
		CallableStatement callstmt1 =null;
		boolean errorFound = false;
		int err1=0;
		String abc1 = "";
		ArrayList<String> serviceIDs = new ArrayList<String>();
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat(AppConstants.DATE_FORMAT_PROC);
		try
		{
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
			StringTokenizer st = new StringTokenizer( objDto.getServiceIdString(), ",");
			for (int i =0; st.hasMoreTokens();i++) {
				serviceIDs.add(st.nextToken());
			}
			//for(int i=0;i < objDto.getServiceProductIds().length;i++)
			for(int i=0;i < serviceIDs.size();i++)
				{
					//Disconnection Permanent
					//if(objDto.getSubChangeTypeId()==3 ||objDto.getSubChangeTypeId()==15)
						callstmt1= connection.prepareCall(sqlSpDisconnectServiceProduct);
					//Suspention
					//else if(objDto.getSubChangeTypeId()==6 ||objDto.getSubChangeTypeId()==13)
					//	callstmt1= connection.prepareCall(sqlSpSuspentionServiceProduct);
					//Disconnection permanert after Suspention
					//else if(objDto.getSubChangeTypeId()==4 ||objDto.getSubChangeTypeId()==16)
						//callstmt1= connection.prepareCall(sqlSpDisAftSuspentionServiceProduct);
					//Resumption
					//else
						//callstmt1= connection.prepareCall(sqlSpResumptiontServiceProduct);
					//callstmt1.setLong(1, Long.parseLong(objDto.getServiceProductIds()[i]));
					callstmt1.setLong(1, Long.parseLong(serviceIDs.get(i)));
					callstmt1.setLong(2, Long.parseLong(objDto.getHdnOrderNo()));
					
					callstmt1.setTimestamp(3, new Timestamp(simpleDateFormat.parse(objDto.getEffDate()).getTime()));
					
					//callstmt1.setLong(4, Long.parseLong(objDto.getStdReason()[i]));
					callstmt1.setString(4, objDto.getStdReasonName());
					callstmt1.setLong(5, 0);
					callstmt1.setLong(6, 0); 
					callstmt1.setString(7, "");
					callstmt1.setInt(8,objDto.getSubChangeTypeId());
					callstmt1.setString(9,objDto.getRemarks());
					callstmt1.setLong(10,objDto.getStdReasonId());
					//vijay start
					callstmt1.setInt(11,Integer.parseInt(objDto.getChkIsDemo()));
					//vijay end
					callstmt1.setInt(12,Integer.parseInt(objDto.getRoleId()));/*Date:14-Mar-2014::OTC Change::Pass current Role to the proc for look lsi after workflow inserted*/
					callstmt1.execute();
					abc1 = callstmt1.getString(7);
					err1 = callstmt1.getInt(5);
					if(err1!= 0) {
						errorFound = true;
						break;
					}
				}
			
			
			if(! errorFound )
			{
				objDto.setMsgOut("Data Inserted Successfully");
				connection.commit();
			}
			else
			{
				AppConstants.IOES_LOGGER.info("Error Found : " + abc1);
				connection.rollback();
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error while Disconnecting Service, Product : "+msg, logToFile, logToConsole);//added by nagarjuna
			connection.rollback();
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeCallableStatement(callstmt1);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, e, "");
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return objDto;
	}
		
		
		//Added by Ashutosh for Solution Change
		//Start Method
		public NewOrderDto solutionChangeServiceProduct(NewOrderDto objDto) throws Exception 
		{
			//Added by nagarjuna
			String methodName="solutionChangeServiceProduct",  msg="";
			boolean logToFile=true, logToConsole=true;
			//End nagarjuna
			Connection connection =null;
			
			CallableStatement callstmt1 =null;
			boolean errorFound = false;
			int err1=0;
			String abc1 = "";
			ArrayList<String> serviceIDs = new ArrayList<String>();
			SimpleDateFormat simpleDateFormat = new SimpleDateFormat(AppConstants.DATE_FORMAT_PROC);
			try
			{
				connection=DbConnection.getConnectionObject();
				connection.setAutoCommit(false);
				callstmt1= connection.prepareCall(sqlSolutionChangeServiceProduct);								
				
				StringTokenizer st = new StringTokenizer( objDto.getServiceIdString(), ",");
				for (int i =0; st.hasMoreTokens();i++) {
					serviceIDs.add(st.nextToken());
				}
				//for(int i=0;i < objDto.getServiceProductIds().length;i++)
				for(int i=0;i < serviceIDs.size();i++)
					{						
						//callstmt1.setLong(1, Long.parseLong(objDto.getServiceProductIds()[i]));
						callstmt1.setLong(1, Long.parseLong(serviceIDs.get(i)));
						callstmt1.setLong(2, Long.parseLong(objDto.getHdnOrderNo()));
						
						callstmt1.setTimestamp(3, new Timestamp(simpleDateFormat.parse(objDto.getEffDate()).getTime()));
						
						callstmt1.setString(4, objDto.getStdReasonName());
						//callstmt1.setLong(4, 1);
						callstmt1.setLong(5, 0);
						callstmt1.setLong(6, 0); 
						callstmt1.setString(7, "");
						callstmt1.setInt(8,objDto.getSubChangeTypeId());
						callstmt1.setInt(9,objDto.getChangeTypeId());//Added by Ashutosh as on 31 march
						callstmt1.setString(10,objDto.getRemarks());
						callstmt1.setLong(11,objDto.getStdReasonId());
						callstmt1.setLong(12,0);//Added By Ashutosh for Bulkupload as Service out (19 Mar)
						//vijay start
						callstmt1.setInt(13,Integer.parseInt(objDto.getChkIsDemo()));
						//vijay end
						callstmt1.setInt(14,Integer.parseInt(objDto.getRoleId()));/*Date:14-Mar-2014::OTC Change::Pass current Role to the proc for look lsi after workflow inserted*/
						
						callstmt1.execute();
						abc1 = callstmt1.getString(7);
						err1 = callstmt1.getInt(5);
						if(err1!= 0) {
							errorFound = true;
							break;
						}
					}
				
				
				if(! errorFound )
				{
					objDto.setMsgOut("Data Inserted Successfully");
					connection.commit();
				}
				else
				{
					AppConstants.IOES_LOGGER.info("Error Found : " + abc1);
					connection.rollback();
				}
			}
			catch(Exception ex )
			{
				Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error while solution change Service, Product : "+msg, logToFile, logToConsole);//added by nagarjuna
				connection.rollback();
				//ex.printStackTrace();	
			}
			finally
			{
				try 
				{
					DbConnection.closeCallableStatement(callstmt1);
					DbConnection.freeConnection(connection);
				} 
				catch (SQLException e) 
				{
					Utility.LOG(true, true, e, "");
					// TODO Auto-generated catch block
					//e.printStackTrace();
				}
			}
			return objDto;
		}
		//End Method
		
	
//		Ramana
		public  NewOrderDto displayServicesInLines(NewOrderDto objDto) throws Exception 
		{
			//Added by nagarjuna
			String methodName="displayServicesInLines",  msg="";
			boolean logToFile=true, logToConsole=true;
			//End nagarjuna
			Connection connection =null;
			
			CallableStatement callstmt1 =null;
			CallableStatement callstmt2 =null;
			CallableStatement callstmt3 =null;
			CallableStatement callstmt4 =null;
			CallableStatement callstmt6 =null;
			ResultSet rs = null;
			ResultSet rsDisconnect = null;
			try
			{
				connection=DbConnection.getConnectionObject();
				connection.setAutoCommit(false);
				//callstmt1= connection.prepareCall(sqlChangeOrderUpgradeDowngradeLookupAction);
				callstmt1= connection.prepareCall(sqlChangeOrderUpgradeDowngradeLookupAction);
				int errorFlag=0;
				HashMap hm = new HashMap();
				ArrayList oldParent_ServiceProductIds = new ArrayList();
				ArrayList newServiceProductIds = new ArrayList();
				for(int i=0;i < objDto.getServiceProductIds().length;i++)
				{
					callstmt1.setLong(1, Long.parseLong(objDto.getHdnOrderNo()));
					callstmt1.setLong(2, Long.parseLong(objDto.getServiceProductIds()[i]));					
					callstmt1.setInt(3, 0);
					callstmt1.setInt(4, 0);
					callstmt1.setString(5, "");
					callstmt1.setLong(6, 0);
					callstmt1.setLong(7,0);
					callstmt1.setInt(8,objDto.getSubChangeTypeId());
					callstmt1.execute();
					int state=callstmt1.getInt(3);
					if(state==-1)
					{
						errorFlag=1;
						Utility.LOG(true, true, callstmt1.getString(5));
						break;
					}
//					hm.put(key, value);
					hm.put(objDto.getServiceProductIds()[i],callstmt1.getString(7));
					System.err.println("New SPID :"+callstmt1.getString(7));
					oldParent_ServiceProductIds.add(callstmt1.getString(6));
					newServiceProductIds.add(callstmt1.getString(7));
				}
				
				//Updation of new service product id whose parent id replaced			
				for(int j=0;j<oldParent_ServiceProductIds.size();j++)
				{
					String oldParenId=(String)oldParent_ServiceProductIds.get(j);
					if(hm.containsKey(oldParenId))
					{
						String newParentId=(String)hm.get(oldParenId);
						String spIdWhoseParentToBeReplaced=(String)newServiceProductIds.get(j);
						Utility.SysOut(newParentId);
						Utility.SysOut(spIdWhoseParentToBeReplaced);
						callstmt2= connection.prepareCall(sqlNewServiceProductIDWhoseParentIDReplaced);
						callstmt2.setLong(1,Long.parseLong(newParentId));					
						callstmt2.setLong(2,Long.parseLong(spIdWhoseParentToBeReplaced));
						callstmt2.execute();
						Utility.SysOut(newParentId);
						Utility.SysOut(spIdWhoseParentToBeReplaced);
					}
				}
				for(int k=0; k<objDto.getServiceProductIds().length;k++)
				{
					String oldSPID=objDto.getServiceProductIds()[k];
					String newSPID=(String)hm.get(oldSPID);
					
					callstmt3=connection.prepareCall(sqlParentServiceProductIDUpdation);
					callstmt3.setLong(1,Long.parseLong(oldSPID));					
				    callstmt3.setLong(2,Long.parseLong(newSPID));	
				    callstmt3.setLong(3,Long.parseLong(objDto.getHdnOrderNo()));
					callstmt3.execute();
				}
				//Added by Ashutosh for parent update in TPOSERVICEDETAILS 
				callstmt4= connection.prepareCall("SELECT * FROM IOE.TPOSERVICEDETAILS WHERE (PARENT_SERVICEPRODUCTID <> 0 or PARENT_SERVICEPRODUCTID is null) AND SERVICEID in (select distinct SERVICEID from IOE.TPOSERVICEDETAILS where CHANGE_ORDER_NO = "+ objDto.getHdnOrderNo() +")");
				
				rs = callstmt4.executeQuery();
				
				Utility.SysOut(rs.getFetchSize());
				while(rs!= null && rs.next())
				{
					
					callstmt6= connection.prepareCall(sqlParentIdUpdate);
					callstmt6.setLong(1, Long.parseLong(rs.getString("SERVICEPRODUCTID")));
					callstmt6.setLong(2, Long.parseLong(rs.getString("OLD_SERVICEPRODUCTID")));					
					callstmt6.setInt(3, 0);
					callstmt6.setInt(4, 0);
					callstmt6.setString(5, "");
					callstmt6.execute();				
				}
				//rs.close();
				//Added by Ashutosh for parent update in TPOSERVICEDETAILS 
				if(objDto.getChangeTypeId()==3)
				{
					int i=0;
					CallableStatement callstmt5 =null;
					callstmt5= connection.prepareCall("SELECT * FROM IOE.TPOSERVICEDETAILS WHERE (PARENT_SERVICEPRODUCTID <> 0 or PARENT_SERVICEPRODUCTID is null) AND ISDISCONNECTED=0 AND ISSUSPENDED=0 AND SERVICEID in (select distinct SERVICEID from IOE.TPOSERVICEDETAILS where CHANGE_ORDER_NO = "+ objDto.getHdnOrderNo() +")");
					rsDisconnect=callstmt5.executeQuery();
					while(rsDisconnect.next())
					{
							//Added by Ashutosh For Disconnection
							if(objDto.getChangeTypeId()==3){
								boolean errorFound = false;
								int err1=0;
								String abc1 = "";
								SimpleDateFormat simpleDateFormat = new SimpleDateFormat(AppConstants.DATE_FORMAT_PROC);
								//Disconnection Permanent
								if(objDto.getSubChangeTypeId()==3)
									callstmt5= connection.prepareCall(sqlSpDisconnectServiceProduct);
								//Suspention
								else if(objDto.getSubChangeTypeId()==6)
									callstmt5= connection.prepareCall(sqlSpSuspentionServiceProduct);
								//Disconnection permanert after Suspention
								else if(objDto.getSubChangeTypeId()==4)
									callstmt5= connection.prepareCall(sqlSpDisAftSuspentionServiceProduct);
								//Resumption
								else
									callstmt5= connection.prepareCall(sqlSpResumptiontServiceProduct);
								callstmt5.setLong(1, (rsDisconnect.getInt("SERVICEPRODUCTID")));
								callstmt5.setLong(2, Long.parseLong(objDto.getHdnOrderNo()));
								
								callstmt5.setTimestamp(3, new Timestamp(simpleDateFormat.parse(objDto.getEffectiveDate()[i]).getTime()));
								i++;
								//callstmt1.setLong(4, Long.parseLong(objDto.getStdReason()[i]));
								callstmt5.setLong(4, 0);
								callstmt5.setLong(5, 0);
								callstmt5.setLong(6, 0); 
								callstmt5.setString(7, "");
								callstmt5.setInt(8,objDto.getSubChangeTypeId());
								callstmt5.execute();
								abc1 = callstmt5.getString(7);
								err1 = callstmt5.getInt(5);
								if(err1!= 0) {
									errorFound = true;
									break;
								}
								
							}
					}
				}
				
				if(errorFlag==1)
				{
					connection.rollback();
				}
				else if(errorFlag==0)
				{
					connection.commit();
					objDto.setMsgOut("Data Inserted Succesfully");
				}
				
			}
			catch(Exception ex )
			{
				Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error while displaying service Inlines  : "+msg, logToFile, logToConsole);//added by nagarjuna
				connection.rollback();
				//ex.printStackTrace();	
				//throw ex;
			}
			finally
			{
				try 
				{
					DbConnection.closeResultset(rs);
					DbConnection.closeResultset(rsDisconnect);
					DbConnection.closeCallableStatement(callstmt1);
					DbConnection.closeCallableStatement(callstmt2);
					DbConnection.closeCallableStatement(callstmt3);
					DbConnection.closeCallableStatement(callstmt4);
					DbConnection.closeCallableStatement(callstmt6);
					
					DbConnection.freeConnection(connection);
				} 
				catch (SQLException e) 
				{
					Utility.LOG(true, true, e, "");
					// TODO Auto-generated catch block
					//e.printStackTrace();
				}
			}
			return objDto;
		}
		
	//Ramana
	//Added By Saurabh for Saving Regularized Demo Product
	public NewOrderDto demoServiceProduct(NewOrderDto objDto) throws Exception 
	{
		//Added by nagarjuna
		String methodName="demoServiceProduct",  msg="";
		boolean logToFile=true, logToConsole=true;
		//End nagarjuna
		Connection connection =null;
		ResultSet rs = null;
		NewOrderDto objNewOrderDto = null;
		CallableStatement callstmt1 =null;
		CallableStatement callstmt2 =null;
		CallableStatement callstmt3 =null;
		boolean errorFound = false;
		int err1=0;
		String abc1 = "";
		ArrayList listOfSPIDs = new ArrayList();
		
		Set setofSPIDs = new HashSet();
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat(AppConstants.DATE_FORMAT_PROC);
		try
		{
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
			for(int i=0;i < objDto.getServiceProductIds().length;i++)
				{
					//Demo Regularize Order and Product
					if(objDto.getSubChangeTypeId()==12)
					{
							callstmt2= connection.prepareCall(sqlSpDemoRegularize1ServiceProduct);
							callstmt2.setString(1, objDto.getServiceProductIds()[i]);
							callstmt2.setString(2, "abc");
							rs=callstmt2.executeQuery();
							while (rs.next())
							{
								setofSPIDs.add(rs.getInt("SERVICEPRODUCTID"));
							}
					}
				}
			// Used to get distinct list of Service Product IDs afer using for and while loop
			Object [] listofSPID = new Object[setofSPIDs.size()];
			listofSPID = setofSPIDs.toArray();
					
			
					if(objDto.getSubChangeTypeId()==12)
					{	
							for(int length =0; length < listofSPID.length;length++) 
							{
								objNewOrderDto =  new NewOrderDto();
								callstmt3=connection.prepareCall(sqlSpDemoSaveRegularizeServiceProduct);
								callstmt3.setInt(1, Integer.parseInt((listofSPID[length]).toString()));
								callstmt3.setLong(2, Long.parseLong(objDto.getHdnOrderNo()));
								callstmt3.setTimestamp(3, new Timestamp(simpleDateFormat.parse(objDto.getEffectiveDate()[length]).getTime()));
								callstmt3.setString(4, objDto.getStdReason()[length]);
								callstmt3.setLong(5, 0);
								callstmt3.setLong(6, 0); 
								callstmt3.setString(7, "");
								callstmt3.setInt(8, objDto.getSubChangeTypeId());
								callstmt3.execute();
								abc1 = callstmt3.getString(7);
								Utility.SysOut(abc1);
								//err1 = callstmt1.getInt(5);
								if(callstmt3.getInt(5)!= 0) 
								{
									errorFound = true;
									break;
								}
									
							}
					}
								
					
				
				
			if(! errorFound )
			{
				objDto.setMsgOut("Data Inserted Successfully");
				connection.commit();
			}
			else
			{
				AppConstants.IOES_LOGGER.info("Error Found : " + abc1);
				connection.rollback();
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error while inserting demo service Product  : "+msg, logToFile, logToConsole);//added by nagarjuna
			connection.rollback();
			//ex.printStackTrace();	
			//System.err.println(ex.getMessage());
		}
		finally
		{
			try 
			{
				DbConnection.closeCallableStatement(callstmt1);
				DbConnection.closeCallableStatement(callstmt2);
				DbConnection.closeCallableStatement(callstmt3);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, e, "");
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return objDto;
	}
	//To Fetch Parent Service Product Ids based on serviceId and serviceDetailId(ie product type id) 
	public ProductCatelogDTO populateParentServiceProduct(long serviceDetailID, int serviceId) 
	{
		//Added by nagarjuna
		String methodName="populateParentServiceProduct",  msg="";
		boolean logToFile=true, logToConsole=true;
		//End nagarjuna
		Connection connection =null;
		PreparedStatement preparedStmt =null;
		ResultSet rs = null;
		
		ProductCatelogDTO objRetDto = new ProductCatelogDTO();
		ArrayList<ProductCatelogDTO> list= new ArrayList<ProductCatelogDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
			
			CallableStatement cstmt = null;
			cstmt= connection.prepareCall(sqlSp_Is_SERVICE_TYPE_LEVEL_ONE);
			cstmt.setLong(1,serviceDetailID);
			cstmt.setNull(2,java.sql.Types.SMALLINT);
			
			cstmt.execute();
			short val=cstmt.getShort(2);
			if(val==1)//Level 1 product after base
			{
				objRetDto.setProductlevel("1");
				
				preparedStmt= connection.prepareCall(sqlSpFetchParentServiceProduct);
				
				preparedStmt.setNull(1,java.sql.Types.BIGINT);
				preparedStmt.setLong(2,serviceId);
				
				rs = preparedStmt.executeQuery();
				
				while(rs.next())
				{
					ProductCatelogDTO dto = new ProductCatelogDTO();
					dto.setServiceProductID(Integer.parseInt(rs.getString("SERVICEPRODUCTID")));
					list.add(dto);
				}
				objRetDto.setServiceProducts(list);
			}
			else
			{
				objRetDto.setProductlevel("2");
				
				preparedStmt= connection.prepareCall(sqlSpFetchParentServiceProduct);
				preparedStmt.setLong(1,serviceDetailID);
				preparedStmt.setLong(2,serviceId);
				rs = preparedStmt.executeQuery();
				NewOrderDto objNewOrderDto = null;
				while(rs.next())
				{
					ProductCatelogDTO dto = new ProductCatelogDTO();
					dto.setServiceProductID(Integer.parseInt(rs.getString("SERVICEPRODUCTID")));
					dto.setServiceTypeDescription(rs.getString("SERVICEDETDESCRIPTION"));
					dto.setLink(rs.getString("LINK"));
					list.add(dto);
				}
				objRetDto.setServiceProducts(list);
			}
			
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error while populating parent service Product  : "+msg, logToFile, logToConsole);//added by nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(preparedStmt);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, e, "");
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return objRetDto;
	}
	
	
// 78 start	

/*
	public NewOrderDto copyServiceProduct(int serviceProductID,int numberOfCopy) throws IOESException{
		String methodName="setChargeSummaryData", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
	//	AppConstants.IOES_LOGGER.info(methodName+" method of "+className+" class have been called");
		
		NewOrderDto dto = null;
		Connection connection =null;
		try {
			long msgCode=0;
			String cslServiceID="";
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
			CallableStatement isParent =null;
			isParent= connection.prepareCall(sqlSp_isParent);
			isParent.setLong(1,serviceProductID);
			isParent.setNull(2,java.sql.Types.VARCHAR);
			isParent.execute();
			if (isParent.getString(2).equals("Y")) {
				String message=" Selected Product is Root Node. Please select other Product.";
				dto = new NewOrderDto();
				dto.setMessage(message);
				dto.setMessageId("ENTRY_NOT_COPIED");
				connection.commit();
			}else if(isParent.getString(2).equals("FALSE"))
			{
				String message=" This LineItem Is Not Allowed More Than Once In A Service.";
				dto = new NewOrderDto();
				dto.setMessage(message);
				dto.setMessageId("ENTRY_NOT_COPIED");
				connection.commit();
			}else {
				
				CallableStatement cstmt = null;
				cstmt= connection.prepareCall(sqlSp_copyServiceProduct);
				cstmt.setLong(1,serviceProductID);
				cstmt.setLong(2,numberOfCopy);
				cstmt.registerOutParameter(3,java.sql.Types.VARCHAR);
				cstmt.registerOutParameter(4,java.sql.Types.VARCHAR);
				cstmt.registerOutParameter(5,java.sql.Types.BIGINT);
				cstmt.registerOutParameter(6,java.sql.Types.VARCHAR);
				cstmt.registerOutParameter(7,java.sql.Types.BIGINT);
				cstmt.registerOutParameter(8,java.sql.Types.VARCHAR);
				//cstmt.registerOutParameter(parameterIndex, sqlType)
				
				cstmt.execute();
				dto = new NewOrderDto();
				msgCode=cstmt.getLong(5);
				//String message=cstmt.getString(2);
				
				if(msgCode!=1)
				{
					connection.rollback();
				
				}
				cslServiceID=cstmt.getString(8);
			
				if(msgCode==1)
				{
					//String message=cstmt.getString(2);
					String message=" Entry Copied Succesfully. Service Product Ids are : " +cslServiceID;
					dto.setMessage(message);
					dto.setMessageId(cstmt.getString(4));
					connection.commit();
				}
				else
				{
					String message=cstmt.getString(3);
					dto.setMessage(message);
					dto.setMessageId(cstmt.getString(4));
					Utility.LOG(true,true,"@msgCode :"+cstmt.getLong(5));
					Utility.LOG(true,true,"@errMessage :"+cstmt.getString(6));
					Utility.LOG(true,true,"@sqlCode :"+cstmt.getLong(7));
					connection.rollback();
				}
				
			}
			
			
			
			
			
		} catch (Exception e) {
			try {
				connection.rollback();
			} catch (SQLException e1) {
				Utility.onEx_LOG_RET_NEW_EX(e1, methodName, className, msg, logToFile, logToConsole);
			}finally{
			throw Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);
			}
		}finally
		{
			try {
				DbConnection.freeConnection(connection);
			} catch (Exception e) {
				throw Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);
			}
		}
		
		return dto;
	}
	*/	
//78 end	

	//[080]Start : Copy Service product For New and  Chage Order
	public CommonDTO copyServiceProductForNewAndChangeOrder(ProductCatelogDTO objDto, String empID) throws IOESException
	{
		String methodName="copyServiceProductForNewAndChangeOrder", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		//AppConstants.IOES_LOGGER.info(methodName+" method of "+className+" class have been called");
		
		CommonDTO dto = null;
		Connection connection =null;
		CallableStatement cstmt = null;	
		try {
			long msgCode=0;
			String cslServiceID="";
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);						
			int numOfCopy = Integer.parseInt(objDto.getCopyProductValues());	
							
				cstmt= connection.prepareCall(sqlSp_copyServiceProductForNewAndChargeOrder);
				cstmt.setLong(1,objDto.getServiceProductID());
				cstmt.registerOutParameter(2,java.sql.Types.VARCHAR);
				cstmt.registerOutParameter(3,java.sql.Types.VARCHAR);
				cstmt.registerOutParameter(4,java.sql.Types.BIGINT);
				cstmt.registerOutParameter(5,java.sql.Types.VARCHAR);
				cstmt.registerOutParameter(6,java.sql.Types.BIGINT);
				cstmt.registerOutParameter(7,java.sql.Types.BIGINT);
				cstmt.setString(8,empID);
				cstmt.setLong(9,numOfCopy);
				cstmt.setLong(10,objDto.getPoNumber());
				
				cstmt.execute();
				dto = new CommonDTO();
				msgCode=cstmt.getLong(4);
				//String message=cstmt.getString(2);	
				cslServiceID=cstmt.getString(7);
				
				
				if(msgCode==1)
				{
					//String message=cstmt.getString(2);
					String message=" Entry Copied Succesfully. Service Product Id is : " +cslServiceID;
					dto.setMessage(message);
					dto.setMessageId(cstmt.getString(3));
					Utility.LOG(true,true,"@errMessage :"+cstmt.getString(5));
					connection.commit();
				}
				else
				{
					String message=cstmt.getString(2);
					dto.setMessage(message);
					dto.setMessageId(cstmt.getString(3));
					Utility.LOG(true,true,"Error in Copy Service Product Functionality::::::::::");
					Utility.LOG(true,true,"@message :"+cstmt.getString(2));
					Utility.LOG(true,true,"@messageId :"+cstmt.getString(3));
					Utility.LOG(true,true,"@msgCode :"+cstmt.getLong(4));
					Utility.LOG(true,true,"@errMessage :"+cstmt.getString(5));
					Utility.LOG(true,true,"@sqlCode :"+cstmt.getLong(6));
					connection.rollback();
				}
			
		} catch (Exception e) {
			try {
				connection.rollback();
			} catch (SQLException e1) {
				Utility.onEx_LOG_RET_NEW_EX(e1, methodName, className, msg, logToFile, logToConsole);
			}finally{
			throw Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);
			}
		}finally
		{
			try {
				DbConnection.closeCallableStatement(cstmt);
				DbConnection.freeConnection(connection);
			} catch (Exception e) {
				throw Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);
			}
		}
		
		return dto;
	}
	//[080] End	
	
//	Method used for Fetching AllowedSections of Product Catelog Page Corresponding to a Particular product from the Database
	public Set<String> fetchAllowedSections(Connection connection, NewOrderBean formBean)  throws Exception
	{
		String methodName="fetchAllowedSections", className=this.getClass().getName(), msg="";
		AppConstants.IOES_LOGGER.info(methodName+" method of "+className+" class have been called");
		boolean logToFile=true, logToConsole=true;
		
		PreparedStatement preparedStmt =null;
		ResultSet rs = null;
		  Set<String> allowedSectionsSet = new HashSet<String>();
		try
		{
			preparedStmt= connection.prepareCall(sqlFetchAllowedSections);
			preparedStmt.setLong(1,Long.parseLong(formBean.getHdnSelectedServiceDetailId()));
			rs = preparedStmt.executeQuery();
			
			while(rs.next())
			{
			 if(rs.getLong("SERVICESUMMARY")==1)
			 {
				 allowedSectionsSet.add(AppConstants.prdCatelog_Service_Summary);
			 }
			 if(rs.getLong("BILLINGINFO")==1)
			 {
				 allowedSectionsSet.add(AppConstants.prdCatelog_Billing_Information_Address);
			 }
			 if(rs.getLong("CHARGEINFO")==1)
			 {
				 allowedSectionsSet.add(AppConstants.prdCatelog_Charges_Details);
			 }
			 if(rs.getLong("HARDWAREINFO")==1)
			 {
				 allowedSectionsSet.add(AppConstants.prdCatelog_Hardware_Info);
			 }
			 if(rs.getLong("SERVICELOCATION")==1)
			 {
				 allowedSectionsSet.add(AppConstants.prdCatelog_ServiceLocation_Details);
			 }
			}
		}
		catch(Exception ex )
		{
			throw Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);
		}
		finally
		{
			DbConnection.closeResultset(rs);
			DbConnection.closePreparedStatement(preparedStmt);
		}
		return allowedSectionsSet;
	}
		
	public ResultSet fetchBillingInfoDetailsForExcel(Connection conn,String[] serviceProductIds) throws Exception 
	{
		
		String methodName="fetchAllProductDetailsForExcel", className=this.getClass().getName(), msg="";
		AppConstants.IOES_LOGGER.info(methodName+" method of "+className+" class have been called");
		boolean logToFile=true, logToConsole=true;
		CallableStatement cstmt = null ;
		ResultSet rs=null;
		try
		{
			String csvServiceProductIds=Utility.generateCSV(serviceProductIds);
			cstmt = conn.prepareCall(sqlGet_PrdCatelogTemplateExcelList_BillingInfo);
			cstmt.setString(1,csvServiceProductIds);
			rs=cstmt.executeQuery();
		}
		catch(Exception ex)
		{
			throw Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);
		}
		finally
		{
			DbConnection.closeResultset(rs);
			DbConnection.closeCallableStatement(cstmt);
		}
		
		return rs;
	}
	public ResultSet fetchHardwareInfoDetailsForExcel(Connection conn,String[] serviceProductIds) throws Exception 
	{
		String methodName="fetchHardwareInfoDetailsForExcel", className=this.getClass().getName(), msg="";
		AppConstants.IOES_LOGGER.info(methodName+" method of "+className+" class have been called");
		boolean logToFile=true, logToConsole=true;
		CallableStatement cstmt = null ;
		ResultSet rs=null;
		try
		{
			String csvServiceProductIds=Utility.generateCSV(serviceProductIds);
			cstmt = conn.prepareCall(sqlGet_PrdCatelogTemplateExcelList_HardwareInfo);
			cstmt.setString(1,csvServiceProductIds);
			rs=cstmt.executeQuery();
		}
		catch(Exception ex)
		{
			throw Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);
		}
		finally
		{
			DbConnection.closeResultset(rs);
			DbConnection.closeCallableStatement(cstmt);
		}
		return rs;
	}
	public ResultSet fetchChargesInfoDetailsForExcel(Connection conn,String[] serviceProductIds) throws Exception 
	{
		String methodName="fetchChargesInfoDetailsForExcel", className=this.getClass().getName(), msg="";
		AppConstants.IOES_LOGGER.info(methodName+" method of "+className+" class have been called");
		boolean logToFile=true, logToConsole=true;
		CallableStatement cstmt = null ;
		ResultSet rs=null;
		try
		{
			String csvServiceProductIds=Utility.generateCSV(serviceProductIds);
			cstmt = conn.prepareCall(sqlGet_PrdCatelogTemplateExcelList_ChargesInfo);
			cstmt.setString(1,csvServiceProductIds);
			rs=cstmt.executeQuery();
		}
		catch(Exception ex)
		{
			throw Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);
		}
		finally
		{
			DbConnection.closeResultset(rs);
			DbConnection.closeCallableStatement(cstmt);
		}
		return rs;
	}
	public ResultSet fetchServiceLocationInfoDetailsForExcel(Connection conn,String[] serviceProductIds) throws Exception 
	{
		String methodName="fetchChargesInfoDetailsForExcel", className=this.getClass().getName(), msg="";
		AppConstants.IOES_LOGGER.info(methodName+" method of "+className+" class have been called");
		boolean logToFile=true, logToConsole=true;
		
		CallableStatement cstmt = null ;
		ResultSet rs=null;
		try
		{
			String csvServiceProductIds=Utility.generateCSV(serviceProductIds);
			cstmt = conn.prepareCall(sqlGet_PrdCatelogTemplateExcelList_ServiceLocationInfo);
			cstmt.setString(1,csvServiceProductIds);
			rs=cstmt.executeQuery();
		}
		catch(Exception ex)
		{
			throw Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);
		}
		finally
		{
			DbConnection.closeResultset(rs);
			DbConnection.closeCallableStatement(cstmt);
		}
		return rs;
	}
	public ResultSet getMetaDataInformation(Connection conn,String serviceDetailId) throws Exception
	{
		String methodName="getMetaDataInformation", className=this.getClass().getName(), msg="";
		AppConstants.IOES_LOGGER.info(methodName+" method of "+className+" class have been called");
		boolean logToFile=true, logToConsole=true;
		
		PreparedStatement prpdStmt =null;
		ResultSet rs = null;
		try
		{
			prpdStmt= conn.prepareCall(getMetaDataInformation);
			prpdStmt.setLong(1,Long.parseLong(serviceDetailId));
			rs = prpdStmt.executeQuery();
		}
		catch(Exception ex )
		{
			throw Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);
		}
		finally
		{
			DbConnection.closeResultset(rs);
			DbConnection.closePreparedStatement(prpdStmt);
		}
		return rs;
	}
	public ResultSet fetchServiceSummaryHeaderForExcel(Connection conn,String serviceDetailId) throws Exception 
	{
		String methodName="fetchServiceSummaryHeaderForExcel", className=this.getClass().getName(), msg="";
		AppConstants.IOES_LOGGER.info(methodName+" method of "+className+" class have been called");
		boolean logToFile=true, logToConsole=true;
		
		CallableStatement cstmt = null ;
		ResultSet rs=null;
		try
		{
			cstmt = conn.prepareCall(sqlGet_SummaryHeaderForExcel);
			cstmt.setLong(1,Long.parseLong(serviceDetailId));
			rs=cstmt.executeQuery();
		}
		catch(Exception ex)
		{
			throw Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);
		}
		finally
		{
			
			DbConnection.closeResultset(rs);
			DbConnection.closeCallableStatement(cstmt);
		}
		return rs;
	}
	public Map<String, Map<String, String>> fetchServiceSummaryValuesForExcel(Connection conn,String[] serviceProductIds) throws Exception 
	{
		String methodName="fetchServiceSummaryValuesForExcel", className=this.getClass().getName(), msg="";
		AppConstants.IOES_LOGGER.info(methodName+" method of "+className+" class have been called");
		boolean logToFile=true, logToConsole=true;
		
		CallableStatement cstmt = null ;
		ResultSet rs=null;
		Map<String, Map<String, String>> map_ServicePrdData= new HashMap<String, Map<String,String>>();
		try
		{
			String csvServiceProductIds=Utility.generateCSV(serviceProductIds);
			cstmt = conn.prepareCall(sqlGet_SummaryValuesForExcel);
			cstmt.setString(1,csvServiceProductIds);
			rs=cstmt.executeQuery();
		
			String spId=null;
			String attMasterId=null;
			String servProdValue=null;
			while(rs.next())
			{
				spId=String.valueOf(rs.getLong("SERVICEPRODUCTID"));
				attMasterId=String.valueOf(rs.getLong("ATTMASTERID"));
				servProdValue=rs.getString("ATTVALUE");
				Map<String, String> data=map_ServicePrdData.get(spId);
				if(data==null)
				{
					data=new HashMap<String, String>();
				}
				data.put(attMasterId, servProdValue);
				map_ServicePrdData.put(spId, data);
				
			}
		}
		catch(Exception ex)
		{
			throw Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);
		}
		finally
		{
			DbConnection.closeResultset(rs);
			DbConnection.closeCallableStatement(cstmt);
		}
		return map_ServicePrdData;
	}
	
	
//	Method used for Fetching Std Reason Details from the Database
	public ArrayList<NewOrderDto> getStdReasonCombo(int changeTypeID) throws IOESException 
	{
		//Nagarjuna
		String methodName="getStdReasonCombo", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		//	End	Nagarjuna
		Connection connection =null;
		CallableStatement cstmt = null ;
		ResultSet rs = null;
		NewOrderDto objNewOrderDto = null;
		ArrayList<NewOrderDto> listStdReasonComboDetails = new ArrayList<NewOrderDto>();
		try
		{
			connection=DbConnection.getConnectionObject();
			
			cstmt= connection.prepareCall(sqlGetStdReasonMaster);
			/*if(changeTypeID == 5){
				cstmt.setString(1,"Rate Renewal");
			} else if (changeTypeID == 1) {
				cstmt.setString(1,"Disconnection");
			}*/
			cstmt.setString(1,"Disconnection");
		
			rs = cstmt.executeQuery();
			
			while(rs.next())
			{
			 objNewOrderDto =  new NewOrderDto();
			 objNewOrderDto.setStdReasonId(rs.getLong("STANDARDREASONID"));
			 objNewOrderDto.setStdReasonName(rs.getString("REASONNAME"));
			 listStdReasonComboDetails.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			throw Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(cstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, e,"");
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listStdReasonComboDetails;
	}
	public ArrayList<OrderHeaderDTO> getProjectManagerNameList(long accId) throws IOESException 
	{
		//Nagarjuna
		String methodName="getProjectManagerNameList", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		//	End	Nagarjuna
		Connection connection =null;
		PreparedStatement prpdStmt =null;
		ResultSet rs = null;
		//NewOrderDto objNewOrderDto = null;
		OrderHeaderDTO objNewOrderDto=null;
		ArrayList<OrderHeaderDTO> listProjectManagerNameList = new ArrayList<OrderHeaderDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
			
			prpdStmt= connection.prepareCall(sqlGet_ProjectManagerList);
			prpdStmt.setLong(1, accId);
			prpdStmt.setLong(2, 2);
			rs = prpdStmt.executeQuery();
			
			while(rs.next())
			{
			 objNewOrderDto =  new OrderHeaderDTO();
			 objNewOrderDto.setProjectManager(rs.getString("PROJECTMANAGER_NAME"));
			 objNewOrderDto.setProjectManagerID(rs.getLong("EMPID"));
			 listProjectManagerNameList.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			throw Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);	
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(prpdStmt);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, e,"");
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listProjectManagerNameList;
	}
	public ArrayList<NewOrderDto> getProjectManagerNameList() throws IOESException 
	{
		//Nagarjuna
		String methodName="getProjectManagerNameList", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		//	End	Nagarjuna
		Connection connection =null;
		PreparedStatement prpdStmt =null;
		ResultSet rs = null;
		NewOrderDto objNewOrderDto = null;
		ArrayList<NewOrderDto> listProjectManagerNameList = new ArrayList<NewOrderDto>();
		try
		{
			connection=DbConnection.getConnectionObject();
			
			prpdStmt= connection.prepareCall(sqlGet_ProjectManagerListALL);
			prpdStmt.setString(1, null);
			rs = prpdStmt.executeQuery();
			
			while(rs.next())
			{
			 objNewOrderDto =  new NewOrderDto();
			 objNewOrderDto.setProjectManager(rs.getString("PROJECTMANAGER_NAME"));
			 objNewOrderDto.setProjectManagerID(rs.getLong("EMPID"));
			 listProjectManagerNameList.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			throw Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//nagarjuna	
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(prpdStmt);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, e,"");
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listProjectManagerNameList;
	}
	
	public NewOrderDto ViewServiceTreeForChangeOrder(NewOrderDto objDto) throws IOESException 
	{
		//Nagarjuna
		String methodName="ViewServiceTreeForChangeOrder", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		//	End	Nagarjuna
		Connection connection =null;
		PreparedStatement getChildMenuItems=null;

		ResultSet rsNSLocationAddress  = null;
			
		NewOrderDto objNewOrderDto = new NewOrderDto();
		//ArrayList<NewOrderDto> listChildMenuItems = new ArrayList<NewOrderDto>();
		try
		{
			connection=DbConnection.getConnectionObject();
			getChildMenuItems= connection.prepareCall(sqlViewServiceTreeForChangeOrder);
			getChildMenuItems.setLong(1,objDto.getServiceId());
			getChildMenuItems.setString(2,objDto.getLogicalSINo());
			getChildMenuItems.setLong(3,objDto.getPoNumber());
			getChildMenuItems.setLong(4,objDto.getChangeTypeId());
			rsNSLocationAddress = getChildMenuItems.executeQuery();
			ArrayList<TreeViewDto> lstChildItems = new ArrayList<TreeViewDto>();
			TreeViewDto objTreeView = null;
			//String parentNode = "";
			while(rsNSLocationAddress.next())
			{
				objTreeView = new TreeViewDto();
				
				objTreeView.setIsAdditionalNode(rsNSLocationAddress.getInt("ADDITIONALNODE")); 
				objTreeView.setChangeSubTypeID(rsNSLocationAddress.getInt("SUBCHANGETYPEID")); 
			    objTreeView.setIsChildDisconnected(rsNSLocationAddress.getInt("ISDISCONNECTED"));
				objTreeView.setTreeViewText(rsNSLocationAddress.getString("SERVICEDETDESCRIPTION"));
				objTreeView.setTreeViewURL(rsNSLocationAddress.getString("LINK"));
				objTreeView.setServiceChildId(rsNSLocationAddress.getString("SERVICEDETAILID"));
				objTreeView.setServiceParentId(rsNSLocationAddress.getString("SERVICEDETPARENTID"));
				String spid = rsNSLocationAddress.getString("SERVICEPRODUCTID");
				
				objTreeView.setServiceProductChildId(spid);
				objTreeView.setServiceProductParentId(rsNSLocationAddress.getString("PARENT_SERVICEPRODUCTID"));
				objTreeView.setIsChargePresent(rsNSLocationAddress.getInt("ISCHARGEPRESENT"));
				//Start[033]
				objTreeView.setServiceId(rsNSLocationAddress.getInt("SERVICEID"));
				objTreeView.setBillFormat(rsNSLocationAddress.getString("BILLINGFORMAT"));
				if(rsNSLocationAddress.getInt("ISCOMMERCIALATTRIBUTEPRESENT") == 1 || rsNSLocationAddress.getInt("ISCHARGEPRESENT") == 1){
					objTreeView.setIsCommercial(1);
				}else{
					objTreeView.setIsCommercial(0);
				}
					//End[033]		
				lstChildItems.add(objTreeView);
			}
						
			objNewOrderDto.setLstTreeItems(lstChildItems);
			
		}
		catch(Exception ex )
		{
			throw Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//nagarjuna	
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsNSLocationAddress);
				DbConnection.closePreparedStatement(getChildMenuItems);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, e,"");
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return objNewOrderDto;
	}
	public NewOrderDto ViewServiceTreeAfterDisconnection(NewOrderDto objDto) throws IOESException 
	{
		//Nagarjuna
		String methodName="ViewServiceTreeAfterDisconnection", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		//	End	Nagarjuna
		Connection connection =null;
		PreparedStatement getChildMenuItems=null;

		ResultSet rsNSLocationAddress  = null;
		CallableStatement getBillingFormat=null;
		Map<String, String> parentChildRelationMap = new HashMap<String, String>();

		NewOrderDto objNewOrderDto = new NewOrderDto();
		//ArrayList<NewOrderDto> listChildMenuItems = new ArrayList<NewOrderDto>();
		try
		{
			connection=DbConnection.getConnectionObject();
			getChildMenuItems= connection.prepareCall(sqlViewServiceTreeAfterDisconnection);
			getChildMenuItems.setLong(1,objDto.getServiceId());
			getChildMenuItems.setString(2,objDto.getLogicalSINo());
			getChildMenuItems.setLong(3,objDto.getPoNumber());
			getChildMenuItems.setLong(4,objDto.getSubChangeTypeId());
			rsNSLocationAddress = getChildMenuItems.executeQuery();
			ArrayList<TreeViewDto> lstChildItems = new ArrayList<TreeViewDto>();
			TreeViewDto objTreeView = null;
			//String parentNode = "";
			while(rsNSLocationAddress.next())
			{
				objTreeView = new TreeViewDto();
				objTreeView.setChangeSubTypeID(rsNSLocationAddress.getInt("SUBCHANGETYPEID")); 
			    objTreeView.setIsChildDisconnected(rsNSLocationAddress.getInt("ISDISCONNECTED"));
				objTreeView.setTreeViewText(rsNSLocationAddress.getString("SERVICEDETDESCRIPTION"));
				objTreeView.setTreeViewURL(rsNSLocationAddress.getString("LINK"));
				objTreeView.setServiceChildId(rsNSLocationAddress.getString("SERVICEDETAILID"));
				objTreeView.setServiceParentId(rsNSLocationAddress.getString("SERVICEDETPARENTID"));
				String spid = rsNSLocationAddress.getString("SERVICEPRODUCTID");
				objTreeView.setServiceProductChildId(spid);
				objTreeView.setServiceProductParentId(rsNSLocationAddress.getString("PARENT_SERVICEPRODUCTID"));
				objTreeView.setIsChargePresent(rsNSLocationAddress.getInt("ISCHARGEPRESENT"));
				objTreeView.setBillingFormat(0);
							
				lstChildItems.add(objTreeView);
			}
			for(int count=0;count<lstChildItems.size();count++)
			{
				getBillingFormat= connection.prepareCall(sqlGetBillingFormat);
				getBillingFormat.setLong(1, new Long(lstChildItems.get(count).getServiceProductChildId()));
				getBillingFormat.setNull(2, java.sql.Types.VARCHAR);
				getBillingFormat.execute();
				if( getBillingFormat.getString(2) != null ){
					lstChildItems.get(count).setBillingFormat(Integer.parseInt(getBillingFormat.getString(2)));
				}
				
			}
			objNewOrderDto.setLstTreeItems(lstChildItems);
			/*for(int count=0;count<lstChildItems.size();count++)
			{
				String chiildsID = new String();
				String spidParent = lstChildItems.get(count).getServiceProductChildId();
				
				chiildsID = getChildSpids(spidParent,lstChildItems);
				parentChildRelationMap.put(spidParent, chiildsID);
			}
			
			objNewOrderDto.setParentChildRelationMap(parentChildRelationMap); */
			
		}
		catch(Exception ex )
		{
			throw Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsNSLocationAddress);
				DbConnection.closeCallableStatement(getBillingFormat);
				DbConnection.closePreparedStatement(getChildMenuItems);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, e,"");
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return objNewOrderDto;
	}
	String getChildSpids(String spidParent,ArrayList<TreeViewDto>lstChildItems) {
		String childs= new String();
		
			for (int count = 0 ;count<lstChildItems.size();count++) {
				if(spidParent.equals(lstChildItems.get(count).getServiceProductParentId())){
				childs=childs+getChildSpids(lstChildItems.get(count).getServiceProductChildId(),lstChildItems);
				}
			}
		return childs;
		
	}
	//populate Quote No for fill combo
	public ArrayList<OrderHeaderDTO> fetechQuoteNoList(NewOrderDto objDto) throws Exception 
	{
		//Nagarjuna
		String methodName="fetechQuoteNoList", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		//	End	Nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		//NewOrderDto objRetDto = new NewOrderDto();
		OrderHeaderDTO objRetDto = new OrderHeaderDTO();
		ArrayList<OrderHeaderDTO> quoteList = new ArrayList<OrderHeaderDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
			
			callstmt= connection.prepareCall(sqlGetQuoteNoList);				
			callstmt.setInt(1, Integer.valueOf(objDto.getAccountID()));
			rs = callstmt.executeQuery();
			while(rs.next())
			{
				objRetDto =  new OrderHeaderDTO();
				objRetDto.setQuoteNo(rs.getString("quotesNo"));				
				quoteList.add(objRetDto);
			}
			
		}
		catch(Exception ex )
		{
			connection.rollback();
			throw Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, e,"");
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return quoteList;
	}
	
		
	//	Method used for Fetching Taxation Details from the Database
	@SuppressWarnings("unchecked")
	public ArrayList<FieldAttibuteDTO> getRoleMappingValidation(int role,String tabName) throws IOESException 
	{
		//Nagarjuna
		String methodName="getRoleMappingValidation", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		//	End	Nagarjuna
		Connection connection =null;
		PreparedStatement ps =null;
		ResultSet rs = null;
		//NewOrderDto objNewOrderDto = null;
		FieldAttibuteDTO objNewOrderDto = null;
		ArrayList lstDto = new ArrayList();
		
		//ArrayList<NewOrderDto> lstContactTab =new ArrayList<NewOrderDto>();
		ArrayList<FieldAttibuteDTO> lstContactTab =new ArrayList<FieldAttibuteDTO>();
		//ArrayList<NewOrderDto> lstPODetailTab =new ArrayList<NewOrderDto>();
		ArrayList<FieldAttibuteDTO> lstPODetailTab =new ArrayList<FieldAttibuteDTO>();
		//ArrayList<NewOrderDto> lstMainTab =new ArrayList<NewOrderDto>();
		ArrayList<FieldAttibuteDTO> lstMainTab =new ArrayList<FieldAttibuteDTO>();
//		ArrayList<NewOrderDto> lstLinesTab =new ArrayList<NewOrderDto>();
		ArrayList<FieldAttibuteDTO> lstLinesTab =new ArrayList<FieldAttibuteDTO>();
//		ArrayList<NewOrderDto> lstServiceSummary =new ArrayList<NewOrderDto>();
		ArrayList<FieldAttibuteDTO> lstServiceSummary =new ArrayList<FieldAttibuteDTO>();
		
		try
		{
			connection=DbConnection.getConnectionObject();
			
			ps= connection.prepareCall(sqlSpGetRoleWiseFieldMapping);
			ps.setInt(1, role);
			ps.setString(2, tabName);
			rs = ps.executeQuery();
			
			while(rs.next())
			{
			// objNewOrderDto =  new NewOrderDto();
				objNewOrderDto = new FieldAttibuteDTO();
			 
			 objNewOrderDto.setFeildName(rs.getString("FIELDNAME"));
			 objNewOrderDto.setIsMand(rs.getString("ISMANDATORY"));
			 objNewOrderDto.setIsReadOnly(rs.getString("ISACTIVE"));
			 objNewOrderDto.setFieldLabel(rs.getString("FIELDLABEL"));

			 if(rs.getString("TABID").equalsIgnoreCase(AppConstants.MAIN_TAB ))
				 lstMainTab.add(objNewOrderDto);			 
			 else
			 if(rs.getString("TABID").equalsIgnoreCase(AppConstants.CONATCT_TAB ))
				 lstContactTab.add(objNewOrderDto);
			 else
			 if(rs.getString("TABID").equalsIgnoreCase(AppConstants.PODETAIL_TAB))
				 lstPODetailTab.add(objNewOrderDto);
			 else
			 if(rs.getString("TABID").equalsIgnoreCase(AppConstants.PROD_CAT_BILLING_INFO_TAB))
				 lstLinesTab.add(objNewOrderDto);
			else
			if(rs.getString("TABID").equalsIgnoreCase(AppConstants.PROD_CAT_CHARGE_TAB ))
				 lstLinesTab.add(objNewOrderDto);
			else
				if(rs.getString("TABID").equalsIgnoreCase(AppConstants.PROD_HARDWARE_INFO_TAB ))
					 lstLinesTab.add(objNewOrderDto);
			else
				if(rs.getString("TABID").equalsIgnoreCase(AppConstants.PROD_SERVICE_LOCATION_TAB))
					 lstLinesTab.add(objNewOrderDto);
			else
				if(rs.getString("TABID").equalsIgnoreCase(AppConstants.PROD_CAT_SERVICE_SUMMARY_TAB))
					lstServiceSummary.add(objNewOrderDto);
					 
				}
			lstDto.add(lstMainTab);
			lstDto.add(lstContactTab);
			lstDto.add(lstPODetailTab);
			lstDto.add(lstLinesTab);
			lstDto.add(lstServiceSummary);
			
		}
		catch(Exception ex )
		{
			throw Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(ps);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, e,"");
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return lstDto;
	}
	public int checkM6Status(int orderNo) throws IOESException
	{
		//Nagarjuna
		String methodName="checkM6Status", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		//	End	Nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		int status=0;
		try
		{
			connection=DbConnection.getConnectionObject();
			
			callstmt= connection.prepareCall(sqlCheckM6Status);				
			callstmt.setInt(1, orderNo);
			rs = callstmt.executeQuery();
			
			while(rs.next())
			{
				 status=rs.getInt("STATUS");				
			}
			
		}
		catch(Exception ex )
		{
			try {
				connection.rollback();
			} catch (SQLException e) {
				throw Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//nagarjuna
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
			throw Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, e,"");
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return status;
	
		
	}
	
	public UserInfoDto getLoggedUserDetails(String userid , int roleid) 
	{
		//Nagarjuna
		String methodName="getLoggedUserDetails", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		//	End	Nagarjuna
		Connection connection =null;
		CallableStatement sessiondetaillist =null;//by kalpana for copc region change HYPR22032013003
		ResultSet rs = null;
		UserInfoDto objUserInfo = new UserInfoDto();

		try
		{
			connection=DbConnection.getConnectionObject();
			sessiondetaillist= connection.prepareCall(sqlGetlogged_User_Details);
			sessiondetaillist.setString(1,userid);
			sessiondetaillist.setInt(2,roleid);
			sessiondetaillist.setNull(3, java.sql.Types.VARCHAR);//by kalpana for copc region change HYPR22032013003
			rs = sessiondetaillist.executeQuery();
			objUserInfo.setRegionId(sessiondetaillist.getString(3));//by kalpana for copc region change HYPR22032013003
			while(rs.next())
			{
				objUserInfo.setUserName(rs.getString("USERNAME"));
				objUserInfo.setPhoneNo(rs.getString("PHONENO"));
				objUserInfo.setEmailId(rs.getString("EMAILID"));
				objUserInfo.setRoleName(rs.getString("ROLE_NAME"));
				objUserInfo.setEmployeeId(rs.getString("EMPLOYEEID"));
				objUserInfo.setSalesFirstName(rs.getString("FIRSTNAME"));
				objUserInfo.setSalesLastName(rs.getString("LASTNAME"));
				objUserInfo.setSalesPhoneno(rs.getString("PHONENO"));//changed by kalpana from long to string for bug id HYPR11042013001
				objUserInfo.setSalesEmailId(rs.getString("EMAILID"));
				objUserInfo.setPageSizeServiceLine(rs.getInt("PAGE_SIZE_SERVICES_LINE"));
				objUserInfo.setPageSizeOrderApprovalHistory(rs.getInt("PAGE_SIZE_ORDER_APPROVAL"));
				objUserInfo.setPagesizeForCopyOrder(rs.getInt("PAGE_SIZE_COPY_ORDER"));
				objUserInfo.setPageSizeLSICancellation(rs.getInt("PAGE_SIZE_LSI_CANCELLATION"));
				objUserInfo.setPageSizeBTCharges(rs.getInt("PAGE_SIZE_BT_CHARGES"));
				objUserInfo.setPageSizeBTLines(rs.getInt("PAGE_SIZE_BT_LINES"));	
				objUserInfo.setPageSizeChargeLines(rs.getInt("PAGE_SIZE_CHARGE_LINE"));
				//Start[Date:01-04-2013 Paging Size Configurable for Bulkupload LSI Look up]---
				objUserInfo.setPageSizeLookUPLSILines(rs.getInt("PAGE_SIZE_LSI_LINE"));
				//[120]
				objUserInfo.setPageSizeLSICancelLine(rs.getInt("PAGE_SIZE_LSICANCEL_LINE"));
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//nagarjuna
			//ex.printStackTrace();	
			return objUserInfo;
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(sessiondetaillist);
				DbConnection.freeConnection(connection);
				
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, e,"");
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
			return objUserInfo;
		}
	}
	
	
	public int isUserValid(String userid) 
	{
		//Nagarjuna
		String methodName="isUserValid", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		//	End	Nagarjuna
		Connection connection =null;
		PreparedStatement sessiondetaillist =null;
		ResultSet rs = null;
		int isValidUser=0;
		try
		{
			System.out.println("== neworderdao >isuservalid=====");
			connection=DbConnection.getConnectionObject();
			if(connection==null)System.out.println("======= connection not created ========");
			sessiondetaillist = connection.prepareCall(sqlIsUserValid);
			sessiondetaillist.setString(1,userid.toUpperCase());
			System.out.println("======== sessiondetals list :"+sessiondetaillist);
			rs = sessiondetaillist.executeQuery();
			if(rs==null)System.out.println("=== rs is null=======");
			while(rs.next())
			{
				isValidUser = Integer.parseInt(rs.getString("isUserValid"));
				System.out.println("========== isvalieduser in while:"+isValidUser);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//nagarjuna
			//ex.printStackTrace();	
			return isValidUser;
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(sessiondetaillist);
				DbConnection.freeConnection(connection);
				
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, e,"");
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
			System.out.println("===== isvalid user :"+isValidUser);
			return isValidUser;
		}
	}
	
	public ArrayList<CommonDTO> fetechRoleList(NewOrderDto objDto) throws Exception 
	{
		//Nagarjuna
		String methodName="fetechRoleList", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		//	End	Nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		CommonDTO objRetDto = null;
		ArrayList<CommonDTO> roleList = new ArrayList<CommonDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
			//connection.setAutoCommit(false);
			Encryption encrypt = new Encryption();
			callstmt= connection.prepareCall(sqlGetRoleList);	
			callstmt.setString(1, encrypt.decrypt(objDto.getUserId()).toLowerCase());
			//callstmt.setString(1, objDto.getUserId().toLowerCase());
			rs = callstmt.executeQuery();
			while(rs.next())
			{
				objRetDto =  new CommonDTO();
				objRetDto.setRoleId(rs.getString("ROLEID"));
				objRetDto.setRoleName(rs.getString("ROLENAME"));
				roleList.add(objRetDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//nagarjuna
			connection.rollback();
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, e,"");
				// TODO Auto-generated catch block
				//e.printStackTrace();
				
			}
		}
		return roleList;
	}
	public ArrayList<OrderHeaderDTO> getChangeOrderSubTypeAttached(String orderno,Connection optionalConnection) throws Exception 
	{
		//Nagarjuna
		String methodName="getChangeOrderSubTypeAttached", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		//	End	Nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		OrderHeaderDTO objRetDto = null;
		ArrayList<OrderHeaderDTO> changeOrderSubTypeList = new ArrayList<OrderHeaderDTO>();
		try
		{
			//below code add by Anil for CLEP
			if(optionalConnection==null){
				connection=DbConnection.getConnectionObject();
			}else{
				connection=optionalConnection;
			}
			//end CLEP
			
			//connection.setAutoCommit(false);
			callstmt= connection.prepareCall(spGetChangeOrderSubType);	
			callstmt.setString(1, orderno);
			rs = callstmt.executeQuery();
			while(rs.next())
			{
				objRetDto =  new OrderHeaderDTO();
				
				objRetDto.setSubChangeTypeId(rs.getInt("SERVICETYPEID"));
				objRetDto.setSubChangeTypeName(rs.getString("SERVICETYPENAME"));
				objRetDto.setIb2bWorkflowAttachedId(rs.getString("PROJECTWORKFLOWID"));
				objRetDto.setIb2bWorkflowAttachedName(rs.getString("PROJECT_NAME"));
				
				changeOrderSubTypeList.add(objRetDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//nagarjuna
			connection.rollback();
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callstmt);
				if(optionalConnection==null){
					DbConnection.freeConnection(connection);
				}
				
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, e,"");
				//e.printStackTrace();
			}
		}
		return changeOrderSubTypeList;
	}
	
	public int attachworkflowForChangeOrder(OrderHeaderDTO objDto,Connection optionalConnection) throws Exception{
		//Nagarjuna
		String methodName="attachworkflowForChangeOrder", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		//	End	Nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		NewOrderDto objRetDto = new NewOrderDto();
		ArrayList<NewOrderDto> changeOrderSubTypeList = new ArrayList<NewOrderDto>();
		Long msgCode;
		int inserted=0;
		int servicePresent=1;
		boolean orderServiceInitUpdated = false;
		boolean orderRoleMapping=false;
		Boolean connCreHere = false;
		try{	
			//add below code by Anil for CLEP
			if(optionalConnection==null){
				connCreHere = true;
				connection=DbConnection.getConnectionObject();
				connection.setAutoCommit(false);
			}else{
				connection=optionalConnection;
			}
			orderServiceInitUpdated = setOrderServicesInitiater(
					String.valueOf(objDto.getPoNumber()),objDto.getRoleId(), connection);
			//end CLEP
			
			//connection.setAutoCommit(false);
			orderRoleMapping=updateRoleOrderMapping(objDto.getPoNumber(),objDto.getRoleId(),servicePresent, connection);
			if(orderServiceInitUpdated && orderRoleMapping){
				callstmt= connection.prepareCall(spAttachWorkflowForChangeOrder);	
				callstmt.setLong(1, Long.valueOf(String.valueOf(objDto.getPoNumber())));
				callstmt.setLong(2, Long.valueOf(objDto.getProjectWorkflowId()));
				callstmt.setLong(3, 0);
				callstmt.setLong(4, 0); 
				callstmt.setString(5, "");
				callstmt.execute();
				msgCode=callstmt.getLong(4);
				//String message=cstmt.getString(2);
			
				if(msgCode!=0){
					inserted=0;
					if(connCreHere)
						connection.rollback();
				}

				if(msgCode==0){
					inserted=1;
					if(connCreHere)
						connection.commit();
				//sendValidateOrderMail(objDto);
				}
			}else{
				if(connCreHere)
					connection.rollback();
			}
		}catch(Exception ex ){
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//nagarjuna
			connection.rollback();
			//ex.printStackTrace();	
		}finally{
			try{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callstmt);
				if(connCreHere){
					DbConnection.freeConnection(connection);
				}
				
			}catch (SQLException e){
				Utility.LOG(true, true, e,"");
				//e.printStackTrace();
			}
		}
		return inserted;
	}
	
	public int cancelOrder(NewOrderDto objDto,String employeeId ,String flag) throws Exception 
	{
		//Nagarjuna
		String methodName="cancelOrder", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		//	End	Nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ViewOrderDto objRetDto = new ViewOrderDto();
		int status = 0;
		try
		{
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
			callstmt= connection.prepareCall(spcancelOrder);	
			callstmt.setLong(1, objDto.getOrderNumber());
			callstmt.setLong(2, 0);
			callstmt.setLong(3, 0);
			callstmt.setString(4, "");
			callstmt.setString(5,objDto.getCancelReason());
			//[00101]
			callstmt.setInt(6,objDto.getCancelReasonId());
			
			if(employeeId !=null){
				callstmt.setLong(7,Long.valueOf(employeeId));
			}else{
				callstmt.setNull(7,java.sql.Types.BIGINT);
			}
			callstmt.setString(8, flag);
			
			callstmt.execute();
			int err = callstmt.getInt(3);
			System.out.println("After proc execution"+err);
			if(err==0)
			{
				status=1;
				connection.commit();
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//nagarjuna
			connection.rollback();
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, e,"");
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return status;
	}
	public int cancelLookUpServices(Long serviceNo) throws Exception 
	{
		//Nagarjuna
		String methodName="cancelLookUpServices", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		//	End	Nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ViewOrderDto objRetDto = new ViewOrderDto();
		int status = 0;
		try
		{
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
			callstmt= connection.prepareCall(spcancelLookUpServices);	
			callstmt.setLong(1, serviceNo);
			callstmt.setLong(2, 0);
			callstmt.setLong(3, 0);
			callstmt.setString(4, "");
			callstmt.execute();
			int err = callstmt.getInt(3);
	
			if(err==0)
			{
				status=1;
				connection.commit();
			}
		}
		catch(Exception ex )
		{
			connection.rollback();
			//ex.printStackTrace();	
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//nagarjuna
		}
		finally
		{
			try 
			{
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				//e.printStackTrace();
				Utility.LOG(true, true, e,"");
			}
		}
		return status;
	}
	
	public int getCountContactNumber(NewOrderDto objDto)
	{
		//Nagarjuna
		String methodName="getCountContactNumber", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		//	End	Nagarjuna
		Connection connection = null;
		PreparedStatement preparedStmt = null;
		ResultSet rs = null;
		int CONTACTCount = 0;
		try {
			connection = DbConnection.getConnectionObject();
			preparedStmt = connection.prepareCall(sqlGetCountCONTACTNUMBER);
			preparedStmt.setString(1, objDto.getContactIDList());
			preparedStmt.setInt(2, objDto.getPoNumber());
			
			
			rs = preparedStmt.executeQuery();
			while (rs.next()) {
				CONTACTCount = rs.getInt("CONTACTCOUNT");
			}
		} catch (Exception ex) {
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//nagarjuna
			//ex.printStackTrace();
		} finally {
			try {
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(preparedStmt);
				DbConnection.freeConnection(connection);
			} catch (Exception e) {
				Utility.LOG(true, true, e,"");
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}	
		return CONTACTCount;
	}
	
	public int cancelworkflow(NewOrderDto objDto) throws Exception 
	{
		//Nagarjuna
		String methodName="cancelworkflow", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		//	End	Nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ViewOrderDto objRetDto = new ViewOrderDto();
		int status = 0;
		try
		{
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
			callstmt= connection.prepareCall(spcancelworkflow);	
			callstmt.setLong(1, objDto.getPoNumber());
			callstmt.setLong(2, 0);
			callstmt.setLong(3, 0);
			callstmt.setString(4, "");
			callstmt.execute();
			int err = callstmt.getInt(3);
			
			if(err==0)
			{
				status=1;
				connection.commit();
			}
			
		}
		catch(Exception ex )
		{
			connection.rollback();
			//ex.printStackTrace();	
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//nagarjuna
		}
		finally
		{
			try 
			{
				
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, e,"");
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return status;
	}
	
	public ViewOrderDto SaveChangeOrderAction(ViewOrderDto objDto,Connection optionalConn) throws Exception{
		//Nagarjuna
		String methodName="SaveChangeOrderAction", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		//	End	Nagarjuna
		boolean connCreatHere=false;
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		ViewOrderDto objRetDto = new ViewOrderDto();
		
		try{	
			if(null == optionalConn){
			connection=DbConnection.getConnectionObject();
				connCreatHere = true;
			connection.setAutoCommit(false);
			}else
				connection=optionalConn;
			callstmt= connection.prepareCall(sqlSpInsertTaskActionForChangeOrder);	
			//commented by kalpana as added another procedure with one parameter less,removed @rejectionSendTo bug ID HYPR09042013001
			/*callstmt.setLong(1, Long.valueOf(objDto.getTaskID()));
			callstmt.setLong(2, Long.valueOf(objDto.getActionId()));
			callstmt.setLong(3, Long.valueOf(1));
			callstmt.setString(4, objDto.getActionRemraks());
			callstmt.setLong(5, 0);
			callstmt.setLong(6, 0);
			callstmt.setString(7, "");
			//Changes Made By Sumit For PM Present And Task ASssigned to Specific PM As Selected BY AM-----20-Oct-2011
			callstmt.setLong(8, Long.valueOf(objDto.getProjectmanagerassignedId()));
			//Changes Made By Sumit For PM Present And Task ASssigned to Specific PM As Selected BY AM-----20-Oct-2011
			callstmt.setString(9, objDto.getUserid());
			//start [088]
			callstmt.setLong(10, 0);
			callstmt.execute();
			int err = callstmt.getInt(6);
			
			//int err = callstmt.getInt(8);
			Long newTaskid = callstmt.getLong(10);*/
			//end
			//added by kalpana as added another procedure with one parameter less,removed @rejectionSendTo and changed index bug ID HYPR09042013001
			callstmt.setLong(1, Long.valueOf(objDto.getTaskID()));
			callstmt.setLong(2, Long.valueOf(objDto.getActionId()));
			callstmt.setString(3, objDto.getActionRemraks());
			callstmt.setLong(4, 0);
			callstmt.setLong(5, 0);
			callstmt.setString(6, "");
			//Changes Made By Sumit For PM Present And Task ASssigned to Specific PM As Selected BY AM-----20-Oct-2011
			callstmt.setLong(7, Long.valueOf(objDto.getProjectmanagerassignedId()));
			//Changes Made By Sumit For PM Present And Task ASssigned to Specific PM As Selected BY AM-----20-Oct-2011
			callstmt.setString(8, objDto.getUserid());
			//start [086]
			callstmt.setLong(9, 0);
			//lawkush Start
			callstmt.setInt(10, objDto.getReasonID());
			callstmt.setInt(11, objDto.getDelayReason());
			//lawkush End
			callstmt.execute();
			int err = callstmt.getInt(5);
			
			//int err = callstmt.getInt(8);
			Long newTaskid = callstmt.getLong(9);
			//end
			
			objRetDto.setNewTaskId(newTaskid);
			objRetDto.setTaskID(objDto.getTaskID());
			objRetDto.setOrderno(objDto.getOrderno());
			objRetDto.setActionId(objDto.getActionId());
			
			if(err==0){
				objRetDto.setSaved(true);
				String mailSendingAlert="Click OK to send the mails.";
					objRetDto.setMsgOut("Action taken Successfully. "+mailSendingAlert);
					objRetDto.setIsSuccessApproved(1);
				//	connection.commit();
										
				if(objDto.getActionId().equalsIgnoreCase("1")){
							//newTaskId added*-eet , Email should not go when nextTask is not found for dynamic workflow
							//if(newTaskid!=0 && newTaskid!=null){  comment this code for mail also send after last task approval	
					
					//Comment below code and use  async activity for mail sending.
					/*if(sendSaveActionMail(objDto,newTaskid, connection)==1) 
									objRetDto.setMsgOut("Action taken Successfully and Mail Sent");*/
							//}	
					
						objRetDto.setIsApprovalMail(true);						
				}else{
					//Comment below code and use async activity for mail sending.
					/*if(sendSaveActionMailOnRejection(objDto, connection)==1)
								objRetDto.setMsgOut("Action taken Successfully and Mail Sent");	*/		
						objRetDto.setIsRejectionMail(true);
					}						
				}
			//Vijay: display a pm validation msg 
			else if(err==2){
				objRetDto.setMsgOut(callstmt.getString(6));//msg is coming through proc
			}
//				End [088]
		}catch(Exception ex){
			connection.rollback();
			//ex.printStackTrace();	
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//nagarjuna
		}finally{
			try{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callstmt);
				try{
					if(connCreatHere){
						connection.commit();
				DbConnection.freeConnection(connection);
			} 
				}catch (SQLException e){
					Utility.LOG(true, true, e,""+msg);
				}
			}catch (SQLException e){
				Utility.LOG(true, true, e,""+msg);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return objRetDto;
	}
	/*Function		:insertFileUpload
	 * return type	:long
	 * @Author		:Anil Kumar
	 * Date			:17-feb-11
	 * Purpose		:To inserting file data to the database..
	 * */
	public long insertFileUpload(FileAttachmentDto fileDto)
	{
		//Nagarjuna
		String methodName="insertFileUpload", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		//	End	Nagarjuna
		long finalStatus=0;
		Connection connection =null;
		CallableStatement setFileUpload =null;
		java.sql.Blob blob=null;		
		SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");
		
		FormFile doc=fileDto.getFileData();
		try{
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
			setFileUpload=connection.prepareCall(sqlInsertFileUpload);
			setFileUpload.setLong(1, new Long(fileDto.getHdnOrderNo()));
			setFileUpload.setLong(2,new Long(fileDto.getHdnAccountNo()));						
			if(!"".equals(doc.getFileName()))
			{				
				setFileUpload.setString(3, doc.getFileName());
				blob=new SerialBlob(fileDto.getFileData().getFileData());
				setFileUpload.setBlob(4, blob);								
			}
			else
			{
				setFileUpload.setString(3, null);
				Blob blob1 = null;
				setFileUpload.setBlob(4, blob1);
			}			
			setFileUpload.setString(5,fileDto.getFileRename());
			setFileUpload.registerOutParameter(6, java.sql.Types.BIGINT);
			setFileUpload.setInt(7,fileDto.getFileTypeId());
			setFileUpload.setLong(8,fileDto.getEmpId());
			setFileUpload.execute();
			finalStatus=setFileUpload.getInt(6);
			if(finalStatus!=0)
			{
				connection.rollback();
			}
			else
			{
				connection.commit();
			}
		}
		catch(Exception ex)
		{
			finalStatus=-1;
			//ex.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//nagarjuna
		}
		finally
		{
			try 
			{
				DbConnection.closeCallableStatement(setFileUpload);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				finalStatus=-1;
				// TODO Auto-generated catch block
				//e.printStackTrace();
				Utility.LOG(true, true, e,""+msg);
				
			}
		}
		return finalStatus;		
	}
	
	
	//008 start
	
	public ArrayList<PoDetailsDTO> validatePoDetailNONDATE_FORNEW(PoDetailsDTO dto) throws Exception{
		
		//Nagarjuna
		String methodName="validatePoDetailNONDATE_FORNEW", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		//	End	Nagarjuna
		Connection conn =null;
		ResultSet rs= null;
		CallableStatement cs =null;
		PoDetailsDTO objRetDto = null;
		ArrayList<PoDetailsDTO> changeOrderSubTypeList = new ArrayList<PoDetailsDTO>();
		
		
		try {
			
			conn=DbConnection.getConnectionObject();
			
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
			java.util.Date date = df.parse(dto.getCustPoDate()); 
			DateFormat df1 = new SimpleDateFormat("MM/dd/yyyy");
			//java.util.Date date = df.parse(dto.get); 
			String a=df1.format(date);
			
			cs = conn.prepareCall(sqlGet_PODETAILSTATUS_FOR_NEW);
			cs.setString(1, dto.getCustPoDetailNo());
			
			cs.setDate(2, new java.sql.Date(date.getTime()));
			cs.setInt(3, dto.getPoNumber());
			rs=cs.executeQuery();
			
			while(rs.next()) 
			{
			
				objRetDto = new PoDetailsDTO();
				objRetDto.setCount1(rs.getInt("countpending"));
				objRetDto.setPonum(rs.getLong("PONUMBER"));
				changeOrderSubTypeList.add(objRetDto);
				
			     
			}
			
			
			
		
		} catch (Exception e) {
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//nagarjuna
		//	e.printStackTrace();
			throw new Exception("No Record Found");
		} 
		finally
		{
			try {
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(cs);
				
				DbConnection.freeConnection(conn);
			} catch (Exception e) {
				Utility.LOG(true, true, e,""+msg);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return changeOrderSubTypeList;
	}
	
	//008 end
//009 start	
public ArrayList<NewOrderDto> validatePoDetailNONDATE_FORCHANGE(NewOrderDto dto) throws Exception{
		
	//Nagarjuna
	String methodName="validatePoDetailNONDATE_FORCHANGE", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//	End	Nagarjuna
		Connection conn =null;
		ResultSet rs= null;
		CallableStatement cs =null;
		NewOrderDto objRetDto = null;
		ArrayList<NewOrderDto> changeOrderSubTypeList = new ArrayList<NewOrderDto>();
		
		
		try {
			
			conn=DbConnection.getConnectionObject();
			
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
			java.util.Date date = df.parse(dto.getCustPoDate()); 
			DateFormat df1 = new SimpleDateFormat("MM/dd/yyyy");
			//java.util.Date date = df.parse(dto.get); 
			String a=df1.format(date);
			
			cs = conn.prepareCall(sqlGet_PODETAILSTATUS_FOR_NEW);
			cs.setString(1, dto.getCustPoDetailNo());
			
			cs.setDate(2, new java.sql.Date(date.getTime()));
			cs.setInt(3, dto.getPoNumber());
			rs=cs.executeQuery();
			
			while(rs.next()) 
			{
			
				objRetDto = new NewOrderDto();
				objRetDto.setCount1(rs.getInt("countpending"));
				objRetDto.setPonum(rs.getLong("PONUMBER"));
				changeOrderSubTypeList.add(objRetDto);
				
			     
			}
			
			
			
		
		} catch (Exception e) {
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//nagarjuna
			//e.printStackTrace();
			throw new Exception("No Record Found");
		} 
		finally
		{
			try {
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(cs);
				DbConnection.freeConnection(conn);
			} catch (Exception e) {
				Utility.LOG(true, true, e,""+msg);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return changeOrderSubTypeList;
	}

//009 end

/*function		:populateTaxRate
 * return type	:String
 * Author		:Anil Kumar
 * Date			:09-march-11
 * Purpose		:To fecth Tax Rate in charge section for product catelog page. 
 * */	
public String populateTaxRate(Long poNumber,Long mappingID,Connection optionalConnection)throws Exception
{
	//Nagarjuna
	String methodName="populateTaxRate", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//	End	Nagarjuna
	double taxrate=0;
	String taxlabel="";
	String finaltaxrate="";
	String finaltaxlabel="";
	String taxWithLabel=null;
	Connection connection=null;
	CallableStatement csTaxRate=null;
	boolean flagTaxLabel=false;
	ResultSet rsTaxRate=null;
	try
	{	
		//below code add by Anil for CLEP requirement
		if(optionalConnection==null){
			connection=DbConnection.getConnectionObject();
		}else{
			connection=optionalConnection;
		}
		//end CLEP
		csTaxRate= connection.prepareCall(sqlGetTaxRate);
		csTaxRate.setLong(1, poNumber);
		csTaxRate.setLong(2, mappingID);
		rsTaxRate = csTaxRate.executeQuery();
//		Start [0021]
		HashMap<String,NewOrderDto> hmap_TaxId_Object=new HashMap<String, NewOrderDto>();
//		End [0021]
		while(rsTaxRate.next())
		{
//			Start [0021]
			//taxrate+=rsTaxRate.getDouble("TAXRATE");
			//taxlabel+=rsTaxRate.getString("TAXLABEL")+",";
			NewOrderDto dto = new NewOrderDto();
			dto.setTaxPkgInstId(rsTaxRate.getString("TAX_PKG_INST_ID"));
			dto.setTaxRate(rsTaxRate.getDouble("TAXRATE"));
			dto.setDependentOnTax(rsTaxRate.getString("DEPENDENT_ON_TAX"));
			
			hmap_TaxId_Object.put(rsTaxRate.getString("TAX_PKG_INST_ID"), dto);
//			End [0021]
			flagTaxLabel=true;
		}
		//Start[018]
		if(flagTaxLabel==true)
		{	//Start [0021]
			//finaltaxrate=Utility.removeCharAt(taxrate,taxrate.lastIndexOf(','));
			//finaltaxlabel=Utility.removeCharAt(taxlabel,taxlabel.lastIndexOf(','));
			//taxWithLabel=finaltaxrate+"("+finaltaxlabel+")";	
			
			for (NewOrderDto taxObj : hmap_TaxId_Object.values()) {
				if(taxObj.getDependentOnTax()==null)
				{
					taxrate+=taxObj.getTaxRate();
				}
				else
				{
					//for tax dependent on other tax formula is X*Y/100 
					//{ie if Tax A is X% of total amount and TAX B is Y% of TAX-A computed , then TAX B is X*Y/100  % of total amount }
					taxrate+=taxObj.getTaxRate()*hmap_TaxId_Object.get(taxObj.getDependentOnTax()).getTaxRate()/100;
				}
			}
			
			
			DecimalFormat df = new DecimalFormat("#.##");
			taxWithLabel=String.valueOf(df.format(taxrate))+"%";
			

			//taxWithLabel=taxrate+"("+taxlabel+")";
//			End [0021]
		}
		else
		{
			taxWithLabel="No Tax Defined";
		}
		//End[018]
					
	}
	catch(Exception ex)
	{
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//nagarjuna
		//ex.printStackTrace();
	}
	finally
	{
		try 
		{
			DbConnection.closeResultset(rsTaxRate);
		DbConnection.closeCallableStatement(csTaxRate);
				DbConnection.freeConnection(connection);
			
		} 
		catch (SQLException e) 
		{
			Utility.LOG(true, true, e,""+msg);
			// TODO Auto-generated catch block
			//e.printStackTrace();
		}		
	}	
	return taxWithLabel;
}		
//end function populateTaxRateForHardware
//[010] Start
//By Saurabh For Populating list of products for copiying charge [010] Start
	public ArrayList<ProductCatelogDTO> populateProductAndId(long getServiceId,int chargeType) 
	{
		//Nagarjuna
		String methodName="populateProductAndId", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		//	End	Nagarjuna
		Connection connection =null;
		PreparedStatement getlistDC =null;

		ResultSet rsProdList = null;
		ProductCatelogDTO objNewOrderDto = null;
		ArrayList<ProductCatelogDTO> listDC = new ArrayList<ProductCatelogDTO>();
		try
		{
			connection=DbConnection.getConnectionObject();
			getlistDC= connection.prepareCall(sqlGetProductNameAndId);
			getlistDC.setLong(1,getServiceId);
			getlistDC.setInt(2, chargeType);
			rsProdList = getlistDC.executeQuery();
			while(rsProdList.next())
			{
				objNewOrderDto =  new ProductCatelogDTO();
				objNewOrderDto.setServiceProductID(rsProdList.getInt("SERVICEPRODUCTID"));
				//objNewOrderDto.setServiceDetDescription(rsProdList.getString("SERVICEDETDESCRIPTION"));
				objNewOrderDto.setProdNameAndId(rsProdList.getString("PRODNAMEANDID"));
				listDC.add(objNewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsProdList);
				DbConnection.closePreparedStatement(getlistDC);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, e,""+msg);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listDC;
	}
	//[010] end

//[010] Start		
public String copyChargeFromOneToOther(int sourceProductId,int destinationProductId)throws Exception
	{
	//Nagarjuna
	String methodName="copyChargeFromOneToOther", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//	End	Nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		CallableStatement callstmt1 =null;
		CallableStatement callstmt2 =null;
		ResultSet rs = null;
		String isModify="";
		String sourceType;
		String destinationType;
		String sourceBillingFormat;
		String destinationBillingFormat;
		int status=0;
		int counter=0;
		int chargeType=0;
		try
		{
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
			callstmt= connection.prepareCall(sqlVerifyProductType);	
			callstmt.setLong(1, Long.valueOf(sourceProductId));
			callstmt.setLong(2, Long.valueOf(destinationProductId));
			callstmt.setString(3, "");
			callstmt.setString(4, "");
			callstmt.setString(5, "");
			callstmt.setString(6, "");
			callstmt.execute();
			sourceType = callstmt.getString(3);
			destinationType = callstmt.getString(4);
			sourceBillingFormat = callstmt.getString(5);
			destinationBillingFormat = callstmt.getString(6);
			
			if(!sourceType.equals(destinationType))//To match the service type of two products
				
			{
				isModify="Service Type of the Line Items does not match." +
						 "PLease Enter Line Items with same service type ";
				return isModify;
			}
			else if(!sourceBillingFormat.equals(destinationBillingFormat))
			{
				isModify="Billing Format of the Line Items does not match." +
				 "Charges can't be copied";
				return isModify;
			}
			else
			{
				callstmt2= connection.prepareCall(sqlGetChargeType);
				callstmt2.setLong(1, Long.valueOf(destinationProductId));
				callstmt2.setString(2, "");
				rs=callstmt2.executeQuery();
				while(rs.next())
				{
					counter++;
					chargeType=rs.getInt("CHARGE_TYPE");
				}
				if(counter==1) // means only RC or NRC charge
				{
					if(chargeType==1) //means RC
					{
						callstmt1= connection.prepareCall(sqlCopyProductCharge);	
						callstmt1.setLong(1, Long.valueOf(sourceProductId));
						callstmt1.setLong(2, Long.valueOf(destinationProductId));
						callstmt1.setInt(3, 0);
						callstmt1.setInt(4, 0);
						callstmt1.setString(5, "");
						callstmt1.setInt(6, 0);
						callstmt1.setInt(7, 1);
						callstmt1.execute();
						status=callstmt1.getInt(6);
						if(status==1)
						{
						isModify="1";      //Indicating Success
						}
						else if(status==0)
						{
						isModify="0";	   //Indicating Failure
						return isModify;
						}
					}
					else if(chargeType==2) //means RC
					{
						callstmt1= connection.prepareCall(sqlCopyProductCharge);	
						callstmt1.setLong(1, Long.valueOf(sourceProductId));
						callstmt1.setLong(2, Long.valueOf(destinationProductId));
						callstmt1.setInt(3, 0);
						callstmt1.setInt(4, 0);
						callstmt1.setString(5, "");
						callstmt1.setInt(6, 0);
						callstmt1.setInt(7, 2);
						callstmt1.execute();
						status=callstmt1.getInt(6);
						if(status==1)
						{
						isModify="1";      //Indicating Success
						}
						else if(status==0)
						{
						isModify="0";	   //Indicating Failure
						return isModify;
						}
					}
				}
				else if(counter==2) // means both charges
				{
					callstmt1= connection.prepareCall(sqlCopyProductCharge);	
					callstmt1.setLong(1, Long.valueOf(sourceProductId));
					callstmt1.setLong(2, Long.valueOf(destinationProductId));
					callstmt1.setInt(3, 0);
					callstmt1.setInt(4, 0);
					callstmt1.setString(5, "");
					callstmt1.setInt(6, 0);
					callstmt1.setInt(7, 3);
					callstmt1.execute();
					status=callstmt1.getInt(6);
					if(status==1)
					{
					isModify="1";      //Indicating Success
					}
					else if(status==0)
					{
					isModify="0";	   //Indicating Failure
					return isModify;
					}
				}
				else if(counter==0)
				{
					isModify="No Charge type present for destination line item";
					return isModify;
				}
				if(status==1)
				{
					connection.commit();
				}
				else
				{
					connection.rollback();
				}
			}
		}
		catch(Exception ex )
		{
			connection.rollback();
			//ex.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//nagarjuna
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.closeCallableStatement(callstmt1);
				DbConnection.closeCallableStatement(callstmt2);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.LOG(true, true, e,""+msg);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return isModify;
	}
// [010] End
		
/*function		:populateTaxRateForHardware
 * return type	:String
 * Author		:Anil Kumar
 * Date			:09-march-11
 * Purpose		:To fecth Tax Rate in charge section for product catelog page. 
 * */	


public String populateTaxRateForHardware(int storeid,int nSaleId,int tSaleId,int formAvailId,int hTypeId,Long ponumber,int fxChargeId)throws Exception
{
	//Nagarjuna
	String methodName="populateTaxRateForHardware", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//	End	Nagarjuna
	double taxrate=0;
	//String taxlabel="";
	//String finaltaxrate="";
	//String finaltaxlabel="";
	String taxWithLabel=null;
	Connection connection=null;
	CallableStatement csStoreCode=null;
	boolean flagTaxLabel=false;
	ResultSet rsStoreCode=null;	
	try
	{	
		connection=DbConnection.getConnectionObject();
		csStoreCode= connection.prepareCall(sqlGetTaxRateForHardware);
		csStoreCode.setInt(1,storeid);	
		csStoreCode.setInt(2,nSaleId);	
		csStoreCode.setInt(3,tSaleId);	
		csStoreCode.setInt(4,formAvailId);	
		csStoreCode.setInt(5,hTypeId);	
		csStoreCode.setLong(6,ponumber);
		csStoreCode.setInt(7,fxChargeId);
		rsStoreCode = csStoreCode.executeQuery();
//		Start [0021]
		HashMap<String,ProductCatelogDTO> hmap_TaxId_Object=new HashMap<String, ProductCatelogDTO>();
//		End [0021]
		while(rsStoreCode.next())
		{
//			Start [0021]
			//taxrate+=rsStoreCode.getDouble("TAXRATE");
			//taxlabel+=rsStoreCode.getString("TAXLABEL")+",";
			
			ProductCatelogDTO dto = new ProductCatelogDTO();
			dto.setTaxPkgInstId(rsStoreCode.getString("TAX_PKG_INST_ID"));
			dto.setTaxRate(rsStoreCode.getDouble("TAXRATE"));
			dto.setDependentOnTax(rsStoreCode.getString("DEPENDENT_ON_TAX"));
			
			hmap_TaxId_Object.put(rsStoreCode.getString("TAX_PKG_INST_ID"), dto);
//			End [0021]
			flagTaxLabel=true;
		}
	//	Start[018]
		if(!flagTaxLabel){taxWithLabel="NO TAX";}
		else
		{
//			Start [0021]
		//finaltaxrate=Utility.removeCharAt(taxrate,taxrate.lastIndexOf(','));
		//finaltaxlabel=Utility.removeCharAt(taxlabel,taxlabel.lastIndexOf(','));
		//taxWithLabel=finaltaxrate+"("+finaltaxlabel+")";
			
			for (ProductCatelogDTO taxObj : hmap_TaxId_Object.values()) {
				if(taxObj.getDependentOnTax()==null){
					taxrate+=taxObj.getTaxRate();
				}else{
					//for tax dependent on other tax formula is X*Y/100 
					//{ie if Tax A is X% of total amount and TAX B is Y% of TAX-A computed , then TAX B is X*Y/100  % of total amount }
					taxrate+=taxObj.getTaxRate()*hmap_TaxId_Object.get(taxObj.getDependentOnTax()).getTaxRate()/100;
				}
			}
			
			DecimalFormat df = new DecimalFormat("#.##");
			taxWithLabel=String.valueOf(df.format(taxrate))+"%";
			//taxWithLabel=String.valueOf(taxrate);
//			End [0021]
		}
	//End[018]	
		
	}
	catch(Exception ex)
	{
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//nagarjuna
		//ex.printStackTrace();
	}
	finally
	{
		try 
		{
			DbConnection.closeResultset(rsStoreCode);
			DbConnection.closeCallableStatement(csStoreCode);
			DbConnection.freeConnection(connection);
		} 
		catch (SQLException e) 
		{
			Utility.LOG(true, true, e,""+msg);
			// TODO Auto-generated catch block
			//e.printStackTrace();
		}		
	}	
	return taxWithLabel;
}		
//end function populateTaxRateForHardware
	
	//[012] Start
	public ArrayList<FileAttachmentDto>  getUploadedFileName(FileAttachmentDto fileDto,int docType)
	{
		//Nagarjuna
		String methodName="getUploadedFileName", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		//	End	Nagarjuna
		//long finalStatus=0;
		Connection connection =null;
		CallableStatement setFileUpload =null;
		java.sql.Blob blob=null;		
		SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");
		ResultSet rs = null;
		FileAttachmentDto downloadFileDto=null;
		ArrayList<FileAttachmentDto> listFileAttached = new ArrayList<FileAttachmentDto>();
		FormFile doc=fileDto.getFileData();
		try{
			connection=DbConnection.getConnectionObject();
			//connection.setAutoCommit(false);
			setFileUpload=connection.prepareCall(sqlGetUploaded_FileName);
			setFileUpload.setLong(1, new Long(fileDto.getHdnOrderNo()));
			setFileUpload.setLong(2,new Long(fileDto.getHdnAccountNo()));
			setFileUpload.setInt(3,docType);
			
			rs = setFileUpload.executeQuery();
		//--[15032013011]--start modifed--//
			while(rs.next())
			{
				downloadFileDto =  new FileAttachmentDto();
				downloadFileDto.setFileName(rs.getString("FILENAME"));
				//downloadFileDto.setCreateDate(rs.getString("CREATEDATE"));
				// 086 start
				downloadFileDto.setCreateDate((Utility.showDate_Report5(new Date(rs.getTimestamp("CREATEDATE").getTime()))));
				// 086 end
				downloadFileDto.setSlno(rs.getInt("SLNO"));
				downloadFileDto.setDescription(rs.getString("DESCRIPTION"));
				downloadFileDto.setHdnOrderNo(fileDto.getHdnOrderNo());
				downloadFileDto.setHdnAccountNo(fileDto.getCrmAccountNo());
				downloadFileDto.setFileTypeId(rs.getInt("FILETYPEID"));
				downloadFileDto.setDocName(rs.getString("DOCUMENTNAME"));
				downloadFileDto.setSharepointUrl(rs.getString("SHAREPOINT_URL"));   // ADDED BY SATISH FOR VIEW DOC IN SHAREPT.
				downloadFileDto.setUploadedBy(
				Utility.trimIfNotNull(
				Utility.fnCheckNull(rs.getString("FIRSTNAME"))+" "+Utility.fnCheckNull(rs.getString("LASTNAME"))
				)+
				"-"+Utility.fnCheckNull(rs.getString("USER_ID")));
		//--[15032013011]--end of modified--//
				downloadFileDto.setEmailId(Utility.fnCheckNull(rs.getString("EMAILID")));
				listFileAttached.add(downloadFileDto);
			}
			
		}
		catch(Exception ex)
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(setFileUpload);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, e,""+msg);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return listFileAttached;		
	}

	public FileAttachmentDto  getUploadedFile(FileAttachmentDto fileDto)
	{
		//Nagarjuna
		String methodName="getUploadedFile", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		//	End	Nagarjuna
		//long finalStatus=0;
		Connection connection =null;
		CallableStatement setFileDownload =null;
		java.sql.Blob blob=null;		
		//SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");
		ResultSet rs = null;
		FileAttachmentDto downloadFileDto=null;
		//FileAttachmentDto listFileAttached = new FileAttachmentDto();
		FormFile doc=fileDto.getFileData();
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MM/dd/yyyy");
		try{
			connection=DbConnection.getConnectionObject();
			//connection.setAutoCommit(false);
			setFileDownload=connection.prepareCall(sqlDownload_File);
			setFileDownload.setLong(1, new Long(fileDto.getHdnOrderNo()));
			setFileDownload.setLong(2,new Long(fileDto.getHdnAccountNo()));
			setFileDownload.setString(3,new String(fileDto.getFileName()));
			setFileDownload.setInt(4,new Integer(fileDto.getSlno()));
			
			//setFileDownload.setTimestamp(4, new Timestamp(simpleDateFormat.parse(fileDto.getCreateDate()).getTime()));
			rs = setFileDownload.executeQuery();
			
			if(rs.next())
			{
				downloadFileDto =  new FileAttachmentDto();
				blob=new SerialBlob(rs.getBlob("FILEDATA"));
				downloadFileDto.setFile(blob);
				downloadFileDto.setFileName(fileDto.getFileName());
				//listFileAttached.add(downloadFileDto);
				downloadFileDto.setIsDownload("1");
												
			}
			
		}
		catch(Exception ex)
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//nagarjuna
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(setFileDownload);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, e,""+msg);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return downloadFileDto;		
	}
	//[012] End	


//[013] Start
public int getNpdCategory(String ib2bWorkflowAttachedName) throws Exception 
{
	//Nagarjuna
	String methodName="getNpdCategory", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//	End	Nagarjuna
	Connection connection =null;
	CallableStatement callstmt =null;
	int ndpCategory = 0;
	try
	{
		connection=DbConnection.getConnectionObject();
		//connection.setAutoCommit(false);
		callstmt= connection.prepareCall(spgetNpdCategory);	
		callstmt.setString(1, ib2bWorkflowAttachedName);
		callstmt.setInt(2, 0);
		callstmt.execute();
 		ndpCategory=callstmt.getInt(2);
	}
	catch(Exception ex )
	{
		connection.rollback();
		//ex.printStackTrace();
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//nagarjuna
	}
	finally
	{
		try 
		{
	
			DbConnection.closeCallableStatement(callstmt);
			DbConnection.freeConnection(connection);
		} 
		catch (SQLException e) 
		{
			Utility.LOG(true, true, e,""+msg);
			//e.printStackTrace();
		}
	}
	return ndpCategory;
}
//[013] End
//[004] Start
public NewOrderDto addChildProduct(int serviceProductID,long orderNo,long serviceNo) throws IOESException
{
	String methodName="addChildProduct", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	AppConstants.IOES_LOGGER.info(methodName+" method of "+className+" class have been called");
	
	NewOrderDto dto = null;
	Connection connection =null;
	CallableStatement cstmt = null;
	try 
	{
		long msgCode=0;
		String cslServiceID="";
		connection=DbConnection.getConnectionObject();
		connection.setAutoCommit(false);
		
		
		
		cstmt= connection.prepareCall(sqlSp_copyChildProduct);
		cstmt.setLong(1,serviceProductID);
		cstmt.setLong(2,orderNo);
		cstmt.setLong(3,serviceNo);
		cstmt.registerOutParameter(4,java.sql.Types.VARCHAR);
		cstmt.registerOutParameter(5,java.sql.Types.VARCHAR);
		cstmt.registerOutParameter(6,java.sql.Types.BIGINT);
		cstmt.registerOutParameter(7,java.sql.Types.VARCHAR);
		cstmt.registerOutParameter(8,java.sql.Types.BIGINT);
		cstmt.registerOutParameter(9,java.sql.Types.BIGINT);
		
		cstmt.execute();
		dto = new NewOrderDto();
		msgCode=cstmt.getLong(6);
		
		cslServiceID=cslServiceID+","+cstmt.getString(9);
		
		if(msgCode==1)
		{
			String message=" Entry Copied Succesfully. Service Product Id is : " +cslServiceID.substring(1, cslServiceID.length());
			dto.setMessage(message);
			dto.setMessageId(cstmt.getString(5));
			connection.commit();
		}
		else
		{
			String message=cstmt.getString(4);
			dto.setMessage(message);
			dto.setMessageId(cstmt.getString(5));
			Utility.LOG(true,true,"@msgCode :"+cstmt.getLong(6));
			Utility.LOG(true,true,"@errMessage :"+cstmt.getString(7));
			Utility.LOG(true,true,"@sqlCode :"+cstmt.getLong(8));
			connection.rollback();
		}			
	} 
	catch (Exception e) 
	{
		try 
		{
			connection.rollback();
		} 
		catch (SQLException e1) 
		{
			Utility.onEx_LOG_RET_NEW_EX(e1, methodName, className, msg, logToFile, logToConsole);
		}
		finally
		{
			throw Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);
		}
	}
	finally
	{
		try 
		{
			DbConnection.closeCallableStatement(cstmt);
			
			DbConnection.freeConnection(connection);
		} 
		catch (Exception e) 
		{
			throw Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);
		}
	}
	
	return dto;
}
//[004] End


//015 start
public CommonDTO DeleteProducts(ServiceLineDTO str) throws Exception 
{
	//Nagarjuna	
	String methodName="DeleteProducts", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	int retCode = 0;
	int deleteStatus=0;
	String statusMsg=null;
	
	Connection con = null;		
	CallableStatement csChangeUserAccess = null;
	ResultSet rsMatrixId = null;
	CommonDTO objNewOrderDto = new CommonDTO();
	try
	{
		con=DbConnection.getConnectionObject();
		csChangeUserAccess = con.prepareCall(sqlDeleteProducts);			
		csChangeUserAccess.setString(1,str.getServiceId1());
		csChangeUserAccess.setInt(2,str.getOrderNumber());
		csChangeUserAccess.setInt(3,0);//Output Parameter
		csChangeUserAccess.setInt(4,0);//Output Parameter
		csChangeUserAccess.setString(5,"");//Output Parameter
		csChangeUserAccess.execute();
		deleteStatus=csChangeUserAccess.getInt(4);
		statusMsg=csChangeUserAccess.getString(5);
		if(deleteStatus == 0)
		{
			objNewOrderDto.setMsgOut(statusMsg);
			con.commit();
		}
		else
			
		{
			con.rollback();
		}
		
		
		
	}
	catch(Exception ex)
	{
		con.rollback();
		//ex.printStackTrace();
		throw Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);
	}
	finally
	{
		try 
		{
			DbConnection.closeResultset(rsMatrixId);
			DbConnection.closeCallableStatement(csChangeUserAccess);
			
			DbConnection.freeConnection(con);
			//csChangeUserAccess.close();
			//DbConnection.freeConnection(conn);;
		} 
		catch (Exception e) 
		{
			//e.printStackTrace();
			throw Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);
		}
	}
	return objNewOrderDto;
	
}	

//015 end

//
//Started by saurabh for bug fixing
//Method used for Fetching Billing Info from the Database for change view product catelog
public ArrayList<NewOrderDto> getPODetailForChangeView(NewOrderDto objDto) throws Exception 
{
	//Nagarjuna	
	String methodName="getPODetailForChangeView", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection connection =null;
	CallableStatement getPODetails =null;
	PreparedStatement getPOMaster =null;
	ResultSet rsPODetails = null;
	ResultSet rsPOMaster = null;
	int count=1;
	long orderNo = objDto.getPoNumber();
	long spid = objDto.getServiceProductID();
	long entity = objDto.getLegalEntity();
	NewOrderDto objNewOrderDto = null;
	int accountID = 0;
	ArrayList<NewOrderDto> listPODetails = new ArrayList<NewOrderDto>();
	SimpleDateFormat simpleDateFormat = new SimpleDateFormat(AppConstants.DATE_FORMAT_PROC);
	try
	{
		connection=DbConnection.getConnectionObject();
		
		getPOMaster= connection.prepareCall(sqlGetPOMaster);
		getPOMaster.setLong(1,orderNo);
		rsPOMaster = getPOMaster.executeQuery();
		
		while(rsPOMaster.next()){
			accountID = (rsPOMaster.getInt("ACCOUNTID"));
		}
		getPODetails= connection.prepareCall(sqlGetPODetailForChangeView);
		getPODetails.setLong(1,orderNo);
		getPODetails.setLong(2,spid);
		//if(entity != 0)
		//{
			getPODetails.setLong(3, entity);
	//	} else {
	//		getPODetails.setNull(3,java.sql.Types.BIGINT);
	//	}
		
		rsPODetails = getPODetails.executeQuery();
		while(rsPODetails.next())
		{
			objNewOrderDto =  new NewOrderDto();
			if(rsPODetails.getString("CUSTPONUMBER")==null )
			{
				objNewOrderDto.setCustPoDetailNo("no value"); //by saurabh
			}
			else
			{
				objNewOrderDto.setCustPoDetailNo(rsPODetails.getString("CUSTPONUMBER"));
			}
			if(rsPODetails.getDate("CUSTPODATE")==null)
			{
				objNewOrderDto.setCustPoDate("");
			}
			else
			{
				objNewOrderDto.setCustPoDate(simpleDateFormat.format(rsPODetails.getDate("CUSTPODATE")));
			}
			objNewOrderDto.setPoDetailNo(rsPODetails.getString("PODETAILNUMBER"));
			objNewOrderDto.setPoDate(simpleDateFormat.format(rsPODetails.getDate("PODATE")));
			objNewOrderDto.setPoReceiveDate(simpleDateFormat.format(rsPODetails.getDate("PORECEIVEDATE")));
			if(rsPODetails.getDate("CONTRACTSTARTDATE")==null){
				objNewOrderDto.setContractStartDate("");
			}else {
				objNewOrderDto.setContractStartDate(simpleDateFormat.format(rsPODetails.getDate("CONTRACTSTARTDATE")));
			}
			if(rsPODetails.getDate("CONTRACTENDDATE")==null){
				objNewOrderDto.setContractEndDate("");
			}else {
				objNewOrderDto.setContractEndDate(simpleDateFormat.format(rsPODetails.getDate("CONTRACTENDDATE")));
			}
			objNewOrderDto.setTotalPoAmt(BigDecimal.valueOf(rsPODetails.getDouble("POAMOUNT")).toPlainString());//changes for Exponential number.
			objNewOrderDto.setEntityID(rsPODetails.getInt("LEGALENTITY"));
			objNewOrderDto.setEntity(rsPODetails.getString("ENTITYNAME"));
			objNewOrderDto.setPeriodsInMonths(rsPODetails.getString("CONTRACTPERIOD"));
			
			
			objNewOrderDto.setDefaultPO(rsPODetails.getString("ISDEFAULTPO"));
			objNewOrderDto.setPoDemoContractPeriod(rsPODetails.getString("DEMOCONTRACTPERIOD"));
			objNewOrderDto.setPoEmailId(rsPODetails.getString("EMAILID"));
			objNewOrderDto.setPoRemarks(rsPODetails.getString("POREMARKS"));
			objNewOrderDto.setPoIssueBy(rsPODetails.getString("ISSUEDBY"));
			
			
			objNewOrderDto.setAccountID(accountID);
			objNewOrderDto.setContactId(new Long(count++));
			
			listPODetails.add(objNewOrderDto);
		}
		
	}
	catch(Exception ex )
	{
		throw Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);
		//ex.printStackTrace();	
	}
	finally
	{
		try 
		{
			DbConnection.closeResultset(rsPODetails);
			DbConnection.closeResultset(rsPOMaster);
			DbConnection.closeCallableStatement(getPODetails);
			DbConnection.closePreparedStatement(getPOMaster);
			DbConnection.freeConnection(connection);
		} 
		catch (Exception e) 
		{
			// TODO Auto-generated catch block
			//e.printStackTrace();
			throw Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);
		}
	}
	return listPODetails;
}

public ViewOrderDto SaveActionFromSEDToCOPC (ViewOrderDto objDto , Long createdby, Integer currentRole) throws Exception 
{
	//Nagarjuna	
	String methodName="SaveActionFromSEDToCOPC", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection connection =null;
	CallableStatement callstmt =null;
	ViewOrderDto objRetDto = new ViewOrderDto();
	//ArrayList<IB2BMailDto> lstMail = new ArrayList<IB2BMailDto>();
	Map<Integer, WorkflowTaskDTO> ordeWorkflowTasks = null;
	PreparedStatement pstmt =null;
	String orderNo=objDto.getOrderNo();//[507] 
	ResultSet rs = null;
	try{
		connection=DbConnection.getConnectionObject();
		connection.setAutoCommit(false);
		
		/*callstmt= connection.prepareCall(sqlSpInsertTaskActionForSED);	
		callstmt.setLong(1, Long.valueOf(objDto.getOrderNo()));
		callstmt.setString(2, objDto.getActionRemraks());
		callstmt.setLong(3, createdby);	
		callstmt.setLong(4, 0);
		callstmt.setLong(5, 0);
		callstmt.setString(6, "");
					
		callstmt.execute();
		int err = callstmt.getInt(5);
		if(err==0)
		{
			objRetDto.setMsgOut(callstmt.getString(6));
			//objRetDto.setMsgOut("Action taken Successfully");
			connection.commit();
				}
		else
		{
			Utility.SysOut(callstmt.getString(6));
		}*/
		
		// get the workflow entry for the order
		String workflowSql = "select * from IOE.TPOWORKFLOWTASK where ORDERNO = ?";
		pstmt = connection.prepareCall(workflowSql);
		pstmt.setInt(1, Integer.valueOf(objDto.getOrderNo()));
		rs = pstmt.executeQuery();
		WorkflowTaskDTO workflowTask = null;
		WorkflowTaskDTO currentUserTask = null;
		WorkflowTaskDTO copcUserTask = null;
		Integer currentTaskId = null;
		while(rs.next()){
			if(ordeWorkflowTasks == null)
				ordeWorkflowTasks = new HashMap<Integer, WorkflowTaskDTO>();
			workflowTask = new WorkflowTaskDTO();
			workflowTask.setTaskId(rs.getInt("TASKID"));
			workflowTask.setTaskTypeId(rs.getInt("TASKTYPE_ID"));     
			workflowTask.setOwnerTypeId(rs.getInt("OWNERTYPE_ID"));     
			workflowTask.setTaskStatusId(rs.getInt("TASKSTATUS_ID"));     
			workflowTask.setTaskStartDate(rs.getDate("TASKSTARTDATE"));     
			workflowTask.setTaskEndDate(rs.getDate("TASKENDDATE"));     
			workflowTask.setOrderNo(rs.getInt("ORDERNO"));     
			workflowTask.setCreatedBy(rs.getInt("CREATED_BY"));     
			workflowTask.setCreatedDate(rs.getDate("CREATED_DATE"));            
			workflowTask.setRejectedBy(rs.getInt("REJECTED_BY"));    
			workflowTask.setRejectedDate(rs.getDate("REJECTED_DATE"));     
			workflowTask.setIsRejected(rs.getInt("IS_REJECTED"));     
			workflowTask.setPrevTaskId(rs.getInt("PREV_TASK_ID"));     
			workflowTask.setActionRemarks(rs.getString("ACTION_REMARKS"));     
			workflowTask.setTaskName(rs.getString("TASK_NAME"));     
			workflowTask.setCurrentTaskId(rs.getInt("CURRENT_TASK_ID"));     
			workflowTask.setIsFirstTask(rs.getInt("IS_FIRST_TASK"));     
			workflowTask.setIsLastTask(rs.getInt("IS_LAST_TASK"));     
			workflowTask.setChangeOrderTaskStatus(rs.getInt("CHANGE_ORDER_TASK_STATUS"));     
			workflowTask.setTaskAssignedTo(rs.getInt("TASK_ASSIGNED_TO"));     
			workflowTask.setLastAssginedBy(rs.getInt("LAST_ASSGINED_BY"));     
			workflowTask.setRejectionId(rs.getInt("REJECTIONID"));
			if(rs.getInt("OWNERTYPE_ID") == currentRole){
				currentUserTask = workflowTask;
				currentTaskId = workflowTask.getTaskId();
			}else if(rs.getInt("OWNERTYPE_ID") == 3){
				copcUserTask = workflowTask;
			}
			ordeWorkflowTasks.put(rs.getInt("TASKID"), workflowTask);
		}
		if(null == currentUserTask) //it means that the user who has asked for send to COPC is not present in the workflow, error
			throw Utility.onEx_LOG_RET_NEW_EX(new Exception("User asked for sent to COPC does not exist"), 
					methodName, className, "User asked for sent to COPC does not exist", logToFile, logToConsole);
		
		/*Vijay
		 * In 'Send to COPC' Case
		 * insert records into OB_Scheduler in case of 'Send to COPC' action.
		 * call a method validateAndsaveDataIntoObScheduler() for this task
		 * 
		 * Note: This code is executed before 'send to COPC' activity takes place
		 */															
		if (! OBCalculationDao.validateAndsaveDataIntoObScheduler(Long.valueOf(orderNo), OBCalculationDao.Yes,OBCalculationDao.Rejection, OBCalculationDao.Yes, connection))
			throw Utility.onEx_LOG_RET_NEW_EX(new Exception("Some exception occur during OB_Scheduler data entry for Send to COPC action"), 
					methodName, className, "Some exception occur during OB_Scheduler datea entry for Send to COPC action", logToFile, logToConsole);
		
		
		List<WorkflowTaskDTO> taskBetCurrAndCopcUser = new ArrayList<WorkflowTaskDTO>();
		WorkflowTaskDTO currentTask = null;
		while(currentTaskId != copcUserTask.getTaskId()){
			currentTask = ordeWorkflowTasks.get(currentTaskId);
			taskBetCurrAndCopcUser.add(currentTask);
			currentTaskId = currentTask.getPrevTaskId();
		}
		String sqlUpdateWorkflow = "UPDATE IOE.TPOWORKFLOWTASK SET TASKSTATUS_ID = ? ,CHANGE_ORDER_TASK_STATUS=?" +
				", TASKENDDATE = NULL , CREATED_BY = NULL , CREATED_DATE = CURRENT_TIMESTAMP, TASKSTARTDATE = ? WHERE OWNERTYPE_ID=? AND ORDERNO=?";
		pstmt = connection.prepareStatement(sqlUpdateWorkflow);
		for(WorkflowTaskDTO workflowTaskDTO  : taskBetCurrAndCopcUser){
			pstmt.setInt(1, 1);
			pstmt.setInt(2, 0);
			pstmt.setDate(3, null);
			pstmt.setInt(4,workflowTaskDTO.getOwnerTypeId());
			pstmt.setInt(5, Integer.valueOf(objDto.getOrderNo()));
			pstmt.addBatch();
		}
		//for COPC user
		pstmt.setInt(1, 1);
		pstmt.setInt(2, 1);
		pstmt.setDate(3, new java.sql.Date(copcUserTask.getTaskStartDate().getTime()));
		pstmt.setInt(4,copcUserTask.getOwnerTypeId());
		pstmt.setInt(5, Integer.valueOf(objDto.getOrderNo()));
		pstmt.addBatch();
		int[] batchUpdates = pstmt.executeBatch();
		for(int val : batchUpdates){
			if(val == Statement.EXECUTE_FAILED)
				throw Utility.onEx_LOG_RET_NEW_EX(new Exception("Update Workflow failed"), methodName, className, "Update Workflow failed", logToFile, logToConsole);
		}
		//TODO check all the update is done
		
		//update the history 
		String taskActionInsert = "INSERT INTO IOE.TTASK_ACTION_HISTORY(HISTORY_ID, TASK_ID, TASK_ACTION, TASK_OWNER_ID, " +
				"TASK_START_DATE, TASK_END_DATE, PREV_TASK_ID,REJECTION_SEND_TO, order_id, ACTION_REMARKS, CREATED_BY)" +
				"VALUES(NEXTVAL FOR IOE.SEQ_TASK_ACTION_HISTORY ," + copcUserTask.getTaskId() + ",2 ," + currentUserTask.getOwnerTypeId() + "," +
				"(SELECT TASK_END_DATE FROM IOE.TTASK_ACTION_HISTORY WHERE ORDER_ID = ? and TASK_ACTION = 1 ORDER BY HISTORY_ID DESC FETCH FIRST ROW ONLY) ," +
				"CURRENT_TIMESTAMP ," +  copcUserTask.getTaskId() +"," + copcUserTask.getOwnerTypeId() +"," + objDto.getOrderNo() + " ,'" + objDto.getActionRemraks() +"' ," + createdby +")";
		pstmt = connection.prepareStatement(taskActionInsert);
		pstmt.setInt(1, Integer.valueOf(objDto.getOrderNo()));
		int val = pstmt.executeUpdate();
		if(val == Statement.EXECUTE_FAILED)
			throw Utility.onEx_LOG_RET_NEW_EX(new Exception("Task Action Insert failed"), methodName, className, "Task Action Insert failed", logToFile, logToConsole);
		String poDetailInsert = "UPDATE IOE.TPOMASTER SET STAGE='COPC' WHERE ORDERNO=?";
		pstmt = connection.prepareStatement(poDetailInsert);
		pstmt.setInt(1, Integer.valueOf(objDto.getOrderNo()));
		val = pstmt.executeUpdate();
		if(val == Statement.EXECUTE_FAILED)
			throw Utility.onEx_LOG_RET_NEW_EX(new Exception("Order status update failed"), methodName, className, "Order status update failed", logToFile, logToConsole);
		
		//[507] start
		ArrayList<ServiceLineDTO> serviceList=getServiceListForTheOrderAndRole(Long.parseLong(objDto.getOrderNo()), currentRole);
		String commaSepServicesDB=Utility.getCommaSperatedString(serviceList);
		boolean serviceInitiatedTo=false;
		serviceInitiatedTo=setServicesInitiateTo(commaSepServicesDB,AppConstants.COPC_ROLE,connection);
		System.out.println("current role"+currentRole);
		boolean updateRoleMappingCurentRole=updateRoleOrderMapping(Long.parseLong(orderNo), String.valueOf(currentRole), 0, connection);//updating Role_Order_Mapping table for current role
		boolean updateRoleMappingNextRole=updateRoleOrderMapping(Long.parseLong(orderNo), AppConstants.COPC_ROLE, 1, connection);//updating Role_Order_Mapping table for COPC
		
		if(serviceInitiatedTo && updateRoleMappingCurentRole && updateRoleMappingNextRole){
			connection.commit();
			objRetDto.setMsgOut("Action taken Successfully");
		}else{
			connection.rollback();
			objRetDto.setMsgOut("Error Occurred, Please try again");
		}
		//[507]end
		
	}
	catch(Exception ex )
	{
		objRetDto.setMsgOut("Error Occurred, Please try again");
		connection.rollback();
		ex.printStackTrace();
		//throw Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, "", logToFile, logToConsole);
	}
	finally
	{
		try 
		{
			DbConnection.closeCallableStatement(callstmt);
			DbConnection.freeConnection(connection);
		} 
		catch (Exception e) 
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
			//throw Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);
		}
	}
	return objRetDto;
}
//Start[027]
public ArrayList<PoDetailsDTO> getPODetailForProduct(PoDetailsDTO objDto) throws Exception{
	
	//Nagarjuna	
	String methodName="getPODetailForProduct", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection connection =null;
	CallableStatement getPODetails =null;
	PreparedStatement getPOMaster =null;
	ResultSet rsPODetails = null;
	ResultSet rsPOMaster = null;
	int count=1;
	PoDetailsDTO objNewOrderDto = null;
	int accountID = 0;
	ArrayList<PoDetailsDTO> listPODetails = new ArrayList<PoDetailsDTO>();
	SimpleDateFormat simpleDateFormat = new SimpleDateFormat(AppConstants.DATE_FORMAT_PROC);
	try
	{
		connection=DbConnection.getConnectionObject();
		
		getPOMaster= connection.prepareCall(sqlGetPOMaster);
		getPOMaster.setLong(1,objDto.getPoNumber());
		rsPOMaster = getPOMaster.executeQuery();
		
		while(rsPOMaster.next()){
			accountID = (rsPOMaster.getInt("ACCOUNTID"));
		}
		getPODetails= connection.prepareCall(sqlGetPODetailForProduct);
		getPODetails.setLong(1,objDto.getPoNumber());
		getPODetails.setLong(2,objDto.getServiceDetailID());
		rsPODetails = getPODetails.executeQuery();
		while(rsPODetails.next())
		{
			
			objNewOrderDto =  new PoDetailsDTO();
			
			if(rsPODetails.getString("CUSTPONUMBER")==null )
			{
				objNewOrderDto.setCustPoDetailNo("no value"); //by saurabh
			}
			else
			{
				objNewOrderDto.setCustPoDetailNo(rsPODetails.getString("CUSTPONUMBER"));
			}
			if(rsPODetails.getDate("CUSTPODATE")==null)
			{
				objNewOrderDto.setCustPoDate("");
			}
			else
			{
				objNewOrderDto.setCustPoDate(simpleDateFormat.format(rsPODetails.getDate("CUSTPODATE")));
			}
			objNewOrderDto.setPoDetailNo(rsPODetails.getString("PODETAILNUMBER"));
			objNewOrderDto.setPoDate(simpleDateFormat.format(rsPODetails.getDate("PODATE")));
			objNewOrderDto.setPoReceiveDate(simpleDateFormat.format(rsPODetails.getDate("PORECEIVEDATE")));
			if(rsPODetails.getDate("CONTRACTSTARTDATE")==null){
				objNewOrderDto.setContractStartDate("");
			}else {
				objNewOrderDto.setContractStartDate(simpleDateFormat.format(rsPODetails.getDate("CONTRACTSTARTDATE")));
			}
			if(rsPODetails.getDate("CONTRACTENDDATE")==null){
				objNewOrderDto.setContractEndDate("");
			}else {
				objNewOrderDto.setContractEndDate(simpleDateFormat.format(rsPODetails.getDate("CONTRACTENDDATE")));
			}
			objNewOrderDto.setTotalPoAmt(BigDecimal.valueOf(rsPODetails.getDouble("POAMOUNT")).toPlainString());//changes for Exponential number.
			objNewOrderDto.setEntityID(rsPODetails.getInt("LEGALENTITY"));
			objNewOrderDto.setEntity(rsPODetails.getString("ENTITYNAME"));
			objNewOrderDto.setPeriodsInMonths(rsPODetails.getString("CONTRACTPERIOD"));
			
			
			objNewOrderDto.setDefaultPO(rsPODetails.getString("ISDEFAULTPO"));
			objNewOrderDto.setPoDemoContractPeriod(rsPODetails.getString("DEMOCONTRACTPERIOD"));
			objNewOrderDto.setPoEmailId(rsPODetails.getString("EMAILID"));
			objNewOrderDto.setPoRemarks(rsPODetails.getString("POREMARKS"));
			
			objNewOrderDto.setPoIssueBy(rsPODetails.getString("ISSUEDBY"));
			objNewOrderDto.setNoofuses(rsPODetails.getInt("NO_OF_USES"));
			
			objNewOrderDto.setAccountID(accountID);
			objNewOrderDto.setContactId(new Long(count++));
			
			
			
			listPODetails.add(objNewOrderDto);
		}
		
	}
	catch(Exception ex )
	{
		 Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);
		//ex.printStackTrace();	
	}
	finally
	{
		try 
		{
			DbConnection.closeResultset(rsPODetails);
			DbConnection.closeResultset(rsPOMaster);
			DbConnection.closeCallableStatement(getPODetails);
			DbConnection.closePreparedStatement(getPOMaster);
			DbConnection.freeConnection(connection);
		} 
		catch (Exception e) 
		{
			// TODO Auto-generated catch block
			//e.printStackTrace();
		 Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);
		}
	}
	return listPODetails;
}

public PoDetailsDTO getPODetailForPO(String custPOID) throws Exception{
	//Nagarjuna	
	String methodName="getPODetailForPO", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	if(null == custPOID || "".equals(custPOID.trim())){
		return null;
	}
	Connection connection =null;
	CallableStatement getPODetails =null;
	ResultSet rsPODetails = null;
	int count=1;
	PoDetailsDTO objNewOrderDto = null;
	SimpleDateFormat simpleDateFormat = new SimpleDateFormat(AppConstants.DATE_FORMAT_PROC);
	try{
		connection=DbConnection.getConnectionObject();
		getPODetails= connection.prepareCall(sqlGetPODetailsForCustPO);
		getPODetails.setLong(1,Long.valueOf(custPOID));
		rsPODetails = getPODetails.executeQuery();
		while(rsPODetails.next()){
			objNewOrderDto =  new PoDetailsDTO();
			if(rsPODetails.getString("CUSTPONUMBER")==null){
				objNewOrderDto.setCustPoDetailNo("no value"); //by saurabh
			}else{
				objNewOrderDto.setCustPoDetailNo(rsPODetails.getString("CUSTPONUMBER"));
			}
			if(rsPODetails.getDate("CUSTPODATE")==null){
				objNewOrderDto.setCustPoDate("");
			}else{
				objNewOrderDto.setCustPoDate(simpleDateFormat.format(rsPODetails.getDate("CUSTPODATE")));
			}
			objNewOrderDto.setPoDetailNo(rsPODetails.getString("PODETAILNUMBER"));
			objNewOrderDto.setPoDate(simpleDateFormat.format(rsPODetails.getDate("PODATE")));
			objNewOrderDto.setPoReceiveDate(simpleDateFormat.format(rsPODetails.getDate("PORECEIVEDATE")));
			if(rsPODetails.getDate("CONTRACTSTARTDATE")==null){
				objNewOrderDto.setContractStartDate("");
			}else {
				objNewOrderDto.setContractStartDate(simpleDateFormat.format(rsPODetails.getDate("CONTRACTSTARTDATE")));
			}
			if(rsPODetails.getDate("CONTRACTENDDATE")==null){
				objNewOrderDto.setContractEndDate("");
			}else {
				objNewOrderDto.setContractEndDate(simpleDateFormat.format(rsPODetails.getDate("CONTRACTENDDATE")));
			}
			objNewOrderDto.setTotalPoAmt(BigDecimal.valueOf(rsPODetails.getDouble("POAMOUNT")).toPlainString());//changes for Exponential number.
			objNewOrderDto.setEntityID(rsPODetails.getInt("LEGALENTITY"));
			objNewOrderDto.setPeriodsInMonths(rsPODetails.getString("CONTRACTPERIOD"));
			objNewOrderDto.setDefaultPO(rsPODetails.getString("ISDEFAULTPO"));
			objNewOrderDto.setPoDemoContractPeriod(rsPODetails.getString("DEMOCONTRACTPERIOD"));
			objNewOrderDto.setPoEmailId(rsPODetails.getString("EMAILID"));
			objNewOrderDto.setPoRemarks(rsPODetails.getString("POREMARKS"));
			objNewOrderDto.setPoIssueBy(rsPODetails.getString("ISSUEDBY"));
		//	objNewOrderDto.setNoofuses(rsPODetails.getInt("NO_OF_USES"));
			objNewOrderDto.setContactId(new Long(count++));
		}
	}catch(Exception ex ){
		
		throw Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);
		//ex.printStackTrace();	
	}finally{
		try{
			DbConnection.closeResultset(rsPODetails);
			DbConnection.closeCallableStatement(getPODetails);
			DbConnection.freeConnection(connection);
		}catch (Exception e){
			throw Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);
			// TODO Auto-generated catch block
			//e.printStackTrace();
		}
	}
	return objNewOrderDto;
}

public ArrayList<ViewOrderDto> populateReasonForChange(int interfaceStdReason)throws Exception
{
	//Nagarjuna	
	String methodName="populateReasonForChange", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection connection =null;
	CallableStatement callstmt =null;
	ResultSet rs=null;
	ViewOrderDto vrderDto=null;
	ArrayList<ViewOrderDto> objRetDto = new ArrayList<ViewOrderDto>();
	try
	{
		connection=DbConnection.getConnectionObject();
		connection.setAutoCommit(false);
		callstmt= connection.prepareCall(sqlgetStandardReasonForChange);		
		callstmt.setInt(1, interfaceStdReason);
		rs=callstmt.executeQuery();
		while(rs.next())
		{	
			vrderDto=new ViewOrderDto();
			vrderDto.setReasonID(rs.getInt("STANDARDREASONID"));
			vrderDto.setReasonName(rs.getString("REASONNAME"));
			objRetDto.add(vrderDto);
		}
	}
	catch(Exception ex )
	{
		connection.rollback();
		//ex.printStackTrace();
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);
	}
	finally
	{
		try 
		{
			DbConnection.closeResultset(rs);
			DbConnection.closeCallableStatement(callstmt);
			callstmt.close();
			DbConnection.freeConnection(connection);
		} 
		catch (SQLException e) 
		{
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);
		}
	}
	return objRetDto;
}
//Shubhranshu
public ArrayList<ViewOrderDto> populateMappedChangeReason(Integer accNo,Integer subChangeTypeId)throws Exception
{	
	String methodName="populateReasonForChange", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
			Connection connection =null;
				CallableStatement callstmt =null;
					ResultSet rs=null;
						ViewOrderDto vrderDto=null;
							ArrayList<ViewOrderDto> objRetDto = new ArrayList<ViewOrderDto>();
								try
									{
										connection=DbConnection.getConnectionObject();
											connection.setAutoCommit(false);
		/*callstmt= connection.prepareCall(sqlgetStandardReasonForChange);*/		
												callstmt= connection.prepareCall(sqlGetReasonForChange);		
													callstmt.setString(1,accNo.toString());
														callstmt.setInt(2,subChangeTypeId);
															rs=callstmt.executeQuery();
																while(rs.next())
																	{	
																		vrderDto=new ViewOrderDto();
																			vrderDto.setReasonID(rs.getInt("REASON_ID"));
																				vrderDto.setReasonName(rs.getString("REASONNAME"));
																				objRetDto.add(vrderDto);
																			}
																		}
																	catch(Exception ex )
																{
															connection.rollback();
														Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);
													}
												finally
											{
										try 
									{
								DbConnection.closeResultset(rs);
							DbConnection.closeCallableStatement(callstmt);			
						DbConnection.freeConnection(connection);
					} 
				  catch (SQLException e) 
     		   {
		     Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);
	       }
         }
       return objRetDto;
    }
//Shubhranshu
public ArrayList<ViewOrderDto>  fnGetDisconnectionDateData(ViewOrderDto dto)
{
	//Nagarjuna	
	String methodName="fnGetDisconnectionDateData", className=this.getClass().getName(), msg1="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	//long finalStatus=0;
	Connection connection =null;
	CallableStatement cs =null;
	ViewOrderDto objViewOrderDto = null;
	ResultSet rs = null;
	ArrayList<ViewOrderDto> msg = new ArrayList<ViewOrderDto>();
	SimpleDateFormat simpleDateFormat = new SimpleDateFormat(AppConstants.DATE_FORMAT_PROC);

	try{
		connection=DbConnection.getConnectionObject();
		connection.setAutoCommit(false);
		cs=connection.prepareCall(sqlGetDisconnectionData);
		cs.setLong(1, new Long(dto.getChargeInfoId()));
		
		
		rs = cs.executeQuery();
		
		while(rs.next())
		{
			objViewOrderDto =  new ViewOrderDto();
		    objViewOrderDto.setEnddatelogic(rs.getString("ENDDATELOGIC"));
		    objViewOrderDto.setBilling_Active_date(simpleDateFormat.format(rs.getDate("BILLINGACTIVEDATE")));
		  
		    if(rs.getString("BILLING_END_DATE")==null)
		    {
		    	objViewOrderDto.setBilling_End_Date(null);
		    	
		    }
		    
		    else
		    	
		    {
		    	objViewOrderDto.setBilling_End_Date(simpleDateFormat.format(rs.getDate("BILLING_END_DATE")));
		    	
		    }
		}
		    
		      msg.add(objViewOrderDto);
}




		
	
	catch(Exception ex)
	{
		//ex.printStackTrace();	
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg1, logToFile, logToConsole);
	}
	finally
	{
		try 
		{
			DbConnection.closeResultset(rs);
			DbConnection.closeCallableStatement(cs);
			DbConnection.freeConnection(connection);
		} 
		catch (Exception e) 
		{
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg1, logToFile, logToConsole);
		}
	}
	return msg;		
}
public ArrayList<ViewOrderDto>  fnInsertDisconnectionDate(ViewOrderDto dto)
{
	//Nagarjuna	
	String methodName="fnInsertDisconnectionDate", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	//long finalStatus=0;
	Connection connection =null;
	CallableStatement cs =null;
	ViewOrderDto objViewOrderDto = null;
	int finalStatus=0;
	
	ArrayList<ViewOrderDto> listDisconnectionData = new ArrayList<ViewOrderDto>();
	
	try{
		connection=DbConnection.getConnectionObject();
		connection.setAutoCommit(false);
		cs=connection.prepareCall(sqlInsertDisconnectionDate);
		cs.setLong(1, new Long(dto.getChargeInfoId()));
		cs.setString(2,dto.getDisconnectiondate());
		cs.setInt(3,0);//Output Parameter
		cs.setInt(4,0);//Output Parameter
		cs.setString(5,"");//Output Parameter	
		cs.execute();
		finalStatus=cs.getInt(4);//Output Parameter
		
			 if(finalStatus==0)
				{
				 dto.setMsgOut("Data Updated SuccessFully!!");
				 listDisconnectionData.add(dto);
					connection.commit();
				}
				else
				{
					dto.setMsgOut("Some Error has Occured,Please Try Again!!");
					 listDisconnectionData.add(dto);
					connection.rollback();
				}
			 
			 
		 
		
		
		
		
	}
	catch(Exception ex)
	{
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		//ex.printStackTrace();	
	}
	finally
	{
		try 
		{
			DbConnection.closeCallableStatement(cs);
			DbConnection.freeConnection(connection);
		} 
		catch (Exception e) 
		{
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
	}
	
	
	return listDisconnectionData;
	
}



//Start[029]
public ArrayList validateDestinationCharges(ChargeComponentDTO objDto)throws Exception
{
	//Nagarjuna	
	String methodName="validateDestinationCharges", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection connection =null;
	CallableStatement callstmt =null;
	ResultSet rs = null;
	int flag=0;
	ArrayList outputvalue=new ArrayList();
	try
	{
		connection=DbConnection.getConnectionObject();
		connection.setAutoCommit(false);
		callstmt= connection.prepareCall(sqlspValidatedestinationcharges);	
		callstmt.setLong(1,objDto.getSourceProductId());			
		callstmt.setLong(2,objDto.getDestinationProductId());
		callstmt.setInt(3, 0);
		callstmt.setInt(4, 0);
		callstmt.setInt(5, 0);
		 callstmt.execute();
		
		outputvalue.add(0, callstmt.getInt(3));
		outputvalue.add(1, callstmt.getInt(4));
		outputvalue.add(2, 0);
	}
	catch(Exception ex )
	{
		connection.rollback();
		//ex.printStackTrace();
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
	}
	finally
	{
		try 
		{
			DbConnection.closeResultset(rs);
			DbConnection.closeCallableStatement(callstmt);
			DbConnection.freeConnection(connection);
		} 
		catch (SQLException e) 
		{
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
	}
	return outputvalue;
}
//end [029]
//Meenakshi : Added for CBR_20120806-XX-07984
public static String sqlDmxValidation= "{call IOE.SP_DMX_VALIDATION_FOR_MANDATORY_LINE_ITEMS(?,?)}";
public String dmxMandatoryValidation(long OrderNo)
{
	//Nagarjuna	
	String methodName="dmxMandatoryValidation", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	String Result=null;
	Connection conn = null;
	CallableStatement csPublishOrder=null;
	try 
	{
		 conn = DbConnection.getConnectionObject();
		 csPublishOrder = conn.prepareCall(sqlDmxValidation);
		 csPublishOrder.setLong(1,OrderNo);
		 csPublishOrder.setString(2,"");
		
		 csPublishOrder.execute();		
		 Result= csPublishOrder.getString(2);
		 
		 Utility.SysOut(" dmxMandatoryValidation of Inside NewOrderDao");
	} catch (Exception ex) {
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		//ex.printStackTrace();
	} 
	finally
	{
		try {
			DbConnection.closeCallableStatement(csPublishOrder);
			DbConnection.freeConnection(conn);
		} catch (Exception e) {
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
			//e.printStackTrace();
		}
	}
	return Result;
}
public static String sqlSpDmxValidation= "{call IOE.SP_DMX_VALIDATION(?,?,?,?,?)}";
public String fnDmxValidation(long OrderNo)
{
	//Nagarjuna	
	String methodName="fnDmxValidation", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	
	//edited by raghu 
	String COUNT_GLOBALSERVICE=null;
	String NO_OF_PLAYER=null;
	String COUNT_CHILD_LINEITEM=null;
	String  COUNT_GLOBAL_LINEITEM_IN_SERVICE=null;
	String Result=null;
	Connection conn = null;
	CallableStatement csPublishOrder=null;
	try 
	{
		 conn = DbConnection.getConnectionObject();
		 csPublishOrder = conn.prepareCall(sqlSpDmxValidation);
		 csPublishOrder.setLong(1,OrderNo);
		 csPublishOrder.setLong(2,0);
		 csPublishOrder.setLong(3,0);
		 csPublishOrder.setLong(4,0);
		 csPublishOrder.setLong(5,0);
		 csPublishOrder.execute();			
		 COUNT_GLOBALSERVICE=String.valueOf(csPublishOrder.getLong(2));
		 NO_OF_PLAYER=String.valueOf(csPublishOrder.getLong(3));
		 COUNT_CHILD_LINEITEM=String.valueOf(csPublishOrder.getLong(4));
		 COUNT_GLOBAL_LINEITEM_IN_SERVICE=String.valueOf(csPublishOrder.getLong(5));
		 
		 Result=COUNT_GLOBALSERVICE+"@@"+ NO_OF_PLAYER +"@@"+COUNT_CHILD_LINEITEM +"@@"+  COUNT_GLOBAL_LINEITEM_IN_SERVICE;
		 
		 Utility.SysOut(" getTaskListOfOrder of Inside Model of View Order Interface");
	} catch (Exception ex) {
		//ex.printStackTrace();
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
	} 
	finally
	{
		try {
			DbConnection.closeCallableStatement(csPublishOrder);
			DbConnection.freeConnection(conn);
		} catch (Exception e) {
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
	}
	return Result;
}
public static String SP_DMX_VALIDATION_COUNT_PLAYER_INSERVICE= "{call IOE.SP_DMX_VALIDATION_COUNT_PLAYER_INSERVICE(?,?,?,?,?)}";
public String fnDmxCountPlayerInService(long serviceNo)
{
	//Nagarjuna	
	String methodName="fnDmxCountPlayerInService", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	
	//edited by raghu 
	
	String COUNT_CHILD_LINEITEM=null;
	String TOTAL_SCREEN_IN_ORDER=null;
	String NO_OF_INTRACTIVE_SCREEN_IN_GOLOBALORDER=null;
	String IS_INTRACCTIVEPLAYER=null;
	String Result=null;
	Connection conn = null;
	CallableStatement csPublishOrder=null;
	try 
	{
		 conn = DbConnection.getConnectionObject();
		 csPublishOrder = conn.prepareCall(SP_DMX_VALIDATION_COUNT_PLAYER_INSERVICE);
		 csPublishOrder.setLong(1,serviceNo);
		 csPublishOrder.setLong(2,0);
		 csPublishOrder.setLong(3,0);
		 csPublishOrder.setLong(4,0);
		 csPublishOrder.setLong(5,0);
		 csPublishOrder.execute();			
		 COUNT_CHILD_LINEITEM=String.valueOf(csPublishOrder.getLong(2));
		 TOTAL_SCREEN_IN_ORDER=String.valueOf(csPublishOrder.getLong(3));
		 NO_OF_INTRACTIVE_SCREEN_IN_GOLOBALORDER=String.valueOf(csPublishOrder.getLong(4));
		 IS_INTRACCTIVEPLAYER=String.valueOf(csPublishOrder.getLong(5));
		 
		 Result=COUNT_CHILD_LINEITEM+"@@"+ TOTAL_SCREEN_IN_ORDER +"@@"+NO_OF_INTRACTIVE_SCREEN_IN_GOLOBALORDER+"@@"+IS_INTRACCTIVEPLAYER ;
	} catch (Exception ex) {
		//ex.printStackTrace();
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
	} 
	finally
	{
		try {
			DbConnection.closeCallableStatement(csPublishOrder);
			DbConnection.freeConnection(conn);
		} catch (Exception e) {
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
			//e.printStackTrace();
		}
	}
	return Result;
}
//raghu
public static String DMX_LOGICALSI_VALIDATION="{call IOE.DMX_LOGICALSI_VALIDATION2(?,?,?,?,?)}";
public String validateDMXLogicalLSI(long orderNo, long poNumber) throws Exception
{
	//Nagarjuna	
	String methodName="validateDMXLogicalLSI", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection connection =null;
	CallableStatement callstmt =null;
	String str=null;
	try
	{
		connection=DbConnection.getConnectionObject();
		connection.setAutoCommit(false);
		callstmt= connection.prepareCall(DMX_LOGICALSI_VALIDATION);	
		callstmt.setLong(1,orderNo );//6468);	
		callstmt.setString(2,null );	
		callstmt.setString(3, null);	
		callstmt.setString(4, null);
		 //Meenakshi: added for signage Child validation
		callstmt.setLong(5, poNumber);
		callstmt.executeUpdate();
		str=callstmt.getString(2);
	}
	catch(Exception ex )
	{
		connection.rollback();
		//ex.printStackTrace();	
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
	}
	finally
	{
		try 
		{
			DbConnection.closeCallableStatement(callstmt);
			DbConnection.freeConnection(connection);
		} 
		catch (SQLException e) 
		{
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
	}
	return str;
}
public String checkProductServiceType(long serviceDetID ) throws Exception
{
	//Nagarjuna	
	String methodName="checkProductServiceType", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection connection =null;
	CallableStatement callstmt =null;
	ResultSet rs = null;
	String serviceType=null;
	try
	{
		connection=DbConnection.getConnectionObject();
		callstmt= connection.prepareCall("SELECT SERVICETYPE FROM IOE.TSERVICETYPEDETAIL WHERE SERVICEDETAILID = "+serviceDetID);
		rs = callstmt.executeQuery();
		while(rs.next())
		{
			serviceType = rs.getString("SERVICETYPE");
		}
	}
	catch(Exception ex )
	{
		//ex.printStackTrace();	
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
	}
	finally
	{
		try 
		{
			DbConnection.closeResultset(rs);
			DbConnection.closeCallableStatement(callstmt);
			DbConnection.freeConnection(connection);
		} 
		catch (SQLException e) 
		{
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
	}
	return serviceType;
}
public ArrayList<NewOrderDto> populateEntityForChange(String serviceProductID) 
{
	//Nagarjuna	
	String methodName="populateEntityForChange", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection connection =null;
	PreparedStatement getContactDetails =null;
	PreparedStatement getContactMaster =null;
	ResultSet rsEntity = null;
	int count=1;
	NewOrderDto objNewOrderDto = null;
	ArrayList<NewOrderDto> listPOEntity = new ArrayList<NewOrderDto>();
	try
	{
		connection=DbConnection.getConnectionObject();
		getContactDetails= connection.prepareCall(sqlGetPOEntityForBillingForChange);
		getContactDetails.setLong(1,Long.parseLong(serviceProductID));
		rsEntity = getContactDetails.executeQuery();
		while(rsEntity.next())
		{
			objNewOrderDto =  new NewOrderDto();
			objNewOrderDto.setEntity(rsEntity.getString("ENTITYNAME"));
			objNewOrderDto.setEntityID(rsEntity.getInt("ENTITYID"));
			objNewOrderDto.setIsFLEFlag(rsEntity.getInt("ISFLE"));
			listPOEntity.add(objNewOrderDto);
		}
		
	}
	catch(Exception ex )
	{
		//ex.printStackTrace();	
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
	}
	finally
	{
		try 
		{
			DbConnection.closeResultset(rsEntity);
			DbConnection.closePreparedStatement(getContactDetails);
			DbConnection.closePreparedStatement(getContactMaster);
		
			DbConnection.freeConnection(connection);
		} 
		catch (Exception e) 
		{
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
	}
	return listPOEntity;
}
public ArrayList<NewOrderDto> populateLicCompanyForChange(String serviceProductID) 
{
	//Nagarjuna	
	String methodName="populateLicCompanyForChange", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection connection =null;
	PreparedStatement getLicCompany =null;

	ResultSet rsLicCompany = null;
	int count=1;
	NewOrderDto objNewOrderDto = null;
	ArrayList<NewOrderDto> listLicCompany= new ArrayList<NewOrderDto>();
	try
	{
		connection=DbConnection.getConnectionObject();
		getLicCompany= connection.prepareCall(sqlGetLicCompanyForChange);
		getLicCompany.setLong(1,Long.parseLong(serviceProductID));
		rsLicCompany = getLicCompany.executeQuery();
		while(rsLicCompany.next())
		{
			objNewOrderDto =  new NewOrderDto();
			objNewOrderDto.setLicCompanyName(rsLicCompany.getString("LCOMPANYNAME"));
			objNewOrderDto.setLicCompanyID(rsLicCompany.getInt("LCOMPANYID"));

			listLicCompany.add(objNewOrderDto);
		}
		
	}
	catch(Exception ex )
	{
		//ex.printStackTrace();	
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
	}
	finally
	{
		try 
		{
			DbConnection.closeResultset(rsLicCompany);
			DbConnection.closePreparedStatement(getLicCompany);
			DbConnection.freeConnection(connection);
		} 
		catch (Exception e) 
		{
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
	}
	return listLicCompany;
}

public ArrayList<TreeViewDto> ViewTreeForDropDown(long servicetypeid) 
{
	//Nagarjuna	
	String methodName="ViewTreeForDropDown", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection connection =null;
	PreparedStatement getChildMenuItems=null;

	ResultSet rsNSLocationAddress  = null;
	//NewOrderDto objNewOrderDto = new NewOrderDto();
	//ArrayList<NewOrderDto> listChildMenuItems = new ArrayList<NewOrderDto>();
	ArrayList<TreeViewDto> lstChildItems = new ArrayList<TreeViewDto>();

	try
	{
		connection=DbConnection.getConnectionObject();
		getChildMenuItems= connection.prepareCall(sqlSpViewDropDownTree);
		getChildMenuItems.setLong(1, servicetypeid);
		rsNSLocationAddress = getChildMenuItems.executeQuery();
		TreeViewDto objTreeView = null;
		//String parentNode = "";
		
		System.err.println("Service Type id " + String.valueOf(servicetypeid));
		
		while(rsNSLocationAddress.next())
		{
			System.err.println("Service Type id " + rsNSLocationAddress.getString("SERVICEDETAILID"));
			
			objTreeView = new TreeViewDto();
			objTreeView.setServiceChildId(rsNSLocationAddress.getString("SERVICEDETAILID"));
			objTreeView.setServiceParentId(rsNSLocationAddress.getString("SERVICEDETPARENTID"));
			lstChildItems.add(objTreeView);
		}
	}
	catch(Exception ex )
	{
		//ex.printStackTrace();	
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
	}
	finally
	{
		try 
		{
			DbConnection.closeResultset(rsNSLocationAddress);
			DbConnection.closePreparedStatement(getChildMenuItems);
			DbConnection.freeConnection(connection);
		} 
		catch (Exception e) 
		{
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
	}
	return lstChildItems;


}


//=============================================For Edit and View Mode================================
public String checkForOrderAlready(long orderno , String userid , long roleid , int flag) 
{
	//Nagarjuna	
	String methodName="checkForOrderAlready", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection connection =null;
	CallableStatement callstmt =null;
	String str=null;
	try
	{
		connection=DbConnection.getConnectionObject();
		connection.setAutoCommit(false);
		callstmt= connection.prepareCall(sqlOrderAlreadyOpened);	
		callstmt.setLong(1,orderno);//6468);	
		callstmt.setString(2,userid);
		callstmt.setLong(3,roleid);
		callstmt.setInt(4,flag);
		callstmt.setString(5,"");
		callstmt.executeUpdate();
		connection.commit();
		str = callstmt.getString(5);
	}
	catch(Exception ex )
	{
		try {
			connection.rollback();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
		//ex.printStackTrace();
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
	}
	finally
	{
		try 
		{
			
			DbConnection.closeCallableStatement(callstmt);
			DbConnection.freeConnection(connection);
		} 
		catch (Exception e) 
		{
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
	}
	return str;

}	

public String closeOrderAlreadyOpened(String orderno , String userid , long roleid) 
{
	//Nagarjuna	
	String methodName="closeOrderAlreadyOpened", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection connection =null;
	CallableStatement callstmt =null;
	String str=null;
	try
	{
		connection=DbConnection.getConnectionObject();
		connection.setAutoCommit(false);
		callstmt= connection.prepareCall(sqlCloseOrderAlreadyOpened);	
		callstmt.setLong(1,0l);//6468);	
		callstmt.setString(2,userid);
		callstmt.setLong(3,roleid);
		callstmt.setString(4,"");	
		callstmt.executeUpdate();
		connection.commit();
		str = callstmt.getString(4);
	}
	catch(Exception ex )
	{
		try {
			connection.rollback();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
		//ex.printStackTrace();	
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
	}
	finally
	{
		try 
		{
			DbConnection.closeCallableStatement(callstmt);
			DbConnection.freeConnection(connection);
		} 
		catch (Exception e) 
		{
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
	}
	return str;

}	
public static String sqllsiValidationForMediaExchangeAssociation = "{call IOE.MEDIA_EXCHANGE_LSI_VALIDATION_FOR_HARDWARE_ASSOCIATION(?,?)}";
public int lsiValidationForMediaExchangeAssociation(String lsi) 
{
	//Nagarjuna	
	String methodName="lsiValidationForMediaExchangeAssociation", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection connection =null;
	CallableStatement callstmt =null;
	ResultSet rs = null;
	int flag = 0;
	try
	{
		connection=DbConnection.getConnectionObject();
		connection.setAutoCommit(false);
		callstmt= connection.prepareCall(sqllsiValidationForMediaExchangeAssociation);	
		callstmt.setInt(1,Integer.parseInt(lsi));
		callstmt.setInt(2,0);
		callstmt.executeUpdate();
		connection.commit();
		flag = callstmt.getInt(2);
	}
	catch(Exception ex )
	{
		try {
			connection.rollback();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
		//ex.printStackTrace();	
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
	}
	finally
	{
		try 
		{
			callstmt.close();
			DbConnection.closeResultset(rs);
			DbConnection.closeCallableStatement(callstmt);
			DbConnection.freeConnection(connection);
		} 
		catch (Exception e) 
		{
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
	}
	return flag;

}

//=============================================For Edit and View Mode================================

//lawkush start

 
public ArrayList<ProductCatelogDTO> populateHDateLogic() throws Exception 
{
	//Nagarjuna	
	String methodName="populateHDateLogic", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection connection =null;
	CallableStatement cs =null;
	ProductCatelogDTO objNewDto=null;
	//int finalStatus=0;
	ResultSet rs = null;
	
	//ArrayList arr1=new ArrayList();
	//ArrayList arr2=new ArrayList();
	//ArrayList arr3=new ArrayList();
	
	ArrayList<ProductCatelogDTO> listSubLineItem = new ArrayList<ProductCatelogDTO>();
			try
			{
						connection=DbConnection.getConnectionObject();
						connection.setAutoCommit(false);
						
						cs=connection.prepareCall(sqlFetchHDateLogic);
						rs = cs.executeQuery();
						while(rs.next())
						{	
							objNewDto= new ProductCatelogDTO();
							objNewDto.setDateLogicValue(rs.getString("DATE_LOGIC_VALUE_ID"));
							objNewDto.setSection(rs.getString("SECTION"));
							listSubLineItem.add(objNewDto);
						
						}	
						
			}
			catch(Exception ex)
			{
				ex.printStackTrace();	
				Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
			}
			finally
			{
				try 
				{
					DbConnection.closeResultset(rs);
					DbConnection.closeCallableStatement(cs);
					DbConnection.freeConnection(connection);
				} 
				catch (SQLException e) 
				{
					// TODO Auto-generated catch block
					//e.printStackTrace();
					Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
				}
			}
	
	
	return listSubLineItem;
	
}
//By Saurabh to update status column to valid or unvalid
public static String VALIDATE_STATUS="{call IOE.UPDATE_ORDER_STATUS(?,?)}";
public String updateStatus(long orderNo,int status) throws Exception
{
	//Nagarjuna	
	String methodName="updateStatus", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection connection =null;
	CallableStatement callstmt =null;
	String str=null;
	try
	{
		connection=DbConnection.getConnectionObject();
		connection.setAutoCommit(false);
		callstmt= connection.prepareCall(VALIDATE_STATUS);	
		callstmt.setLong(1,orderNo );
		if(status==0)
		{
			callstmt.setString(2, "Invalid");
		}
		else
		{
			callstmt.setString(2, "Valid");	
		}
		callstmt.executeUpdate();
		connection.commit();
	}
	catch(Exception ex )
	{
		connection.rollback();
		//ex.printStackTrace();
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
	}
	finally
	{
		try 
		{
		
			DbConnection.closeCallableStatement(callstmt);
			DbConnection.freeConnection(connection);
		} 
		catch (SQLException e) 
		{
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
	}
	return str;
}

public static String sql_update_demo="{call IOE.SP_DEMO_UPDATE(?,?,?,?,?,?)}";
public int updateDemo(String orderno, String noOfDays, String isDemo) throws Exception
{
	//Nagarjuna	
	String methodName="updateDemo", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection connection =null;
	CallableStatement callstmt =null;
	int status=0;
	try
	{
		connection=DbConnection.getConnectionObject();
		connection.setAutoCommit(false);
		callstmt= connection.prepareCall(sql_update_demo);	
		callstmt.setLong(1,Long.parseLong( orderno ));
		callstmt.setString(2,isDemo );
		callstmt.setString(3,noOfDays );
		callstmt.setNull(4,java.sql.Types.INTEGER );
		callstmt.setNull(5,java.sql.Types.INTEGER );
		callstmt.setNull(6,java.sql.Types.VARCHAR );
		
		callstmt.executeUpdate();
		String error = callstmt.getString(6);
		System.out.println("error while updating Demo : "+error);
		status = callstmt.getInt(5);
		connection.commit();
	}
	catch(Exception ex )
	{
		connection.rollback();
		//ex.printStackTrace();	
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
	}
	finally
	{
		try 
		{
			DbConnection.closeCallableStatement(callstmt );
			DbConnection.freeConnection(connection);
		} 
		catch (SQLException e) 
		{
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
	}
	return status;
}


public ArrayList<ServiceLineDTO> getProductDetails(String orderno) throws Exception 
{
	//Nagarjuna	
	String methodName="getProductDetails", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection connection =null;
	CallableStatement cs =null;
	ServiceLineDTO objNewDto=null;
	//int finalStatus=0;
	ResultSet rs = null;
	
			ArrayList<ServiceLineDTO> listSubLineItem = new ArrayList<ServiceLineDTO>();
			try
			{
						connection=DbConnection.getConnectionObject();
						connection.setAutoCommit(false);
						
						cs= connection.prepareCall("select SERVICESTAGE from ioe.TPOSERVICEMASTER where ORDERNO = " + orderno);
						rs = cs.executeQuery();
						while(rs.next())
						{
							objNewDto = new ServiceLineDTO();
							objNewDto.setServiceName(rs.getString("SERVICESTAGE"));
							listSubLineItem.add(objNewDto);
						}
						
			}
			catch(Exception ex)
			{
				//ex.printStackTrace();	
				Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
			}
			finally
			{
				try 
				{
					DbConnection.closeResultset(rs);
					DbConnection.closeCallableStatement(cs);
					DbConnection.freeConnection(connection);
				} 
				catch (SQLException e) 
				{
					// TODO Auto-generated catch block
					//e.printStackTrace();
					Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
				}
			}
	
	
	return listSubLineItem;
	
}

// 031 start
public NewOrderDto DeleteServices(NewOrderDto objdto) throws Exception 
{
	//Nagarjuna	
	String methodName="DeleteServices", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	int retCode = 0;
	int deleteStatus=0;
	String statusMsg=null;
	String strVCSServiceId="",strVCSLsi="";
	String stL3MPLSServiceId="",stL3MPLSLsi="";
	Connection con = null;		
	CallableStatement csDeleteService = null;
	ResultSet rsMatrixId = null;
	NewOrderDto objNewOrderDto = new NewOrderDto();
	ArrayList<String> serviceIDs = new ArrayList<String>();
	try
	{
		
	    con=DbConnection.getConnectionObject();
	    con.setAutoCommit(false);
	    
	    StringTokenizer st = new StringTokenizer( objdto.getServiceId1(), ",");
		for (int i =0; st.hasMoreTokens();i++) {
			serviceIDs.add(st.nextToken());
		}
		
		for(int i=0;i < serviceIDs.size();i++)
		{	    
		csDeleteService = con.prepareCall(sqlDeleteServices1);			
		
		
		csDeleteService.setLong(1,Long.parseLong(serviceIDs.get(i)));
		//csDeleteService.setInt(2,objdto.getOrderNumber());
        csDeleteService.setInt(2,0);//Output Parameter
		csDeleteService.setInt(3,0);//Output Parameter
		csDeleteService.setString(4,"");//Output Parameter		
		csDeleteService.execute();
		deleteStatus=csDeleteService.getInt(3);
		statusMsg=csDeleteService.getString(4);
		if(deleteStatus != 0)
		{
			break;
		}
		
		}		
		if(deleteStatus == 0)
		{
			objNewOrderDto.setMsgOut(statusMsg);
			//PAGING-SERVICE-LINE-14-10-2012
			objNewOrderDto.setTotalRecord(serviceIDs.size());
			con.commit();
		}
		else
			
		{
			con.rollback();
		}
		
		
		
	}
	catch(Exception ex)
	{
		con.rollback();
		//ex.printStackTrace();
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		
	}
	finally
	{
		try 
		{
			DbConnection.closeResultset(rsMatrixId);
			DbConnection.closeCallableStatement(csDeleteService);
			DbConnection.freeConnection(con);
			//csChangeUserAccess.close();
			//DbConnection.freeConnection(conn);;
		} 
		catch (Exception e) 
		{
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
	}
	return objNewOrderDto;
	
}	

//031 end

public NewOrderDto DeleteService(NewOrderDto objdto) throws Exception 
{
	//Nagarjuna	
	String methodName="DeleteService", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	int retCode = 0;
	int deleteStatus=0;
	String statusMsg=null;
	
	Connection con = null;		
	CallableStatement csDeleteService = null;
	ResultSet rsMatrixId = null;
	NewOrderDto objNewOrderDto = new NewOrderDto();
	try
	{
		
	    con=DbConnection.getConnectionObject();
	    con.setAutoCommit(false);
		csDeleteService = con.prepareCall(sqlDeleteServices);			
		
		
		csDeleteService.setInt(1,objdto.getServiceId());
		csDeleteService.setInt(2,objdto.getOrderNumber());
        csDeleteService.setInt(3,0);//Output Parameter
		csDeleteService.setInt(4,0);//Output Parameter
		csDeleteService.setString(5,"");//Output Parameter		
		csDeleteService.execute();
		deleteStatus=csDeleteService.getInt(4);
		statusMsg=csDeleteService.getString(5);
		if(deleteStatus == 0)
		{
			objNewOrderDto.setMsgOut(statusMsg);
			con.commit();
		}
		else
			
		{
			con.rollback();
		}
		
		
		
	}
	catch(Exception ex)
	{
		con.rollback();
		//ex.printStackTrace();
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
	}
	finally
	{
		try 
		{
			DbConnection.closeResultset(rsMatrixId);
			DbConnection.closeCallableStatement(csDeleteService);
			DbConnection.freeConnection(con);
			//csChangeUserAccess.close();
			//DbConnection.freeConnection(conn);;
		} 
		catch (Exception e) 
		{
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
	}
	return objNewOrderDto;
	
}	

//031 end

	//[035] Start
	public ArrayList<NewOrderDto> fetchCancelCopyReport(NewOrderDto objDto) 
	{
		//Nagarjuna	
		String methodName="fetchCancelCopyReport", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		//end Nagarjuna
		Connection connection =null;
		CallableStatement getChargeMaster=null;
		ResultSet rs = null;
		ArrayList<NewOrderDto> CopyCancelReport = new ArrayList<NewOrderDto>();
		NewOrderDto objNewOrderDto = null;
		Utility utility=new Utility();
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		
		try
		{
			connection=DbConnection.getConnectionObject();
			getChargeMaster= connection.prepareCall(sqlFetchCopyCancelReport);	
			getChargeMaster.setLong(1,objDto.getPoNumber());
			getChargeMaster.setInt(2,objDto.getServiceId());
			getChargeMaster.setInt(3,objDto.getIsNewOrder());
			rs = getChargeMaster.executeQuery();
			while(rs.next())
			{
				objNewOrderDto =  new NewOrderDto();
				
				objNewOrderDto.setOldOrderNo(rs.getInt("OLDORDERNO"));
				objNewOrderDto.setNewOrderNo(rs.getInt("NEWORDERNO"));
				objNewOrderDto.setRootOrderNo(rs.getInt("ROOTORDERNO"));
				objNewOrderDto.setOldServiceNo(rs.getInt("OLDSERVICENO"));
				objNewOrderDto.setNewServiceNo(rs.getInt("NEWSERVICENO"));
				objNewOrderDto.setCreatedBy(rs.getString("CREATEDBY"));
				objNewOrderDto.setCreatedDate(rs.getString("CREATEDDATE"));	
				if (rs.getString("CREATEDDATE") != null && !"".equals(rs.getString("CREATEDDATE")))
				{
					
					objNewOrderDto.setCreatedDate((utility.showDate_Report(new Date(rs.getTimestamp("CREATEDDATE").getTime()))).toUpperCase());
					
				}
				CopyCancelReport.add(objNewOrderDto);
			}
		}
		catch(Exception ex )
		{
			//ex.printStackTrace();	
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(getChargeMaster);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				// TODO Auto-generated catch block
				//e.printStackTrace();
				Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
			}
		}
		return CopyCancelReport;
	}
	//[035] End
	
	//Start [036]
public NewOrderDto cancelAndCopy(NewOrderDto objDto) throws Exception 
{
	//Nagarjuna	
	String methodName="cancelAndCopy", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	
	Connection connection =null;
	CallableStatement clblstmt =null;
	ResultSet rs = null;
	NewOrderDto objNewOrderDto = new NewOrderDto();
	int newOrderNo=0;
	String statusMsg=null;
	int is_partial_initiated=0;
	boolean servicePresent=false;
	boolean updateRoleMapping=false;
		try
		{
			connection=DbConnection.getConnectionObject();			
			ArrayList<Long> list = new ArrayList<Long>();
			
			/*Vijay 
			 * going to insert the rocords in ob_scheduler for earch service through looping
			 */
			boolean successFlag = true;
			String serviceNoString =  objDto.getServiceIdString();
			String[] arryServiceNo = serviceNoString.split(",");
			for (int i = 0; i < arryServiceNo.length; i++) {
				//insert the recods into ob_scheduler table against cancellation service
				 successFlag = OBCalculationDao.validateAndsaveDataIntoObScheduler(Integer.parseInt(arryServiceNo[i]),
						OBCalculationDao.No, OBCalculationDao.CancelAndCopy,
						OBCalculationDao.Yes, connection);
				if(!successFlag)
					break;  // if not success then break the loop
			}
			
			
			clblstmt= connection.prepareCall(sqlSpCancelAndCopy);
			clblstmt.setString(1,objDto.getServiceIdString());
			clblstmt.setString(2,objDto.getCancelServiceReason());
			clblstmt.setLong(3,objDto.getPublished_by_empid());
			clblstmt.setInt(4,0);//Output Parameter	
			clblstmt.setString(5,"");//Output Parameter	
			clblstmt.setString(6,"");//Output Parameter	
			clblstmt.setString(7,"");//Output Parameter	
			clblstmt.setInt(8,0);
			clblstmt.setInt(9,0);//Output Parameter	for is_partial_initiated
			clblstmt.setLong(10,objDto.getCancelReasonId()); //[00101]
			//clblstmt.setLong(9,Long.parseLong(empID));
			clblstmt.execute();
			newOrderNo=clblstmt.getInt(8);
			statusMsg=clblstmt.getString(6);
			is_partial_initiated=clblstmt.getInt(9);
			if(newOrderNo != 0 && successFlag){	 // add one more condition regarding ob data insertion
				servicePresent=isServicesPresentInUserBin(objDto.getOrderNumber(),objDto.getRoleId());
				if(!servicePresent){
					updateRoleMapping=updateRoleOrderMapping(objDto.getOrderNumber(), objDto.getRoleId(),AppConstants.SERVICE_PRESENT_FALSE, connection);
					if(updateRoleMapping){
						objNewOrderDto.setMsgOut(statusMsg);
						objNewOrderDto.setOrderNumber(newOrderNo);
						objNewOrderDto.setIs_partial_initiated(is_partial_initiated);
						connection.commit();
					}else{
						connection.rollback();
						objNewOrderDto.setMsgOut("Some Error occured");
					}
				}else{
					objNewOrderDto.setMsgOut(statusMsg);
					objNewOrderDto.setOrderNumber(newOrderNo);
					objNewOrderDto.setIs_partial_initiated(is_partial_initiated);
					connection.commit();
				}
			}else{
				connection.rollback();
			}
	}catch(Exception ex ){
		connection.rollback();
		//ex.printStackTrace();	
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
	}
	finally
	{
		try 
		{
			DbConnection.closeResultset(rs);
			DbConnection.closeCallableStatement(clblstmt);
			DbConnection.freeConnection(connection);
		} 
		catch (SQLException e) 
		{
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
	}
	return objNewOrderDto;
}
//End [036]

//lawkush new start

public ArrayList<NewOrderDto> getGamList(PagingDto objDto)throws Exception 
{
	//Nagarjuna	
	String methodName="getGamList", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection connection =null;
	CallableStatement getGamList =null;

	ResultSet rsList = null;
	//int count=1;
	NewOrderDto objNewOrderDto = null;
	ArrayList<NewOrderDto> listGam= new ArrayList<NewOrderDto>();
	try
	{
		connection=DbConnection.getConnectionObject();
		getGamList= connection.prepareCall(sqlGetGamList);
		getGamList.setLong(1, objDto.getGam_id());
		rsList = getGamList.executeQuery();
		while(rsList.next())
		{
			objNewOrderDto =  new NewOrderDto();
			objNewOrderDto.setGam_id(rsList.getInt("GAMEMPID"));
			objNewOrderDto.setGam_name(rsList.getString("GAMNAME"));				

			listGam.add(objNewOrderDto);
		}
		
	}
	catch(Exception ex )
	{
		//ex.printStackTrace();
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
	}
	finally
	{
		try 
		{
			DbConnection.closeResultset(rsList);
			DbConnection.closeCallableStatement(getGamList);
			DbConnection.freeConnection(connection);
		} 
		catch (SQLException e) 
		{
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
	}
	return listGam;
}

//lawkush new End


//lawkush new start

public ArrayList<NewOrderDto> getGamOrderAttached()throws Exception 
{
	//Nagarjuna	
	String methodName="getGamOrderAttached", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection connection =null;
	PreparedStatement getGamList =null;

	ResultSet rsList = null;
	//int count=1;
	NewOrderDto objNewOrderDto = null;
	ArrayList<NewOrderDto> listGam= new ArrayList<NewOrderDto>();
	try
	{
		connection=DbConnection.getConnectionObject();
		getGamList= connection.prepareCall(sqlGetGamOrderAttachedList);
		rsList = getGamList.executeQuery();
		while(rsList.next())
		{
			objNewOrderDto =  new NewOrderDto();
			objNewOrderDto.setGam_id(rsList.getInt("GAMEMPID"));
			objNewOrderDto.setGam_name(rsList.getString("GAMNAME"));				

			listGam.add(objNewOrderDto);
		}
		
	}
	catch(Exception ex )
	{
		//ex.printStackTrace();
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
	}
	finally
	{
		try 
		{
			DbConnection.closeResultset(rsList);
			DbConnection.closePreparedStatement(getGamList);
			DbConnection.freeConnection(connection);
		} 
		catch (SQLException e) 
		{
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
	}
	return listGam;
}

//lawkush new End




//populate Opportunity Id To fill combo
public ArrayList<OpportunityDTO> fetchOpportunityIdList(NewOrderDto objDto) throws Exception 
{
	//Nagarjuna	
	String methodName="fetchOpportunityIdList", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection connection =null;
	CallableStatement callstmt =null;
	ResultSet rs = null;
	//NewOrderDto objRetDto = new NewOrderDto();
	OpportunityDTO objRetDto=null;
	ArrayList<OpportunityDTO> OpportunityList = new ArrayList<OpportunityDTO>();
	try
	{
		connection=DbConnection.getConnectionObject();
		
		callstmt= connection.prepareCall(sqlGetOpportunityIdList);				
		callstmt.setInt(1, Integer.valueOf(objDto.getAccountID()));
		callstmt.setString(2, objDto.getQuoteNo());
		rs = callstmt.executeQuery();
		while(rs.next())
		{
			objRetDto =  new OpportunityDTO();
			objRetDto.setOpportunityId(rs.getString("OPPORTUNITY_ID"));				
			OpportunityList.add(objRetDto);
		}
		
	}
	catch(Exception ex )
	{
		connection.rollback();
		//ex.printStackTrace();	
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
	}
	finally
	{
		try 
		{
			DbConnection.closeResultset(rs);
			DbConnection.closeCallableStatement(callstmt);
			DbConnection.freeConnection(connection);
		} 
		catch (SQLException e) 
		{
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
	}
	return OpportunityList;
}


public ArrayList<MigrationOrdersDto> fetchMigrationOrders_DCColo(long orderNo) 
{
	//Nagarjuna	
	String methodName="fetchMigrationOrders_DCColo", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection connection =null;
	CallableStatement callstmt =null;
	ResultSet rs = null;
	MigrationOrdersDto objMigrationOrdersDto = new MigrationOrdersDto();
	ArrayList<MigrationOrdersDto> listMigrationOrders = new ArrayList<MigrationOrdersDto>();
	try
	{
		connection=DbConnection.getConnectionObject();
		
		callstmt= connection.prepareCall(sqlGetlistMigrationOrder_DCCOLO);				
		callstmt.setLong(1, orderNo);
		rs = callstmt.executeQuery();
		
	
		while(rs.next())
		{
				objMigrationOrdersDto =  new MigrationOrdersDto();
				objMigrationOrdersDto.setOrderNo(rs.getString("ORDERNO"));
				objMigrationOrdersDto.setDocumentNo(rs.getString("DOC_NUM"));
				objMigrationOrdersDto.setSpecGrpId(rs.getString("SPEC_GRP_ID"));
				objMigrationOrdersDto.setM6ChildSirKey(rs.getString("M6CHILDSERKEY"));
				objMigrationOrdersDto.setM6ParentSirKey(rs.getString("M6PARENTSERKEY"));
				objMigrationOrdersDto.setPon(rs.getString("PON")); 
				objMigrationOrdersDto.setRpon(rs.getString("RPON"));
				objMigrationOrdersDto.setOrderLineId(rs.getString("ORDER_LINE_ID")); 
				objMigrationOrdersDto.setCkt_id(rs.getString("CKT_ID"));
				objMigrationOrdersDto.setPriLoc(rs.getString("PRILOC")); 
				objMigrationOrdersDto.setSecLoc(rs.getString("SECLOC"));
				objMigrationOrdersDto.setLocDate(rs.getString("LOC_DATE")); 
				objMigrationOrdersDto.setProductName(rs.getString("PRODUCT_NAME"));
				objMigrationOrdersDto.setTypeOfOrder(rs.getString("TYPE_OF_ORDER")); 
				objMigrationOrdersDto.setUtp(rs.getString("UTP"));
				objMigrationOrdersDto.setOpt(rs.getString("OPT")); 
				objMigrationOrdersDto.setCoaxial(rs.getString("COAXIAL"));
				objMigrationOrdersDto.setRoofSpace(rs.getString("ROOFSPACE"));
				objMigrationOrdersDto.setWorkStnSeat(rs.getString("WORKSTNSEATS"));
				objMigrationOrdersDto.setCabinHallMtngRoom(rs.getString("CABINHALLMTNGROOM"));
				objMigrationOrdersDto.setLockblstorearea(rs.getString("LOCKBLSTOREAREA"));
				objMigrationOrdersDto.setStandardrack(rs.getString("STANDARDRACK"));
				objMigrationOrdersDto.setRacksreqd(rs.getString("RACKSREQD")); 
				objMigrationOrdersDto.setNonstddim(rs.getString("NONSTDDIM")); 
				objMigrationOrdersDto.setNonstddim(rs.getString("NONSTDQUANTITY")); 
				objMigrationOrdersDto.setPartialrack(rs.getString("PARTIALRACK")); 
				objMigrationOrdersDto.setPartialrackid(rs.getString("PARTIALRACKID")); 
				objMigrationOrdersDto.setDc_floor_space(rs.getString("DC_FLOOR_SPACE")); 
				objMigrationOrdersDto.setPhac_mtr_perkwh(rs.getString("PHAC_MTR_PERKWH")); 
				objMigrationOrdersDto.setPhac_rate_kva_ann(rs.getString("PHAC_RATE_KVA_ANN")); 
				objMigrationOrdersDto.setPhac_rload_kva_ann(rs.getString("PHAC_RLOAD_KVA_ANN"));
				objMigrationOrdersDto.setSnglephac_mtr_kwhr(rs.getString("SNGLEPHAC_MTR_KWHR"));
				objMigrationOrdersDto.setSnglphac_rate_kva_an(rs.getString("SNGLPHAC_RATE_KVA_AN"));
				objMigrationOrdersDto.setSnglphac_rload_kva_a(rs.getString("SNGLPHAC_RLOAD_KVA_A"));
				objMigrationOrdersDto.setMin48v_dc_mtr(rs.getString("MIN48V_DC_MTR"));
				objMigrationOrdersDto.setMin48v_dc_rate(rs.getString("MIN48V_DC_RATE"));
				objMigrationOrdersDto.setMin48v_d_rld_kva_ann(rs.getString("MIN48V_D_RLD_KVA_ANN"));
				objMigrationOrdersDto.setRack_id_no(rs.getString("RACK_ID_NO"));
				objMigrationOrdersDto.setDcf_remarks(rs.getString("DCF_REMARKS"));
				objMigrationOrdersDto.setCamera(rs.getString("CAMERA")); 
				objMigrationOrdersDto.setAccess_control_spec(rs.getString("ACCESS_CONTROL_SPEC")); 
				objMigrationOrdersDto.setCustomization(rs.getString("CUSTOMIZATION")); 
				objMigrationOrdersDto.setCamera_specification(rs.getString("CAMERA_SPECIFICATION")); 
				objMigrationOrdersDto.setAccess_control(rs.getString("ACCESS_CONTROL")); 
				objMigrationOrdersDto.setBas_smart_hand_srv_it(rs.getString("BAS_SMART_HAND_SRV_IT")); 
				objMigrationOrdersDto.setPrepaid_pack_mh_mont1(rs.getString("PREPAID_PACK_MH_MONT1")); 
				objMigrationOrdersDto.setPostpaidpack_mh_mont1(rs.getString("POSTPAIDPACK_MH_MONT1")); 
				objMigrationOrdersDto.setAdv_smart_hand_srv_nt1(rs.getString("ADV_SMART_HAND_SRV_NT1")); 
				objMigrationOrdersDto.setPrepaid_pack_mh_mont2(rs.getString("PREPAID_PACK_MH_MONT2")); 
				objMigrationOrdersDto.setPostpaidpack_mh_mont2(rs.getString("POSTPAIDPACK_MH_MONT2")); 
				objMigrationOrdersDto.setMedia_hndl_vault_serv(rs.getString("MEDIA_HNDL_VAULT_SERV")); 
				objMigrationOrdersDto.setVendor_management(rs.getString("VENDOR_MANAGEMENT")); 
				objMigrationOrdersDto.setSurveillance_camera(rs.getString("SURVEILLANCE_CAMERA")); 
				objMigrationOrdersDto.setSurveillance_camera_spec(rs.getString("SURVEILLANCE_CAMERA_SPEC")); 
				objMigrationOrdersDto.setDc_mpls_circuit_id(rs.getString("DC_MPLS_CIRCUIT_ID")); 
				objMigrationOrdersDto.setAnyotherproductsrvc(rs.getString("ANYOTHERPRODUCTSRVC")); 
				objMigrationOrdersDto.setDc_isp(rs.getString("DC_ISP"));
				objMigrationOrdersDto.setDc_isp_circuit_id(rs.getString("DC_ISP_CIRCUIT_ID"));
				objMigrationOrdersDto.setDc_p_to_p_links(rs.getString("DC_P_TO_P_LINKS"));
				objMigrationOrdersDto.setFeasibility_id(rs.getString("FEASIBILITY_ID")); 
				objMigrationOrdersDto.setDc_mpls(rs.getString("DC_MPLS")); 
				objMigrationOrdersDto.setM6shortcode(rs.getString("M6SHORTCODE")); 
				objMigrationOrdersDto.setCrm_acct_no(rs.getString("CRM_ACCT_NO")); 
				objMigrationOrdersDto.setOrder_status(rs.getString("ORDER_STATUS")); 
				objMigrationOrdersDto.setOrder_provision_status(rs.getString("ORDER_PROVISION_STATUS")); 
				objMigrationOrdersDto.setOrder_login_date(rs.getString("ORDER_LOGIN_DATE"));
			
			listMigrationOrders.add(objMigrationOrdersDto);
		}
		return listMigrationOrders;
	}
	catch(Exception ex )
	{
		//ex.printStackTrace();
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
	}
	finally
	{
		try 
		{
			DbConnection.closeResultset(rs);
			DbConnection.closeCallableStatement(callstmt);
			DbConnection.freeConnection(connection);
		} 
		catch (Exception e) 
		{
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
	}
	return listMigrationOrders;
}	
public ArrayList<MigrationOrdersDto> fetchMigrationOrders_Teleport(long orderNo) 
{
	//Nagarjuna	
	String methodName="fetchMigrationOrders_Teleport", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection connection =null;
	CallableStatement callstmt =null;
	ResultSet rs = null;
	MigrationOrdersDto objMigrationOrdersDto = new MigrationOrdersDto();
	ArrayList<MigrationOrdersDto> listMigrationOrders = new ArrayList<MigrationOrdersDto>();
	try
	{
		connection=DbConnection.getConnectionObject();
		
		callstmt= connection.prepareCall(sqlGetlistMigrationOrder_Teleport);				
		callstmt.setLong(1, orderNo);
		rs = callstmt.executeQuery();
		
	
		while(rs.next())
		{
				objMigrationOrdersDto =  new MigrationOrdersDto();
				objMigrationOrdersDto.setOrderNo(rs.getString("ORDERNO"));
				objMigrationOrdersDto.setDocumentNo(rs.getString("DOC_NUM"));
				objMigrationOrdersDto.setSpecGrpId(rs.getString("SPEC_GRP_ID"));
				objMigrationOrdersDto.setM6ChildSirKey(rs.getString("M6CHILDSERKEY"));
				objMigrationOrdersDto.setM6ParentSirKey(rs.getString("M6PARENTSERKEY"));
				objMigrationOrdersDto.setPon(rs.getString("PON")); 
				objMigrationOrdersDto.setRpon(rs.getString("RPON"));
				objMigrationOrdersDto.setOrderLineId(rs.getString("ORDER_LINE_ID")); 
				objMigrationOrdersDto.setCkt_id(rs.getString("CKT_ID"));
				objMigrationOrdersDto.setPriLoc(rs.getString("PRILOC")); 
				objMigrationOrdersDto.setSecLoc(rs.getString("SECLOC"));
				objMigrationOrdersDto.setLocDate(rs.getString("LOC_DATE")); 
				objMigrationOrdersDto.setProductName(rs.getString("PRODUCT_NAME"));
				objMigrationOrdersDto.setTypeOfOrder(rs.getString("TYPE_OF_ORDER"));
				objMigrationOrdersDto.setTb_satellite_type(rs.getString("TB_SATELLITE_TYPE"));
				objMigrationOrdersDto.setTb_ordbital_location(rs.getString("TB_ORDBITAL_LOCATION")); 
				objMigrationOrdersDto.setTb_start_frequency(rs.getString("TB_START_FREQUENCY")); 
				objMigrationOrdersDto.setTb_stop_frequency(rs.getString("TB_STOP_FREQUENCY"));
				objMigrationOrdersDto.setTb_centre_freq(rs.getString("TB_CENTRE_FREQ"));
				objMigrationOrdersDto.setTb_bandwidth(rs.getString("TB_BANDWIDTH")); 
				objMigrationOrdersDto.setTcm_chng_reqster_name(rs.getString("TCM_CHNG_REQSTER_NAME")); 
				objMigrationOrdersDto.setTcm_cr_request_date(rs.getString("TCM_CR_REQUEST_DATE")); 
				objMigrationOrdersDto.setTcm_cr_request_end_time(rs.getString("TCM_CR_REQUEST_END_TIME")); 
				objMigrationOrdersDto.setTcm_cr_reqst_start_time(rs.getString("TCM_CR_REQST_START_TIME")); 
				objMigrationOrdersDto.setTcm_expected_downtime(rs.getString("TCM_EXPECTED_DOWNTIME")); 
				objMigrationOrdersDto.setTcm_roll_back_plan(rs.getString("TCM_ROLL_BACK_PLAN")); 
				objMigrationOrdersDto.setTcm_severity(rs.getString("TCM_SEVERITY")); 
				objMigrationOrdersDto.setTc_audio_bit_rate(rs.getString("TC_AUDIO_BIT_RATE")); 
				objMigrationOrdersDto.setTc_video_bit_rate(rs.getString("TC_VIDEO_BIT_RATE")); 
				objMigrationOrdersDto.setTc_router_port_id(rs.getString("TC_ROUTER_PORT_ID")); 
				objMigrationOrdersDto.setTc_mux_port_id(rs.getString("TC_MUX_PORT_ID")); 
				objMigrationOrdersDto.setTc_audio_pid(rs.getString("TC_AUDIO_PID")); 
				objMigrationOrdersDto.setTc_video_pid(rs.getString("TC_VIDEO_PID")); 
				objMigrationOrdersDto.setTu_info_rate_uplink(rs.getString("TU_INFO_RATE_UPLINK")); 
				objMigrationOrdersDto.setTu_symbol_rate_uplink(rs.getString("TU_SYMBOL_RATE_UPLINK")); 
				objMigrationOrdersDto.setTu_dvb_standard_uplink(rs.getString("TU_DVB_STANDARD_UPLINK")); 
				objMigrationOrdersDto.setTu_fec_uplink(rs.getString("TU_FEC_UPLINK")); 
				objMigrationOrdersDto.setTu_modulation_uplink(rs.getString("TU_MODULATION_UPLINK")); 
				objMigrationOrdersDto.setTu_type_of_carrier(rs.getString("TU_TYPE_OF_CARRIER")); 
				objMigrationOrdersDto.setTpr_customer_type(rs.getString("TPR_CUSTOMER_TYPE")); 
				objMigrationOrdersDto.setTpr_type_of_order(rs.getString("TPR_TYPE_OF_ORDER")); 
				objMigrationOrdersDto.setTpr_teleport_location(rs.getString("TPR_TELEPORT_LOCATION")); 
				objMigrationOrdersDto.setTpr_input_format(rs.getString("TPR_INPUT_FORMAT")); 
				objMigrationOrdersDto.setTpr_playout_services(rs.getString("TPR_PLAYOUT_SERVICES")); 
				objMigrationOrdersDto.setTpr_type_of_service(rs.getString("TPR_TYPE_OF_SERVICE")); 
				objMigrationOrdersDto.setTpr_info_rate(rs.getString("TPR_INFO_RATE")); 
				objMigrationOrdersDto.setTpr_symbol_rate(rs.getString("TPR_SYMBOL_RATE")); 
				objMigrationOrdersDto.setTpr_dvb_standard(rs.getString("TPR_DVB_STANDARD")); 
				objMigrationOrdersDto.setTpr_fec(rs.getString("TPR_FEC")); 
				objMigrationOrdersDto.setTpr_compression_tech(rs.getString("TPR_COMPRESSION_TECH")); 
				objMigrationOrdersDto.setTpr_modulation(rs.getString("TPR_MODULATION")); 
				objMigrationOrdersDto.setTpr_cust_multicast_ip(rs.getString("TPR_CUST_MULTICAST_IP")); 
				objMigrationOrdersDto.setTpr_cust_wan_ip(rs.getString("TPR_CUST_WAN_IP")); 
				objMigrationOrdersDto.setTpr_audio_format(rs.getString("TPR_AUDIO_FORMAT")); 
				objMigrationOrdersDto.setTpr_no_of_audios(rs.getString("TPR_NO_OF_AUDIOS")); 
				objMigrationOrdersDto.setTpr_type_of_audios(rs.getString("TPR_TYPE_OF_AUDIOS")); 
				objMigrationOrdersDto.setTpr_video_format(rs.getString("TPR_VIDEO_FORMAT")); 
				objMigrationOrdersDto.setTc_compression_tech(rs.getString("TC_COMPRESSION_TECH")); 
				objMigrationOrdersDto.setTcm_communication(rs.getString("TCM_COMMUNICATION")); 
				objMigrationOrdersDto.setM6shortcode(rs.getString("M6SHORTCODE")); 
				objMigrationOrdersDto.setCrm_acct_no(rs.getString("CRM_ACCT_NO")); 
				objMigrationOrdersDto.setOrder_status(rs.getString("ORDER_STATUS")); 
				objMigrationOrdersDto.setOrder_provision_status(rs.getString("ORDER_PROVISION_STATUS")); 
				objMigrationOrdersDto.setOrder_login_date(rs.getString("ORDER_LOGIN_DATE"));
			
			listMigrationOrders.add(objMigrationOrdersDto);
		}
		return listMigrationOrders;
	}
	catch(Exception ex )
	{
		//ex.printStackTrace();
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
	}
	finally
	{
		try 
		{
			DbConnection.closeResultset(rs);
			DbConnection.closeCallableStatement(callstmt);
			DbConnection.freeConnection(connection);
		} 
		catch (Exception e) 
		{
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
	}
	return listMigrationOrders;
}

public ArrayList<NewOrderDto> getActMgrIdForAutoRenewalMail(Connection conn ) throws Exception
{
	//Nagarjuna	
	String methodName="getActMgrIdForAutoRenewalMail", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	ArrayList<NewOrderDto> list = new ArrayList<NewOrderDto>();
	ResultSet rs= null;
	CallableStatement cs =null;
	
	try {
		
		cs = conn.prepareCall(sqlGet_ActMgrID_For_AutoRenewal);
        rs=cs.executeQuery();
		
	while(rs.next()){
		
		
		NewOrderDto objViewOrderDto= new NewOrderDto();
		objViewOrderDto.setActmgrid(rs.getInt("ACCOUNTMGRID")); 
		objViewOrderDto.setActmgremailid(new String[]{rs.getString("EMAILID")});
		objViewOrderDto.setActmgrname(rs.getString("ACCOUNTMANAGERNAME")); 
		
		list.add(objViewOrderDto);
	}
		
	}
	
	
	catch (Exception e) {
		//e.printStackTrace();
		Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		throw new Exception("No Record Found");
	}
	
	
	finally
	{
		try 
		{	DbConnection.closeResultset(rs);
		DbConnection.closeCallableStatement(cs);
		} 
		catch (Exception e) 
		{
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
	}
	
	
	
	
	return list;
	

	}

public ArrayList<NewOrderDto> getChargeDetailsforAutoRenewalMail(Connection conn,int ActmgrId ) throws Exception
{
	//Nagarjuna	
	String methodName="getChargeDetailsforAutoRenewalMail", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	ArrayList<NewOrderDto> list = new ArrayList<NewOrderDto>();
	ResultSet rs= null;
	CallableStatement cs =null;
	try {
		
		cs = conn.prepareCall(sqlGet_ChargeDetails_For_AutoRenewal);
		cs.setLong(1, ActmgrId);
        rs=cs.executeQuery();
		
	while(rs.next()){
		
		
		NewOrderDto objViewOrderDto= new NewOrderDto();
		objViewOrderDto.setActmgrid(rs.getInt("ACCOUNTMGRID")); 
		objViewOrderDto.setAccountID(rs.getInt("ACCOUNTID")); 
		objViewOrderDto.setAccountName(rs.getString("ACCOUNTNAME")); 
		objViewOrderDto.setLogicalSINumber(rs.getInt("LOGICAL_SI_NO")); 
		objViewOrderDto.setServiceId(rs.getInt("SERVICENO")); 
		objViewOrderDto.setServiceName(rs.getString("SERVICETYPENAME")); 
		objViewOrderDto.setLineItemId(rs.getInt("LINEITEMNO")); 
		objViewOrderDto.setLineItemName(rs.getString("LINEITEMNAME")); 
		objViewOrderDto.setChargeInfoID(rs.getInt("CHARGEID")); 
		objViewOrderDto.setChargeName(rs.getString("CHARGE_NAME")); 
		objViewOrderDto.setStartDate(rs.getString("CHARGESTARTDATE")); 
		objViewOrderDto.setEndDate(rs.getString("CHARGEENDDATE")); 
		objViewOrderDto.setChargeAmount(rs.getDouble("CHARGEAMOUNT")); 
		objViewOrderDto.setCustPoDetailNo(rs.getString("CUSTPONUMBER")); 
		objViewOrderDto.setCustPoDate(rs.getString("CUSTPODATE")); 
		list.add(objViewOrderDto);
		
		
	}
		
	}
	
	
	catch (Exception e) {
		//e.printStackTrace();
		Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		throw new Exception("No Record Found");
	}
	
	
	finally
	{
		try 
		{	DbConnection.closeResultset(rs);
		DbConnection.closeCallableStatement(cs);
			
		} 
		catch (Exception e) 
		{
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
	}
	
	
	return list;
	

	}


public ArrayList<NewOrderDto> getCurrency(PagingDto objDto) 
{
	//Nagarjuna	
	String methodName="getCurrency", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection connection =null;
	CallableStatement getAllCurrencyReport =null;
	ResultSet rsCurrencyDetails = null;
	ArrayList<NewOrderDto> listCurrency = new ArrayList<NewOrderDto>();
	NewOrderDto objNewOrderDto = null;
	int recordCount;		
	try
	{
		connection=DbConnection.getConnectionObject();
		getAllCurrencyReport= connection.prepareCall(sqlGetCurrency);
		
		String currencyCode=objDto.getCurrencyCode();
	
		if(currencyCode==null)
		{
			currencyCode="";
		}
		getAllCurrencyReport.setString(1, currencyCode);
		
		rsCurrencyDetails = getAllCurrencyReport.executeQuery();
		while(rsCurrencyDetails.next())
		{
			objNewOrderDto =  new NewOrderDto();
			objNewOrderDto.setCurrencyID(rsCurrencyDetails.getInt("CURRENCYID"));
			objNewOrderDto.setCurrencyName(rsCurrencyDetails.getString("CURNAME"));
			objNewOrderDto.setCurrencyCode(rsCurrencyDetails.getString("CURSHORTCODE"));
			
			listCurrency.add(objNewOrderDto);
		}
	}
	catch(Exception ex )
	{
		//ex.printStackTrace();	
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
	}
	finally
	{
		try 
		{
			DbConnection.closeResultset(rsCurrencyDetails);
			DbConnection.closeCallableStatement(getAllCurrencyReport);
			DbConnection.freeConnection(connection);
		} 
		catch (Exception e) 
		{
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
	}
	return listCurrency;
}


public ArrayList<LineItemDTO> getLineNSublineItemLbl(LineItemDTO objDto) throws Exception 
{
	//Nagarjuna	
	String methodName="getLineNSublineItemLbl", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection connection =null;
	CallableStatement callstmt =null;
	ResultSet rs = null;
	ArrayList<LineItemDTO> lstLineNSublineItemLbl = new ArrayList<LineItemDTO>();
	int recordCount;
	try
	{
		connection=DbConnection.getConnectionObject();
		callstmt= connection.prepareCall(sqlGetLineNSubLineItemLabel);	
		callstmt.setInt(1, objDto.getChargeInfoID());			
		rs = callstmt.executeQuery();
		while(rs.next())
		{
			objDto.setLineItemLbl(rs.getString("LINEITEMTYPE"));
			objDto.setSubLineItemLbl(rs.getString("SUBLINEITEMTYPE"));
			//[100] Start
			if(null!=rs.getString("FX_CHARGEID"))
				objDto.setFxChareId(Integer.parseInt(rs.getString("FX_CHARGEID")));
			lstLineNSublineItemLbl.add(objDto);
			//[100] End
		}
	}
	catch(Exception ex )
	{
		//ex.printStackTrace();
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
	}
	finally
	{
		try 
		{
			DbConnection.closeResultset(rs);
			DbConnection.closeCallableStatement(callstmt);
			DbConnection.freeConnection(connection);
		} 
		catch (SQLException e) 
		{
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
	}
	return lstLineNSublineItemLbl;
}
public static String sqlAdditionalNodeFlagCheck="{call IOE.ADDITIONAL_NODE_FLAG_CHECK(?,?)}";
public int AdditionalNodeFlagCheck(NewOrderDto objDto) throws Exception 
{
	//Nagarjuna	
	String methodName="AdditionalNodeFlagCheck", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection connection =null;
	CallableStatement callstmt =null;
	ResultSet rs = null;
	int additionalNodeFlag=0;	
	try
	{
		connection=DbConnection.getConnectionObject();
		callstmt= connection.prepareCall(sqlAdditionalNodeFlagCheck);	
		callstmt.setInt(1, objDto.getServiceId());	
		callstmt.setInt(2, objDto.getServiceProductID());
		rs = callstmt.executeQuery();
		while(rs.next())
		{			
			additionalNodeFlag = rs.getInt("FLAG");
		}
	}
	catch(Exception ex )
	{
		//ex.printStackTrace();	
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
	}
	finally
	{
		try 
		{
			DbConnection.closeResultset(rs);
			DbConnection.closeCallableStatement(callstmt);
			DbConnection.freeConnection(connection);
		} 
		catch (SQLException e) 
		{
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
	}
	return additionalNodeFlag;
}


/*Function:getServiceType_OrderSourceClepErp
 * Purpose:To find Service Type and Order source for send response after aproval
 * Created By:Anil Kumar
 * Date:25-Jan-2012
 */
public ViewOrderDto getServiceType_OrderSourceClepErp(long taskid,int isFromAproval){
	//Nagarjuna	
	String methodName="getServiceType_OrderSourceClepErp", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	ViewOrderDto objViewDto=new ViewOrderDto();
	Connection connection =null;
	CallableStatement clblstmt =null;
	String xmlResponseProcessData=null;
	try{
		connection=DbConnection.getConnectionObject();
		clblstmt=connection.prepareCall(spGetServiceTypeAndOrderSourceClep);
		clblstmt.setLong(1, taskid);
		clblstmt.setLong(2,isFromAproval);//THIS PROC USED FROM APROVAL if isFromAproval=1
		clblstmt.setLong(3, 0);//ServiceTypeIdOut
		clblstmt.setString(4, "");//order_sourceidout
		clblstmt.setNull(5, java.sql.Types.CLOB);//Response_Msgout
		clblstmt.setLong(6, 0);//Clep FileId Out
		clblstmt.setLong(7, 0);//ORDER NO OUT
		clblstmt.setInt(8, 0);//is billing trigger done out
		clblstmt.setString(9, "");//Clep Corellationid out
		clblstmt.setString(10, "");
		clblstmt.setLong(11, 0);
		clblstmt.setString(12, "");
		clblstmt.setInt(13, 0);//ISCOPCSENT MSG OUT
		clblstmt.setString(14, "");//Vijay. order stage out 
		clblstmt.execute();
		
		Clob  resMsgout=clblstmt.getClob(5);		
		if(resMsgout!=null){
			byte byteArr[]=Utility.clobToByteArray(resMsgout);
			xmlResponseProcessData=new String(byteArr);
		}
		
		objViewDto.setServiceTypeID(clblstmt.getLong(3));
		objViewDto.setOrder_creation_source(clblstmt.getString(4));
		objViewDto.setResponseClepOrderMsgAfterAproval(xmlResponseProcessData);
		objViewDto.setClepFileId(clblstmt.getLong(6));
		objViewDto.setOrderno(clblstmt.getLong(7));
		objViewDto.setIsBTDone(clblstmt.getInt(8));
		objViewDto.setClepJMSReqMsgId(clblstmt.getString(9));	
		objViewDto.setIsCOPCSentMsgToMPP(clblstmt.getInt(13));
		//vijay set the current order stage
		objViewDto.setOrderStage(clblstmt.getString(14));
		//vijay end
		
		
	}catch(Exception ex){		
		//ex.printStackTrace();
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
	}finally
	{
		try 
		{
			DbConnection.closeCallableStatement(clblstmt);
			DbConnection.freeConnection(connection);
		} 
		catch (SQLException e) 
		{
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		} catch (Exception e) {
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
	}
	return objViewDto;
}
//end CLEP

/*Function:cancelOrderForClep
 * Purpose:To find Service Type and other inforormation that is need to be send a milestone to clep 
 * after order cancelation
 * Created By:Vijay Pathak
 * Date:20-Sep-2013
 */
public static String spGetCancelOrderclep= "{call IOE.SPCLEP_GETCANCELORDER(?,?,?,?,?,?,?,?,?,?)}";

public ViewOrderDto cancelOrderForClep(Long poNumber){
	ViewOrderDto objViewDto=new ViewOrderDto();
	Connection connection =null;
	CallableStatement clblstmt =null;
	String xmlResponseProcessData=null;
	try{
		connection=DbConnection.getConnectionObject();
		clblstmt=connection.prepareCall(spGetCancelOrderclep);
		clblstmt.setLong(1, poNumber);
		clblstmt.setLong(2, 0);//ServiceTypeIdOut
		clblstmt.setString(3, "");//order_sourceidout
		clblstmt.setNull(4, java.sql.Types.CLOB);//Response_Msgout
		clblstmt.setLong(5, 0);//Clep FileId Out
		clblstmt.setString(6, "");//Clep Corellationid out
		clblstmt.setString(7, "");
		clblstmt.setLong(8, 0);
		clblstmt.setString(9, "");
		clblstmt.setString(10, ""); 
		clblstmt.execute();
		
		Clob  resMsgout=clblstmt.getClob(4);		
		if(resMsgout!=null){
			byte byteArr[]=Utility.clobToByteArray(resMsgout);
			xmlResponseProcessData=new String(byteArr);
		}
		objViewDto.setOrderno(poNumber);
		
		objViewDto.setServiceTypeID(clblstmt.getLong(2));
		objViewDto.setOrder_creation_source(clblstmt.getString(3));
		
		//setResponseClepOrderMsgAfterAproval() this setter method here using for set cancel response after
		//cancel order, it is not related to approval  
		objViewDto.setResponseClepOrderMsgAfterAproval(xmlResponseProcessData);
		objViewDto.setClepFileId(clblstmt.getLong(5));
		objViewDto.setClepJMSReqMsgId(clblstmt.getString(6));	
			
		//vijay set the current order stage
	//	objViewDto.setOrderStage(clblstmt.getString(10));
		//vijay end
		
		
	}catch(Exception ex){		
		ex.printStackTrace();	
	}finally
	{
		try 
		{
			DbConnection.closeCallableStatement(clblstmt);
			DbConnection.freeConnection(connection);
		} 
		catch (SQLException e) 
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	return objViewDto;
}
//end CLEP

/*Function:sendClepResponseToMpp
 * Purpose:To send clep response after aproval via neworder or changeorder
 * Created By:Anil Kumar
 * Date:25-Jan-2012
 */
public void sendClepResponseToMpp(CLEPXmlDto clepDto,long clepFileid,long orderNo,String isFromGUI){
	//Nagarjuna	
	String methodName="sendClepResponseToMpp", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection conn=null;
	String responseMsg="";
	try{
		conn=DbConnection.getConnectionObject();
		/*Vijay add condition for order insertion  that is isFromGUI will be 'N' */
		if("BT".equalsIgnoreCase(isFromGUI) || "N".equalsIgnoreCase(isFromGUI)){
			
			//Start [131] modularise the code
			if("BT".equalsIgnoreCase(isFromGUI)){
							
				responseMsg=constructBTResponse(clepDto,orderNo, clepFileid,  conn);
				
			//End [131]
			}	
			else if("N".equalsIgnoreCase(isFromGUI)){
				String jmsID=clepDto.getJmsMessageID();
				responseMsg=clepDto.getXmlData();
				responseMsg=ParseXMLForChangeOrder.attachBillableAccountToResponse(orderNo, clepFileid, responseMsg, jmsID, conn);
				
				CLEPUtility.SysErr("--------------- Sending Response to Mpp After Order Creation Successfully >>>>>>>>>>>>>");
				/*in Order Creation the xml should be contain stage "AM"  
				 * So find the tag of stage if stage is not available then add stage tag with AM value*/
				if(responseMsg.contains("<Ib2bMessage>")){
					//if stage tag is not available then add this tag with AM value after this tag </Status>
					responseMsg = responseMsg.replace("<Ib2bMessage>", "<Ib2bMessage>Order is waiting for AM approval");
				}
				if(! responseMsg.contains("</Stage>")){
					//if stage tag is not available then add this tag with AM value after this tag </Status>
					responseMsg = responseMsg.replace("</Status>", "</Status><Stage>AM</Stage>");
				}
				
				/*set the ib2b msg in response xml */
			}	
			
			clepDto.setXmlData(responseMsg);
		}else if("Y".equalsIgnoreCase(isFromGUI)){ 
			responseMsg=clepDto.getXmlData();
			 if("COPC".equalsIgnoreCase(clepDto.getStage())){
				/*in COPC response msg stage should be RFET because of last approval  
				 * So find the tag of stage, if stage is not available then add stage tag with 'RFBT' value*/
				
				/* solve the bug id MASDB00195669*/
				
				/*now stage is going to remove from copc response */
				/*if(! responseMsg.contains("</Stage>")){
					//if stage tag is not available then add this tag with null value after this tag </Status>
					responseMsg = responseMsg.replace("</Status>", "</Status><Stage></Stage>");
				}*/
				
				
				/* Here we are replacing the value that is not necessary during copc approval  */
				if(responseMsg.contains("<Ib2bMessage>")){
					//set the ib2b msg in msg response  
					responseMsg = responseMsg.replace("<Ib2bMessage>", "<Ib2bMessage>Order is waiting for RFBT");
				}
				String jmsID=clepDto.getJmsMessageID();
				responseMsg=ParseXMLForChangeOrder.attachBillableAccountToResponse(orderNo, clepFileid, responseMsg, jmsID, conn);
				clepDto.setXmlData(responseMsg);
				/*end of  MASDB00195669 */
			}
		
			CLEPUtility.SysErr("--------------- Sending Response to Mpp After Aproval >>>>>>>>>>>>>");
		}
		ParseXMLforCLEP.sendXMLtoMPP(clepDto, clepFileid, "N",isFromGUI,conn);				
	}catch(Exception ex){	
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		//ex.printStackTrace();	
	}finally
	{
		try 
		{
			DbConnection.freeConnection(conn);
		} 
		catch (SQLException e) 
		{
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		} catch (Exception e) {
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
	}
}
//Start [131]
public static String constructBTResponse(CLEPXmlDto clepDto,long orderNo, long clepFileid, Connection conn) {
	
	String jmsID=clepDto.getJmsMessageID();
	String responseMsg=clepDto.getXmlData();
	
	responseMsg=ParseXMLForChangeOrder.attachBillableAccountToResponse(orderNo, clepFileid, responseMsg, jmsID, conn);
	
	CLEPUtility.SysErr("--------------- Sending Response to Mpp After Billing Trigger Completed >>>>>>>>>>>>>");
	if(responseMsg.contains("<Ib2bMessage>")){
		//if stage tag is not available then add this tag with AM value after this tag </Status>
		responseMsg = responseMsg.replace("<Ib2bMessage>", "<Ib2bMessage>RFBT Completed");
	}
	
	return responseMsg;
}
//End [131]

/*Function:sendClepResponseToMppForCancel
 * Purpose:To send clep response after cancel via neworder or changeorder
 * Created By:Vijay Pathak
 * Date:20-Sept-2013
 */
public void sendClepResponseToMppForCancel(CLEPXmlDto clepDto,long clepFileid,long orderNo,String isFromGUI){
	Connection conn=null;
	String responseMsg="";
	try{
		conn=DbConnection.getConnectionObject();
		
		CLEPUtility.SysErr("--------------- Sending Response to Mpp After Order Cancel >>>>>>>>>>>>>");
		String jmsID=clepDto.getJmsMessageID();
		ParseXMLforCLEP.sendXMLtoMPP(clepDto, clepFileid, "N",isFromGUI,conn);
	}catch(Exception ex){		
		ex.printStackTrace();	
	}finally
	{
		try 
		{
			DbConnection.freeConnection(conn);
		} 
		catch (SQLException e) 
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}

//=======================================================================================================
public String getAutoSuggestServiceAttValidate(String nm,String roleid,String attrid,String sourceType, String paramId, String callType) throws Exception 
{
	//Nagarjuna	
	String methodName="getAutoSuggestServiceAttValidate", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection connection =null;
	CallableStatement callstmt =null;
	com.ibm.ioes.dbhelper.SQLHelper objSql = new com.ibm.ioes.dbhelper.SQLHelper();
	String jsonVal = "";
	String searchVal="";
	if(paramId==null || paramId.equals(""))
		paramId="0";
	try
	{
		searchVal=nm.trim();
		connection=DbConnection.getConnectionObject();
		//jsonVal = objSql.getJsonLableValueWithQuery(searchVal, "TEXT", "VALUE", "SELECT  TEXT,VALUE FROM  IOE.TPRODUCTDDVALUES WHERE  ATTMASTERID="+ attrid +" AND ISACTIVE=1 and FLAG='PRODUCT' and lower(TEXT)='"+searchVal.toLowerCase()+"'" , connection);
		List<String> labelValues = new ArrayList<String>();
		if("AUTOSUGGESTBCP".equalsIgnoreCase(attrid)){
			labelValues.add("BCPName");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues, "BCP_ID", "CALL IOE.GETBCPID_FOR_AUTOSUGGEST(?,?)" ,attrid,sourceType,connection,paramId);
		}else if("AUTOSUGGESTBCPSERVICE".equalsIgnoreCase(attrid)){
			labelValues.add("BCPName");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues, "BCP_ID", "CALL IOE.GETBCPID_FOR_AUTOSUGGEST(?,?)" ,attrid,sourceType,connection,paramId);
		}else if("AUTOSUGGESTDISPATCH".equalsIgnoreCase(attrid)){
			labelValues.add("DISPATCHName");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues, "DISPATCH_ADDRESS_CODE", "CALL IOE.GETDISPATCHID_FOR_AUTOSUGGEST(?,?)" ,attrid,sourceType,connection,paramId);
		//Start [085]
		}else if("AUTOSUGGESTPRICUSTLOC".equalsIgnoreCase(attrid) || "AUTOSUGGESTSECCUSTLOC".equalsIgnoreCase(attrid)){
			labelValues.add("BCPName");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues, "BCP_ID", "CALL IOE.GETBCPDETAILS_WITH_DISPATCH_FOR_AUTOSUGGEST(?,?)" ,attrid,sourceType,connection,paramId);
		//End [085]
		}else if(null != attrid && "AUTOSUGGESTBILLTAXATION".equalsIgnoreCase(attrid.trim())){
			labelValues.add("TAXATIONVALUE");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues, "TAXATIONID", sqlGetTaxationMaster ,attrid,sourceType,connection,paramId);
		}else if(null != attrid && "AUTOSUGGESTLEGALENTITY".equalsIgnoreCase(attrid.trim())){
			labelValues.add("ENTITYNAME");
			if(null != sourceType && "CHANGE".equals(sourceType.trim().toUpperCase()) 
					&& null != callType && "CHANGECALL".equals(callType.trim().toUpperCase())){
				jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"ENTITYID", sqlGetPOEntityForBillingForChange ,attrid,sourceType,connection,paramId);
			}else{
				jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"ENTITYID", sqlGetPOEntityForBilling ,attrid,sourceType,connection,paramId);
			}
		}else if(null != attrid && "AUTOSUGGESTCP".equalsIgnoreCase(attrid.trim())){
			labelValues.add("CREDIT_PERIODNAME");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"CREDIT_PERIODID", sqlGetCreditPeriodMaster ,attrid,sourceType,connection,paramId);
		}else if(null != attrid && "AUTOSUGGESTCP".equalsIgnoreCase(attrid.trim())){
			labelValues.add("CREDIT_PERIODNAME");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"CREDIT_PERIODID", sqlGetCreditPeriodMaster ,attrid,sourceType,connection,paramId);
		}else if(null != attrid && "AUTOSUGGESTBILLINGFORMAT".equalsIgnoreCase(attrid.trim())){
			labelValues.add("BILLING_FORMATNAME");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"BILLING_FORMATID", sqlGetBillingFormatMaster ,attrid,sourceType,connection,paramId);
		}else if(null != attrid && "AUTOSUGGESTCUSTPODETAIL".equalsIgnoreCase(attrid.trim())){
			labelValues.add("CUSTPONUMBER");
			if(null != sourceType && "CHANGE1".equals(sourceType.trim().toUpperCase())){
				jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"PODETAILNUMBER", sqlGetPODetailForChangeView ,attrid,sourceType,connection,paramId);
			}else{
				labelValues.add("POREMARKS");
				jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"PODETAILNUMBER", sqlGetPODetailForProduct ,attrid,sourceType,connection,paramId);
			}
		}else if(null != attrid && "AUTOSUGGESTBILLINGMODE".equalsIgnoreCase(attrid.trim())){
			labelValues.add("BILLINGMODENAME");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"BILLINGMODEID", "{call IOE.SP_GETBILLINGMODE(?)}" ,attrid,sourceType,connection,paramId);
		}else if(null != attrid && "AUTOSUGGESTSALETYPE".equalsIgnoreCase(attrid.trim())){
			labelValues.add("SALETYPENAME");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"SALETYPEID", sqlGetSaleType ,attrid,sourceType,connection,paramId);
		}else if(null != attrid && "AUTOSUGGESTSALENATURE".equalsIgnoreCase(attrid.trim())){
			labelValues.add("SALENATURENAME");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"SALENATUREID", sqlGetSaleNature ,attrid,sourceType,connection,paramId);
		}else if(null != attrid && "AUTOSUGGESTCHARGENAME".equalsIgnoreCase(attrid.trim())){
			labelValues.add("CHARGE_NAME");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"MAPPING_ID", "{call IOE.GETCHARGENAME_AUTOSUGGEST(?,?,?,?)}" ,attrid,sourceType,connection,paramId);
		}else if(null != attrid && "AUTOSUGGESTREASON".equalsIgnoreCase(attrid.trim())){
			labelValues.add("REASONNAME");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"STANDARDREASONID", sqlgetStandardReasonForChange ,attrid,sourceType,connection,paramId);
		}else if(null != attrid && "AUTOSUGGESTSTORE".equalsIgnoreCase(attrid.trim())){
			labelValues.add("STORENAME");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"STOREID", sqlGetStore ,attrid,sourceType,connection,paramId);
		}else if(null != attrid && "AUTOSUGGESTTEXTFORM".equalsIgnoreCase(attrid.trim())){
			labelValues.add("FORMNAME");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"FORMID", sqlGetFormAvailble ,attrid,sourceType,connection,paramId);
		}else if(null != attrid && "AUTOSUGGESTHTYPE".equalsIgnoreCase(attrid.trim())){
			labelValues.add("HARDWARETYPENAME");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"HARDWARETYPEID", sqlGetHardwareType ,attrid,sourceType,connection,paramId);
		}else if(null != attrid && "AUTOSUGGESTLICENSECO".equalsIgnoreCase(attrid.trim())){
			labelValues.add("LCOMPANYNAME");
			if(null != sourceType && "CHANGE".equals(sourceType.trim().toUpperCase()) 
					&& null != callType && "CHANGECALL".equals(callType.trim().toUpperCase())){
				jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"LCOMPANYID", sqlGetLicCompanyForChange ,attrid,sourceType,connection,paramId);
			}else{
				jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"LCOMPANYID", sqlGetLicCompany ,attrid,sourceType,connection,paramId);
			}
		}else if(null != attrid && "AUTOSUGGESTBILLINGTYPE".equalsIgnoreCase(attrid.trim())){
			labelValues.add("BILLING_TYPENAME");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"BILLING_TYPEID", sqlGetBillingTypeMaster ,attrid,sourceType,connection,paramId);
		}else if(null != attrid && "AUTOSUGGESTBILLINGLEVEL".equalsIgnoreCase(attrid.trim())){
			labelValues.add("BILLING_LEVELNAME");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"BILLING_LEVELID", sqlGetBillingLevelMaster ,attrid,sourceType,connection,paramId);
		}else{
			//[126] START
			jsonVal="";
			//labelValues.add("TEXT");
			//jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues, "VALUE", sqlGetEntityMaster ,attrid,sourceType,connection,paramId);
			//[126] END
		}
	}
	catch(Exception ex )
	{
		connection.rollback();
		//ex.printStackTrace();
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
	}
	finally
	{
		try 
		{
			DbConnection.closeCallableStatement(callstmt);
			DbConnection.freeConnection(connection);
		} 
		catch (SQLException e) 
		{
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
	}
	return jsonVal;
}
public String getAutoSuggestServiceAttribute(String nm,String roleid,String attrid,String sourceType, String paramId, String callType) throws Exception{
	
	//Nagarjuna	
	String methodName="getAutoSuggestServiceAttribute", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection connection =null;
	CallableStatement callstmt =null;
	com.ibm.ioes.dbhelper.SQLHelper objSql = new com.ibm.ioes.dbhelper.SQLHelper();
	String jsonVal = "";
	try{
		connection=DbConnection.getConnectionObject();
		//jsonVal = objSql.getJsonLableValueWithQuery(nm, "TEXT", "VALUE", "SELECT  TEXT,VALUE FROM  IOE.TPRODUCTDDVALUES WHERE  ATTMASTERID="+ attrid +" and ISACTIVE=1 and FLAG='PRODUCT' and lower(TEXT) like '%"+nm.toLowerCase()+"%'" , connection);
		List<String> labelValues = new ArrayList<String>();
		if("AUTOSUGGESTBCP".equalsIgnoreCase(attrid)){
			labelValues.add("BCPName");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues, "BCP_ID", "CALL IOE.GETBCPID_FOR_AUTOSUGGEST(?,?)" ,attrid,sourceType,connection,paramId);
		}
		//Added by Deepak
		else if(null != attrid && "AUTOSUGGESTITEMCODE".equalsIgnoreCase(attrid))
				{
					labelValues.add("ITEM_CODE");
					jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues, "ITEM_CODE_ID", "CALL IOE.GET_ITEM_CODE(?)",attrid,sourceType,connection,paramId);
				}
		else if(null != attrid && "AUTOSUGGESTDELLOCATION".equalsIgnoreCase(attrid))
				{
					labelValues.add("DELIVER_TO_LOCATN");
					jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues, "DEL_ID", "CALL IOE.GET_DELIVER_TO_LOCATN(?,?)",attrid,sourceType,connection,paramId);
				}
			else if(null != attrid && "AUTOSUGGESTSUBINVENTORY".equalsIgnoreCase(attrid))
				{
					labelValues.add("SUBINVENTORY");
					jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues, "SUBINV_ID", "CALL IOE.GET_SUBINVENTORY_SCM(?,?)",attrid,sourceType,connection,paramId);
				}
			else if(null != attrid && "AUTOSUGGESTBUDGHEAD".equalsIgnoreCase(attrid))
				{
					labelValues.add("AOP_BUDGET_HEAD1");
					jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues, "AOP1_ID", "CALL IOE.GET_BUDGET_HEAD_1(?)",attrid,sourceType,connection,paramId);
				}
				//end Deepak
		else if("AUTOSUGGESTBCPSERVICE".equalsIgnoreCase(attrid)){
			labelValues.add("BCPName");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues, "BCP_ID", "CALL IOE.GETBCPID_FOR_AUTOSUGGEST(?,?)" ,attrid,sourceType,connection,paramId);
		}else if("AUTOSUGGESTDISPATCH".equalsIgnoreCase(attrid)){
			labelValues.add("DISPATCHNAME");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues, "DISPATCH_ADDRESS_CODE", "CALL IOE.GETDISPATCHID_FOR_AUTOSUGGEST(?,?)" ,attrid,sourceType,connection,paramId);
//		Start [085]
		}else if("AUTOSUGGESTPRICUSTLOC".equalsIgnoreCase(attrid) || "AUTOSUGGESTSECCUSTLOC".equalsIgnoreCase(attrid)){
			labelValues.add("BCPName");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues, "BCP_ID", "CALL IOE.GETBCPDETAILS_WITH_DISPATCH_FOR_AUTOSUGGEST(?,?)" ,attrid,sourceType,connection,paramId);
//		End [085]	
		}else if("AUTOSUGGESTCLSI".equalsIgnoreCase(attrid)){
			labelValues.add("CLSI");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues, "CLSI", "CALL IOE.GETCLSI_FOR_AUTOSUGGEST(?,?)" ,attrid,sourceType,connection,paramId);
		}else if("AUTOSUGGESTLSI".equalsIgnoreCase(attrid)){
			labelValues.add("LSI");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues, "LSI", "CALL IOE.GETLSI_FOR_AUTOSUGGEST(?,?)" ,attrid,sourceType,connection,paramId);
		}else if(null != attrid && "AUTOSUGGESTBILLTAXATION".equalsIgnoreCase(attrid.trim())){
			labelValues.add("TAXATIONVALUE");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"TAXATIONID", sqlGetTaxationMaster ,attrid,sourceType,connection,paramId);
		}else if(null != attrid && "AUTOSUGGESTLEGALENTITY".equalsIgnoreCase(attrid.trim())){
			labelValues.add("ENTITYNAME");
			if(null != sourceType && "CHANGE".equals(sourceType.trim().toUpperCase()) 
					&& null != callType && "CHANGECALL".equals(callType.trim().toUpperCase())){
				jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"ENTITYID", sqlGetPOEntityForBillingForChange ,attrid,sourceType,connection,paramId);
			}else{
				jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"ENTITYID", sqlGetPOEntityForBilling ,attrid,sourceType,connection,paramId);
			}
		}else if(null != attrid && "AUTOSUGGESTCP".equalsIgnoreCase(attrid.trim())){
			labelValues.add("CREDIT_PERIODNAME");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"CREDIT_PERIODID", sqlGetCreditPeriodMaster ,attrid,sourceType,connection,paramId);
		}else if(null != attrid && "AUTOSUGGESTBILLINGFORMAT".equalsIgnoreCase(attrid.trim())){
			labelValues.add("BILLING_FORMATNAME");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"BILLING_FORMATID", sqlGetBillingFormatMaster ,attrid,sourceType,connection,paramId);
		}else if(null != attrid && "AUTOSUGGESTCUSTPODETAIL".equalsIgnoreCase(attrid.trim())){
			labelValues.add("CUSTPONUMBER");
			if(null != sourceType && "CHANGE1".equals(sourceType.trim().toUpperCase())){
				jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"PODETAILNUMBER", sqlGetPODetailForChangeView ,attrid,sourceType,connection,paramId);
			}else{
				labelValues.add("POREMARKS");
				jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"PODETAILNUMBER", sqlGetPODetailForProduct ,attrid,sourceType,connection,paramId);
			}
		}else if(null != attrid && "AUTOSUGGESTBILLINGMODE".equalsIgnoreCase(attrid.trim())){
			labelValues.add("BILLINGMODENAME");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"BILLINGMODEID", "{call IOE.SP_GETBILLINGMODE(?)}" ,attrid,sourceType,connection,paramId);
		}else if(null != attrid && "AUTOSUGGESTSALETYPE".equalsIgnoreCase(attrid.trim())){
			labelValues.add("SALETYPENAME");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"SALETYPEID", sqlGetSaleType ,attrid,sourceType,connection,paramId);
		}else if(null != attrid && "AUTOSUGGESTSALENATURE".equalsIgnoreCase(attrid.trim())){
			labelValues.add("SALENATURENAME");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"SALENATUREID", sqlGetSaleNature ,attrid,sourceType,connection,paramId);
		}else if(null != attrid && "AUTOSUGGESTCHARGENAME".equalsIgnoreCase(attrid.trim())){
			labelValues.add("CHARGE_NAME");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"MAPPING_ID", "{call IOE.GETCHARGENAME_AUTOSUGGEST(?,?,?,?)}" ,attrid,sourceType,connection,paramId);
		}else if(null != attrid && "AUTOSUGGESTREASON".equalsIgnoreCase(attrid.trim())){
			labelValues.add("REASONNAME");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"STANDARDREASONID", sqlgetStandardReasonForChange ,attrid,sourceType,connection,paramId);
		}else if(null != attrid && "AUTOSUGGESTSTORE".equalsIgnoreCase(attrid.trim())){
			labelValues.add("STORENAME");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"STOREID", sqlGetStore ,attrid,sourceType,connection,paramId);
		}else if(null != attrid && "AUTOSUGGESTTEXTFORM".equalsIgnoreCase(attrid.trim())){
			labelValues.add("FORMNAME");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"FORMID", sqlGetFormAvailble ,attrid,sourceType,connection,paramId);
		}else if(null != attrid && "AUTOSUGGESTHTYPE".equalsIgnoreCase(attrid.trim())){
			labelValues.add("HARDWARETYPENAME");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"HARDWARETYPEID", sqlGetHardwareType ,attrid,sourceType,connection,paramId);
		}else if(null != attrid && "AUTOSUGGESTLICENSECO".equalsIgnoreCase(attrid.trim())){
			labelValues.add("LCOMPANYNAME");
			if(null != sourceType && "CHANGE".equals(sourceType.trim().toUpperCase()) 
					&& null != callType && "CHANGECALL".equals(callType.trim().toUpperCase())){
				jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"LCOMPANYID", sqlGetLicCompanyForChange ,attrid,sourceType,connection,paramId);
			}else{
				jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"LCOMPANYID", sqlGetLicCompany ,attrid,sourceType,connection,paramId);
			}
		}else if(null != attrid && "AUTOSUGGESTBILLINGTYPE".equalsIgnoreCase(attrid.trim())){
			labelValues.add("BILLING_TYPENAME");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"BILLING_TYPEID", sqlGetBillingTypeMaster ,attrid,sourceType,connection,paramId);
		}else if(null != attrid && "AUTOSUGGESTBILLINGLEVEL".equalsIgnoreCase(attrid.trim())){
			labelValues.add("BILLING_LEVELNAME");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues,"BILLING_LEVELID", sqlGetBillingLevelMaster ,attrid,sourceType,connection,paramId);
		}else if (null != attrid && "AUTOSUGGESTCHANGEREASON".equalsIgnoreCase(attrid.trim())){ 
			labelValues.add("REASONNAME");// added by shubhranshu, 26-05-16
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues, "REASON_ID", "CALL IOE.GETREASONFORCHANGE(?,?)" ,attrid,sourceType,connection,paramId);										
		}else{
			labelValues.add("TEXT");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues, "VALUE", "CALL IOE.GETSERVICESUMMARY_AUTOSUGGEST_VALUES(?,?,?,?)" ,attrid,sourceType,connection,paramId);
		}
	}
	catch(Exception ex ){
		connection.rollback();
		//ex.printStackTrace();
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
	}finally{
		try{
			DbConnection.closeCallableStatement(callstmt);
			DbConnection.freeConnection(connection);
		}catch (SQLException e){
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
	}
	return jsonVal;
}
//=============================================================================================================
//PAGING-SERVICE-LINE-14-10-2012
/**
 * Method modified to improve the performance in fetching the service lists.
 * Major change is at procedure level in which the procedure (GETPOSERVICELIST_PAGING) is divided into three procedures
 * (MODIFIED_DETAIL_GETPOSERVICELIST_PAGING, MODIFIED_COUNT_PROGRESS_STATUS_GETPOSERVICELIST_PAGING, MODIFIED_TOTAL_COUNT_GETPOSERVICELIST_PAGING)
 * 
 * @param objDto
 * @return
 * 
 * @throws Exception
 */
public ArrayList<NewOrderDto> fetechServiceListWithPaging(PagingDto objDto) throws Exception{
	
	//Nagarjuna	
	String methodName="fetechServiceListWithPaging", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Long startTime = System.currentTimeMillis();
	Connection connection1 =null;
	Connection connection2 =null;
	Connection connection3 =null;
	
	CallableStatement callstmt1 =null;
	CallableStatement callstmt2 =null;
	CallableStatement callstmt3 =null;
	
	ResultSet rs1 = null;
	ResultSet rs2 = null;
	ResultSet rs3 = null;	
	NewOrderDto objRetDto = null;
	
	ArrayList<NewOrderDto> lstServiceList = new ArrayList<NewOrderDto>();
	Integer totalServicesCount = null;
	
	try{
		connection1=DbConnection.getConnectionObject();
		connection2=DbConnection.getConnectionObject();
		connection3=DbConnection.getConnectionObject();
		
		//connection1.setAutoCommit(false);
		//connection2.setAutoCommit(false);
		//connection3.setAutoCommit(false);
		
		//getting count progress status
		callstmt2= connection2.prepareCall(sqlGetServiceStatusCount);
		callstmt2.setLong(1, Long.valueOf(objDto.getPoNumber()));
		callstmt2.setMaxRows(10);
		rs2 = callstmt2.executeQuery();
		
		//Map containing key as the service status and values as count 
		Map<String, Integer> serviceStatusCount = null;
		String m6FXProgresStatus = null;
		Integer count = null;
		Integer iSServiceInactive = null;
		while(rs2.next()){
			if(null == serviceStatusCount)
				serviceStatusCount = new HashMap<String, Integer>();
			
			m6FXProgresStatus = rs2.getString("M6_FX_PROGRESS_STATUS");
			count = rs2.getInt("COUNT");
			iSServiceInactive = rs2.getInt("IS_SERVICE_INACTIVE");
			if((null == m6FXProgresStatus ||"".equals(m6FXProgresStatus)) && iSServiceInactive == 0)
				serviceStatusCount.put("TOTALNEW", count);
			else if("FX_BT_END".equals(m6FXProgresStatus))
				serviceStatusCount.put("TOT_BILL_TRG_END", count);
			else if("M6_START".equals(m6FXProgresStatus))
				serviceStatusCount.put("TOT_PROS_M6", count);
			else if("M6_FAILED".equals(m6FXProgresStatus))
				serviceStatusCount.put("TOT_M6_FAILED", count);
			else if("M6_SUCCESS".equals(m6FXProgresStatus))
				serviceStatusCount.put("TOT_M6_SUCCESS", count);
			else if("M6_END-FX_BT_START".equals(m6FXProgresStatus))
				serviceStatusCount.put("TOT_READY_BT", count);
			else if("M6_CANCELLED".equals(m6FXProgresStatus))
				serviceStatusCount.put("TOT_CANCEL_M6", count);
			else if(iSServiceInactive == 1)
				serviceStatusCount.put("TOT_CANCEL_CRM", count);
			else if(iSServiceInactive == 2)
				serviceStatusCount.put("TOT_CANCEL_COPY", count);			
		}
		
		//getting total count of services
		callstmt3= connection3.prepareCall(sqlGetTotalServiceCount);
		callstmt3.setLong(1, Long.valueOf(objDto.getPoNumber()));
		//[129] start
		callstmt3.setInt(2,objDto.getSearchLSI());
		callstmt3.setInt(3,objDto.getSearchServiceNo());
		//[129] end
		callstmt3.setMaxRows(1);
		rs3 = callstmt3.executeQuery();
		while(rs3.next()){
			totalServicesCount = rs3.getInt("COUNT");
		}
		
		if(null == totalServicesCount)
			totalServicesCount = 0;
		
		//getting Service list details
		callstmt1= connection1.prepareCall(sqlspPoServiceListWithPagingModified);	
		callstmt1.setLong(1, Long.valueOf(objDto.getPoNumber()));
		callstmt1.setLong(2, 0);
		callstmt1.setString(3,"");//SERVICE_STATUS
		callstmt1.setString(4,objDto.getSortBycolumn());
		callstmt1.setString(5,objDto.getSortByOrder());
		callstmt1.setInt(6,objDto.getStartIndex());
		callstmt1.setInt(7,objDto.getEndIndex());
		//[129] start
		callstmt1.setInt(8,objDto.getSearchLSI());
		callstmt1.setInt(9,objDto.getSearchServiceNo());
		//[129] end
		callstmt1.setMaxRows(25);
		rs1 = callstmt1.executeQuery();
		while(rs1.next()){
			 objRetDto =  new NewOrderDto();
			 objRetDto.getPagingSorting().setPageRecords(objDto.getPageRecords());
			 objRetDto.setServiceId(rs1.getInt("SERVICEID"));
			 objRetDto.setServiceTypeName(rs1.getString("SERVICETYPENAME"));
			 objRetDto.setServiceTypeId(rs1.getInt("SERVICETYPEID"));
			 objRetDto.setCustomer_logicalSINumber(rs1.getInt("CUSTOMER_LOGICAL_SI_NO"));
			 objRetDto.setLogicalSINumber(rs1.getInt("LOGICAL_SI_NO"));
			 objRetDto.setIsPublished(rs1.getInt("ISPUBLISHED"));
			 objRetDto.setServiceStatus(rs1.getString("M6_FX_PROGRESS_STATUS"));
			 objRetDto.setInitiated_to(rs1.getString("INITIATED_TO"));
			 objRetDto.setRole_id(rs1.getInt("ROLEID"));
			 objRetDto.setIsDummy(rs1.getInt("ISDUMMY"));
			 //adding one more column to show demo flag
			 objRetDto.setIsDemo(rs1.getInt("IS_DEMO"));
			 
			 
			 
			 //[123]-start
			 if (rs1.getString("CANCELLATION_REASON") != null && !"".equals(rs1.getString("CANCELLATION_REASON")))
				{

				 objRetDto.setServ_cancel_reson(rs1.getString("CANCELLATION_REASON"));
				 }else
					 objRetDto.setServ_cancel_reson("");
			 
			 if (rs1.getString("CANCEL_SERVICE_REASON") != null && !"".equals(rs1.getString("CANCEL_SERVICE_REASON")))
				{

				 objRetDto.setServ_cancel_remarks(rs1.getString("CANCEL_SERVICE_REASON"));
				 }else
					 objRetDto.setServ_cancel_remarks("");
			 
			 objRetDto.setService_cancelledby(rs1.getString("CANCELLEDBY"));
			 SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy");
			 
			 if (rs1.getString("CANCEL_DATE") != null && !"".equals(rs1.getString("CANCEL_DATE")))
				{

                      objRetDto.setService_cancl_date(sdf.format(rs1.getDate("CANCEL_DATE")));

				 }else
					 objRetDto.setService_cancl_date("");
			 
			//[123]-end
			 
			 
			 
			 
			 int atts=rs1.getInt("PRODUCTATT");
			 if(atts>0)
				 objRetDto.setPrdAttrEntered(1);	
			 else
				 objRetDto.setPrdAttrEntered(0);
			objRetDto.setServAttrEntered(rs1.getInt("ISSERVATTRENTERED"));
			 
			int pcatelog=rs1.getInt("PRODUCTCATELOG");
			if(pcatelog>0)
				objRetDto.setProductCatelogEntered(1);	
			else
				objRetDto.setProductCatelogEntered(0);
			objRetDto.setIsServiceActive(rs1.getInt("IS_SERVICE_INACTIVE"));
			objRetDto.setIsServiceCreatedAfterCancelCopy(rs1.getInt("IS_SERVICE_COPIED_AFTER_CANCEL"));
			
			objRetDto.setTotal_services(totalServicesCount);
			objRetDto.getPagingSorting().setRecordCount(totalServicesCount);	
			objRetDto.setMaxPageNo(objRetDto.getPagingSorting().getMaxPageNumber());
			
			//As the
			if(serviceStatusCount.containsKey("TOT_READY_BT"))
				objRetDto.setTotal_billing_trigger(serviceStatusCount.get("TOT_READY_BT"));
			else
				objRetDto.setTotal_billing_trigger(0);
			
			if(serviceStatusCount.containsKey("TOT_BILL_TRG_END"))
				objRetDto.setTotal_billing_trigger_end(serviceStatusCount.get("TOT_BILL_TRG_END"));
			else
				objRetDto.setTotal_billing_trigger_end(0);
			
			if(serviceStatusCount.containsKey("TOT_CANCEL_COPY"))
				objRetDto.setTotal_cancel_copy(serviceStatusCount.get("TOT_CANCEL_COPY"));
			else
				objRetDto.setTotal_cancel_copy(0);
			
			if(serviceStatusCount.containsKey("TOT_CANCEL_CRM"))
				objRetDto.setTotal_cancel_crm(serviceStatusCount.get("TOT_CANCEL_CRM"));
			else
				objRetDto.setTotal_cancel_crm(0);
			
			if(serviceStatusCount.containsKey("TOT_CANCEL_M6"))
				objRetDto.setTotal_cancel_m6(serviceStatusCount.get("TOT_CANCEL_M6"));
			else
				objRetDto.setTotal_cancel_m6(0);
			
			if(serviceStatusCount.containsKey("TOT_PROS_M6"))
				objRetDto.setTotal_m6_processing(serviceStatusCount.get("TOT_PROS_M6"));
			else
				objRetDto.setTotal_m6_processing(0);
			
			if(serviceStatusCount.containsKey("TOTALNEW"))
				objRetDto.setTotal_new_services(serviceStatusCount.get("TOTALNEW"));
			else
				objRetDto.setTotal_new_services(0);
			
			if(serviceStatusCount.containsKey("TOT_M6_FAILED"))
				objRetDto.setTotal_m6_failed(serviceStatusCount.get("TOT_M6_FAILED"));
			else
				objRetDto.setTotal_m6_failed(0);
			
			if(serviceStatusCount.containsKey("TOT_M6_SUCCESS"))
				objRetDto.setTotal_m6_success(serviceStatusCount.get("TOT_M6_SUCCESS"));
			else
				objRetDto.setTotal_m6_success(0);
			
			lstServiceList.add(objRetDto);
		}
		
	}
	catch(Exception ex ){
		/*connection1.rollback();
		connection2.rollback();
		connection3.rollback();*/
		//ex.printStackTrace();
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
	}
	finally{
		try{
			/*rs1.close();
			callstmt1.close();*/
			DbConnection.closeResultset(rs1);
			DbConnection.closeCallableStatement(callstmt1);
			DbConnection.freeConnection(connection1);
			/*rs2.close();
			callstmt2.close();*/
			DbConnection.closeResultset(rs2);
			DbConnection.closeCallableStatement(callstmt2);
			DbConnection.freeConnection(connection2);
			/*rs3.close();
			callstmt3.close();*/
			DbConnection.closeResultset(rs3);
			DbConnection.closeCallableStatement(callstmt3);
			DbConnection.freeConnection(connection3);
		}catch (SQLException e){
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
	}
	Long endTime = System.currentTimeMillis();
	//System.out.println("******Method end time" + String.valueOf(endTime - startTime));
	return lstServiceList;
}
//PAGING-SERVICE-LINE-14-10-2012


//084 start

//public ArrayList<DisconnectOrderDto> viewPDOrderList(DisconnectOrderDto objDto)throws Exception 
//[138]
public ArrayList<DisconnectOrderDto> viewPDOrderList(DisconnectOrderDto objDto,UserInfoDto objUserDto)throws Exception 
{
	//	Nagarjuna	
	String methodName="viewPDOrderList", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
   ArrayList<DisconnectOrderDto> objOrderList = new ArrayList<DisconnectOrderDto>();
   Connection conn = null;
   ResultSet rs = null;
   CallableStatement getOrder = null;

	try 
	{
		conn = DbConnection.getConnectionObject();
		getOrder = conn.prepareCall(sqlGetIncompletePDOrders);
		String searchCRMOrder = objDto.getSearchCRMOrder();
		String searchAccountNo  = objDto.getSearchAccountNo();
		String searchAccountName=objDto.getSearchAccountName();
		String searchfromDate=objDto.getSearchfromDate();
		String searchToDate = objDto.getSearchToDate();
		String searchSrno=objDto.getSearchSRNO();
		String searchLSI=objDto.getSearchLSI();
		String search_from_dis_date=objDto.getSearch_from_dis_date();
		String search_to_dis_date=objDto.getSearch_to_dis_date();
	
	
		if (searchCRMOrder == null || searchCRMOrder.trim().equals("")) {
			getOrder.setNull(1, java.sql.Types.BIGINT);
		} else {
			getOrder.setLong(1, Long.parseLong(searchCRMOrder));
		}
		
		if (searchAccountNo == null || searchAccountNo.trim().equals("")) {
			getOrder.setNull(2, java.sql.Types.BIGINT);
		} else {
			getOrder.setLong(2, Long.parseLong(searchAccountNo));
		}
		
		if (searchAccountName == null || searchAccountName.trim().equals("")) {
			getOrder.setNull(3, java.sql.Types.VARCHAR);
		} else {
			getOrder.setString(3, searchAccountName);
		}
		
		if (searchfromDate == null || searchfromDate.trim().equals("")) {
			getOrder.setNull(4, java.sql.Types.VARCHAR);
		} else {
			getOrder.setString(4, searchfromDate);
		}
		
		if (searchToDate == null || searchToDate.trim().equals("")) {
			getOrder.setNull(5, java.sql.Types.VARCHAR);
		} else {
			getOrder.setString(5, searchToDate);
		}
		
		if (searchSrno == null || searchSrno.trim().equals("")) {
			getOrder.setNull(6, java.sql.Types.VARCHAR);
		} else {
			getOrder.setString(6, searchSrno);
		}
		
		if (searchLSI == null || searchLSI.trim().equals("")) {
			getOrder.setNull(7, java.sql.Types.VARCHAR);
		} else {
			getOrder.setString(7, searchLSI);
		}
		
		if (search_from_dis_date == null || search_from_dis_date.trim().equals("")) {
			getOrder.setNull(8, java.sql.Types.VARCHAR);
		} else {
			getOrder.setString(8, search_from_dis_date);
		}
		
		if (search_to_dis_date == null || search_to_dis_date.trim().equals("")) {
			getOrder.setNull(9, java.sql.Types.VARCHAR);
		} else {
			getOrder.setString(9, search_to_dis_date);
		}
		
		
		SimpleDateFormat sdf  = new SimpleDateFormat("dd-MM-yyyy");
		PagingSorting pagingSorting = objDto.getPagingSorting();
		pagingSorting.sync();// To calculate start index and Enc Index
		
		getOrder.setString(10, pagingSorting.getSortByColumn());// columnName
		getOrder.setString(11, PagingSorting.DB_Asc_Desc1(pagingSorting
				.getSortByOrder()));// sort order
		getOrder.setInt(12, pagingSorting.getStartRecordId());// start index
		getOrder.setInt(13, pagingSorting.getEndRecordId());// end index
		getOrder.setInt(14, (pagingSorting.isPagingToBeDone() ? 1 : 0));// end
		// index
		//[138]
		getOrder.setLong(15, objUserDto.getRespId());
		rs = getOrder.executeQuery();
		
		int countFlag = 0;
		int recordCount = 0;
		while (rs.next() != false) {				
		countFlag++;
			objDto = new DisconnectOrderDto();
			objDto.setSearchCRMOrder(rs.getString("ORDERNO"));
			objDto.setSearchSRNO(Utility.fnCheckNull(rs.getString("SRNO")));
			objDto.setSrDate(Utility.fnCheckNull(rs.getString("SRDATE")));
			objDto.setSearchAccountNo(rs.getString("CRMACCOUNTNO"));
			objDto.setSearchAccountName(rs.getString("ACCOUNTNAME"));
			objDto.setSearchLSI(rs.getString("CUSTOMER_LOGICAL_SI_NO"));
			objDto.setRegion(rs.getString("REGIONNAME"));
			objDto.setServiceTypeName(rs.getString("SERVICETYPENAME"));
			objDto.setSearch_dis_date(Utility.fnCheckNull(rs.getString("DISCONNECTION_LOGIN_DATE")));
			objDto.setSr_raised_by(Utility.fnCheckNull(rs.getString("SR_RAISED_BY")));
			//[138]
			objDto.setOrderSource(rs.getString("ORDER_CREATION_SOURCE_NAME"));
			//[143]
			objDto.setOldModifiedDate(null==rs.getTimestamp("MODIFIEDDATE")?"":(rs.getTimestamp("MODIFIEDDATE").toString()));
		if (pagingSorting.isPagingToBeDone()) {
			recordCount = rs.getInt("FULL_REC_COUNT");
		}
	
		objOrderList.add(objDto);
	}
	pagingSorting.setRecordCount(recordCount);
} 
catch (Exception ex) {
	Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
	//ex.printStackTrace();
	throw new Exception("SQL Exception : " + ex.getMessage(), ex);
	} finally {
	try {
		rs.close();
		getOrder.close();
		DbConnection.freeConnection(conn);
	
	} catch (Exception e) {
		Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		//e.printStackTrace();
		throw new Exception("Exception : " + e.getMessage(), e);
	}
	}
return objOrderList;
}


//084 end

/// 085 start
//[143]
public DisconnectOrderDto cancelPDOrders(Connection conn,int orderNo,int empid,String flag,String modifiedDate) throws Exception 
{
	//	Nagarjuna	
	String methodName="cancelPDOrders", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	CallableStatement callstmt =null;
	DisconnectOrderDto newdto=new DisconnectOrderDto();
	String str="";
	String status = "";
	CallableStatement cst =null;
	//[143]
	if(modifiedDate.equals(""))
    {
    	cst=conn.prepareCall("UPDATE IOE.TPOMASTER SET STATUS='Valid',MODIFIEDDATE = CURRENT TIMESTAMP WHERE ORDERNO=? and MODIFIEDDATE is null ");
    	cst.setLong(1,orderNo);	
    }
    else
    {
    	cst=conn.prepareCall("UPDATE IOE.TPOMASTER SET STATUS='Valid',MODIFIEDDATE = CURRENT TIMESTAMP WHERE ORDERNO=? and MODIFIEDDATE = ? ");
    	cst.setLong(1,orderNo);	
    	java.sql.Timestamp ts = java.sql.Timestamp.valueOf(modifiedDate);
		cst.setTimestamp(2, ts);
    }
	int numberofupdatedrecords =cst.executeUpdate();
	if(numberofupdatedrecords!=0)
	{
		try{
			callstmt= conn.prepareCall(spcancelOrder);
			callstmt.setLong(1,orderNo);
			callstmt.setLong(2, 0);
			callstmt.setLong(3, 0);
			callstmt.setString(4, "");
			callstmt.setString(5, "AUTO DISCONNECTION CANCELLED");
			callstmt.setLong(6, 0);  
			callstmt.setLong(7, empid); 
	        callstmt.setString(8, flag);
			callstmt.execute();
			int err = callstmt.getInt(3);
			if(err==0)
			{
				status="Success";
				newdto.setCancelorderstatus(status);
				newdto.setOrderNumber(orderNo);
				cst=conn.prepareCall("update NPD.TM_AUTO_DISCONNECT_ORDER_DATA SET PROCESSING_STATUS=5, CANCEL_FLAG=1 , CANCEL_REASON='IB2B CANCELLED',LAST_UPDATE_DATE=CURRENT DATE,LAST_UPDATED_BY="+empid+" WHERE ORDERNO=?  ");
				cst.setLong(1, orderNo);
				int j = cst.executeUpdate();
			
				conn.commit();
			}
			else
			{
				status="Failure";
				conn.rollback();
				newdto.setCancelorderstatus(status);
				newdto.setOrderNumber(orderNo);
				
			}
	   }	
		catch(Exception ex )
		{
			conn.rollback();
			//ex.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
		}
	}	
	else
	{
		try{
			
			status="DoubleCancelled";
			conn.rollback();
			newdto.setCancelorderstatus(status);
			newdto.setOrderNumber(orderNo);
	
		}
		catch(Exception ex )
		{
			if(callstmt!=null)
			{
				conn.commit();
				callstmt.close();
				cst.close();
				
			}
			else
			{
				cst.close();
				conn.rollback();
				//ex.printStackTrace();
				Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);
			}
		}
	}	
	
	return newdto;
}

// 085  end

////////////086 start
//[143]
public DisconnectOrderDto fnapprovePDOrders(Connection conn,int orderNo,String roleid,String empid,String modifiedDate)throws Exception
{
	//	Nagarjuna	
	String methodName="fnapprovePDOrders", className=this.getClass().getName(), msg1="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	CallableStatement csWorkflow = null;
	CallableStatement csWorkflowClose=null;		
	String successStatus="";
	String validatePO="";
	OrderHeaderDTO objNewDto=new OrderHeaderDTO();
	objNewDto.setPoNumber(orderNo);
	DisconnectOrderDto statusdto=new DisconnectOrderDto();
	ViewOrderDao objdao=new ViewOrderDao();
	NewOrderDaoExt objNewExtDao=new NewOrderDaoExt();
	int errWorkflowClose=0;
	try{
			Utility.SysErr("-------- Order Validating start---------------");		
			validatePO = objNewExtDao.ValidateDisconnectionPO(objNewDto,conn);
			
		if("".equalsIgnoreCase(validatePO))
		{
			Utility.SysErr("-------- Validation complete---------------");	
			Utility.SysErr("------- Update Satus  >>>>>>>>>>>>>>");
			//[143] start
		    if(modifiedDate.equals(""))
		    {
		   
		    	csWorkflow=conn.prepareCall("UPDATE IOE.TPOMASTER SET STATUS='Valid',MODIFIEDDATE = CURRENT TIMESTAMP WHERE ORDERNO=? and MODIFIEDDATE is null ");
		    	csWorkflow.setLong(1,orderNo);	
		    }
		    else
		    {
		    
		    	csWorkflow=conn.prepareCall("UPDATE IOE.TPOMASTER SET STATUS='Valid',MODIFIEDDATE = CURRENT TIMESTAMP WHERE ORDERNO=? and MODIFIEDDATE = ? ");
		    	csWorkflow.setLong(1,orderNo);	
		    	java.sql.Timestamp ts = java.sql.Timestamp.valueOf(modifiedDate);
				csWorkflow.setTimestamp(2, ts);
		    }
			int numberofupdatedrecords =csWorkflow.executeUpdate();
			if(numberofupdatedrecords!=0)
			{ 
				//[143] end
				Utility.SysErr("------- Validating start 2  >>>>>>>>>>>>>>");
				csWorkflowClose= conn.prepareCall(sqlApproveDisconnectOrder);	
				csWorkflowClose.setString(1,empid);
				csWorkflowClose.setLong(2,orderNo);
				csWorkflowClose.setLong(3,0);
				csWorkflowClose.setLong(4,0);
				csWorkflowClose.setString(5,"");
				csWorkflowClose.execute();
				errWorkflowClose = csWorkflowClose.getInt(4);
			
			/*Vijay
			 * In Approval Case
			 * insert records into OB_Scheduler in case of COPC approval (auto approval in bulk uploading case)
			 * OB Calculation would be performed by scheduler later.
			 */
			if(errWorkflowClose ==0 ){
					boolean isObDataSuccessfullySave = OBCalculationDao
							.validateAndsaveDataIntoObScheduler(orderNo,
									OBCalculationDao.Yes,
									OBCalculationDao.BULK_Approval,
									OBCalculationDao.No, conn);
					if(! isObDataSuccessfullySave) 
						errWorkflowClose = 1;  //if data insertion fail in ob_scheduler table then set error flag to 1 so that conn can be rollback
				
			}		
			/*end of saving obdata value in OB_Scheduler */
			
			if(errWorkflowClose==0)
				{
					Utility.SysErr("------- publish is start against orderNo:"+orderNo+" >>>>>>>>>");
					int resCode=-1;														
					objNewDto.setOrder_type("CHANGE");
					objNewDto.setOrderInfo_OrderType("CHANGE");
					objNewDto.setOrderInfo_ChangeType(3);
					objNewDto.setPublished_by_empid(Long.parseLong(empid));
					objNewDto.setPublished_by_roleid(Long.parseLong(roleid));
					int publishStatus=objdao.getPublishResult(orderNo, "CHANGE", objNewDto,conn,"","","","");							
					if(publishStatus==0)
					{
											 
						Utility.SysErr("-------- Publish is done successfully against orderNo:-"+orderNo+" ----------");
						if(publishStatus==0)
						{
								Utility.SysErr("-------- Publish is done successfully against orderNo:-"+orderNo+" ----------");
								successStatus="Success";
								statusdto.setApprovestatus(successStatus);
								statusdto.setOrderNumber(orderNo);
								conn.commit();
								
						}else{
								Utility.SysErr("------- publish is Failed against orderNo:-"+orderNo+" --------");							
								successStatus="Failure";
								statusdto.setApprovestatus(successStatus);
								statusdto.setOrderNumber(orderNo);
								conn.rollback();
							}							
		
			         }
					else
					{
						Utility.SysErr("--------- Error: publishing FAILED --------");
						successStatus="Failure";
						statusdto.setApprovestatus(successStatus);
						statusdto.setOrderNumber(orderNo);
						conn.rollback();
					}							 
										 
			} // end errorworkflowclose
				
			else
				{
					Utility.SysErr("---------- Order not Approved ----------");
					successStatus="Failure";
					statusdto.setApprovestatus(successStatus);
					statusdto.setOrderNumber(orderNo);
					conn.rollback();
					//[143] 	
					}
			}
			else 
			{
				Utility.SysErr("----------- Following orders have failed because action has been taken already ---------");
				successStatus="DoubleApproval";
				statusdto.setApprovestatus(successStatus);
				statusdto.setOrderNumber(orderNo);
				conn.rollback();
				}
	
				
	 }// end of if validation		
	 else
	  {
		Utility.SysErr("----------- Due to error, Order can not validate!! ---------");
		String msg=validatePO;
		successStatus="Failure";
		statusdto.setApprovestatus(successStatus);
		statusdto.setOrderNumber(orderNo);
		conn.rollback();
	  }						
		
  }catch(Exception e){
	  	successStatus="Failure";
		statusdto.setApprovestatus(successStatus);
		conn.rollback();
		//e.printStackTrace();
		Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg1, logToFile, logToConsole);//Nagarjuna
		
		}
  finally {
		try {
			if(csWorkflowClose!= null)
			{
				
				csWorkflowClose.close();
				csWorkflow.close();
			}
			else 
			{
				csWorkflow.close();
			}
			
		
		} catch (Exception e) {
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg1, logToFile, logToConsole);//Nagarjuna
			//e.printStackTrace();
			throw new Exception("Exception : " + e.getMessage(), e);
		}	
	}
	
  
		return statusdto;
}	

// 086 end
//=============================================================================================================

private String sqlFetchRedirectedLSIBeforeDeleteCancel="{call IOE.SP_GET_REDIRECTEDLSI_LIST_BEFORE_DELETING_SERVICE(?,?)}";
public NewOrderDto validateServicesWithRedirectedLSIBeforeDelete(NewOrderDto objdto) throws Exception 
{
	//	Nagarjuna	
	String methodName="validateServicesWithRedirectedLSIBeforeDelete", className=this.getClass().getName(), msg1="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	String redirectedLsiList="",serviceIdStr="";
	int redirectedLsiNo=0;
	Connection conn = null;		
	CallableStatement cstmt = null;
	ResultSet rs = null;
	NewOrderDto objNewOrderDto = new NewOrderDto();
	if(objdto.getServiceId()!=0)//Cancel and delete Services
		serviceIdStr=String.valueOf(objdto.getServiceId());
	else if(objdto.getServiceId1()!=null)//publish services
		serviceIdStr=objdto.getServiceId1();
	else if(objdto.getServiceIdString()!=null && objdto.getServiceId1()==null)//call from cancel n copy
		serviceIdStr=objdto.getServiceIdString();
	try
	{
		conn=DbConnection.getConnectionObject();
		conn.setAutoCommit(false);
		cstmt=conn.prepareCall(sqlFetchRedirectedLSIBeforeDeleteCancel);
		cstmt.setString(1,serviceIdStr);
		cstmt.setString(2,objdto.getRemarks());
	    rs=cstmt.executeQuery();
		while(rs.next())
		{
			if(rs.getInt("SELECTED_SERVICE_NO")!=redirectedLsiNo)
			{
				if(redirectedLsiList.equals(""))
				{
					redirectedLsiList="* Service No: "+rs.getString("SELECTED_SERVICE_NO")+", LSI No: "+rs.getString("LOGICAL_SI_NO")+"\n" 
					  +"\t(Line Item : "+rs.getString("SERVICEPRODUCTID")+", Service No: "+rs.getString("SERVICEID")+", Order No : "+rs.getString("ORDERNO")+")\n";
				}
				else
				{
					redirectedLsiList=redirectedLsiList+"* Service No: "+rs.getString("SELECTED_SERVICE_NO")+", LSI No: "+rs.getString("LOGICAL_SI_NO")+"\n" 
					  +"\t(Line Item : "+rs.getString("SERVICEPRODUCTID")+", Service No: "+rs.getString("SERVICEID")+", Order No : "+rs.getString("ORDERNO")+")\n";
				}
			}
			else
			{
				if(redirectedLsiList.equals(""))
				{
					redirectedLsiList="\t(Line Item : "+rs.getString("SERVICEPRODUCTID")+", Service No: "+rs.getString("SERVICEID")+", Order No : "+rs.getString("ORDERNO")+")\n";
				}
				else
				{
					redirectedLsiList=redirectedLsiList+"\t(Line Item : "+rs.getString("SERVICEPRODUCTID")+", Service No: "+rs.getString("SERVICEID")+", Order No : "+rs.getString("ORDERNO")+")\n";
				}
			}
			redirectedLsiNo=rs.getInt("SELECTED_SERVICE_NO");
		}
		if (!redirectedLsiList.equals(""))
		{
			redirectedLsiList="Charge is redirected into these services from below line items.\n"+
								"Please unmap these service from given line items to continue :-\n"+redirectedLsiList;
			objNewOrderDto.setMsgOut(redirectedLsiList);
		}
	}
	catch(Exception ex)
	{
		conn.rollback();
		//ex.printStackTrace();
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg1, logToFile, logToConsole);//Nagarjuna
	}
	finally
	{
		try 
		{
			DbConnection.closeResultset(rs);
			DbConnection.closeCallableStatement(cstmt);
			DbConnection.freeConnection(conn);
		} 
		catch (Exception e) 
		{
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg1, logToFile, logToConsole);//Nagarjuna
		}
	}
	return objNewOrderDto;
	
}

public NewOrderDto validateProductsWithRedirectedLSIBeforeDelete(NewOrderDto objdto) throws Exception 
{
	//	Nagarjuna	
	String methodName="validateProductsWithRedirectedLSIBeforeDelete", className=this.getClass().getName(), msg1="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	String redirectedLsiList="",productIdStr="";
	int redirectedSpidNo=0;
	Connection conn = null;		
	CallableStatement cstmt = null;
	ResultSet rs = null;
	NewOrderDto objNewOrderDto = new NewOrderDto();
	if(objdto.getProductIdString()!=null)//Delete Products
		productIdStr=String.valueOf(objdto.getProductIdString());
	try
	{
		conn=DbConnection.getConnectionObject();
		conn.setAutoCommit(false);
		cstmt=conn.prepareCall(sqlFetchRedirectedLSIBeforeDeleteCancel);
		cstmt.setString(1,productIdStr);
		cstmt.setString(2,objdto.getRemarks());
	    rs=cstmt.executeQuery();
		while(rs.next())
		{
			if(rs.getInt("FX_REDIRECTION_SPID")!=redirectedSpidNo)
			{
				if(redirectedLsiList.equals(""))
				{
					redirectedLsiList="* line Item No: "+rs.getString("FX_REDIRECTION_SPID")+", Service No: "+rs.getString("SELECTED_SERVICE_NO")+"\n" 
					  +"\t(Line Item : "+rs.getString("SERVICEPRODUCTID")+", Service No: "+rs.getString("SERVICEID")+", Order No : "+rs.getString("ORDERNO")+")\n";
				}
				else
				{
					redirectedLsiList=redirectedLsiList+"* line Item No: "+rs.getString("FX_REDIRECTION_SPID")+", Service No: "+rs.getString("SELECTED_SERVICE_NO")+"\n" 
					  +"\t(Line Item : "+rs.getString("SERVICEPRODUCTID")+", Service No: "+rs.getString("SERVICEID")+", Order No : "+rs.getString("ORDERNO")+")\n";
				}
			}
			else
			{
				if(redirectedLsiList.equals(""))
				{
					redirectedLsiList="\t(Line Item : "+rs.getString("SERVICEPRODUCTID")+", Service No: "+rs.getString("SERVICEID")+", Order No : "+rs.getString("ORDERNO")+")\n";
				}
				else
				{
					redirectedLsiList=redirectedLsiList+"\t(Line Item : "+rs.getString("SERVICEPRODUCTID")+", Service No: "+rs.getString("SERVICEID")+", Order No : "+rs.getString("ORDERNO")+")\n";
				}
			}
			redirectedSpidNo=rs.getInt("FX_REDIRECTION_SPID");
		}
		if (!redirectedLsiList.equals(""))
		{
			redirectedLsiList="Following lineitems are redirecting their charges.\n"+
								"Please unmap these lineitems from given line items to continue :-\n"+redirectedLsiList;
			objNewOrderDto.setMsgOut(redirectedLsiList);
		}
	}
	catch(Exception ex)
	{
		conn.rollback();
		//ex.printStackTrace();
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg1, logToFile, logToConsole);//Nagarjuna
	}
	finally
	{
		try 
		{
			DbConnection.closeResultset(rs);
			DbConnection.closeCallableStatement(cstmt);
			DbConnection.freeConnection(conn);
		} 
		catch (Exception e) 
		{
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg1, logToFile, logToConsole);//Nagarjuna
		}
	}
	return objNewOrderDto;
	
}

public NewOrderDto validateOrderWithRedirectedLSIBeforeCancel(NewOrderDto objdto) throws Exception 
{
	//	Nagarjuna	
	String methodName="validateOrderWithRedirectedLSIBeforeCancel", className=this.getClass().getName(), msg1="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	String redirectedLsiList="",orderNoStr="";
	int redirectedSpidNo=0;
	Connection conn = null;		
	CallableStatement cstmt = null;
	ResultSet rs = null;
	NewOrderDto objNewOrderDto = new NewOrderDto();
	if(objdto.getOrderNumber()!=0)//Delete Products
		orderNoStr=String.valueOf(objdto.getOrderNumber());
	try
	{
		conn=DbConnection.getConnectionObject();
		conn.setAutoCommit(false);
		cstmt=conn.prepareCall(sqlFetchRedirectedLSIBeforeDeleteCancel);
		cstmt.setString(1,orderNoStr);
		cstmt.setString(2,objdto.getRemarks());
	    rs=cstmt.executeQuery();
		while(rs.next())
		{
			if(rs.getInt("FX_REDIRECTION_SPID")!=redirectedSpidNo)
			{
				if(redirectedLsiList.equals(""))
				{
					redirectedLsiList="* Service No: "+rs.getString("SELECTED_SERVICE_NO")+"\n" 
					  +"\t(Line Item : "+rs.getString("SERVICEPRODUCTID")+", Service No: "+rs.getString("SERVICEID")+", Order No : "+rs.getString("ORDERNO")+")\n";
				}
				else
				{
					redirectedLsiList=redirectedLsiList+"* Service No: "+rs.getString("SELECTED_SERVICE_NO")+"\n" 
					  +"\t(Line Item : "+rs.getString("SERVICEPRODUCTID")+", Service No: "+rs.getString("SERVICEID")+", Order No : "+rs.getString("ORDERNO")+")\n";
				}
			}
			else
			{
				if(redirectedLsiList.equals(""))
				{
					redirectedLsiList="\t(Line Item : "+rs.getString("SERVICEPRODUCTID")+", Service No: "+rs.getString("SERVICEID")+", Order No : "+rs.getString("ORDERNO")+")\n";
				}
				else
				{
					redirectedLsiList=redirectedLsiList+"\t(Line Item : "+rs.getString("SERVICEPRODUCTID")+", Service No: "+rs.getString("SERVICEID")+", Order No : "+rs.getString("ORDERNO")+")\n";
				}
			}
			redirectedSpidNo=rs.getInt("FX_REDIRECTION_SPID");
		}
		if (!redirectedLsiList.equals(""))
		{
			redirectedLsiList="Order cannot be cancelled because charges are redirected into the LSI(s) of this order :\n"+
								"Please unmap the below LSIs/Services from line Items mentioned below them :\n"+redirectedLsiList;
			objNewOrderDto.setMsgOut(redirectedLsiList);
		}
	}
	catch(Exception ex)
	{
		conn.rollback();
		//ex.printStackTrace();
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg1, logToFile, logToConsole);//Nagarjuna
	}
	finally
	{
		try 
		{
			DbConnection.closeResultset(rs);
			DbConnection.closeCallableStatement(cstmt);
			DbConnection.freeConnection(conn);
		} 
		catch (Exception e) 
		{
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg1, logToFile, logToConsole);//Nagarjuna
		}
	}
	return objNewOrderDto;
	
}

public ArrayList<NewOrderDto> validateTaxRate(long orderno) 
{
	//	Nagarjuna	
	String methodName="validateTaxRate", className=this.getClass().getName(), msg1="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection connection =null;
	PreparedStatement getTaxDetails =null;
	ResultSet rsTaxRate = null;
	int count=1;
	NewOrderDto objNewOrderDto = null;
	ArrayList<NewOrderDto> listTaxRate = new ArrayList<NewOrderDto>();
	try
	{
		connection=DbConnection.getConnectionObject();
		getTaxDetails= connection.prepareCall(spvalidatetaxrate);
		getTaxDetails.setLong(1,orderno);
		rsTaxRate = getTaxDetails.executeQuery();
		while(rsTaxRate.next())
		{
			objNewOrderDto =  new NewOrderDto();
			objNewOrderDto.setServiceId(rsTaxRate.getInt("SERVICEID"));
			objNewOrderDto.setServiceProductID(rsTaxRate.getInt("SERVICEPRODUCTID"));
			objNewOrderDto.setSimilartaxrate(rsTaxRate.getInt("TAX_CLASS"));
			objNewOrderDto.setPodetailID(rsTaxRate.getInt("PODETAILNO"));
			listTaxRate.add(objNewOrderDto);
		}
		
	}
	catch(Exception ex )
	{
		//ex.printStackTrace();
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg1, logToFile, logToConsole);//Nagarjuna
	}
	finally
	{
		try 
		{
			DbConnection.closeResultset(rsTaxRate);
			DbConnection.closePreparedStatement(getTaxDetails);
			DbConnection.freeConnection(connection);
		} 
		catch (Exception e) 
		{
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg1, logToFile, logToConsole);//Nagarjuna
		}
	}
	return listTaxRate;
}


public int getCreatedinServiceid(long serviceproductid) 
{
	//	Nagarjuna	
	String methodName="getCreatedinServiceid", className=this.getClass().getName(), msg1="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection connection =null;
	PreparedStatement getServiceid =null;
	ResultSet rs = null;
	int serviceid=0;
	int count=1;
	try
	{
		connection=DbConnection.getConnectionObject();
		getServiceid= connection.prepareStatement(spgetServiceid);		
		getServiceid.setLong(1,serviceproductid);
		rs = getServiceid.executeQuery();
		while(rs.next())
		{
			serviceid=rs.getInt("SERVICEID");
		}
		
	}
	catch(Exception ex )
	{
		//ex.printStackTrace();
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg1, logToFile, logToConsole);//Nagarjuna
	}
	finally
	{
		try 
		{
			DbConnection.closeResultset(rs);
			DbConnection.closePreparedStatement(getServiceid);
			DbConnection.freeConnection(connection);
		} 
		catch (Exception e) 
		{
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg1, logToFile, logToConsole);//Nagarjuna
		}
	}
	return serviceid;
}

//[084]--start
public ServiceDto getChangeReasonNeffectiveDate(long serviceId) 
{	//Modified By Shubhranshu
	//	Nagarjuna	
		String methodName="getChangeReasonNeffectiveDate", className=this.getClass().getName(), msg1="";
			boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
				System.out.println("in newOrderDao....with ServiceId and its value is- "+serviceId);
					Connection connection =null;
						CallableStatement getChangeReason=null;
							ResultSet rs = null;
								ServiceDto sdto=new ServiceDto();
									try
										{
											connection=DbConnection.getConnectionObject();
												getChangeReason= connection.prepareCall(sqlgetChangeReasonNeffectiveDate2);
													getChangeReason.setLong(1,serviceId);
														rs = getChangeReason.executeQuery();
															while(rs.next())
																{
																	sdto.setValChangeReason(rs.getString("STANDARDREASON_ID")); //changeReason=rs.getString("STANDARDREASON_ID");//Start[HYPR22032013006]
																		sdto.setLblChangeReason(rs.getString("REASONNAME")); // changeReason Text 
																			sdto.setEffectiveDate(new SimpleDateFormat(AppConstants.DATE_FORMAT_PROC).format(rs.getDate("EFFECTIVEDATE")));			
																		}
																	}
																catch(Exception ex )
															{	
														Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg1, logToFile, logToConsole);//Nagarjuna
													}
												finally
											{
										try 
									{
								DbConnection.closeResultset(rs);
							DbConnection.closePreparedStatement(getChangeReason);
						DbConnection.freeConnection(connection);
					} 
				catch (Exception e) 
			 {
	    	Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg1, logToFile, logToConsole);//Nagarjuna
		 }
	   }
    return sdto; 
}	
//Shubhranshu,24-6-16
//[084]--end

private String sqlFetchVCSBridgeServicesBeforeDelete="{call IOE.SP_FETCH_VCSBRIDGE_SERVICE_BUNDLED(?,?,?,?,?)}";
private String sqlFetchL3MPLSServicesBeforeDelete="{call IOE.SP_FETCH_L3MPLS_SERVICE(?,?,?,?,?,?)}";
public NewOrderDto validateVCSServicesBeforeDelete(NewOrderDto objdto) throws Exception 
{    int vcsServiceId=0;
	//	Nagarjuna	
	String methodName="validateVCSServicesBeforeDelete", className=this.getClass().getName(), msg1="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	ServiceLineDTO objDto=null;
	String statusMsg=null;
	String strVCSServiceId="",strVCSLsi="";
	String stL3MPLSServiceId="",stL3MPLSLsi="";
	String serviceTypeName="";//VCS-ISP MApping as on date 12-feb-2013 : Ashutosh
	Connection con = null;		
	CallableStatement csDeleteService = null;
	ResultSet rsMatrixId = null;
	NewOrderDto objNewOrderDto = new NewOrderDto();
	ArrayList<String> serviceIDs = new ArrayList<String>();
	String serviceIdStr="";
	if(objdto.getServiceId()!=0)//Cancel and delete Services
		serviceIdStr=String.valueOf(objdto.getServiceId());
	else if(objdto.getServiceId1()!=null)//publish services
		serviceIdStr=objdto.getServiceId1();
	else if(objdto.getServiceIdString()!=null && objdto.getServiceId1()==null)//call from cancel n copy
		serviceIdStr=objdto.getServiceIdString();
	int recordCount=0;
	String message="",messageVCSBridge="";
	NewOrderDto objNewDto = null;
	ArrayList<NewOrderDto> arrList=null;
	HashMap<Integer,Integer> map_secServiceId_LSI=new HashMap<Integer,Integer>();
	HashMap<Integer,ArrayList> map_primLine_details=new HashMap<Integer,ArrayList>();
	HashMap<Integer,ServiceLineDTO> map_secServiceId_Details=new HashMap<Integer,ServiceLineDTO>();//added by anoop for OVCC
	Map<Long,ArrayList<ServiceLinkingDTO>> linkedValidationFailedLsiDataMap=null;
	/*Vijay
	 *add a array of int that hold the service ids whore are not eligilble to publish
	 *This is implementing because a publish All button is added in publish page
	 */
	HashMap<String,Integer> serviceIdMap; 
	boolean isPublishCaseAndLinkingScenarioExists =false; 
	try
	{
	    con=DbConnection.getConnectionObject();
	    con.setAutoCommit(false);
	    
	    if(objdto.getIsPublishedString()!=null)//if action is Publish
			if(detectSituationForPublishCondition(objdto.getOrderNumber(),con,"*")==true)
				isPublishCaseAndLinkingScenarioExists=true;
	    
	    if(objdto.getRemarks().equalsIgnoreCase("Publish") && isPublishCaseAndLinkingScenarioExists==false){
	    	return objNewOrderDto;
	    }
	    
	    csDeleteService=con.prepareCall(sqlFetchVCSBridgeServicesBeforeDelete);
	    csDeleteService.setString(1,serviceIdStr);
	    csDeleteService.setInt(2,objdto.getOrderNumber());
        csDeleteService.setInt(3,0);//Output Parameter
		csDeleteService.setInt(4,0);//Output Parameter
		csDeleteService.setString(5,"");//Output Parameter		
		rsMatrixId=csDeleteService.executeQuery();
		while(rsMatrixId.next())
		{
			objDto=new ServiceLineDTO();
		    objDto.setServiceName(rsMatrixId.getString("SERVICESTAGE")); // //done by anoop for OVCC
		    //System.out.println("objDto.setServiceName(rsMatrixId.getString('SERVICESTAGE'))"+rsMatrixId.getString("SERVICESTAGE"));
		    objDto.setServiceId(rsMatrixId.getInt("SERVICEID"));
		    objDto.setServiceTypeId(rsMatrixId.getInt("SERVICETYPEID"));
			map_secServiceId_Details.put(rsMatrixId.getInt("SERVICEID"),objDto );  //done by anoop for OVCC
			map_secServiceId_LSI.put(rsMatrixId.getInt("SERVICEID"), rsMatrixId.getInt("LOGICAL_SI_NO")) ;
			if(strVCSServiceId.equals(""))
			{
				strVCSServiceId=rsMatrixId.getString("SERVICEID");	
				strVCSLsi=rsMatrixId.getString("LOGICAL_SI_NO");
			}
			else
			{
				strVCSServiceId=strVCSServiceId+","+rsMatrixId.getString("SERVICEID");
				strVCSLsi=strVCSLsi+","+rsMatrixId.getString("LOGICAL_SI_NO");
			}
		}
		//[136] START
		boolean isAnyErrorForFirstValidationBlock=false;

		if(strVCSLsi!="")
		{
			csDeleteService=con.prepareCall(sqlFetchL3MPLSServicesBeforeDelete);
		    csDeleteService.setString(1,serviceIdStr);
		    csDeleteService.setInt(2,objdto.getOrderNumber());
		    csDeleteService.setString(3,strVCSLsi);
	        csDeleteService.setInt(4,0);//Output Parameter
			csDeleteService.setInt(5,0);//Output Parameter
			csDeleteService.setString(6,"");//Output Parameter		
			rsMatrixId=csDeleteService.executeQuery();
			while(rsMatrixId.next()) 
			{
				objNewDto=new NewOrderDto();
				arrList=new ArrayList<NewOrderDto>();
				objNewDto.setServiceId(rsMatrixId.getInt("L3MPLSE_SERVICEID"));
				objNewDto.setLogicalSINumber(rsMatrixId.getInt("VCS_BUNDLED_SERVICE"));
				objNewDto.setServiceDetailID(rsMatrixId.getInt("SERVICEDETAILID"));//Added for ISP OR L3mpls specific validation
				objNewDto.setServiceName(rsMatrixId.getString("SERVICENAME"));
				arrList.add(objNewDto);
				map_primLine_details.put(rsMatrixId.getInt("SERVICEPRODUCTID"), arrList) ;
				recordCount++;
			}
			if(recordCount>0)
			{   
				Set secServiceIds=map_secServiceId_LSI.keySet();
				Iterator itr_secServiceIds =secServiceIds.iterator();				
				
				ArrayList<NewOrderDto> list=new ArrayList<NewOrderDto>();
				/*Vijay 
				* Initialize the serviceIdMap array 
				*/
				serviceIdMap = new HashMap<String,Integer>();
				NewOrderDto newObj=null;
				int logicalSiNo=0;
		 
				int primLineId=0;
				while(itr_secServiceIds.hasNext())
				{
					vcsServiceId=(Integer)itr_secServiceIds.next();
					logicalSiNo=(Integer)map_secServiceId_LSI.get(vcsServiceId);
					//System.out.println("key :"+vcsServiceId);
					Set primLineIds=map_primLine_details.keySet();
					Iterator itr_primLineIds =primLineIds.iterator();
					boolean isErrorFoundForThisService=false;
					while(itr_primLineIds.hasNext())
					{
						primLineId=(Integer)itr_primLineIds.next();
						//System.out.println("key :"+primLineId);
						list =map_primLine_details.get(primLineId);
						for(int i=0; i<list.size(); i++)
						{
							//new NewOrderDto();
							newObj =list.get(i);
							//change for ISP name Display
							serviceTypeName=newObj.getServiceName();
							/*if(newObj.getServiceDetailID()==100000)
								serviceTypeName="ISP";
							else
								serviceTypeName="L3MPLS";*/
							if(newObj.getLogicalSINumber()==logicalSiNo)
							{
								boolean isError = true;
								
								if(objdto.getIsPublishedString()!=null){//if action is Publish
									//check if the PUBLISH_CONDITION for secondary and primary is SEC_WITH_OR_AFTER_PRIMARY then no error
									//TODO Vipin
									String priLineSecTypeCombi=newObj.getServiceDetailID()+"_"+map_secServiceId_Details.get(vcsServiceId).getServiceTypeId();
									if(/*null != ApplicationFlags.SERVICE_LINKING_MAP && */ApplicationFlags.SERVICE_LINKING_MAP.containsKey(priLineSecTypeCombi))
										if(!ApplicationFlags.SERVICE_LINKING_MAP.get(priLineSecTypeCombi).getPublishCondition().equalsIgnoreCase("SEC_WITH_OR_AFTER_PRIMARY"))
											isError=false;
								}
								
								if(isError){
									message=message+"    **"+  map_secServiceId_Details.get(vcsServiceId).getServiceName().substring(0,4) + "  Line Item :"+primLineId+" Under "+serviceTypeName+" Service :"+newObj.getServiceId()+"\n ";  //done by anoop for OVCC
									//System.out.println(map_secServiceId_Details.get(vcsServiceId).getServiceName().substring(0,4)+" "+vcsServiceId+" Are Mapped with "+ map_secServiceId_Details.get(vcsServiceId).getServiceName().substring(0,4) +"Line Item :"+primLineId+" Under "+serviceTypeName+" Service :"+newObj.getServiceId()); //done by anoop for OVCC
									
									/*Vijay. 
									 *Add here vcsServiceId/s in a map and retrun because these map should not be published
									 *Map contain a key and value, key & value are same that is service id(key) in form of String and service id(Integer) in form of integer  
									 */
									serviceIdMap.put(Integer.valueOf(vcsServiceId).toString(), vcsServiceId);	
									isAnyErrorForFirstValidationBlock=true;
									isErrorFoundForThisService=true;
								}
							}
						}
					}
					if(isErrorFoundForThisService){
						messageVCSBridge=messageVCSBridge+" * "+map_secServiceId_Details.get(vcsServiceId).getServiceName()+" "+vcsServiceId+" having LSI : "+logicalSiNo+" Are Mapped with  \n"+message;
						message="";
						isErrorFoundForThisService=false;
					}
										
					
				}
				//Vijay set serviceIdArry into objNewOrderDto
				objNewOrderDto.setServiceIdMap(serviceIdMap);
			}
		}
		
		//Check for SEC_AFTER_PRIMARY_CLOSE condition in case of Publish
		String[] serviceIdArray=serviceIdStr.split(",");
		Set<Long> selectedServiceIds = new HashSet<Long>();
		for (String string : serviceIdArray) {
			if(!"".equals(string)){
				selectedServiceIds.add(Long.parseLong(string));
			}
		}
		
		if(objdto.getIsPublishedString()!=null){//if action is Publish
			if(detectSituationForPublishCondition(objdto.getOrderNumber(),con,"SEC_AFTER_PRIMARY_CLOSE")==true){
				ArrayList<ServiceLinkingDTO> linkedData = getSecAfterPrimaryCloseCheckingCases(objdto.getOrderNumber(),con);
				//Todo Vipin
				Map<Long, ArrayList<ServiceLinkingDTO>> mapSecServiceId_PrimLineDetails = new HashMap<Long, ArrayList<ServiceLinkingDTO>>();
				for (ServiceLinkingDTO secAfterPrimaryCloseData : linkedData) {
					if(mapSecServiceId_PrimLineDetails.containsKey(secAfterPrimaryCloseData.getSecServiceId()))
						mapSecServiceId_PrimLineDetails.get(secAfterPrimaryCloseData.getSecServiceId()).add(secAfterPrimaryCloseData);
					else{
						ArrayList<ServiceLinkingDTO> arr = new ArrayList<ServiceLinkingDTO>();
						arr.add(secAfterPrimaryCloseData);
						mapSecServiceId_PrimLineDetails.put(secAfterPrimaryCloseData.getSecServiceId(),arr);
					}
				}
				
				serviceIdMap = objNewOrderDto.getServiceIdMap();
				if(serviceIdMap==null){
					serviceIdMap=new HashMap<String, Integer>();
					objNewOrderDto.setServiceIdMap(serviceIdMap);
				}
				linkedValidationFailedLsiDataMap=new HashMap<Long, ArrayList<ServiceLinkingDTO>>();
				
				for (Long selectedSecServiceId : selectedServiceIds) {
					if(mapSecServiceId_PrimLineDetails.containsKey((selectedSecServiceId))){
						ArrayList<ServiceLinkingDTO> primLinesLinkedWithSec = mapSecServiceId_PrimLineDetails.get((selectedSecServiceId));
						boolean casePass=false;
						for (ServiceLinkingDTO primLine : primLinesLinkedWithSec) {
							if("M6_END-FX_BT_START".equalsIgnoreCase(primLine.getPriM6FXProgressStatus())
									|| "FX_BT_END".equalsIgnoreCase(primLine.getPriM6FXProgressStatus())){
								casePass=true;
								break;
							}
						}
						if(casePass){
							serviceIdMap.put(""+selectedSecServiceId, 1);
							continue;//No issue in service
						}else{
							if(mapSecServiceId_PrimLineDetails.containsKey((selectedSecServiceId)))
								linkedValidationFailedLsiDataMap.put((selectedSecServiceId), mapSecServiceId_PrimLineDetails.get((selectedSecServiceId)));
							serviceIdMap.put(""+selectedSecServiceId, 0);
						}
					}
				}
			}
		}
			//prepare another map to hold failure services
			//in the map include prim service name
			//PREPARE ERROR STRING FROM THE MAP DATA
			
		if(objdto.getIsPublishedString()!=null)// && !stL3MPLSServiceId.equals(""))
		{
			if(!strVCSServiceId.equals("") && recordCount>0 && isAnyErrorForFirstValidationBlock==true){
				//messageVCSBridge="Please Publish "+serviceTypeName+" Service Also. because :\n"+messageVCSBridge;
				messageVCSBridge="Please Publish the linked service of following services also:\n"+messageVCSBridge;
				objNewOrderDto.setMsgOut(messageVCSBridge);
			}
			if(null!=linkedValidationFailedLsiDataMap && linkedValidationFailedLsiDataMap.size()>0){
				String msgLinkingValidation="\nBelow Service Ids cannot be published as their linked LSI has not been completed in M6:";
				for(Map.Entry<Long, ArrayList<ServiceLinkingDTO>> failSecServiceData : linkedValidationFailedLsiDataMap.entrySet()){
					msgLinkingValidation += "\n * "+failSecServiceData.getValue().get(0).getSecServiceTypeName() 
							+ "- Service No: "+failSecServiceData.getKey()+" linked with ";
					for(ServiceLinkingDTO linkedLine : failSecServiceData.getValue()){
						msgLinkingValidation += "\n    **"+linkedLine.getPriServiceTypeName()
								+", Service No: "+linkedLine.getPriServiceId()+" and LSI No: " +linkedLine.getPriLogicalSiNo()+
								" in Line Item No: "+linkedLine.getPriServiceProductId();
					}
				}
				messageVCSBridge+=msgLinkingValidation;
				objNewOrderDto.setMsgOut(messageVCSBridge);
			}
		}
		else if(!strVCSServiceId.equals("") && recordCount>0 && !objdto.getRemarks().equals("Delete Product") 
				&& isAnyErrorForFirstValidationBlock==true)// && !stL3MPLSServiceId.equals(""))
		{
			messageVCSBridge="You Can't " +objdto.getRemarks()+ " Services Due to :\n"+messageVCSBridge;
			objNewOrderDto.setMsgOut(messageVCSBridge);
		}
		else if(!strVCSServiceId.equals("") && recordCount>0 && objdto.getRemarks().equals("Delete Product") 
				&& isAnyErrorForFirstValidationBlock==true)
		{
			messageVCSBridge="You Can't " +objdto.getRemarks()+" "+  map_secServiceId_Details.get(vcsServiceId).getServiceName().substring(0,4)+ " Service Due to :\n"+messageVCSBridge;
			objNewOrderDto.setMsgOut(messageVCSBridge);
		}
	//} //[136] END
	}
	catch(Exception ex)
	{
		con.rollback();
		//ex.printStackTrace();
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg1, logToFile, logToConsole);//Nagarjuna
	}
	finally
	{
		try 
		{
			DbConnection.freeConnection(con);
		} 
		catch (Exception e) 
		{
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg1, logToFile, logToConsole);//Nagarjuna
		}
	}
	return objNewOrderDto;
}
private static String sqlFetchMultipleDummyServiceList="{call IOE.SP_FETCH_MULTIPLE__DUMMY_SERVICE_LIST(?)}"; 
public ArrayList<NewOrderDto> isMultipleDummyServices(int orderNo) throws Exception 
{
	//	Nagarjuna	
	String methodName="isMultipleDummyServices", className=this.getClass().getName(), msg1="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection con =null;
	CallableStatement callstmt =null;
	ResultSet rs=null;
	ArrayList<NewOrderDto> lstList = new ArrayList<NewOrderDto>();
	NewOrderDto objDto=null;
	try
	{
		con=DbConnection.getConnectionObject();	   
	    callstmt=con.prepareCall(sqlFetchMultipleDummyServiceList);
	    callstmt.setInt(1,orderNo);	   	
		rs=callstmt.executeQuery();
		while(rs.next())
		{
			objDto=new NewOrderDto();
			objDto.setServiceproductid(rs.getInt("SERVICEPRODUCTID"));
			objDto.setServiceDetailID(rs.getInt("SERVICEDETAILID"));
			objDto.setServiceId(rs.getInt("SERVICEID"));
			lstList.add(objDto);
		}
	}
	catch(Exception ex )
	{
		con.rollback();
		//ex.printStackTrace();
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg1, logToFile, logToConsole);//Nagarjuna
	}
	finally
	{
		try 
		{
			DbConnection.freeConnection(con);
		} 
		catch (SQLException e) 
		{
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg1, logToFile, logToConsole);//Nagarjuna
		}
	}
	return lstList;
}


//085 start
public String reassignToPM(String nm,String attrid) throws Exception 
{
	//	Nagarjuna	
	String methodName="reassignToPM", className=this.getClass().getName(), msg1="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection connection =null;
	CallableStatement callstmt =null;
	com.ibm.ioes.dbhelper.SQLHelper objSql = new com.ibm.ioes.dbhelper.SQLHelper();
	String jsonVal = "";
	try
	{
		connection=DbConnection.getConnectionObject();
		//jsonVal = objSql.getJsonLableValueWithQuery(nm, "TEXT", "VALUE", "SELECT  TEXT,VALUE FROM  IOE.TPRODUCTDDVALUES WHERE  ATTMASTERID="+ attrid +" and ISACTIVE=1 and FLAG='PRODUCT' and lower(TEXT) like '%"+nm.toLowerCase()+"%'" , connection);
		List<String> labelValues = new ArrayList<String>();
		labelValues.add("PROJECTMANAGER_NAME");
			jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues, "EMPID", "CALL IOE.GET_PROJECTMANAGER_LISTALL_TOREASSIGNPM(?)" ,attrid,"",connection,"");
		
	}
	catch(Exception ex )
	{
		connection.rollback();
		//ex.printStackTrace();	
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg1, logToFile, logToConsole);//Nagarjuna
	}
	finally
	{
		try 
		{
			
			DbConnection.closeCallableStatement(callstmt);
			DbConnection.freeConnection(connection);
		} 
		catch (SQLException e) 
		{
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg1, logToFile, logToConsole);//Nagarjuna
		}
	}
	return jsonVal;
}

public String getAccessMatrix(String nm,String attrid) throws Exception 
{
	//	Nagarjuna	
	String methodName="getAccessMatrix", className=this.getClass().getName(), msg1="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection connection =null;
	com.ibm.ioes.dbhelper.SQLHelper objSql = new com.ibm.ioes.dbhelper.SQLHelper();
	String jsonVal = "";
	try
	{
		connection=DbConnection.getConnectionObject();
		List<String> labelValues = new ArrayList<String>();
		labelValues.add("USER_NAME");
		jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues, "EMPID", "CALL IOE.GET_USERACCESSMATRIX_USER_LIST(?)" ,attrid,"",connection,"");
		
	}
	catch(Exception ex )
	{
		connection.rollback();
		//ex.printStackTrace();	
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg1, logToFile, logToConsole);//Nagarjuna
	}
	finally
	{
		try 
		{
			DbConnection.freeConnection(connection);
		} 
		catch (SQLException e) 
		{
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg1, logToFile, logToConsole);//Nagarjuna
		}
	}
	return jsonVal;
}

	//[087] Start
	public static String sqlCheckDuplicateAttributeValues = "{call IOE.CHECK_DUPLICATE_ATTRIBUTES(?,?,?,?)}";
	public int checkDuplicateAttributes(String attributeVal, String attributeID,String lineNo) 
	{
		//	Nagarjuna	
		String methodName="checkDuplicateAttributes", className=this.getClass().getName(), msg1="";
		boolean logToFile=true, logToConsole=true;
		//end Nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		int flag = 0;
		try
		{
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
			callstmt= connection.prepareCall(sqlCheckDuplicateAttributeValues);
			callstmt.setString(1,attributeVal);
			callstmt.setInt(2,Integer.parseInt(attributeID));
			callstmt.setInt(3,Integer.parseInt(lineNo));
			callstmt.setInt(4,0);
			callstmt.executeUpdate();
			connection.commit();
			flag = callstmt.getInt(4);
		}
		catch(Exception ex )
		{
			try 
			{
				connection.rollback();
			} 
			catch (SQLException e) 
			{
				//e.printStackTrace();
				Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg1, logToFile, logToConsole);//Nagarjuna
			}
			//ex.printStackTrace();	
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg1, logToFile, logToConsole);//Nagarjuna
		}
		finally
		{
			try 
			{
				callstmt.close();
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				//e.printStackTrace();
				Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg1, logToFile, logToConsole);//Nagarjuna
			}
		}
		return flag;
	}
	//[087] End
	
//	086 START
	
	public ArrayList<IB2BMailDto> getActMgrIdForPendingMail(Connection conn) throws Exception
	{
		//	Nagarjuna	
		String methodName="getActMgrIdForPendingMail", className=this.getClass().getName(), msg1="";
		boolean logToFile=true, logToConsole=true;
		//end Nagarjuna
		ArrayList<IB2BMailDto> list = new ArrayList<IB2BMailDto>();
		IB2BMailDto objMailDto=null;
		ResultSet rsMailDetails= null;
		PreparedStatement cs=null;
		try {
			
			cs = conn.prepareCall(sqlGetPendingOrdersforMail);
			rsMailDetails=cs.executeQuery();
			while(rsMailDetails.next())
			{
				objMailDto=new IB2BMailDto();
				objMailDto.setAccountMgrEmail(rsMailDetails.getString("ACCOUNT_MANAGER_EMAILID"));
				objMailDto.setCreatorEmail(rsMailDetails.getString("CREATOR_EMAILID"));
				objMailDto.setAccountno(rsMailDetails.getString("ACCOUNTID"));
				objMailDto.setAccountName(rsMailDetails.getString("ACCOUNTNAME"));
				objMailDto.setOrderNo(rsMailDetails.getString("ORDERNO"));
				objMailDto.setOrderType(rsMailDetails.getString("ORDERTYPE"));
				objMailDto.setTaskName(rsMailDetails.getString("TASKNAME"));
				objMailDto.setTaskStartDate(rsMailDetails.getString("TASKSTARTDATE"));
				objMailDto.setTaskEndDate(rsMailDetails.getString("TASK_END_DATE"));
				list.add(objMailDto);
			}
		}
		catch (Exception e) {
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg1, logToFile, logToConsole);//Nagarjuna
			//e.printStackTrace();
			throw new Exception("No Record Found");
		}

		finally
			{
				try
				{
					DbConnection.closePreparedStatement(cs);
				} 
				catch (Exception e) 
				{
					// TODO Auto-generated catch block
						//e.printStackTrace();
						Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg1, logToFile, logToConsole);//Nagarjuna
					}
				}

		return list;
	}

//	086 END
//[15032013017] start
public CommonDTO countSelectedLineItems(ProductCatelogDTO objDto) throws IOESException
{
	String methodName="countSelectedLineItems", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//AppConstants.IOES_LOGGER.info(methodName+" method of "+className+" class have been called");
	
	CommonDTO dto = null;
	Connection connection =null;
	CallableStatement cstmt = null;	
	ResultSet rset=null;
	int totCount=0;
	try {
		long msgCode=0;
		String cslServiceID="";
		connection=DbConnection.getConnectionObject();
		connection.setAutoCommit(false);
		String countmsg="";
		cstmt= connection.prepareCall(countSelectedLineItems);
			cstmt.setLong(1,objDto.getServiceProductID());
			/*System.out.println("objDto.getPoNumber() :"+objDto.getPoNumber());
			System.out.println("objDto.getServiceProductID() :"+objDto.getServiceProductID());
			System.out.println("objDto.getServiceDetailID() :"+objDto.getServiceDetailID());*/
			//cstmt.setLong(2,objDto.getServiceDetailID());
			//System.out.println("objDto.getOrderType() :"+objDto.getOrderType());
			cstmt.setLong(2,objDto.getPoNumber());
			cstmt.setString(3,objDto.getOrderType());
			cstmt.setInt(4,0);
			cstmt.execute();
			dto = new CommonDTO();
			totCount=cstmt.getInt(4);
			System.out.println("total count===========:"+totCount);
			dto.setMessage("No. Of Line Item :"+totCount);
			
		
	} catch (Exception e) {
		try {
			connection.rollback();
		} catch (SQLException e1) {
			Utility.onEx_LOG_RET_NEW_EX(e1, methodName, className, msg, logToFile, logToConsole);
		}finally{
		throw Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);
		}
	}finally
	{
		try {
			DbConnection.closeCallableStatement(cstmt);
			DbConnection.freeConnection(connection);
		} catch (Exception e) {
			throw Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);
		}
	}
	
	return dto;
}
//[15032013017] ENd

/*
 * [HYPR22032013001] - start
 * Get distinct Order Stage List
 */
public ArrayList<NewOrderDto> getOrderStageList() 
{
	//Nagarjuna
	String methodName="getOrderStageList", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection connection =null;
	ResultSet rs = null;
	NewOrderDto objNewOrderDto = null;
	Statement stmt =null;
	ArrayList<NewOrderDto> listOfOrderStage = new ArrayList<NewOrderDto>();
	try
	{
		connection=DbConnection.getConnectionObject();
		stmt = connection.createStatement();
		rs = stmt.executeQuery("select distinct(STAGE)  from ioe.TPOMASTER");
		
		while(rs.next())
		{
			 objNewOrderDto =  new NewOrderDto();
			 if(rs.getString("STAGE") != null && !"".equals(rs.getString("STAGE")))
			 {
				 objNewOrderDto.setOrderStage((rs.getString("STAGE")));
				 listOfOrderStage.add(objNewOrderDto);
			 }
		}
	}
	catch(Exception ex )
	{
		//ex.printStackTrace();
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//nagarjuna
	}
	finally
	{
		try 
		{
			DbConnection.closeResultset(rs);
			DbConnection.closeStatement(stmt);
			DbConnection.freeConnection(connection);
		} 
		catch (Exception e) 
		{
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//nagarjuna
		}
	}
	return listOfOrderStage;
}

/*
 * [HYPR22032013001] 
 * Get distinct Service Stage List
 */
public ArrayList<NewOrderDto> getServiceStageList() 
{
	//	Nagarjuna
	String methodName="getServiceStageList", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection connection =null;
	ResultSet rs = null;
	NewOrderDto objNewOrderDto = null;
	Statement stmt =null;
	ArrayList<NewOrderDto> listOfServiceStage = new ArrayList<NewOrderDto>();
	try
	{
		connection=DbConnection.getConnectionObject();
		stmt = connection.createStatement();
		rs = stmt.executeQuery("select distinct(SERVICESTAGE)  from ioe.TPOSERVICEMASTER");
		
		while(rs.next())
		{
			 objNewOrderDto =  new NewOrderDto();
			 if(rs.getString("SERVICESTAGE") != null && !"".equals(rs.getString("SERVICESTAGE")))
			 {
				 objNewOrderDto.setServiceName((rs.getString("SERVICESTAGE")));
				 listOfServiceStage.add(objNewOrderDto);
			 }
		}
	}
	catch(Exception ex )
	{
		//ex.printStackTrace();	
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//nagarjuna
	}
	finally
	{
		try 
		{
			DbConnection.closeResultset(rs);
			DbConnection.closeStatement(stmt);
			DbConnection.freeConnection(connection);
		} 
		catch (Exception e) 
		{
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//nagarjuna
		}
	}
	return listOfServiceStage;
}
 //- [HYPR22032013001] - end
/*
 * 
 * For fetching serviceNames in 
 * Lawkush
 * 
 */
public ArrayList<NewOrderDto> getServiceNameType() 
{
	//	Nagarjuna
	String methodName="getServiceNameType", className=this.getClass().getName(), msg="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection connection =null;
	PreparedStatement getChangeType =null;
	ResultSet rs = null;
	NewOrderDto objNewOrderDto = null;
	ArrayList<NewOrderDto> listOfServiceNames = new ArrayList<NewOrderDto>();
	try
	{
		connection=DbConnection.getConnectionObject();
		
		getChangeType= connection.prepareCall(sqlFetchServiceNameType);
		rs = getChangeType.executeQuery();
		
		while(rs.next())
		{
		 objNewOrderDto =  new NewOrderDto();
		 objNewOrderDto.setServiceTypeId(rs.getInt("SERVICETYPEID"));
		 objNewOrderDto.setServiceTypeName(rs.getString("SERVICETYPENAME"));
		 listOfServiceNames.add(objNewOrderDto);
		}
		
	}
	catch(Exception ex )
	{
		//ex.printStackTrace();
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//nagarjuna
	}
	finally
	{
		try 
		{
			DbConnection.closeResultset(rs);
			DbConnection.closePreparedStatement(getChangeType);
			DbConnection.freeConnection(connection);
		} 
		catch (Exception e) 
		{
			// TODO Auto-generated catch block
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//nagarjuna
		}
	}
	return listOfServiceNames;
}
/*
 * 
 * Lawkush End
 * 
 */
 	//[089] Start
	public static String sqlCancelHardwareLineItem = "{CALL IOE.GETHARDWARELINEITEMS(?,?,?,?,?,?,?,?,?,?)}";
	public ArrayList<LineItemDTO> getHardwareLineDetails(LineItemDTO objDto) //Method used to display Hardware Line items for Cancelation
	{
		//	Nagarjuna
		String methodName="getHardwareLineDetails", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		//end Nagarjuna
		Connection connection =null;
		CallableStatement getLSIMappingDetails =null;
		ResultSet rsLSIMappingDetails = null;
		ArrayList<LineItemDTO> LSIMappingList = new ArrayList<LineItemDTO>();
		LineItemDTO objLineItemDTO = null;
		int recordCount=0;
		try
		{
			connection=DbConnection.getConnectionObject();
			
			getLSIMappingDetails= connection.prepareCall(sqlCancelHardwareLineItem);
			//PagingSorting pagingSorting = objDto.getPagingSorting();
			if(objDto.getAccountNo().equals(""))
			{
				getLSIMappingDetails.setString(1,null );
			}
			else 
			{
				getLSIMappingDetails.setString(1,objDto.getAccountNo());
			}
			getLSIMappingDetails.setString(2,objDto.getAccountName());
			getLSIMappingDetails.setString(3,objDto.getLsiNO());
			getLSIMappingDetails.setString(4,objDto.getOrderNo());
			getLSIMappingDetails.setString(5,objDto.getLineNo());
			getLSIMappingDetails.setString(6, objDto.getPagingDto().getSortBycolumn());
			getLSIMappingDetails.setString(7, objDto.getPagingDto().getSortByOrder());
			getLSIMappingDetails.setInt(8, objDto.getPagingDto().getStartIndex());
			getLSIMappingDetails.setInt(9, objDto.getPagingDto().getEndIndex());
			getLSIMappingDetails.setInt(10, objDto.getPagingRequired());// end
			
			rsLSIMappingDetails = getLSIMappingDetails.executeQuery();
			while(rsLSIMappingDetails.next())
			{
				objLineItemDTO =  new LineItemDTO();
				objLineItemDTO.setAccountNo(rsLSIMappingDetails.getString("ACCOUNTID"));
				objLineItemDTO.setAccountName(rsLSIMappingDetails.getString("ACCOUNTNAME"));
				objLineItemDTO.setOrderNo(rsLSIMappingDetails.getString("ORDERNO"));
				objLineItemDTO.setOrderStage(rsLSIMappingDetails.getString("STAGE"));
				objLineItemDTO.setOrderType(rsLSIMappingDetails.getString("ORDERTYPE"));
				objLineItemDTO.setServiceNo(rsLSIMappingDetails.getString("SERVICENO"));
				objLineItemDTO.setServiceName(rsLSIMappingDetails.getString("SERVICESTAGE"));
				objLineItemDTO.setLsiNO(rsLSIMappingDetails.getString("LOGICAL_SI_NO"));
				objLineItemDTO.setM6OrderNo(rsLSIMappingDetails.getString("M6ORDERNO"));
				objLineItemDTO.setLineNo(rsLSIMappingDetails.getString("LINEITEMNO"));
				objLineItemDTO.setLineName(rsLSIMappingDetails.getString("LINEITEMNAME"));
				objLineItemDTO.setCircuitID(rsLSIMappingDetails.getString("CKTID"));
				if (objDto.getPagingRequired()==1) 
				{
					recordCount = rsLSIMappingDetails.getInt("FULL_REC_COUNT");
					objLineItemDTO.getPagingDto().setRecordCount(recordCount);
				}
				
				objLineItemDTO.setMaxPageNo(objLineItemDTO.getPagingDto().getMaxPageNumber());
				
				LSIMappingList.add(objLineItemDTO);
			}
		}
		catch(Exception ex )
		{
			//ex.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//nagarjuna
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsLSIMappingDetails);
				DbConnection.closeCallableStatement(getLSIMappingDetails);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				// TODO Auto-generated catch block
				//e.printStackTrace();
				Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//nagarjuna
			}
		}
		return LSIMappingList;
	}	
	
	public static String sqlInsertHardwareLineItem = "{CALL IOE.SP_CREATE_HARDWARE_CANCEL_REQUEST(?,?,?,?,?)}";
	public LineItemDTO fnProcessLineItems(Connection conn,String lineItemNo,String roleid,String empid)throws Exception //Method used to Process(Store in DB) Request for Deletion of Line item in M6
	{	
		//	Nagarjuna
		String methodName="fnProcessLineItems", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		//end Nagarjuna
		CallableStatement csInsertHardwareLineItem = null;		
		String successStatus="";
		String validateLineItem="";
		LineItemDTO objNewDto=new LineItemDTO();
		objNewDto.setLineNo(lineItemNo);
		LineItemDTO statusdto=new LineItemDTO();
		NewOrderDaoExt objNewExtDao=new NewOrderDaoExt();
		int errWorkflowClose=0;
		try
		{		
			validateLineItem = objNewExtDao.ValidateHardwareLineItem(objNewDto,conn);//Validating Whether Line item can actually be cancelled or not in M6
			if("".equalsIgnoreCase(validateLineItem))//if Validation is a Success then data is filled in DB Request Table
			{
				csInsertHardwareLineItem= conn.prepareCall(sqlInsertHardwareLineItem);	
				csInsertHardwareLineItem.setInt(1,Integer.parseInt(lineItemNo));
				csInsertHardwareLineItem.setInt(2,Integer.parseInt(empid));
				csInsertHardwareLineItem.setInt(3,0);
				csInsertHardwareLineItem.setInt(4,0);
				csInsertHardwareLineItem.setString(5, "");
				csInsertHardwareLineItem.execute();
				errWorkflowClose = csInsertHardwareLineItem.getInt(4);
				if(errWorkflowClose==0)
				{
					successStatus="Success";
					statusdto.setRequestStatus(successStatus);
					statusdto.setLineNo(lineItemNo);
					conn.commit();
									
				}
				else
				{							
					successStatus="Failure";
					statusdto.setRequestStatus(successStatus);
					statusdto.setLineNo(lineItemNo);
					conn.rollback();
				}							
			}// end of if validation	
			else
			{
					successStatus="Failure";
					statusdto.setRequestStatus(successStatus);
					statusdto.setLineNo(lineItemNo);
					conn.rollback();
			}
		}	
		catch(Exception e)
		{
			successStatus="Failure";
			statusdto.setRequestStatus(successStatus);
			conn.rollback();
		//	e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//nagarjuna
		}
	  finally 
	  {
		  try 
		  {	
			  DbConnection.closeStatement(csInsertHardwareLineItem);
		} 
		catch (Exception e) 
		{
			//e.printStackTrace();
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//nagarjuna
			throw new Exception("Exception : " + e.getMessage(), e);
		}	
	}
	return statusdto;
}
	//[089] End
	
	// -[TRNG22032013037] - Start
	public SelectOpportunityPageForm getOpportunityList(OpportunityDto objDto, PagingCommonDto pageDto){
		
		Connection connection =null;
		PreparedStatement getSourceName =null;
		ResultSet rs = null;
		OpportunityDto objOpportunityDto = null;	
		PagingCommonDto pageReturnDto = null;
		SelectOpportunityPageForm selectOppPageForm = null;
		List<OpportunityDto> listOpportunity = new ArrayList<OpportunityDto>();
		int recordCount = 0;
		try{

			connection=DbConnection.getConnectionObject();
			getSourceName= connection.prepareCall(sqlspGetOpportunity);
			getSourceName.setString(1,objDto.getOpportunityId());
			getSourceName.setString(2,objDto.getQuoteNo());
			getSourceName.setString(3,objDto.getSalesForceopportunityNo());
			getSourceName.setString(4,pageDto.getSortBycolumn());
			getSourceName.setString(5,pageDto.getSortByOrder());
			getSourceName.setInt(6,pageDto.getStartIndex());
			getSourceName.setInt(7,pageDto.getEndIndex());			
			getSourceName.setInt(8,objDto.getAccountId());

			
			rs = getSourceName.executeQuery();
			
			selectOppPageForm = new SelectOpportunityPageForm();
			pageReturnDto = new PagingCommonDto();	
			while(rs.next()){
				objOpportunityDto =  new OpportunityDto();
				
				objOpportunityDto.setOpportunityId(rs.getString("OPPORTUNITY"));
				objOpportunityDto.setQuoteNo(rs.getString("QUOTENO"));	
				objOpportunityDto.setSalesForceopportunityNo((rs.getString("SF_OPPORTUNITY_ID")));				

				listOpportunity.add(objOpportunityDto);
				recordCount=rs.getInt("FULL_REC_COUNT");				
			}
			
			pageReturnDto.setRecordCount(recordCount);				
			selectOppPageForm.setPagingCommonDto(pageReturnDto);			
			selectOppPageForm.setOpportunityDto(listOpportunity);
		}
		catch(Exception ex )
		{
			ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(getSourceName);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		return selectOppPageForm;
	}	
	
	public ArrayList<OpportunityDto> getOpportunitySaved(String orderNo)
	{
		
		Connection connection =null;
		PreparedStatement getSourceName =null;
		ResultSet rs = null;
		OpportunityDto objOpportunityDto = null;
		ArrayList<OpportunityDto> listOpportunity = new ArrayList<OpportunityDto>();
		try
		{
			connection=DbConnection.getConnectionObject();
			
			getSourceName= connection.prepareCall(sqlspGetSavedOpportunity);
			getSourceName.setInt(1,Integer.parseInt(orderNo));
			rs = getSourceName.executeQuery();
			
			while(rs.next())
			{
				objOpportunityDto =  new OpportunityDto();
				
				objOpportunityDto.setOpportunityId(rs.getString("OPPORTUNITY"));
				objOpportunityDto.setQuoteNo(rs.getString("QUOTENO"));	
				objOpportunityDto.setSalesForceopportunityNo((rs.getString("SF_OPPORTUNITY_ID")));
				listOpportunity.add(objOpportunityDto);
			}			
		}
		catch(Exception ex )
		{
			ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(getSourceName);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		return listOpportunity;
	}
	
	
	public String saveMultipleOpportunity(String orderNo, String opportunityId , String salesforceOpportunityid,String ePCNNo,String func){
		
		Connection connection =null;
		CallableStatement pstmt =null;
		ResultSet rs = null;
		int retStatus = 1;
		try
		{		
			connection=DbConnection.getConnectionObject();			
			pstmt= connection.prepareCall(sqlUpdateOpportunity);
			pstmt.setInt(1,Integer.parseInt(orderNo));
			pstmt.setString(2,opportunityId );
			pstmt.setString(3,salesforceOpportunityid );
			pstmt.setString(4,ePCNNo);
			pstmt.setString(5,func);
			//pstmt.registerOutParameter(4, java.sql.Types.INTEGER);
			//pstmt.registerOutParameter(5, java.sql.Types.INTEGER);
			//pstmt.registerOutParameter(6, java.sql.Types.VARCHAR);
			pstmt.registerOutParameter(6, java.sql.Types.INTEGER);
			pstmt.registerOutParameter(7, java.sql.Types.INTEGER);
			pstmt.registerOutParameter(8, java.sql.Types.VARCHAR);
			pstmt.execute();
			
			//retStatus = pstmt.getInt(4);
			retStatus = pstmt.getInt(6);
			
		}catch(Exception ex )
		{
			ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(pstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return String.valueOf(retStatus);
	}
	
// -[TRNG22032013037] - End
//	Filling Rejection Reason  Combo of approval page
	public ArrayList<ViewOrderDto> populateRejectionReason() 
	{
		//	Nagarjuna
		String methodName="populateRejectionReason", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		//end Nagarjuna
		Connection connection =null;
		PreparedStatement preparedStmt =null;
		ResultSet rs = null;
		ViewOrderDto objViewOrderDto = null;
		ArrayList<ViewOrderDto> listRejectionReason = new ArrayList<ViewOrderDto>();
		try
		{
			connection=DbConnection.getConnectionObject();
			
			preparedStmt= connection.prepareCall(sqlGetRejectionReasonMaster);
			rs = preparedStmt.executeQuery();
			
			while(rs.next())
			{
				objViewOrderDto =  new ViewOrderDto();
				objViewOrderDto.setReasonID(rs.getInt("REJECTIONID"));
				objViewOrderDto.setReasonName(rs.getString("REJECTIONREASON"));
				listRejectionReason.add(objViewOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			//ex.printStackTrace();	
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//nagarjuna
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(preparedStmt);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				// TODO Auto-generated catch block
				//e.printStackTrace();
				Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//nagarjuna
			}
		}
		return listRejectionReason;
	}
//	Filling Rejection Reason  Combo of approval page

	//To Check whether BCP Address is present agsinst the account by Vishwa on 10-Sep-13 START
	private static String strGetBCPCount="SELECT COUNT(1) AS BCPCOUNT FROM IOE.TBCP_ADDRESS_MSTR WHERE ROW_TYPE='BILLING' AND ACCOUNTID=?";
	public int countBCPWithDispatch(long accountID) 
	{
		Connection connection =null;
		PreparedStatement getBCPID=null;

		ResultSet rsBCPID  = null;
		int count=1;
		ProductCatelogDTO objNewOrderDto = null;
		int countBCPID = 0;
		try
		{
			connection=DbConnection.getConnectionObject();
			getBCPID= connection.prepareCall(strGetBCPCount);
			getBCPID.setLong(1,accountID);
			rsBCPID = getBCPID.executeQuery();
			
			
			
			if(rsBCPID.next())
			{
				countBCPID = rsBCPID.getInt("BCPCOUNT");
			}
			
				
		}
		catch(Exception ex )
		{
			ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rsBCPID);
				DbConnection.closePreparedStatement(getBCPID);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return countBCPID;
	}	

	//To Check whether BCP Address is present agsinst the account by Vishwa on 10-Sep-13 END
  public String fnUpdateDemoDays(String logicalSiNo , String sessionId) throws Exception
  {
	  
	  NewOrderDto statusdto= new NewOrderDto();
	  	NewOrderDao objDao = new NewOrderDao();
		String lstDemoVal = null;
		Connection conn = null;
		try
		{
			conn= DbConnection.getConnectionObject();
			conn.setAutoCommit(false);
			
			StringTokenizer strOrderNos  = new StringTokenizer(logicalSiNo,",");
			ArrayList<String> lsino = new ArrayList<String>();
			
			for (int i =0; strOrderNos.hasMoreTokens();i++) 
			{
				lsino.add(strOrderNos.nextToken().trim());
			}
			for(int i=0;i<lsino.size();i++)
			{
				//statusdto=objDao.fnapprovePDOrders(conn,(Integer.parseInt(lsino.get(i).toString())),sessionId);
				//results.add(statusdto);
			}
			//dto.setApproveorderstatuslist(results);	
			
		}catch(Exception e)
		{
			e.printStackTrace();
		}
	return lstDemoVal;
  
  }
  
//addeed by manisha cust bil exp bfr no 7 start
	public ArrayList<NewOrderDto> updateDemoDays(NewOrderDto objdto) throws Exception
	{
		ArrayList<NewOrderDto> list = new ArrayList<NewOrderDto>();
		NewOrderDto objMailDto=null;
		ResultSet rsMailDetails= null;
		PreparedStatement cs=null;
		Connection connection =null;
		int recordCount =0;
		try {
			Utility utility=new Utility();
			connection=DbConnection.getConnectionObject();
			cs = connection.prepareCall(sqlGetDemoDaysDatatoUpdate);
			cs.setString(1,objdto.getLogicalSINo());
			cs.setString(2,(objdto.getFromDate()));
			cs.setString(3,(objdto.getToDate()));
			PagingSorting pagingSorting = objdto.getPagingSorting();
			pagingSorting.sync();// To calculate start index and Enc Index
			cs.setString(4, pagingSorting.getSortByColumn());// columnName
			cs.setString(5, PagingSorting.DB_Asc_Desc(pagingSorting
					.getSortByOrder()));// sort order
			cs.setInt(6, pagingSorting.getStartRecordId());// start index
			cs.setInt(7, pagingSorting.getEndRecordId());// end index
			cs.setInt(8, (pagingSorting.isPagingToBeDone() ? 1 : 0));// end
			rsMailDetails=cs.executeQuery();
			while(rsMailDetails.next())
			{
				objMailDto=new NewOrderDto();
				objMailDto.setAccountName(rsMailDetails.getString("ACCOUNTNAME"));
				objMailDto.setOrderNo(rsMailDetails.getString("ORDERNO"));
		        objMailDto.setCrmAccountNo(rsMailDetails.getInt("CRMACCOUNTNO"));
		        objMailDto.setLogicalsi(rsMailDetails.getString("LOGICAL_SI_NO"));
		        objMailDto.setDemoStartDate(rsMailDetails.getString("DEMO_START_DATE"));
				if (rsMailDetails.getString("DEMO_START_DATE") != null && !"".equals(rsMailDetails.getString("DEMO_START_DATE")))
				{
					Date date=rsMailDetails.getDate("DEMO_START_DATE");
					objMailDto.setDemoStartDate((utility.showDate_Report(date)).toUpperCase());
				
				}
		         objMailDto.setDemoEndDate(rsMailDetails.getString("DEMO_END_DATE"));
		         if (rsMailDetails.getString("DEMO_END_DATE") != null && !"".equals(rsMailDetails.getString("DEMO_END_DATE")))
		         {
		        	 Date date=rsMailDetails.getDate("DEMO_END_DATE");
					objMailDto.setDemoEndDate((utility.showDate_Report(date)).toUpperCase());
				
				}
		         objMailDto.setDemoDays(rsMailDetails.getString("NO_OF_DAYS"));
		         objMailDto.setOrder_types(rsMailDetails.getString("ORDER_TYPE"));
		         if (pagingSorting.isPagingToBeDone()) {
						recordCount = rsMailDetails.getInt("FULL_REC_COUNT");
					}
		         list.add(objMailDto);
			}
			pagingSorting.setRecordCount(recordCount);
		}
		catch (Exception e) {
			e.printStackTrace();
			throw new Exception("No Record Found");
		}

		finally
			{
				try
				{
					DbConnection.closePreparedStatement(cs);
				} 
				catch (Exception e) 
				{
					// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}

		return list;
	}
	// addeed by manisha cust bil exp bfr no 7 end
	
	public int getPrevTaskRoleId(long OrderNo)
	{
		String methodName="getPrevTaskRoleId", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		Connection connection = null;
		CallableStatement cstmt = null;
		int count = 0;
		try {
			connection = DbConnection.getConnectionObject();
			cstmt = connection.prepareCall(sqlGetPrevTaskRoleId);
			cstmt.setLong(1, OrderNo);
			cstmt.setInt(2, 0);
			cstmt.execute();
			count = cstmt.getInt(2);
		} catch (Exception ex) {
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//nagarjuna
		} finally {
			try {
				DbConnection.closeCallableStatement(cstmt);
				DbConnection.freeConnection(connection);
			} catch (Exception e) {
				Utility.LOG(true, true, e,"");
			}
		}	
		return count;
	}
	/*Vijay add a method for getting stage */
	public ArrayList<NewOrderDto> getOrderStageName()
	{
		Connection connection =null;
		PreparedStatement pstmt =null;
		ResultSet rs = null;
		NewOrderDto objOrderDto = null;
		ArrayList<NewOrderDto> listOrderStageName = new ArrayList<NewOrderDto>();
		try
		{
			connection=DbConnection.getConnectionObject();
			
			pstmt= connection.prepareCall(sqlGetOrderStage);
			rs = pstmt.executeQuery();
			
			while(rs.next())
			{
			 objOrderDto =  new NewOrderDto();
	
			 objOrderDto.setSearchOrderStageName(rs.getString("STAGE"));
			 objOrderDto.setSearchOrderStageCode(rs.getString("STAGECODE"));
			 listOrderStageName.add(objOrderDto);
			}
			
		}
		catch(Exception ex )
		{
			ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(pstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return listOrderStageName;
	}
	/*Vijay end */
	
	//[094] Start
	//start [128]
	//public static String advancePaymentPro = "{call IOE.SP_ADVANCEPAYMENT(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ,? ,?,?,?) }";
	
	public static String advancePaymentPro = "{call IOE.SP_ADVANCEPAYMENT(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ,? ,? ,? ,? ,? ,? ,? ,? ,? ,? ,? ,? ,? ,? ,? ,?) }";
	
	public AdvancePaymentDTO saveAdvancePaymentDetails(AdvancePaymentDTO advancePaymentDTO) {
		
		Connection conn = null;
		CallableStatement callableStatement = null;
		ResultSet resultSet = null;
		int rowVal = 0;
		
		try {
			
			conn = DbConnection.getConnectionObject();
			conn.setAutoCommit(false); 
			callableStatement = conn.prepareCall(advancePaymentPro);
			callableStatement.setString(1, advancePaymentDTO.getArcAdvancePaymentExemptd());
			callableStatement.setString(2, advancePaymentDTO.getArcExemptionReason());
			callableStatement.setString(3, advancePaymentDTO.getArcCheckNumber());
			callableStatement.setString(4, advancePaymentDTO.getArcCheckDate());
			callableStatement.setString(5, advancePaymentDTO.getArcBankName());
			callableStatement.setDouble(6, advancePaymentDTO.getArcCheckamount());
			callableStatement.setDouble(7, advancePaymentDTO.getArcAudjestedAmount());
			callableStatement.setString(8, advancePaymentDTO.getOtcAdvancPaymentExemptd());
			callableStatement.setString(9, advancePaymentDTO.getOtcExemptdReason());
			callableStatement.setString(10, advancePaymentDTO.getOtcCheckNumber());
			callableStatement.setString(11, advancePaymentDTO.getOtcCheckDate());
			callableStatement.setString(12, advancePaymentDTO.getOtcBankName());
			callableStatement.setDouble(13, advancePaymentDTO.getOtcCheckamount());
			callableStatement.setDouble(14, advancePaymentDTO.getOtcAudjestedAmount());
			callableStatement.setLong(15, advancePaymentDTO.getLineItemNo());
			callableStatement.setLong(16, advancePaymentDTO.getOrderNo());
			callableStatement.setLong(17, advancePaymentDTO.getServiceNo());
			callableStatement.setLong(18, advancePaymentDTO.getAdvanceId());
			callableStatement.registerOutParameter(19, java.sql.Types.BIGINT);
			callableStatement.registerOutParameter(20, java.sql.Types.BIGINT);
			callableStatement.registerOutParameter(21, java.sql.Types.BIGINT);
			callableStatement.registerOutParameter(22, java.sql.Types.VARCHAR);
			//Start [128]
			callableStatement.setDouble(23, advancePaymentDTO.getArcReEnterCheckamount());
			callableStatement.setString(24, advancePaymentDTO.getArcReEnterCheckNumber());
			callableStatement.setString(25, advancePaymentDTO.getArcBankAccountNumber());
			callableStatement.setString(26, advancePaymentDTO.getArcReEnterBankAccountNumber());
			callableStatement.setString(27, advancePaymentDTO.getArcIfscCode());
			callableStatement.setString(28, advancePaymentDTO.getArcReEnterIfscCode());
			
			callableStatement.setDouble(29, advancePaymentDTO.getOtcReEnterCheckamount());
			callableStatement.setString(30, advancePaymentDTO.getOtcReEnterCheckNumber());
			callableStatement.setString(31, advancePaymentDTO.getOtcBankAccountNumber());
			callableStatement.setString(32, advancePaymentDTO.getOtcReEnterBankAccountNumber());
			callableStatement.setString(33, advancePaymentDTO.getOtcIfscCode());
			callableStatement.setString(34, advancePaymentDTO.getOtcReEnterIfscCode());
			//End [128]
			callableStatement.execute();
			
			rowVal = callableStatement.getInt(19);
			advancePaymentDTO.setAdvanceId(rowVal);
			
			int error=callableStatement.getInt(21);
			String errorMessage = callableStatement.getString(22);
			advancePaymentDTO.setErrorStatus(error);
			
			System.out.println("####### ERROR: "+errorMessage);
		
			if(error == 0)
			{
				advancePaymentDTO.setErrorMsg(errorMessage);
				conn.commit();
			}
			else
			{
				advancePaymentDTO.setErrorMsg("Some Error has Occured,Please Try Again!!");
				conn.rollback();
			}
									
		} catch (Exception exception) {
			
			exception.printStackTrace();
		}	finally {
			
			try {
				
				DbConnection.closeResultset(resultSet);
				DbConnection.closePreparedStatement(callableStatement);
				DbConnection.freeConnection(conn);
				
			} catch (Exception e) {
				
				e.printStackTrace();
			}
		}
		return advancePaymentDTO;
		
		
	}

	public static String getAdvancePaymentInfo =  "SELECT * FROM IOE.TADVANCEPAYMENT WHERE  SERVICENO = ? AND SPID = ?";// To Fetch Data From ADVANCE PAYMENT DETAILS
	public AdvancePaymentDTO getAdvancePaymentInfo(AdvancePaymentDTO dto) {
		
		String resultVal = "";
		Connection connection  = null;
		ResultSet resultSet = null;
		PreparedStatement preparedStatement = null;
		
		AdvancePaymentDTO advancePaymentDTO = new AdvancePaymentDTO();
		
		try {
			 
			 connection = DbConnection.getConnectionObject();
			 preparedStatement = connection.prepareCall(getAdvancePaymentInfo);
			 preparedStatement.setLong(1, dto.getServiceNo());
			 preparedStatement.setLong(2, dto.getLineItemNo());
			 resultSet = preparedStatement.executeQuery();
			 
			 while(resultSet.next()) {
				 
				advancePaymentDTO.setAdvanceId(resultSet.getLong("ADVANCEID"));
				advancePaymentDTO.setArcAdvancePaymentExemptd(resultSet.getString("ARCEXEMPTED"));
				advancePaymentDTO.setArcExemptionReason(resultSet.getString("ARCEXPREASON"));
				advancePaymentDTO.setArcCheckNumber(resultSet.getString("ARCCHQNO"));
				advancePaymentDTO.setArcCheckDate(resultSet.getString("ARCCHQDATE"));
				advancePaymentDTO.setArcBankName(resultSet.getString("ARCBANKNAME"));
				advancePaymentDTO.setArcCheckamount(resultSet.getDouble("ARCCHQAMT"));
				advancePaymentDTO.setArcAudjestedAmount(resultSet.getDouble("ARCAMTAJD"));
				
				advancePaymentDTO.setOtcAdvancPaymentExemptd(resultSet.getString("OTCEXEMPTED"));
				advancePaymentDTO.setOtcExemptdReason(resultSet.getString("OTCEXPREASON"));
				advancePaymentDTO.setOtcCheckNumber(resultSet.getString("OTCCHQNO"));
				advancePaymentDTO.setOtcCheckDate(resultSet.getString("OTCCHQDATE"));
				advancePaymentDTO.setOtcBankName(resultSet.getString("OTCBANKNAME"));
				advancePaymentDTO.setOtcCheckamount(resultSet.getDouble("OTCCHQAMT"));
				advancePaymentDTO.setOtcAudjestedAmount(resultSet.getDouble("OTCAMTAJD"));
				
				// Hidden parameters
				advancePaymentDTO.setLineItemNo(resultSet.getLong("SPID"));
				advancePaymentDTO.setOrderNo(resultSet.getLong("ORDERNO"));
				advancePaymentDTO.setLsiNo(resultSet.getLong("LSINO"));
				advancePaymentDTO.setServiceNo(resultSet.getLong("SERVICENO"));
				
				
				//Start [128]
				advancePaymentDTO.setArcReEnterCheckamount(resultSet.getDouble("ARCRECHQAMT"));
				advancePaymentDTO.setArcReEnterCheckNumber(resultSet.getString("ARCRECHQNO"));
				advancePaymentDTO.setArcBankAccountNumber(resultSet.getString("ARCBANKACNO"));
				advancePaymentDTO.setArcReEnterBankAccountNumber(resultSet.getString("ARCREBANKACNO"));
				advancePaymentDTO.setArcIfscCode(resultSet.getString("ARCIFSCCODE"));
				advancePaymentDTO.setArcReEnterIfscCode(resultSet.getString("ARCREIFSCCODE"));
				
				advancePaymentDTO.setOtcReEnterCheckamount(resultSet.getDouble("OTCRECHQAMT"));
				advancePaymentDTO.setOtcReEnterCheckNumber(resultSet.getString("OTCRECHQNO"));
		        advancePaymentDTO.setOtcBankAccountNumber(resultSet.getString("OTCBANKACNO"));
				advancePaymentDTO.setOtcReEnterBankAccountNumber(resultSet.getString("OTCREBANKACNO"));
				advancePaymentDTO.setOtcIfscCode(resultSet.getString("OTCIFSCCODE"));
				advancePaymentDTO.setOtcReEnterIfscCode(resultSet.getString("OTCREIFSCCODE"));
				//End [128]
				
				
				
			 }
		} 
		catch (Exception exception)
		{
			exception.printStackTrace();
		}
		finally 
		{
			try 
			{	
				DbConnection.closeResultset(resultSet);
				DbConnection.closePreparedStatement(preparedStatement);
				DbConnection.freeConnection(connection);
				
			} 
			catch (Exception e) 
			{	
				e.printStackTrace();
			}
		}
		return advancePaymentDTO;
	}
	
	//[094] End
	
	//[095] Start
	private final String validateAdvancePaymentDetails = "call IOE.SP_VALIDATE_ADVANCE_PAYMENT(?,?)";
	public String validateAdvancePaymentDetails(int orderNo) 
	{
		Connection connection =null;
		CallableStatement getValidationResult =null;
		NewOrderDto objNewOrderDto = null;
		String errorMsg=null;
		try
		{
			connection=DbConnection.getConnectionObject();
			getValidationResult= connection.prepareCall(validateAdvancePaymentDetails);
			getValidationResult.setLong(1,orderNo);
			getValidationResult.setString(2,"");
			getValidationResult.execute();
			errorMsg=getValidationResult.getString(2);
			System.err.println(errorMsg);			
		}
		catch(Exception ex )
		{
			ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			finally 
			{
				try 
				{	
					DbConnection.closePreparedStatement(getValidationResult);
					DbConnection.freeConnection(connection);
					
				} catch (Exception e) {
					
					e.printStackTrace();
				}
			}
		}
		return errorMsg;
	}
	//[095] End
	/**
 * @author Vijay
 * @param subOrderType
 * @return boolean
 * If subOrdertype is available in database then it will retrun ture otherwise return false
 */
	public boolean isOrderSubTypeAvailable(int subOrderType) 
	{
		CLEPUtility.SysErr("--------Check the availibility of Sub Order Type---");
		Connection connection =null;
		ResultSet rs = null;
		Statement stmt =null;
		boolean flag = false;
		try
		{
			connection=DbConnection.getConnectionObject();
			stmt = connection.createStatement();
			rs = stmt.executeQuery("select SUBORDERTYPE  from ioe.CLEP_SUB_ORDER_TYPE where SUBORDERTYPE = "+subOrderType);
			
			while(rs.next())
			{
				flag = true;
			}
		}
		catch(Exception ex )
		{
			CLEPUtility.LOG(true, true, ex, "--------Some error during getting sub order type ------");
			
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeStatement(stmt);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception ex) 
			{
				CLEPUtility.LOG(true, true, ex, "--------Some error during Closing the connection in  this method isSubOrderTypeAvailable in NewOrderDao.java ------");
			}
		}
		return flag;
	}
	
	public ArrayList<SCMDto> getDeliverylocation(int locId){
		 
		Connection connection =null;
		PreparedStatement getDeliveryLocation=null;
		ResultSet rs = null;
		ArrayList<SCMDto>  listDeliveryLocation = new ArrayList<SCMDto>();
		try 
		{
			connection=DbConnection.getConnectionObject();
			getDeliveryLocation= connection.prepareCall(sqlFetchDelLocForScm);	
			getDeliveryLocation.setInt(1,locId);
			SCMDto objSCMDto=null;
			rs = getDeliveryLocation.executeQuery();
			System.out.println(" query Executed");
			while(rs.next())
			{
			 
				objSCMDto=new SCMDto();
				objSCMDto.setDeliveryLocationId(rs.getInt("DEL_ID"));
				objSCMDto.setDeliveryLocation(rs.getString("DELIVER_TO_LOCATN"));
				Utility.SysOut("DELIVER_TO_LOCATN"+rs.getString("DELIVER_TO_LOCATN"));
				listDeliveryLocation.add(objSCMDto);
		    }
		}
		catch (Exception e) {
			Utility.LOG(true, true, "Exception"+e);
		}
		
	return listDeliveryLocation;
	}
	public ArrayList<SCMDto> getSubInventory(int subId){
		 
		Connection connection =null;
		PreparedStatement getSubInventory=null;
		ResultSet rs = null;
		ArrayList<SCMDto>  listSubInventory= new ArrayList<SCMDto>();
		try 
		{
			connection=DbConnection.getConnectionObject();
			getSubInventory= connection.prepareCall(sqlGetSubInventory);	
			getSubInventory.setInt(1,subId);
			SCMDto objSCMDto=null;
			rs = getSubInventory.executeQuery();
			System.out.println(" query Executed");
			while(rs.next())
			{
			 
				objSCMDto=new SCMDto();
				objSCMDto.setSubInventryId(rs.getInt("SUBINV_ID"));
				objSCMDto.setSubInventory(rs.getString("SUBINVENTORY"));
				listSubInventory.add(objSCMDto);
		    }
		}
		catch (Exception e) {
			Utility.LOG(true, true, "Exception"+e);
		}
		
	return listSubInventory;
	}
	public ArrayList<SCMDto> getBudgetHeadAop1(int budgetId){
		 
		Connection connection =null;
		CallableStatement getBudgetHead=null;
		ResultSet rs = null;
		ArrayList<SCMDto>  listBudgetHead = new ArrayList<SCMDto>();
		try 
		{
			connection=DbConnection.getConnectionObject();
			getBudgetHead= connection.prepareCall(sqlGetBudgethead);	
			getBudgetHead.setInt(1,budgetId);
			SCMDto objSCMDto=null;
			rs = getBudgetHead.executeQuery();
			System.out.println(" query Executed");
			while(rs.next())
			{
			 
				objSCMDto=new SCMDto();
				objSCMDto.setAop1_Id(rs.getInt("AOP1_ID"));
				objSCMDto.setBudgetHead1(rs.getString("AOP_BUDGET_HEAD1"));
				listBudgetHead.add(objSCMDto);
		    }
		}
		catch (Exception e) {
			Utility.LOG(true, true, "Exception"+e);
		}
		
	    return listBudgetHead;
	}
	public ArrayList<SCMDto> getBudgetHeadAOP2(int aopId){
		 
		Connection connection =null;
		CallableStatement getBudgetHead=null;
		ResultSet rs = null;
		ArrayList<SCMDto>  listBudgetHead = new ArrayList<SCMDto>();
		try 
		{
			connection=DbConnection.getConnectionObject();
			getBudgetHead= connection.prepareCall(sqlGetBudgethead2);	
			getBudgetHead.setInt(1, aopId);
			SCMDto objSCMDto=null;
			rs = getBudgetHead.executeQuery();
			
			while(rs.next())
			{
			 
				objSCMDto=new SCMDto();
				objSCMDto.setAop2_Id(rs.getInt("AOP2_ID"));
				objSCMDto.setBudgetHead2(rs.getString(2));
			
				listBudgetHead.add(objSCMDto);
		    }
		}
		catch (Exception e) {
			Utility.LOG(true, true, "Exception"+e);
		}
		
	    return listBudgetHead;
	}
	public ArrayList<SCMDto> getItemCodeForScm(int itemId){
		 
		Connection connection =null;
		CallableStatement getItemCode=null;
		ResultSet rs = null;
		ArrayList<SCMDto>  listItemCode = new ArrayList<SCMDto>();
		try 
		{
			connection=DbConnection.getConnectionObject();
			getItemCode= connection.prepareCall(sqlGetItemCode);
			
			getItemCode.setInt(1,itemId);
			SCMDto objSCMDto=null;
			rs = getItemCode.executeQuery();
			
			while(rs.next())
			{
			 
				objSCMDto=new SCMDto();
				objSCMDto.setItemCode_Id(rs.getInt("ITEM_CODE_ID"));
				objSCMDto.setItemCode(rs.getString("ITEM_CODE"));
			
				listItemCode.add(objSCMDto);
		    }
		}
		catch (Exception e) {
			Utility.LOG(true, true, "Exception"+e);
		}
		
	    return listItemCode;
	}
	
	/*
	 * This method is used to fetch Service Summery attributes for ViewProductCatalog.jsp
	 */
		public ArrayList<FieldAttibuteDTO> fetchServiceAttributeMasterValueFOrSCM(ProductCatelogDTO objDto,Long roleid) 
		{
			String methodName="fetchServiceAttributeMasterValue", msg="";
			boolean logToFile=true, logToConsole=true;
			Connection connection =null;
			CallableStatement getServiceAttMaster=null;
			ResultSet rs = null;
			ArrayList<FieldAttibuteDTO> listserviceAttMaster = new ArrayList<FieldAttibuteDTO>();
			FieldAttibuteDTO objNewOrderDto = null;
			String attdefaultval;
			String rfsDateForSCM=null;
			
			try
			{
				ArrayList<FieldAttibuteDTO> lstServiceSummary = null;
				connection=DbConnection.getConnectionObject();
				getServiceAttMaster= connection.prepareCall(sqlFetchServiceAttributeMstrValueForSCM);	
				getServiceAttMaster.setInt(1, objDto.getServiceProductID());
				getServiceAttMaster.setInt(2, objDto.getServiceDetailID());
				getServiceAttMaster.setLong(3, roleid);
				getServiceAttMaster.setLong(4, objDto.getPoNumber());
				getServiceAttMaster.setLong(5, java.sql.Types.INTEGER);
				getServiceAttMaster.setLong(6, java.sql.Types.INTEGER);
				rs = getServiceAttMaster.executeQuery();
				int attValue_NEW=getServiceAttMaster.getInt(5);
				
				if(attValue_NEW==0)
				{
					while(rs.next())
					{
						objNewOrderDto =  new FieldAttibuteDTO();
						
						objNewOrderDto.setProdAttributeID(rs.getInt("ATTMASTERID"));
						objNewOrderDto.setProdAttributeLabel(rs.getString("ATTDESCRIPTION"));
						objNewOrderDto.setAttDefaultVal(rs.getString("ATTDEFAULTVAL"));
						objNewOrderDto.setProdDataType(rs.getString("ATTDATATYPE"));
						objNewOrderDto.setProdAlisName(rs.getString("ALISNAME"));
						objNewOrderDto.setIsServiceSummMandatory(rs.getInt("ISMANDATORY"));
						objNewOrderDto.setIsCommercial(rs.getInt("IS_COMMERCIAL"));
						objNewOrderDto.setAttributeKey(rs.getString("ATTRIBUTE_KEY"));
						if(rs.getString("EXPECTEDVALUE").equalsIgnoreCase("DROPDOWN"))
						{
						  lstServiceSummary = getServiceSummary(rs.getInt("ATTMASTERID"));
						  objNewOrderDto.setServiceSummary(lstServiceSummary);
						  objNewOrderDto.setProdExpectedValue(rs.getString("EXPECTEDVALUE"));
						}
						//lawkush Start
						else if(rs.getString("EXPECTEDVALUE").equalsIgnoreCase("LOV"))
						{
						  lstServiceSummary = getServiceSummary(rs.getInt("ATTMASTERID"));
						  objNewOrderDto.setServiceSummaryLov(lstServiceSummary);
						  objNewOrderDto.setProdExpectedValue(rs.getString("EXPECTEDVALUE"));
						  //System.out.println("********** "+lstServiceSummary);
						}
						else if(rs.getString("EXPECTEDVALUE").equalsIgnoreCase("DATETIME"))
						{
							SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
							SimpleDateFormat sdf2 = new SimpleDateFormat("dd/MM/yyyy");
							
							if(objNewOrderDto.getAttributeKey().equals("need_by_date"))
							{						
								rfsDateForSCM = getRfsDateForSCM(objDto.getServiceID());
								if(rfsDateForSCM != "")				
									rfsDateForSCM=sdf2.format(sdf1.parse(rfsDateForSCM));;
								objNewOrderDto.setRfsDate(rfsDateForSCM);
								objNewOrderDto.setProdExpectedValue(rs.getString("EXPECTEDVALUE"));
							}else if(objNewOrderDto.getAttributeKey().equals("creation_date"))
							{
								Date date = new Date();			
									rfsDateForSCM=sdf2.format(date);;
								objNewOrderDto.setRfsDate(rfsDateForSCM);
								objNewOrderDto.setProdExpectedValue(rs.getString("EXPECTEDVALUE"));
							}
							else{
								objNewOrderDto.setRfsDate("");
								 objNewOrderDto.setProdExpectedValue(rs.getString("EXPECTEDVALUE"));
								}
						}
						//lawkush End
						else
						{
						 objNewOrderDto.setProdExpectedValue(rs.getString("EXPECTEDVALUE"));
						}
						objNewOrderDto.setProdAttMaxLength(rs.getInt("MAXLENGTH"));
						objNewOrderDto.setMandatory(rs.getString("MANDATORY"));
						//[ROHIT START]
						//objNewOrderDto.setDefValue(rs.getString("ATTDEFAULTVAL"));
//						[ROHIT END]
						attdefaultval=rs.getString("ATTDEFAULTVAL");
						if(attdefaultval == null)
						{
							attdefaultval = "";
							objNewOrderDto.setDefValue(attdefaultval);
						}
						else
						{
							objNewOrderDto.setDefValue(rs.getString("ATTDEFAULTVAL"));
						}
						objNewOrderDto.setAttMasterId(rs.getLong("SERVICE_SUMMARY_ATT_ID"));
						objNewOrderDto.setLinkPopUpId(rs.getString("LINK_POPUP_ID"));
						objNewOrderDto.setFor_validation(rs.getString("FOR_VALIDATION"));
						objNewOrderDto.setIsServiceSummReadonly(rs.getInt("ISREADONLY"));
						objNewOrderDto.setParntAttId(rs.getInt("PARENT_ATTRMASTERID"));
						objNewOrderDto.setIsParentAtt(rs.getInt("IS_PARENT_ATT"));
						objNewOrderDto.setNotSaveInScm(getServiceAttMaster.getInt(6));
						listserviceAttMaster.add(objNewOrderDto);
					
				}
				}
				else{while(rs.next())
				{
					objNewOrderDto =  new FieldAttibuteDTO();
					objNewOrderDto.setAttributeID(rs.getInt("ATTVALUEID"));
					objNewOrderDto.setProdAttributeID(rs.getInt("ATTMASTERID"));
					objNewOrderDto.setProdAttributeLabel(rs.getString("ATTDESCRIPTION"));
					objNewOrderDto.setProdDataType(rs.getString("ATTDATATYPE"));
					objNewOrderDto.setProdAlisName(rs.getString("ALISNAME"));
					objNewOrderDto.setProdExpectedValue(rs.getString("EXPECTEDVALUE"));
					objNewOrderDto.setIsCommercial(rs.getInt("IS_COMMERCIAL"));
					if(rs.getString("EXPECTEDVALUE").equalsIgnoreCase("DROPDOWN"))
					{
						//Puneet commenting for performance tuning as directly fetching the text
						if(null != objDto.getOrderType() && !"New".equalsIgnoreCase(objDto.getOrderType().trim())){
							lstServiceSummary = getServiceSummary(rs.getInt("ATTMASTERID"));
							objNewOrderDto.setServiceSummary(lstServiceSummary);
						}
					  objNewOrderDto.setProdExpectedValue(rs.getString("EXPECTEDVALUE"));
					  objNewOrderDto.setDestText(rs.getString("DISPLAY_TEXT"));
					}
					//	lawkush Start
					else if(rs.getString("EXPECTEDVALUE").equalsIgnoreCase("LOV"))
					{
						if(null != objDto.getOrderType() && !"New".equalsIgnoreCase(objDto.getOrderType().trim())){
							lstServiceSummary = getServiceSummary(rs.getInt("ATTMASTERID"));
							objNewOrderDto.setServiceSummaryLov(lstServiceSummary);
						}
					  objNewOrderDto.setProdExpectedValue(rs.getString("EXPECTEDVALUE"));
					  objNewOrderDto.setDestText(rs.getString("DISPLAY_TEXT"));
					}
					//lawkush End
					else
					{
					 objNewOrderDto.setProdExpectedValue(rs.getString("EXPECTEDVALUE"));
					}
					objNewOrderDto.setProdAttMaxLength(rs.getInt("MAXLENGTH"));
					objNewOrderDto.setProdAttVal(rs.getString("ATTVALUE"));
					objNewOrderDto.setMandatory(rs.getString("MANDATORY"));
					objNewOrderDto.setIsServiceSummMandatory(rs.getInt("ISMANDATORY"));
					if(attValue_NEW==1)
					{
						if(("null".equalsIgnoreCase(rs.getString("ATTVALUE_NEW")))||(null==(rs.getString("ATTVALUE_NEW")))||("".equalsIgnoreCase(rs.getString("ATTVALUE_NEW"))))
						{
							objNewOrderDto.setNewProdAttVal("");	
						}
						else
						{
							objNewOrderDto.setNewProdAttVal(rs.getString("ATTVALUE_NEW"));
						}
					}
					if(attValue_NEW==0 && (objDto.getOrderType().equals("New")) )
					{
						if(("null".equalsIgnoreCase(rs.getString("ATTVALUE")))||(null==(rs.getString("ATTVALUE")))||("".equalsIgnoreCase(rs.getString("ATTVALUE"))))
						{
							objNewOrderDto.setNewProdAttVal("");
						}
						else
						{
						objNewOrderDto.setNewProdAttVal(rs.getString("ATTVALUE"));
						}
						
					}
					//[037] Start
					objNewOrderDto.setAttServiceName(rs.getString("SERVICETYPENAME"));
					//[037] End
					//Start[079]
					objNewOrderDto.setSubchangetypeNetworkChangeEditable(rs.getInt("SUBCHANGETYPE_NETWORK_CHANGE_EDITABLE"));
					//End[079]
					objNewOrderDto.setChangetypeSolutionChangeEditable(rs.getInt("CHANGETYPE_SOLCHANGE_EDITABLE"));
					objNewOrderDto.setAttMasterId(rs.getInt("SERVICE_SUMMARY_ATT_ID"));
					if(rs.getString("ALERT")!=null)
					{
						objNewOrderDto.setGuiAlert(Messages.getMessageValue(rs.getString("ALERT")));
					}
					else
					{
						objNewOrderDto.setGuiAlert(rs.getString("ALERT"));
					}
					objNewOrderDto.setAttributeKey(rs.getString("ATTRIBUTE_KEY"));
					objNewOrderDto.setLinkPopUpId(rs.getString("LINK_POPUP_ID"));
					objNewOrderDto.setFor_validation(rs.getString("FOR_VALIDATION"));
					objNewOrderDto.setIsServiceSummReadonly(rs.getInt("ISREADONLY"));
					objNewOrderDto.setCurrentRole(String.valueOf(roleid));
					listserviceAttMaster.add(objNewOrderDto);
				}
			}
			}
			catch(Exception ex )
			{
				Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error at : "+objNewOrderDto.getAttributeID(), logToFile, logToConsole);//added by nagarjuna
				//ex.printStackTrace();	
			}
			finally
			{
				try 
				{
					DbConnection.closeResultset(rs);
					DbConnection.closeCallableStatement(getServiceAttMaster);
					DbConnection.freeConnection(connection);
				} 
				catch (Exception e) 
				{
					Utility.LOG(true, true, "Exception"+e);
					// TODO Auto-generated catch block
					//e.printStackTrace();
				}
			}
			return listserviceAttMaster;
		}
		
		/*
		 * This method is used to fech Scm Line Details for upadte Scm line from View Scm Attributes
		 * Added by Deepak Kuamr 
		 */
		public ArrayList<SCMDto> fetchScmLineDetails(ServiceLineDTO objDto) 
		{
			
			String methodName="fetchScmLineDetail",  msg="";
			boolean logToFile=true, logToConsole=true;
			Connection connection =null;
			CallableStatement getScmLine=null;
			ResultSet rs = null;
			ArrayList<SCMDto> listScmLine = new ArrayList<SCMDto>();
			SCMDto objNewOrderDto = null;
			
			int recordCount;
			try
			{
				connection=DbConnection.getConnectionObject();
				if(objDto.getPrId()!=0)
				{
					
					getScmLine= connection.prepareCall(sqlFetchScmLineDetailsForScmForPRReuse);	
					
					getScmLine.setInt(1,objDto.getPrId());
				}
				else{
				getScmLine= connection.prepareCall(sqlFetchScmLineDetailsForScm);	
				getScmLine.setInt(1,objDto.getServiceProductID());
				}
				rs = getScmLine.executeQuery();
				while(rs.next())
				{
					objNewOrderDto =  new SCMDto();
					objNewOrderDto.setChargeId_Scm(rs.getInt("CHARGEID_SCM"));
					objNewOrderDto.setItemCode_Id(rs.getInt("ITEM_CODE"));
					objNewOrderDto.setQuntity(rs.getInt("QUANTITY"));
					objNewOrderDto.setCahrgeValue(rs.getInt("CHARGEVALUE"));
					objNewOrderDto.setDeliveryLocationId(rs.getInt("DEL_ID"));
					objNewOrderDto.setSubInventryId(rs.getInt("SUBINV_ID"));
					objNewOrderDto.setAop1_Id(rs.getInt("AOP1_ID"));
					objNewOrderDto.setAop2_Id(rs.getInt("AOP2_ID"));
					objNewOrderDto.setAopYear(rs.getString("AOP_YEAR"));
					
					if((null==rs.getString("PO_NUMBER"))||("null".equalsIgnoreCase(rs.getString("PO_NUMBER")))||(("").equalsIgnoreCase((rs.getString("PO_NUMBER")))))
					{
						objNewOrderDto.setPoNumer("");
					}
					else{
						objNewOrderDto.setPoNumer(rs.getString("PO_NUMBER"));
					}
					if((null==(rs.getString("PO_DATE")))||("null".equalsIgnoreCase(rs.getString("PO_DATE")))||(("").equalsIgnoreCase((rs.getString("PO_NUMBER")))))
					{
						objNewOrderDto.setPoDtae("");
					}
					else{
						objNewOrderDto.setPoDtae(rs.getString("PO_DATE"));
					}
					if(1==(rs.getByte("IS_ACTIVE")))
					{
					objNewOrderDto.setIsActive("Yes");
					}else
					{
						objNewOrderDto.setIsActive("No");
					}
					if((null==(String.valueOf(rs.getDouble("PO_AMOUNT"))))||(("").equalsIgnoreCase(String.valueOf(rs.getDouble("PO_AMOUNT"))))){
					objNewOrderDto.setPoAmount(0.0);
					}
					else{
						objNewOrderDto.setPoAmount(rs.getDouble("PO_AMOUNT"));
					}
					if((null==(rs.getString("SCM_MESSAGE")))|| ("null".equalsIgnoreCase(rs.getString("SCM_MESSAGE")))||(("").equalsIgnoreCase(rs.getString("SCM_MESSAGE"))))
					{
						objNewOrderDto.setScmMessage("");
					}
					else{
						objNewOrderDto.setScmMessage(rs.getString("SCM_MESSAGE"));
					}
					
					listScmLine.add(objNewOrderDto);
				}
			}catch(Exception ex){
				Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error at fetch Scm LIne Details for view Update : "+objNewOrderDto.getChargeId_Scm(), logToFile, logToConsole);//added by nagarjuna
				//ex.printStackTrace();	
			}finally{
				try{
					DbConnection.closeResultset(rs);
					DbConnection.closeCallableStatement(getScmLine);
					DbConnection.freeConnection(connection);
				}catch (Exception e){
					Utility.LOG(true, true,"Some Error Occured in fetchScmLineDetails Method of New OrderDao "+e);
					
				}
			}
			return listScmLine;
		}
		
		
		
		/*This method is used to update viewProductCatelog page or ScmProductCatelog Page of Scm and insert/update of PrReuse
		 * Added by Deepak Kumar for Third Party SCM
		 */
		public NewOrderDto updateProductCatelogForScm(NewOrderDto objDto,long empID)
		{
			String methodName="updateProductCatelog",  msg="";
			boolean logToFile=true, logToConsole=true;
			boolean deleteScmFlag=true;
			int finalStatus=0;
			int serviceProductID=0;
			int serviceProductServiceStatus=0;
			StringBuffer chargeIDs = new StringBuffer();
			int prReuseFlag=1;
			int is_Pr_Reuse_Flag=0;
			byte isActive=1;
			byte isActiveValue=0;
			int countServiceSummary=0;
			int countScmline=0;
			boolean updatePrIdFlag=true;
			Connection connection =null;
			String[] attributeVal=new String [objDto.getHdnSeriveAttCounter()];
			String[] attributeID=new String [objDto.getHdnSeriveAttCounter()];
			String[] dataType=new String [objDto.getHdnSeriveAttCounter()];
			String[] attributeName=new String [objDto.getHdnSeriveAttCounter()];
			String[] attributeExpectedValue=new String [objDto.getHdnSeriveAttCounter()];
			String[] newAttributeVal=new String [objDto.getHdnSeriveAttCounter()];
			String[] attributeValIDs=new String [objDto.getHdnSeriveAttCounter()];
			CallableStatement insertServiceAttDet =null;
			CallableStatement insertChargeInfo=null;
			PreparedStatement updateTpoServiceDetails=null;
			PreparedStatement scmLineId=null;
			PreparedStatement countService=null;
			PreparedStatement countScmLine=null;
			PreparedStatement deleteScmLine=null;
			PreparedStatement isPrReuseFlag=null;
			int attMsterId=0;
			ResultSet rs = null;
			ResultSet resultSet=null;
			ResultSet resul=null;
			boolean updateFlag=false;
			try{
				connection=DbConnection.getConnectionObject();
				connection.setAutoCommit(false);
				serviceProductID=objDto.getServiceProductID();
				
				countService=connection.prepareStatement(sqlCountServiceSection);
				countService.setInt(1,serviceProductID);
				countService.setInt(2,objDto.getPoNumber());
				countService.setInt(3,objDto.getServiceDetailID());
				rs=countService.executeQuery();
				while(rs.next())
				{
					objDto.setCount1(rs.getInt("COUNTSERVIECSUMMARY"));
				}
				countServiceSummary=objDto.getCount1();
				countScmLine=connection.prepareStatement(sqlCountScmLine);
				countScmLine.setInt(1,serviceProductID);
				resultSet=countScmLine.executeQuery();
				while(resultSet.next())
				{
					objDto.setCountyCode(resultSet.getInt("COUNTSCMLINE"));
				}
				countScmline=objDto.getCountyCode();
				isPrReuseFlag=connection.prepareStatement(sqlIsPrReuseFlag);
				isPrReuseFlag.setInt(1,serviceProductID);
				resul=isPrReuseFlag.executeQuery();
				while(resul.next())
				{
					objDto.setIsPrReuse(resul.getInt("IS_PR_REUSE"));
				}
				is_Pr_Reuse_Flag=objDto.getIsPrReuse();
			
					Utility.SysOut("selected pr ID :"+objDto.getPrId()+"in first time prReuse---for insertion");
					for(int j=0;j<=(objDto.getHdnSeriveAttCounter())-1;j++)
					{
						
						attributeVal[j] =objDto.getProdAttValue()[j];
						attributeID[j]=objDto.getProdAttID()[j];
						attributeExpectedValue[j]=objDto.getProdAttExptdValue()[j];
						attributeName[j]=objDto.getProdAttName()[j];
						//Added by Ashutosh
						if(objDto.getChangeTypeId()==2 ||objDto.getChangeTypeId()==1 )
						{
							
							newAttributeVal[j] =objDto.getNewProdAttValue()[j];
							attributeValIDs[j]=objDto.getAttributeValuIDs()[j];
						}
						if(objDto.getChangeTypeId()==2 ||objDto.getChangeTypeId()==0 ||objDto.getChangeTypeId()==1)
						{
							insertServiceAttDet=connection.prepareCall(sqlInsertProdLineAttributesForNewSCM);
						}	
						else
						{
							insertServiceAttDet=connection.prepareCall(sqlInsertProdLineAttributes);
						}
						insertServiceAttDet.setInt(1, Integer.valueOf(attributeID[j]));//AttributeID
						insertServiceAttDet.setString(2, attributeVal[j]);//Attribute Value
						insertServiceAttDet.setInt(3, serviceProductID);//service Product ID
						if(countServiceSummary>0)
						{
							insertServiceAttDet.setInt(4, 2);//Update flag 1 for insertion and 2 for update
						}
						else
						{
							insertServiceAttDet.setInt(4, 1);//Update flag 1 for insertion and 2 for update
						}
						
						insertServiceAttDet.setInt(5,0);//Output Parameter
						insertServiceAttDet.setInt(6,0);//Output Parameter
						insertServiceAttDet.setString(7,"");//Output Parameter
						insertServiceAttDet.setLong(8,empID);
					
						if(objDto.getChangeTypeId()==2 ||objDto.getChangeTypeId()==0 ||objDto.getChangeTypeId()==1)
						{
							insertServiceAttDet.setLong(9, objDto.getPoNumber());
							insertServiceAttDet.setLong(10, objDto.getChangeTypeId());
							if(objDto.getChangeTypeId()==0)
							{
								insertServiceAttDet.setString(11,"0");
								insertServiceAttDet.setInt(12,0);
								insertServiceAttDet.setInt(13,objDto.getServiceId());
						
							}
							else
							{
								insertServiceAttDet.setString(11,newAttributeVal[j]);
								insertServiceAttDet.setInt(12,Integer.valueOf(attributeValIDs[j]));
								insertServiceAttDet.setInt(13,objDto.getServiceId());
								
							}
							
							
						}
						insertServiceAttDet.execute();
					
							finalStatus=insertServiceAttDet.getInt(6);
							if(finalStatus==1)
							{
								break;
							}
					
					}
					
			if(objDto.getChargeInfoValue()==1 && finalStatus==0)
			{
				
				ArrayList<ChargeDetailsSCM> scmDeList = objDto.getChargeDetailsSCM();
				ChargeDetailsSCM scmLineDetails=new ChargeDetailsSCM();
				for(int i=0;i<scmDeList.size();i++)
				{
					scmLineDetails=(ChargeDetailsSCM)scmDeList.get(i);
					insertChargeInfo=connection.prepareCall(sqlUpadteScmLineDetails);
					if((objDto.getPrId()!=0)&&(objDto.getPrReuseUpadte()==0))
					{					
						if((is_Pr_Reuse_Flag==AppConstants.Pr_Resue_Falg)||(is_Pr_Reuse_Flag!=AppConstants.Pr_Resue_Falg))
						{
							if(((countScmline>0)&&(deleteScmFlag==true)))
							{
								deleteScmLine=connection.prepareStatement(sqlDeleteScmLine);
								deleteScmLine.setInt(1,serviceProductID);
								deleteScmLine.execute();
								deleteScmFlag=false;
							}
						}
										Utility.SysOut("In PrReuse Block When PrReuseUpate is 0");
										if(updatePrIdFlag==true)
										{
										updateTpoServiceDetails=connection.prepareStatement(sqlUpdatePrId);
										updateTpoServiceDetails.setInt(1,objDto.getPrId());
										updateTpoServiceDetails.setInt(2,AppConstants.Pr_Resue_Falg);
										updateTpoServiceDetails.setInt(3, serviceProductID);
										updateTpoServiceDetails.execute();
										updatePrIdFlag=false;
										}
										
						
						insertChargeInfo.setInt(1,Integer.parseInt(scmLineDetails.getItemCode()));
						insertChargeInfo.setInt(2,Integer.parseInt(scmLineDetails.getChargeQuantity()));
						insertChargeInfo.setDouble(3,Double.parseDouble(scmLineDetails.getChargeValue()));
						insertChargeInfo.setLong(4,empID);
						insertChargeInfo.setInt(5,scmLineDetails.getDeliveryLocationId());
						insertChargeInfo.setInt(6,scmLineDetails.getSubInventryId());
						insertChargeInfo.setInt(7,scmLineDetails.getAop1_Id());
						insertChargeInfo.setInt(8,scmLineDetails.getAop2_Id());
						insertChargeInfo.setString(9,scmLineDetails.getAopYear());
						insertChargeInfo.setString(10,scmLineDetails.getPoNumer());
						insertChargeInfo.setString(11,scmLineDetails.getPoDtae());
						insertChargeInfo.setDouble(12,scmLineDetails.getPoAmount());
						if((scmLineDetails.getIsActiveFlag()=="No")||(scmLineDetails.getIsActiveFlag()=="")){
							insertChargeInfo.setByte(13,isActiveValue);
						}
						else{
							insertChargeInfo.setByte(13,isActive);
						}
						
						insertChargeInfo.setString(14,scmLineDetails.getScmMessage());
						insertChargeInfo.setInt(15,objDto.getServiceProductID());
						insertChargeInfo.setInt(16,0);//chargeId_Scm
						insertChargeInfo.setInt(17,1);//Update flag	
						insertChargeInfo.setInt(18,objDto.getPrId());
						insertChargeInfo.setInt(19, 0);
						insertChargeInfo.setInt(20, 0);
						insertChargeInfo.setString(21, "");
						updateFlag=true;
						if(updateFlag==true)
						{
							insertChargeInfo.execute();
						}
					}
					if((objDto.getPrId()!=0)&&((objDto.getPrReuseUpadte()==1)||(objDto.getPrReuseUpadte()>1)))
					{
										
						Utility.SysOut("In PrReuse Block When PrReuseUpate is 1");
						if(((is_Pr_Reuse_Flag==AppConstants.Pr_Resue_Falg)||(is_Pr_Reuse_Flag!=AppConstants.Pr_Resue_Falg)))
						{
							if(((countScmline>0)&&(deleteScmFlag==true)))
							{
								deleteScmLine=connection.prepareStatement(sqlDeleteScmLine);
								deleteScmLine.setInt(1,serviceProductID);
								deleteScmLine.execute();
								deleteScmFlag=false;
							}
						}
										if(updatePrIdFlag==true)
										{
							
										updateTpoServiceDetails=connection.prepareStatement(sqlUpdatePrId);
										updateTpoServiceDetails.setInt(1,objDto.getPrId());
										updateTpoServiceDetails.setInt(2,AppConstants.Pr_Resue_Falg);
										updateTpoServiceDetails.setInt(3, serviceProductID);
										updateTpoServiceDetails.execute();
										updatePrIdFlag=false;
										}
						// insertChargeInfo=connection.prepareCall(sqlUpadteScmLineDetailsForPRresue);
						insertChargeInfo.setInt(1,Integer.parseInt(scmLineDetails.getItemCode()));
						insertChargeInfo.setInt(2,Integer.parseInt(scmLineDetails.getChargeQuantity()));
						insertChargeInfo.setDouble(3,Double.parseDouble(scmLineDetails.getChargeValue()));
						insertChargeInfo.setLong(4,empID);
						insertChargeInfo.setInt(5,scmLineDetails.getDeliveryLocationId());
						insertChargeInfo.setInt(6,scmLineDetails.getSubInventryId());
						insertChargeInfo.setInt(7,scmLineDetails.getAop1_Id());
						insertChargeInfo.setInt(8,scmLineDetails.getAop2_Id());
						insertChargeInfo.setString(9,scmLineDetails.getAopYear());
						insertChargeInfo.setString(10,scmLineDetails.getPoNumer());
						insertChargeInfo.setString(11,scmLineDetails.getPoDtae());
						insertChargeInfo.setDouble(12,scmLineDetails.getPoAmount());
						if((scmLineDetails.getIsActiveFlag()=="No")||(scmLineDetails.getIsActiveFlag()=="")){
							insertChargeInfo.setByte(13,isActiveValue);
						}
						else{
							insertChargeInfo.setByte(13,isActive);
						}
						
						insertChargeInfo.setString(14,scmLineDetails.getScmMessage());
						insertChargeInfo.setInt(15,objDto.getServiceProductID());
						insertChargeInfo.setInt(16,0);//chargeId_Scm
						insertChargeInfo.setInt(17,1);//Update flag	for Insert // insertChargeInfo.setInt(17,2);//Update flag	
						insertChargeInfo.setInt(18,objDto.getPrId());
						insertChargeInfo.setInt(19, 0);
						insertChargeInfo.setInt(20, 0);
						insertChargeInfo.setString(21, "");
						updateFlag=true;
						if(updateFlag==true)
						{
							insertChargeInfo.execute();
						}
					}
					if((scmLineDetails.getChargeId_Scm()!=0)&&(((objDto.getPrId()==0)&&(objDto.getNotSaveInScm()==0))))
					{
						insertChargeInfo.setInt(1,Integer.parseInt(scmLineDetails.getItemCode()));
						insertChargeInfo.setInt(2,Integer.parseInt(scmLineDetails.getChargeQuantity()));
						insertChargeInfo.setDouble(3,Double.parseDouble(scmLineDetails.getChargeValue()));
						insertChargeInfo.setLong(4,empID);
						insertChargeInfo.setInt(5,scmLineDetails.getDeliveryLocationId());
						insertChargeInfo.setInt(6,scmLineDetails.getSubInventryId());
						insertChargeInfo.setInt(7,scmLineDetails.getAop1_Id());
						insertChargeInfo.setInt(8,scmLineDetails.getAop2_Id());
						insertChargeInfo.setString(9,scmLineDetails.getAopYear());
						insertChargeInfo.setString(10,scmLineDetails.getPoNumer());
						insertChargeInfo.setString(11,scmLineDetails.getPoDtae());
						insertChargeInfo.setDouble(12,scmLineDetails.getPoAmount());
						if(scmLineDetails.getIsActiveFlag()=="No"){
							insertChargeInfo.setByte(13,isActiveValue);
						}
						else{
							insertChargeInfo.setByte(13,isActive);
						}
						
						
						insertChargeInfo.setString(14,scmLineDetails.getScmMessage());
						insertChargeInfo.setInt(15,objDto.getServiceProductID());
						insertChargeInfo.setInt(16,scmLineDetails.getChargeId_Scm());
						insertChargeInfo.setInt(17,2);
						insertChargeInfo.setInt(18,0);
						insertChargeInfo.setInt(19, 0);
						insertChargeInfo.setInt(20, 0);
						insertChargeInfo.setString(21, "");
						updateFlag=true;
						if(updateFlag==true)
						{
							insertChargeInfo.execute();
						}
					}
					else if(((objDto.getPrId()==0)&&(objDto.getNewPrFlag()==1||objDto.getNewPrFlag()==2)))
					{
						if(objDto.getSendToSCM()==2)
						{
							if((is_Pr_Reuse_Flag==AppConstants.Pr_Resue_Falg))
							{
								if(((countScmline>0)&&(deleteScmFlag==true)))
								{
									deleteScmLine=connection.prepareStatement(sqlDeleteScmLine);
									deleteScmLine.setInt(1,serviceProductID);
									deleteScmLine.execute();
									deleteScmFlag=false;
								}
							}
							if(updatePrIdFlag==true)
							{
								updateTpoServiceDetails=connection.prepareStatement(sqlUpdatePrId);
								updateTpoServiceDetails.setInt(1,0);//prID;
								updateTpoServiceDetails.setInt(2,AppConstants.Create_New_PR_Falg);
								updateTpoServiceDetails.setInt(3, serviceProductID);
								updateTpoServiceDetails.execute();
								updatePrIdFlag=false;
								
							}
							
							
							insertChargeInfo.setInt(1,Integer.parseInt(scmLineDetails.getItemCode()));
							insertChargeInfo.setInt(2,Integer.parseInt(scmLineDetails.getChargeQuantity()));
							insertChargeInfo.setDouble(3,Double.parseDouble(scmLineDetails.getChargeValue()));
							insertChargeInfo.setLong(4,empID);
							insertChargeInfo.setInt(5,scmLineDetails.getDeliveryLocationId());
							insertChargeInfo.setInt(6,scmLineDetails.getSubInventryId());
							insertChargeInfo.setInt(7,scmLineDetails.getAop1_Id());
							insertChargeInfo.setInt(8,scmLineDetails.getAop2_Id());
							insertChargeInfo.setString(9,scmLineDetails.getAopYear());
							insertChargeInfo.setString(10,"null");
							insertChargeInfo.setString(11,"null");
							insertChargeInfo.setDouble(12,0.0);
							insertChargeInfo.setByte(13,isActive);
							insertChargeInfo.setString(14,"null");
							insertChargeInfo.setInt(15,objDto.getServiceProductID());
							insertChargeInfo.setInt(16,scmLineDetails.getChargeIdList());//chargeId_Scm
							
							if((is_Pr_Reuse_Flag==AppConstants.Pr_Resue_Falg))
							{
								insertChargeInfo.setInt(17,1);
							}
							else
							{
								if(scmLineDetails.getChargeIdList()!=0)
								{
									insertChargeInfo.setInt(17,2);//upadte flag for Update
								}
								else{
								insertChargeInfo.setInt(17,1);//Update flag	for Insert
								}
								
							}
							insertChargeInfo.setInt(18, 0);
							insertChargeInfo.setInt(19, 0);
							insertChargeInfo.setInt(20, 0);
							insertChargeInfo.setString(21, "");
							updateFlag=true;
							if(updateFlag==true)
							{
								insertChargeInfo.execute();
							}
						}
						else{
							
						
						insertChargeInfo.setInt(1,Integer.parseInt(scmLineDetails.getItemCode()));
						insertChargeInfo.setInt(2,Integer.parseInt(scmLineDetails.getChargeQuantity()));
						insertChargeInfo.setDouble(3,Double.parseDouble(scmLineDetails.getChargeValue()));
						insertChargeInfo.setLong(4,empID);
						insertChargeInfo.setInt(5,scmLineDetails.getDeliveryLocationId());
						insertChargeInfo.setInt(6,scmLineDetails.getSubInventryId());
						insertChargeInfo.setInt(7,scmLineDetails.getAop1_Id());
						insertChargeInfo.setInt(8,scmLineDetails.getAop2_Id());
						insertChargeInfo.setString(9,scmLineDetails.getAopYear());
						insertChargeInfo.setString(10,scmLineDetails.getPoNumer());
						insertChargeInfo.setString(11,scmLineDetails.getPoDtae());
						insertChargeInfo.setDouble(12,scmLineDetails.getPoAmount());
						if((scmLineDetails.getIsActiveFlag()=="No")||(scmLineDetails.getIsActiveFlag()=="")){
							insertChargeInfo.setByte(13,isActiveValue);
						}
						else{
							insertChargeInfo.setByte(13,isActive);
						}
						
						insertChargeInfo.setString(14,scmLineDetails.getScmMessage());
						insertChargeInfo.setInt(15,objDto.getServiceProductID());
						insertChargeInfo.setInt(16,0);//chargeId_Scm
						insertChargeInfo.setInt(17,1);//Update flag	
						insertChargeInfo.setInt(18, 0);
						insertChargeInfo.setInt(19, 0);
						insertChargeInfo.setInt(20, 0);
						insertChargeInfo.setString(21, "");
						updateFlag=true;
						if(updateFlag==true)
						{
							insertChargeInfo.execute();
						}
						}
					}
		
				else if(((objDto.getPrId()==0)&&(objDto.getNotSaveInScm()==1)))
					{
						if(objDto.getSendToSCM()==2)
						{
							
							
							insertChargeInfo.setInt(1,Integer.parseInt(scmLineDetails.getItemCode()));
							insertChargeInfo.setInt(2,Integer.parseInt(scmLineDetails.getChargeQuantity()));
							insertChargeInfo.setDouble(3,Double.parseDouble(scmLineDetails.getChargeValue()));
							insertChargeInfo.setLong(4,empID);
							insertChargeInfo.setInt(5,scmLineDetails.getDeliveryLocationId());
							insertChargeInfo.setInt(6,scmLineDetails.getSubInventryId());
							insertChargeInfo.setInt(7,scmLineDetails.getAop1_Id());
							insertChargeInfo.setInt(8,scmLineDetails.getAop2_Id());
							insertChargeInfo.setString(9,scmLineDetails.getAopYear());
							insertChargeInfo.setString(10,"null");
							insertChargeInfo.setString(11,"null");
							insertChargeInfo.setDouble(12,0.0);
							insertChargeInfo.setByte(13,isActive);
							insertChargeInfo.setString(14,"null");
							insertChargeInfo.setInt(15,objDto.getServiceProductID());
							insertChargeInfo.setInt(16,scmLineDetails.getChargeIdList());//chargeId_Scm
							if(scmLineDetails.getChargeIdList()!=0)
							{
								insertChargeInfo.setInt(17,2);//upadte flag for Update
							}
							else{
							insertChargeInfo.setInt(17,1);//Update flag	for Insert
								}
							insertChargeInfo.setInt(18, 0);
							insertChargeInfo.setInt(19, 0);
							insertChargeInfo.setInt(20, 0);
							insertChargeInfo.setString(21, "");
							updateFlag=true;
							if(updateFlag==true)
							{
								insertChargeInfo.execute();
							}
						}
						else{
							
						
						insertChargeInfo.setInt(1,Integer.parseInt(scmLineDetails.getItemCode()));
						insertChargeInfo.setInt(2,Integer.parseInt(scmLineDetails.getChargeQuantity()));
						insertChargeInfo.setDouble(3,Double.parseDouble(scmLineDetails.getChargeValue()));
						insertChargeInfo.setLong(4,empID);
						insertChargeInfo.setInt(5,scmLineDetails.getDeliveryLocationId());
						insertChargeInfo.setInt(6,scmLineDetails.getSubInventryId());
						insertChargeInfo.setInt(7,scmLineDetails.getAop1_Id());
						insertChargeInfo.setInt(8,scmLineDetails.getAop2_Id());
						insertChargeInfo.setString(9,scmLineDetails.getAopYear());
						insertChargeInfo.setString(10,scmLineDetails.getPoNumer());
						insertChargeInfo.setString(11,scmLineDetails.getPoDtae());
						insertChargeInfo.setDouble(12,scmLineDetails.getPoAmount());
						if((scmLineDetails.getIsActiveFlag()=="No")||(scmLineDetails.getIsActiveFlag()=="")){
							insertChargeInfo.setByte(13,isActiveValue);
						}
						else{
							insertChargeInfo.setByte(13,isActive);
						}
						
						insertChargeInfo.setString(14,scmLineDetails.getScmMessage());
						insertChargeInfo.setInt(15,objDto.getServiceProductID());
						insertChargeInfo.setInt(16,0);//chargeId_Scm
						insertChargeInfo.setInt(17,1);//Update flag	
						insertChargeInfo.setInt(18, 0);
						insertChargeInfo.setInt(19, 0);
						insertChargeInfo.setInt(20, 0);
						insertChargeInfo.setString(21, "");
						updateFlag=true;
						if(updateFlag==true)
						{
							insertChargeInfo.execute();
						}
						}
					}
					
				else if(((objDto.getPrId()==0)&&((objDto.getNotSaveInScm()==0)&&(objDto.getSendToSCM()==1))))
				{
					
					if((countScmline>0)&&(objDto.getNewPrFlagForView()==2||objDto.getNewPrFlagForView()==1))
					{
						if(deleteScmFlag==true)
						{
						deleteScmLine=connection.prepareStatement(sqlDeleteScmLine);
						deleteScmLine.setInt(1,serviceProductID);
						deleteScmLine.executeUpdate();
						deleteScmFlag=false;
						}
					}
					if(updatePrIdFlag==true)
					{
						updateTpoServiceDetails=connection.prepareStatement(sqlUpdatePrId);
						updateTpoServiceDetails.setInt(1,0);//prID;
						updateTpoServiceDetails.setInt(2,AppConstants.Create_New_PR_Falg);
						updateTpoServiceDetails.setInt(3, serviceProductID);
						updateTpoServiceDetails.execute();
						updatePrIdFlag=false;
						
					}
					insertChargeInfo.setInt(1,Integer.parseInt(scmLineDetails.getItemCode()));
					insertChargeInfo.setInt(2,Integer.parseInt(scmLineDetails.getChargeQuantity()));
					insertChargeInfo.setDouble(3,Double.parseDouble(scmLineDetails.getChargeValue()));
					insertChargeInfo.setLong(4,empID);
					insertChargeInfo.setInt(5,scmLineDetails.getDeliveryLocationId());
					insertChargeInfo.setInt(6,scmLineDetails.getSubInventryId());
					insertChargeInfo.setInt(7,scmLineDetails.getAop1_Id());
					insertChargeInfo.setInt(8,scmLineDetails.getAop2_Id());
					insertChargeInfo.setString(9,scmLineDetails.getAopYear());
					insertChargeInfo.setString(10,scmLineDetails.getPoNumer());
					insertChargeInfo.setString(11,scmLineDetails.getPoDtae());
					insertChargeInfo.setDouble(12,scmLineDetails.getPoAmount());
					if((scmLineDetails.getIsActiveFlag()=="No")||(scmLineDetails.getIsActiveFlag()=="")){
						insertChargeInfo.setByte(13,isActiveValue);
					}
					else{
						insertChargeInfo.setByte(13,isActive);
					}
					
					insertChargeInfo.setString(14,scmLineDetails.getScmMessage());
					insertChargeInfo.setInt(15,objDto.getServiceProductID());
					insertChargeInfo.setInt(16,0);//chargeId_Scm
					insertChargeInfo.setInt(17,1);//Update flag
					insertChargeInfo.setInt(18, 0);
					insertChargeInfo.setInt(19, 0);
					insertChargeInfo.setInt(20, 0);
					insertChargeInfo.setString(21, "");
					updateFlag=true;
					if(updateFlag==true)
					{
						insertChargeInfo.execute();
					}
					}
				else if(((objDto.getPrId()==0)&&((objDto.getNotSaveInScm()==0)&&(objDto.getSendToSCM()==2))))
				{
					
					
					
					insertChargeInfo.setInt(1,Integer.parseInt(scmLineDetails.getItemCode()));
					insertChargeInfo.setInt(2,Integer.parseInt(scmLineDetails.getChargeQuantity()));
					insertChargeInfo.setDouble(3,Double.parseDouble(scmLineDetails.getChargeValue()));
					insertChargeInfo.setLong(4,empID);
					insertChargeInfo.setInt(5,scmLineDetails.getDeliveryLocationId());
					insertChargeInfo.setInt(6,scmLineDetails.getSubInventryId());
					insertChargeInfo.setInt(7,scmLineDetails.getAop1_Id());
					insertChargeInfo.setInt(8,scmLineDetails.getAop2_Id());
					insertChargeInfo.setString(9,scmLineDetails.getAopYear());
					insertChargeInfo.setString(10,"null");
					insertChargeInfo.setString(11,"null");
					insertChargeInfo.setDouble(12,0.0);
					insertChargeInfo.setByte(13,isActive);
					insertChargeInfo.setString(14,"null");
					insertChargeInfo.setInt(15,objDto.getServiceProductID());
					insertChargeInfo.setInt(16,scmLineDetails.getChargeIdList());//chargeId_Scm
					
					
						if(scmLineDetails.getChargeIdList()!=0)
						{
							insertChargeInfo.setInt(17,2);//upadte flag for Update
						}
						else{
						insertChargeInfo.setInt(17,1);//Update flag	for Insert
						}
						// insertChargeInfo.setInt(17,2);
						insertChargeInfo.setInt(18, 0);
						insertChargeInfo.setInt(19, 0);
						insertChargeInfo.setInt(20, 0);
						insertChargeInfo.setString(21, "");
						updateFlag=true;
						insertChargeInfo.execute();
					}
					
				
				
				}		if(updateFlag==true)
						{
						//insertChargeInfo.execute();
						finalStatus=0;
						}
						else
						{
					objDto.setMsgOut("Some Error has Occured,Please Try Again!!");
					connection.rollback();
						}
			}
			if(finalStatus==0)
			{
				if((objDto.getPrId()!=0)&&(objDto.getPrReuseUpadte()==0))
				{
					objDto.setMsgOut("Data Saved Sucessfully");
					objDto.setSuccessMsgScm("done");
					connection.commit();
				}
				if(objDto.getNotSaveInScm()==0)
				{
					objDto.setMsgOut("Data Saved Sucessfully");
					objDto.setSuccessMsgScm("done");
					connection.commit();
				}
				else{
				objDto.setMsgOut("Data Updated SuccessFully!!");
				objDto.setSuccessMsgScm("done");
				connection.commit();
				}
			}
			else {
				objDto.setMsgOut("Some Error has Occured,Please Try Again!!");
				connection.rollback();
			}
			}
			catch(Exception ex )
			{
				try {
					objDto.setMsgOut("Some Error has Occured,Please Try Again!!");
					connection.rollback();
				} catch (SQLException e) {
					Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"SQL Error at viewProductCatalogForScm: "+msg, logToFile, logToConsole);//added by nagarjuna
					
				}
				Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error at Updating Product CatalogviewProductCatalogForScm : "+msg, logToFile, logToConsole);//added by nagarjuna
				
			}
			finally
			{
				try 
				{
					
					DbConnection.closeCallableStatement(insertServiceAttDet);
					DbConnection.freeConnection(connection);
				} 
				catch (Exception e) 
				{
					Utility.LOG(true, true,"Some Error Occured in updateProductCatelogForScm method of NewOrderDao to Upadte ViewProductCatelog Page"+e);
					
				}
			}
			return objDto;
		}
		
		
		/*This Method is used to fetch SCM pr status on ViewProductCatelog.jsp in Service Summary Section
		 * Added by Deepak Kumar for third party (SCM)
		 */
		public ArrayList<SCMDto> fetchScmPrStatusDetails(ServiceLineDTO lineDTO) 
		{
			
			String methodName="fetchScmPrStatusDetails",  msg="";
			boolean logToFile=true, logToConsole=true;
			Connection connection =null;
			CallableStatement getScmLine=null;
			ResultSet rs = null;
			ArrayList<SCMDto> listScmLine = new ArrayList<SCMDto>();
			SCMDto objNewOrderDto = null;
			
			int recordCount;
			try
			{
				connection=DbConnection.getConnectionObject();
				getScmLine= connection.prepareCall(sqlFetchScmPrDetails);
				getScmLine.setInt(1, lineDTO.getServiceProductID());
				rs = getScmLine.executeQuery();
				while(rs.next())
				{
					objNewOrderDto =  new SCMDto();
					if((null==(rs.getString("PR_NUMBER")))||(("").equalsIgnoreCase((rs.getString("PR_NUMBER")))))
							{
						objNewOrderDto.setPr_number("");
							}
					else{
						objNewOrderDto.setPr_number(rs.getString("PR_NUMBER"));
					}
					if((null==(rs.getString("SCM_PROGRESS_STATUS")))||(("").equalsIgnoreCase((rs.getString("SCM_PROGRESS_STATUS"))))){
						objNewOrderDto.setScmProgress_Status("");
					}
					else{
						objNewOrderDto.setScmProgress_Status(rs.getString("SCM_PROGRESS_STATUS"));
					}
					
					listScmLine.add(objNewOrderDto);
				
				}
			}catch(Exception ex){
				Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error at fetch Scm Pr Status Details for view Update : "+objNewOrderDto.getChargeId_Scm(), logToFile, logToConsole);//added by nagarjuna
				//ex.printStackTrace();	
			}finally{
				try{
					DbConnection.closeResultset(rs);
					DbConnection.closeCallableStatement(getScmLine);
					DbConnection.freeConnection(connection);
				}catch (Exception e){
					Utility.LOG(true, true,"Some Error Occured in fetchScmPrStatusDetails method of NewOrderDao"+e);
					
				}
			}
			return listScmLine;
		}
		/*
		 * This method is used to get serviceDetailId for Third Party
		 * Addded by Deepak Kumar
		 */
		public String getKeyValue() 
		{
			
			String methodName="getKeyValue",  msg="";
			String KeyValue=null;
			boolean logToFile=true, logToConsole=true;
			SCMDto objNewOrderDto = null;
			
			try
			{
				
				KeyValue=Utility.getAppConfigValue(AppConstants.THIRD_PARTY_LINE_ITEM);
				
				Utility.LOG(true, true, "In Method getKeyValue Method of New  Order Dao");
			}
			catch(Exception ex )
			{
				Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error Fetching Key Values from database : "+msg, logToFile, logToConsole);//added by nagarjuna
				
			}
			
			return KeyValue;
		}
		
		
		//[096] Start
				/*
				 * Added By Vipin to get SCMProcessStatus from TPODETAILS
				 * Required to populate Repush XML Button on SCM charge value Updation Page
				 */
				private static String sqlGetSCmProgressStatus=	"SELECT SCM_PROGRESS_STATUS,IS_PR_REUSE from ioe.TPOSERVICEDETAILS where SERVICEPRODUCTID =? with ur";
				public LineItemValueDTO getSCMProgressStatus(int SPId)
				{
					String methodName="getSCMProgressStatus", className=this.getClass().getName(), msg="";
					boolean logToFile=true, logToConsole=true;
					
					Connection connection = null;
					PreparedStatement pstmt = null;
					ResultSet rs = null;
					LineItemValueDTO objLineDto=null;
					String status = "";
					try {
						connection = DbConnection.getConnectionObject();
						pstmt = connection.prepareCall(sqlGetSCmProgressStatus);
						pstmt.setInt(1, SPId);
						rs=pstmt.executeQuery();
						while(rs.next()){
							objLineDto=new LineItemValueDTO();
							objLineDto.setScmProgStatus(rs.getString("SCM_PROGRESS_STATUS"));
							objLineDto.setIsPrReuse(rs.getInt("IS_PR_REUSE"));
							//status = (rs.getString("SCM_PROGRESS_STATUS"));
						}
						
						
					} catch (Exception ex) {
						Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);
					} finally {
						try {
							DbConnection.closePreparedStatement(pstmt);
							DbConnection.freeConnection(connection);
						} catch (Exception e) {
							Utility.LOG(true, true,"Some Error Occured in getSCMProgressStatus method of NewOrderDao"+e);
						}
					}	
					return objLineDto;
				}
				
				
				/*
				 * Method to call method forming xml to repush PR request
				 * Added By Vipin
				 */
				public int callCreateScmXmlRepush(String orderNo,String serviceId,String serviceProductID){
					int res=0;
					SCMBL scmBLObj=new SCMBL();
					Connection conn = null;
					try{
						conn=DbConnection.getConnectionObject();
						if(orderNo!=null && serviceId!=null && serviceProductID!=null){
							System.out.println("VIPIN: "+Integer.parseInt(orderNo)+"  "+Integer.parseInt(serviceId)+"   "+Integer.parseInt(serviceProductID) );
							scmBLObj.createSCMXMLRepush(conn,Integer.parseInt(orderNo),Integer.parseInt(serviceId),AppConstants.REPUSH_EVENT,Integer.parseInt(serviceProductID));
							res=1;
						}
						//add spid too in this method
					}catch(Exception e){
						Utility.LOG(true, true,"Some Error Occured in callCreateScmXmlRepush method of NewOrderDao"+e);
					}
					return res;
				}
				//[096] end
				public String getAttDescKey()
				{
					String methodName="getAttDescKey", className=this.getClass().getName(), msg="";
					boolean logToFile=true, logToConsole=true;
					
					Connection connection = null;
					PreparedStatement pstmt = null;
					ResultSet rs = null;
					String attDescKey = "";
					try {
						connection = DbConnection.getConnectionObject();
						pstmt = connection.prepareCall("SELECT KEYVALUE FROM IOE.TM_APPCONFIG WHERE KEYNAME = 'CIRCLE_ATTRIBUTE_KEY'");
						rs=pstmt.executeQuery();
						while(rs.next()){
							attDescKey = (rs.getString("KEYVALUE"));
						}
						
						
					} catch (Exception ex) {
						Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);
					} finally {
						try {
							DbConnection.closePreparedStatement(pstmt);
							DbConnection.freeConnection(connection);
						} catch (Exception e) {
							Utility.LOG(true, true,"Some Error Occured in getAttDescKey method of NewOrderDao"+e);
						}
					}	
					return attDescKey;
				}
				
				
				
				/*
				 * This method is used to getPr resue data for cancelled prnumber
				 * Addded by Deepak Kumar
				 */
				public ArrayList<SCMDto> getPRDetailsForPRResue(int prId) {
				     
					 Connection connection =null;
					 CallableStatement callState=null;
					 ResultSet rs = null;
					 ArrayList<SCMDto> listPRDetails = new ArrayList<SCMDto>();
					 SCMDto objSCMDto = null;
					 String attdefaultval=null;
					 try{
						 connection=DbConnection.getConnectionObject();
						 callState=connection.prepareCall(sqlGetPRDetailsForPRReuse);
						 callState.setInt(1,1 );//paasing one as isActive parameter   in PR reuse case
						 callState.setInt(2, prId);
				         rs = callState.executeQuery();
				         while(rs.next()){
				        	 objSCMDto=new SCMDto();
				        	 objSCMDto.setPrnumber((rs.getInt("PR_NUMBER")));
				        	 objSCMDto.setAttmasterid_scm(rs.getInt("ATTMASTERID_SCM"));
				        	 objSCMDto.setAttvalue((rs.getString("ATTVALUE")));
				        	 objSCMDto.setDisplayText((rs.getString("DISPLAY_TEXT")));
				        	 objSCMDto.setAttDescription(rs.getString("ATTDESCRIPTION"));
				        	 listPRDetails.add(objSCMDto);
				             
				         	}
				         Utility.SysOut("In getPRDetailsForPRResue"); 
					    }
					 catch(SQLException e){
						 
						 Utility.LOG(true, true, "Exception"+e);
					    }
					 catch(Exception e){
						    
						     Utility.LOG(true, true,"Some Error Occured in getPRDetailsForPRResue method of NewOrderDao"+e);
						    }
					 finally{
						 try{
							 DbConnection.closeResultset(rs);
							 System.out.println("Connection closed");
							 DbConnection.closeCallableStatement(callState);
							 DbConnection.freeConnection(connection);
							} 
						 catch (Exception e){
							 Utility.LOG(true, true,"Some Error Occured in getPRDetailsForPRResue method of NewOrderDao"+e);
							
							 }
					 	} 
					 return listPRDetails;	 
				 }	
				
				
				/*
				 *This method is used to getLabel Value for LOV in serviceSummary 
				 *Added by Deepak Kumar 
				 */
				
				public String [] getDetescrption() {
				     
					 Connection connection =null;
					 SCMDto objSCMDto = null;
					 String attdefaultval=null;
					 String keyValue[]=new String[4];
					 String keyName[]=new String[4];
					 String nfaNumber=null;
					 String circleUnit=null;
					 String requester=null;
					 String preparer=null;
						 try {
							connection=DbConnection.getConnectionObject();
							keyName[0]=AppConstants.NFA_NUMBER_ATT_DESC_KEY;
							keyName[1]=AppConstants.CIRCLE_UNIT;
							keyName[2]=AppConstants.Preparer_Key;
							keyName[3]=AppConstants.Deliver_To_Requester_Key;
							for(int i=0;i<keyName.length;i++)
							{
								keyValue[i]=Utility.getAppConfigValue(keyName[i]);
							}
							
							
							Utility.SysOut("In getDetescrption method of NewOrderDao");
						} 
						 catch (Exception e1)
						 {
							
							
							Utility.LOG(true, true,"Some Error Occured in getDetescrption method of NewOrderDao"+e1);
						}
						
						return keyValue;
						
			  }
				
				
				/*
				 * This method is used to fetch PrId and nfa number
				 * Added by Deepak kumar for Pr Resue
				 */
				public ArrayList<ServiceLineDTO> getPrReueSearch(PagingDto objDto) 
				{
					
						String methodName="getPrReueSearch",  msg="";
						boolean logToFile=true, logToConsole=true;
						
					Connection connection =null;
					CallableStatement getAccountDetails =null;
					ResultSet rsAccountDetails = null;
					ArrayList<ServiceLineDTO> listMainDetailsWithAttributes = new ArrayList<ServiceLineDTO>();
					ServiceLineDTO objNewOrderDto = null;
					int recordCount;
					try
					{
						connection=DbConnection.getConnectionObject();
						getAccountDetails= connection.prepareCall(sqlFetchSearchPrReuse);	
						getAccountDetails.setString(1, objDto.getPrNumber());
						getAccountDetails.setString(2, objDto.getSortBycolumn());
						getAccountDetails.setString(3, objDto.getSortByOrder());
						getAccountDetails.setInt(4, objDto.getStartIndex());
						getAccountDetails.setInt(5, objDto.getEndIndex());
						String keyValue=Utility.getAppConfigValue(AppConstants.NFA_NUMBER_ATT_DESC_KEY);
						getAccountDetails.setString(6, keyValue);
						rsAccountDetails = getAccountDetails.executeQuery();
						
						while(rsAccountDetails.next())
						{
							objNewOrderDto =  new ServiceLineDTO();
							
							objNewOrderDto.setPrId(rsAccountDetails.getInt("PR_ID"));
							objNewOrderDto.setPrNumber(rsAccountDetails.getString("PR_NUMBER"));
							objNewOrderDto.setNfaNumber(rsAccountDetails.getString("ATTVALUE"));
							objNewOrderDto.setServiceProductID(rsAccountDetails.getInt("SERVICEPRODUCTID"));
							objNewOrderDto.setCircle(rsAccountDetails.getString("CIRCLE"));
							recordCount=rsAccountDetails.getInt("FULL_REC_COUNT");
							objNewOrderDto.getPagingSorting().setRecordCount(recordCount);
							objNewOrderDto.setMaxPageNo(objNewOrderDto.getPagingSorting().getMaxPageNumber());
							listMainDetailsWithAttributes.add(objNewOrderDto);
							
						}
						
						
					}
					catch(Exception ex )
					{
						Utility.LOG(true, true,"Some Error Occured in getPrReueSearch method of NewOrderDao"+ex);
						
					}
					finally
					{
						try 
						{
							DbConnection.closeResultset(rsAccountDetails);
							DbConnection.closeCallableStatement(getAccountDetails);
							DbConnection.freeConnection(connection);
						} 
						catch (Exception e) 
						{
							Utility.LOG(true, true,"Some Error Occured in getPrReueSearch method of NewOrderDao"+e);
							
						}
					}
					return listMainDetailsWithAttributes;
				}
				
				
				
				//[097] Start
				private static String sqlGetRfsDateForSCM=	"SELECT RFS_DATE FROM ioe.TPOSERVICEMASTER WHERE SERVICEID=? WITH UR";
				public String getRfsDateForSCM(int serviceID) {
					String methodName="getRfsDateForSCM", className=this.getClass().getName(), msg="";
					boolean logToFile=true, logToConsole=true;
					
					Connection connection = null;
					PreparedStatement pstmt = null;
					ResultSet rs = null;
					String rfsDateForSCM=null;
					try {
						
						connection = DbConnection.getConnectionObject();
						pstmt = connection.prepareCall(sqlGetRfsDateForSCM);
						pstmt.setInt(1, serviceID);
						rs=pstmt.executeQuery();
						while(rs.next()){
							if(null==rs.getDate("RFS_DATE"))
								rfsDateForSCM="";
							else
								rfsDateForSCM = (rs.getDate("RFS_DATE").toString());
						}
						
						
					} catch (Exception ex) {
						Utility.LOG(true, true,"Some Error Occured in getRfsDateForSCM method of NewOrderDao"+ex);
					} finally {
						try {
							DbConnection.closePreparedStatement(pstmt);
							DbConnection.freeConnection(connection);
						} catch (Exception e) {
							Utility.LOG(true, true,"Some Error Occured in getRfsDateForSCM method of NewOrderDao"+e);
						}
					}	
					return rfsDateForSCM;
				}
				//[097] END
				
				
				/* This method is used to get Is_pr_resuse from db
				 * Added by Deepak Kumar
				 * 
				 */
				public SCMDto disableViewScmAttributes(ServiceLineDTO lineDTO) 
				{
					
					String methodName="disableViewScmAttributes",  msg="";
					boolean logToFile=true, logToConsole=true;
					Connection connection =null;
					CallableStatement getScmLine=null;
					ResultSet rs = null;
					
					SCMDto objNewOrderDto = null;
					
					int recordCount;
					try
					{
						connection=DbConnection.getConnectionObject();
						getScmLine= connection.prepareCall(sqlFetchScmIsPrReuse);
						getScmLine.setInt(1, lineDTO.getServiceProductID());
						rs = getScmLine.executeQuery();
						while(rs.next())
						{
							objNewOrderDto =  new SCMDto();
							objNewOrderDto.setIs_Pr_Reuse(rs.getInt("IS_PR_REUSE"));
							objNewOrderDto.setServiceId(rs.getString("SERVICEID"));
							objNewOrderDto.setChangeServiceId(rs.getInt("CHANGE_SERVICEID"));
							return objNewOrderDto;
						
						}
					}catch(Exception ex){
						Utility.LOG(true, true,"Some Error Occured in disableViewScmAttributes method of NewOrderDao"+ex);
					}finally{
						try{
							DbConnection.closeResultset(rs);
							DbConnection.closeCallableStatement(getScmLine);
							DbConnection.freeConnection(connection);
						}catch (Exception e){
							Utility.LOG(true, true,"Some Error Occured in disableViewScmAttributes method of NewOrderDao"+e);
							
						}
					}
					return objNewOrderDto;
				}
				
				
				/*
				 * This method is used to get the saved SCM LineId
				 * Added by Deepak
				 */
				public ArrayList<ChargeDetailsSCM> findScmId(NewOrderDto newOrderDto) {
				     System.out.println("In NEWOrderDao's getPrDetails");
					 Connection connection =null;
					 PreparedStatement callState=null;
					 ResultSet rs = null;
					 ArrayList<ChargeDetailsSCM> chargeDetailsSCMs = new ArrayList<ChargeDetailsSCM>();
					 ChargeDetailsSCM detailsSCM = null;
					 String attdefaultval=null;
					 try{
						 connection=DbConnection.getConnectionObject();
						 callState=connection.prepareStatement(sqlChargeId);
						 callState.setInt(1,newOrderDto.getServiceProductID());
				         rs = callState.executeQuery();
				         while(rs.next()){
				        	 detailsSCM=new ChargeDetailsSCM();
				        	 
				        	 detailsSCM.setChargeIdList(rs.getInt("CHARGEID_SCM"));
				        	 chargeDetailsSCMs.add(detailsSCM);
				             
				         	}
					    }
					
					 catch(Exception e){
						 Utility.LOG(true, true,"Some Error Occured in findScmId method of NewOrderDao"+e);
						    }
					 finally{
						 try{
							 DbConnection.closeResultset(rs);
							 DbConnection.closePreparedStatement(callState);
							 DbConnection.freeConnection(connection);
							} 
						 catch (Exception e){
							 Utility.LOG(true, true,"Some Error Occured in findScmId method of NewOrderDao"+e);
							
							 }
					 	} 
					 return chargeDetailsSCMs;	 
				 }
				
				
				/*
				 * This method is used to delete the SCM line
				 * Added by Deepak
				 */
				public void deleteScmLine(NewOrderDto newOrderDto) {
				     
					 Connection connection =null;
					 PreparedStatement callState=null;
					 
					 try{
						 connection=DbConnection.getConnectionObject();
						 callState=connection.prepareStatement(sqlDelteChargeId);
						 callState.setInt(1,newOrderDto.getServiceProductID());
						 callState.setInt(2,newOrderDto.getChargeId_Scm());
						 callState.execute();
						 Utility.SysOut("Deleted suceesfully");
					    }
					
					 catch(Exception e){
						 Utility.LOG(true, true,"Some Error Occured in deleteScmLine method of NewOrderDao"+e);
						    }
					 finally{
						 try{
						
							 DbConnection.closePreparedStatement(callState);
							 DbConnection.freeConnection(connection);
							} 
						 catch (Exception e){
							 Utility.LOG(true, true,"Some Error Occured in deleteScmLine method of NewOrderDao"+e);
							
							 }
					 	} 
					
				 }
				
				
				/*
				 * This method is used to Validate the prNumber i.e it is used to another line item or not
				 * Added by Deepak
				 */
				public SCMDto getPrValidation(SCMDto dto) {
				     
					 Connection connection =null;
					 CallableStatement callableStatement=null;
					 ResultSet rs = null;
					 SCMDto objSCMDto = null;
					 
					 try{
						 connection=DbConnection.getConnectionObject();
						 callableStatement=connection.prepareCall(sqlValidatePrNumber);
						 callableStatement.setInt(1,dto.getPrId());
						 rs = callableStatement.executeQuery();
				         
				         while(rs.next())
				         {
				        	 objSCMDto=new SCMDto();
				        			        	 
				        	 objSCMDto.setNfaNumber(rs.getString("ATTVALUE"));
				        	
				        }
				        
					    }
					 catch(SQLException e){
						 e.printStackTrace();
						
						 
					    } catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					 finally{
						 try{
							 DbConnection.closeResultset(rs);
							 DbConnection.closeCallableStatement(callableStatement);
							 DbConnection.freeConnection(connection);
							} 
						 catch (Exception e){
							 Utility.LOG(true, true,"Some Error Occured in getPrValidation method of NewOrderDao"+e);
							 
							 }
					 	} 
					 return objSCMDto;	 
				 }
	//[098] Start
	/*
	* This method is used to Fetch Third Party Line State : Active or Inactive
	* Added by VIPIN
	*/
	public String getThirdPartyState() {
				     
					 Connection connection =null;
					 String tpState=null;
					 
						 try {
							connection=DbConnection.getConnectionObject();
							 tpState=Utility.getAppConfigValue(connection,AppConstants.THIRD_PARTY_STATE);
						} catch (Exception e1) {
							Utility.LOG(true, true,"Some Error Occured in getThirdPartyState method of NewOrderDao"+e1);
						}
						
						return tpState;
						
			  }			
	
	private static String sqlGetIsPublished=	"SELECT ISPUBLISHED FROM IOE.TPOSERVICEMASTER WHERE SERVICEID=? WITH UR";
	public int getIsPublished(int serviceID) {
		String methodName="getIsPublished", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		
		Connection connection = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int isPublished=0;
		try {
			
			connection = DbConnection.getConnectionObject();
			pstmt = connection.prepareCall(sqlGetIsPublished);
			pstmt.setInt(1, serviceID);
			rs=pstmt.executeQuery();
			while(rs.next()){
					isPublished=rs.getInt("ISPUBLISHED");
			}
			Utility.LOG("In getIsPublished");
			
		} catch (Exception ex) {
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);
		} finally {
			try {
				DbConnection.closePreparedStatement(pstmt);
				DbConnection.freeConnection(connection);
			} catch (Exception e) {
				Utility.LOG(true, true,"Some Error Occured in getIsPublished method of NewOrderDao"+e);
			}
		}	
		return isPublished;
	}
	//[098] End
	public static String sqlspGetServiceListForOrderAndRole = "{call IOE.SP_GET_SERVICELIST_ROLEWISE(?,?)}";
	public ArrayList<ServiceLineDTO> getServiceListForTheOrderAndRole(long orderNo, int roleId)throws Exception
	{
		String methodName="getServiceListForTheOrderAndRole", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		ServiceLineDTO dto;// = new NewOrderDto();
		ArrayList<ServiceLineDTO> dtoList = new ArrayList<ServiceLineDTO>();
		int recordCount = 0;
		try
		{
			connection=DbConnection.getConnectionObject();
			callstmt= connection.prepareCall(sqlspGetServiceListForOrderAndRole);	
			callstmt.setLong(1, orderNo);
			callstmt.setInt(2, roleId);
			rs = callstmt.executeQuery();
			while(rs.next())
			{
				dto = new ServiceLineDTO();
				dto.setServiceName(rs.getString("SERVICESTAGE"));
				dto.setServiceId(rs.getInt("SERVICEID"));
				dtoList.add(dto);
			}
		}
		catch(Exception ex )
		{
			connection.rollback();
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//nagarjuna
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//nagarjuna
			}
		}
		return dtoList;
	}
	private String sqlGetServicesOwner="{call IOE.SP_GETSERVICESOWNER(?,?)}";
	
	/**
	 * To update ROLE_ORDER_MAPPING table
	 * @return boolean
	 * @param long
	 * @param String
	 * @author Anoop Tiwari
	 * @date 06-Feb-2014
	 */
	public boolean isServicesPresentInUserBin(long orderNo,String ownerId) {
		String msg="in new OrderDao's isServicesPresentInOwnersBin";
		CallableStatement callableStatement = null;
		Connection connection=null;
		String status=null;
		ResultSet rs=null;
		boolean isServicesPresent=false;
		try{
			connection=DbConnection.getConnectionObject();
			callableStatement= connection.prepareCall(sqlGetServicesOwner);
			callableStatement.setLong(1,orderNo);
			callableStatement.setString(2,ownerId);
			rs=callableStatement.executeQuery();
			while(rs.next()){
				if(rs.getInt(1)>0)
					isServicesPresent=true;
				else{
					isServicesPresent=false;
				}
			}
			
		}
		catch(SQLException e){
			e.printStackTrace();
		}
		catch (Exception e) {
			 e.printStackTrace();
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs); 
				DbConnection.closeStatement(callableStatement);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception ex) 
			{
				Utility.LOG(true, true, " Exception in " +msg+ex);
			}
		}
		return isServicesPresent;
	}
	/*	private String sqlGetOrdersOwner="{call IOE.SP_GETORDERSOWNER(?)}";
	function		:getOrdersOwner
	 * return type	:OrderRoleMappingDTO
	 * Author		:Anoop Tiwari
	 * Date			:06-Feb-2014
	 * Purpose		:To Get Order Owner(O2c drop 2). 
	 * 
	public OrderRoleMappingDTO getOrdersOwner(Long orderNo){
		String msg="in new OrderDao's getOrdersOwner";
		System.out.println(msg);
		String owner=null;
		CallableStatement callableStatement = null;
		Connection connection=null;
		OrderRoleMappingDTO objDto=null;
		ResultSet rs=null;
		try{
			objDto=new OrderRoleMappingDTO();
			connection=DbConnection.getConnectionObject();
			System.out.println("Connection cretated");
			callableStatement= connection.prepareCall(sqlGetOrdersOwner);
			callableStatement.setLong(1, orderNo);
			rs=callableStatement.executeQuery();
			System.out.println("Query Executed");
			while(rs.next())
			owner=rs.getString(2);
			System.out.println("Owner of the order is "+owner);
			objDto.setOwnerTypeID(owner);
		}
		catch(SQLException e){
			Utility.LOG(true, true, " Exception in " +msg+e);
		}
		catch (Exception e) {
			Utility.LOG(true, true, " Exception in " +msg+e);
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs); 
				DbConnection.closeStatement(callableStatement);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception ex) 
			{
				Utility.LOG(true, true, " Exception in " +msg+ex);
			}
		}
		return objDto;
	}*/
	
	private String sqlUpdateRoleMapping="{call IOE.SP_UPDATE_ROLE_ORDER_MAPPING(?,?,?,?,?)}";
	/**
	 * To update ROLE_ORDER_MAPPING table
	 * @return boolean
	 * @param long
	 * @param String
	 * @param int
	 * @param Connection
	 * @author Anoop Tiwari
	 * @date 06-feb-2014
	 */
	
	public boolean updateRoleOrderMapping(long orderNo, String roleId,int servicePresent , Connection optionalConn)throws Exception{
		String msg="in new OrderDao's updateRoleOrderMapping";
		System.out.println(msg);
		boolean flag=false;
		boolean connCreatedHere=false;
		Connection connection=null;
		CallableStatement callableStatement=null;
		try{
			if(null == optionalConn){
				connCreatedHere = true;
				connection=DbConnection.getConnectionObject();
				connection.setAutoCommit(false);
			}else
				connection=optionalConn;

			callableStatement=connection.prepareCall(sqlUpdateRoleMapping);
			if(roleId==null)
				roleId="1";
			callableStatement.setLong(1,orderNo);
			callableStatement.setLong(2,new Long(roleId));
			callableStatement.setLong(3,servicePresent);
			callableStatement.registerOutParameter(4, java.sql.Types.VARCHAR);
			callableStatement.registerOutParameter(5, java.sql.Types.INTEGER);
			callableStatement.executeUpdate();
			int result =  callableStatement.getInt(4);
			//if(callableStatement.getString(3).equalsIgnoreCase("INSERTED SUCCESSFULLY")||callableStatement.getString(3).equalsIgnoreCase("UPDATED SUCCESSFULLY")){
			if(result == 1 || result == 2){
				flag=true;
			}
			if(optionalConn==null && flag==true){
				connection.commit();
			}
			
		}catch (Exception ex){			
			Utility.LOG(true, true, " Exception in " +msg+ex);
			try {
				connection.rollback();
			}catch (SQLException e) {
				Utility.LOG(true,true, " Exception in " +msg+e);
			}
		}
		finally{
			try{
				DbConnection.closeStatement(callableStatement);
				if(connCreatedHere){					
					DbConnection.freeConnection(connection);
				}
			}catch (Exception ex) {
				Utility.LOG(true, true, " Exception in " +msg+ex);
			}
		}
		return flag;
	}
	
	public Boolean setOrderServicesInitiater(String orderNo,String roleId, Connection optionalConn ) throws Exception{
		String methodName="setOrderServicesInitiater", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		String serviceId=null;
		Boolean orderServiceInitiaterUodated = false;
		Boolean connCreHere = false;
		String serviceIdString=null;
		try{
			if(null == optionalConn){
				connCreHere = true;
				connection=DbConnection.getConnectionObject();
			}else
				connection=optionalConn;
			callstmt= connection.prepareCall(sqlsetOrderServicesInitiater);
			callstmt.setString(1, orderNo);
			rs = callstmt.executeQuery();
			while(rs.next()){
				if(serviceId==null)
					serviceId = rs.getString("SERVICEID");
				else
					serviceId = serviceId + "," + rs.getString("SERVICEID");
			}
			orderServiceInitiaterUodated = setServicesInitiateTo(serviceId , roleId, connection);
		}catch(Exception ex ){
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//nagarjuna
		}finally{
			try{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callstmt);
				if(connCreHere)
					DbConnection.freeConnection(connection);
			}catch (SQLException e){
				Utility.onEx_LOG_RET_NEW_EX(e, methodName, className,msg, logToFile, logToConsole);//nagarjuna
			}
		}
		return orderServiceInitiaterUodated;
	}
	public Boolean setServicesInitiateTo(String commaSepServices,String roleId, Connection optionalConn) throws Exception{    
		String methodName="setServicesInitiateTo", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		boolean setServiceInitiated=false;
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		long msgCode=1;
		Boolean connCreatHere = false;
		try{
			if(null == optionalConn){
				connection=DbConnection.getConnectionObject();
				connCreatHere = true;
				connection.setAutoCommit(false);
			}else
				connection=optionalConn;
			callstmt= connection.prepareCall(sqlsetServicesInitiateTo);
			
			
			if("null".equalsIgnoreCase(roleId) || roleId==null){
				
				roleId="1";}
			callstmt.setString(1, roleId);
			callstmt.setString(2, commaSepServices);
			callstmt.registerOutParameter(3, java.sql.Types.VARCHAR);
			callstmt.registerOutParameter(4, java.sql.Types.BIGINT);
			callstmt.registerOutParameter(5, java.sql.Types.BIGINT);
			callstmt.executeUpdate();	
			msgCode = callstmt.getLong(5);
			if(msgCode==0){
				setServiceInitiated=true;
			}
			if(connCreatHere && msgCode==0 ){
				connection.commit();
			}
			else if(connCreatHere){
				connection.rollback();
			}
			
		}catch(Exception ex ){
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);
			try {
				connection.rollback();
			} catch (SQLException e) {
				Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);
			}
		}finally{
			try{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callstmt);
				if(connCreatHere){
					DbConnection.freeConnection(connection);
				}
			}catch (SQLException e){
				Utility.onEx_LOG_RET_NEW_EX(e, methodName, className,msg, logToFile, logToConsole);//nagarjuna
			}
		}
		
			return setServiceInitiated;
	}
	public int updateOrderStageAfterApproval(Long orderno, String nextRoleId,String lastTaskRole ,String ownerId,Connection optionalConn){
		CallableStatement callstmt =null;
		boolean connCreatHere=false;
		Connection connection=null;
		String stage=null;
		int count=0;
		int result=0;
		try{
			if(null == optionalConn){
				connection=DbConnection.getConnectionObject();
				connCreatHere = true;
				connection.setAutoCommit(false);
			}else
				connection=optionalConn;
			if(nextRoleId.equalsIgnoreCase(lastTaskRole)){
				callstmt= connection.prepareCall(sqlGetCountService_Stage_Updation);
				callstmt.setLong(1,orderno);
				callstmt.setInt(2,1);
				callstmt.setInt(3, 0);
				callstmt.execute();
				count=callstmt.getInt(3);
				if(count>0){
					stage=AppConstants.ORDER_STAGE_PARTIAL_PUBLISH;
					result=updateOrderStagePI(orderno,stage,connection);
				}	
			}else{
				callstmt= connection.prepareCall(sqlGetCountService_Stage_Updation);
				callstmt.setLong(1,orderno);
				callstmt.setInt(2,2);
				callstmt.setInt(3, 0);
				callstmt.execute();
				count=callstmt.getInt(3);
				if(count>1){
					stage=AppConstants.ORDER_STAGE_PARTIAL_INITIATED;
					result=updateOrderStagePI(orderno,stage,connection);
				}
			}
			if(connCreatHere && result==0){
				connection.commit();
			}else if(connCreatHere){
				connection.rollback();
			}
		}catch(Exception ex){
			ex.printStackTrace();	
			try {
				connection.rollback();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}finally{
			try{
				DbConnection.closeCallableStatement(callstmt);
				if(connCreatHere){
					DbConnection.freeConnection(connection);
				}
			}catch (Exception e){
				e.printStackTrace();
			}
		}
		return result;
	}
	public int updateOrderStagePI(long orderno,String stage,Connection optionalConn) throws Exception{
		CallableStatement callstmt_update =null;
		Connection connection=null;
		int result=-1;
		boolean connCreatHere=false;
		String msg="In NewOrderDao'S updateOrderStagePI ";
		try{	
			if(null == optionalConn){
				connection=DbConnection.getConnectionObject();
				connCreatHere = true;
				connection.setAutoCommit(false);
			}else
				connection=optionalConn;
			callstmt_update= connection.prepareCall(sqlGetUpdateOrderStage);
			callstmt_update.setLong(1,orderno);
			callstmt_update.setString(2,stage);
			callstmt_update.setLong(3, 0);
			callstmt_update.setInt(4, 0);
			callstmt_update.setString(5, "");
			callstmt_update.execute();
			result=callstmt_update.getInt(4);
			if(connCreatHere && result==0){
				connection.commit();
			}else if(connCreatHere){
				connection.rollback();
			}
		}catch (Exception e) {
			Utility.LOG(true, true, " Exception " +msg+e);
			throw new Exception();
		}finally{
			try{
				DbConnection.closeCallableStatement(callstmt_update);
				if(connCreatHere){
					DbConnection.freeConnection(connection);
				}
			}catch (Exception e){
				e.printStackTrace();
			}
		}
		return result;
	}
	private String sqlUpdatePublishReady="{call IOE.SP_UPDATEPUBLISHREADY(?,?,?)}";
	
	/**
	 * To update Publish Ready Flag in tposervicemaster
	 * @return boolean
	 * @param long
	 * @param String
	 * @param Connection
	 * @author Anoop Tiwari
	 * @date 01-Mar-2014
	 */
	public boolean updatePublishReadyFlag(String commSepServices,Connection optionalConn) throws Exception{
		if(null == commSepServices || "".equals(commSepServices.trim())){
			return false;
		}
		String msg="In NewOrdeDao's updatePublishReadyFlag method";
		CallableStatement callstmt_update =null;
		Connection connection=null;
		int result=1;
		boolean success=false;
		boolean connCreatHere=false;
		try{	
			if(null == optionalConn){
				connection=DbConnection.getConnectionObject();
				connCreatHere = true;
				connection.setAutoCommit(false);
			}else{
				connection=optionalConn;
			}
			callstmt_update= connection.prepareCall(sqlUpdatePublishReady);
			callstmt_update.setString(1,commSepServices);
			callstmt_update.registerOutParameter(2, java.sql.Types.VARCHAR);
			callstmt_update.registerOutParameter(3, java.sql.Types.BIGINT);
			callstmt_update.execute();
			result=callstmt_update.getInt(3);
			if(result==0){
				success=true;
			}
			if(connCreatHere && result==0){
				connection.commit();
			}else if(connCreatHere){
				connection.rollback();
			}
		}catch (Exception e) {
			Utility.LOG(true, true, " Exception " +msg+e);
			throw new Exception();
		}finally{
			try{
				DbConnection.closeCallableStatement(callstmt_update);
				if(connCreatHere){
					DbConnection.freeConnection(connection);
				}
			}catch (Exception e){
				e.printStackTrace();
			}
		}
		return success;
	}
	public static String spValidateServiceLevelAttribute="{call IOE.CHECK_SERVICE_ATTRIBUTES_PRESENT(?,?,?)}";
	/*function		:checkServiceAttributePresent
	 * return type	:String
	 * Author		:Saurabh Singh
	 * Date			:01-Mar-2014
	 * Purpose		:To check whether mandatory service level attribute are present for those services,
	 * 				which are currently in present user's bin
	 * */
	public String checkServiceAttributePresent(long orderNo, long roleId) throws Exception
	{
		String methodName="checkServiceAttributePresent", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		Connection connection =null;
		CallableStatement callstmt =null;
		String str="";
		try
		{
			connection=DbConnection.getConnectionObject();
			callstmt= connection.prepareCall(spValidateServiceLevelAttribute);	
			callstmt.setLong(1,orderNo );	
			callstmt.setLong(2, roleId);
			callstmt.setString(3, null);
			callstmt.executeUpdate();
			str=callstmt.getString(3);
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, true, true);//Nagarjuna
		}
		finally
		{
			try 
			{
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
			}
		}
		return str;
	}
	private String sqlUpdatePMAssigned="{call IOE.SP_UPDATE_PM_TASK_ASSIGNED_TO(?,?,?,?)}";
	
	/**
	 *  To update TPOWORKFLOWTASK table for PM
	 * @return boolean
	 * @param long
	 * @param String
	 * @param Connection
	 * @author Saurabh Singh
	 * @date 03-Mar-2014
	 */
	public boolean updatePMAssignedToForPartialInitiated(long orderNo, String ProjectManagerId, Connection optionalConn) throws Exception{
		String msg="in new OrderDao's updatePMAssignedToForPartialInitiated";
		System.out.println(msg);
		boolean flag=false;
		boolean connCreatedHere=false;
		Connection connection=null;
		CallableStatement callableStatement=null;
		try{
			if(null == optionalConn){
				connCreatedHere = true;
				connection=DbConnection.getConnectionObject();
				connection.setAutoCommit(false);
			}else
				connection=optionalConn;

			callableStatement=connection.prepareCall(sqlUpdatePMAssigned);
			callableStatement.setLong(1,orderNo);
			callableStatement.setLong(2,new Long(ProjectManagerId));
			callableStatement.registerOutParameter(3, java.sql.Types.INTEGER);
			callableStatement.registerOutParameter(4, java.sql.Types.VARCHAR);
			callableStatement.executeUpdate();
			int result =  callableStatement.getInt(3);
			if(result == 0){
				flag=true;
			}
			if(connCreatedHere && result == 0){
				connection.commit();
			}else if(connCreatedHere){
				connection.rollback();
			}
			
		}catch (Exception ex){
			Utility.LOG(true, true, " Exception " +msg+ex);
			throw new Exception();
		}
		finally{
			try{
				DbConnection.closeStatement(callableStatement);
				if(connCreatedHere){
					DbConnection.freeConnection(connection);
				}
			}catch (Exception ex) {
				Utility.LOG(true, true, " Exception in " +msg+ex);
			}
		}
		return flag;
	}

	/**
	 * to do partial initiation task
	 * @return ViewOrderDto
	 * @param ViewOrderDto
	 * @param UserInfoDto
	 * @author Anoop Tiwari
	 * @date 13-02-2014
	 */
	public ViewOrderDto  partialInititaionTask(ViewOrderDto objDto, UserInfoDto objUserDto){
		String msg="ParitalInititationTask";
		ViewOrderDto objRetDto=new ViewOrderDto();;
		Connection connection=null;
		boolean dbUpdateSuccess=false;
		boolean rejectionUpdateSuccess=false;
		String orderApprover = objDto.getOwnerId();;
		Utility.LOG(true, false, "Entry in partialInititaionTask Method of NewOrderDo with OwnerID: "+orderApprover);
		boolean partialInitiated = false;
		boolean obTr_orderApproved = false; //flag for insertion data into ob_scheduler		
		try{
			connection=DbConnection.getConnectionObject();
			connection.setAutoCommit(false);
			List<ServiceLineDTO> orderRoleServicesDB = getServiceListForTheOrderAndRole(objDto.getOrderno(),new Integer(objDto.getOwnerId()));
			
			String comSepServiceIDsFromDB = 
				Utility.getCommaSperatedString(orderRoleServicesDB);
			Boolean clepOrder = new NewOrderDaoExt().isClepOrder(objDto.getOrderno());
			List<ViewOrderDto> taskList= new ViewOrderDao().getTaskListOfOrder(objDto.getOrderno());//getting TaskList of current order
			if("2".equalsIgnoreCase(objDto.getActionId())){
				
				/*Vijay
				 * In Rejection Case
				 * insert records into OB_Scheduler in case of Rejection and if COPC approval is prsent.
				 * call a method validateAndsaveDataIntoObScheduler() for this task
				 * 
				 * Note: This code is executed before Rejection activity takes place , as this code uses COPC approval task of TPOWorkflow task 
				 * which would have been changed after rejection code gets executed.
				 */
				if (OBCalculationDao.validateAndsaveDataIntoObScheduler(
						objDto.getOrderno(), OBCalculationDao.Yes,
						OBCalculationDao.Rejection, OBCalculationDao.Yes,
						connection)) {
					objRetDto = SaveChangeOrderAction(objDto, connection);
				}
				if(objRetDto.isSaved()){
					dbUpdateSuccess = true;
					objRetDto.setSaveActionCalled(true);
				}else{
					dbUpdateSuccess=false;
				}
				if(null != comSepServiceIDsFromDB && !"".equals(comSepServiceIDsFromDB.trim())){
					objDto.setServiceList(comSepServiceIDsFromDB);
				}else{
					dbUpdateSuccess = false;
				}
				//String orderCreationSource = getOrderCreationSource(objDto.getOrderno());
				
				/*boolean clepOrder = false;
				if("2".equals(orderCreationSource))
					clepOrder = true;*/
				
				if(dbUpdateSuccess && !clepOrder){
					dbUpdateSuccess = setServicesInitiateTo(
							objDto.getServiceList(),String.valueOf(AppConstants.DRAFT_STAGE), connection);
				}
				if(dbUpdateSuccess && !clepOrder){
					dbUpdateSuccess = updateRoleOrderMapping(
							objDto.getOrderno(), objDto.getOwnerId(),AppConstants.SERVICE_PRESENT_FALSE, connection);
				}
				//rejectionUpdateSuccess=true;
			}else{
				// List<ViewOrderDto> taskList= new ViewOrderDao().getTaskListOfOrder(objDto.getOrderno());//getting TaskList of current order
				//[145] start
				boolean isPermanentDisconnectionSingleThenBulkApproval = false;
				
				String orderStage = OrderStage(objDto.getOrderno(), connection);
				// Note : isPermanentDisconnectionSingleThenBulkApproval proc is only manipulating 'for_bulk_approval' flag ,not calling for common scenerios
						// calling for particular scenerio i.e 'CHK_PD_SINGLE_THEN_BULK_APPROVAL' . 
				if(orderStage.equalsIgnoreCase("AM"))
				{
					isPermanentDisconnectionSingleThenBulkApproval = NewOrderModel.isPermanentDisconnectionSingleThenBulkApproval(String.valueOf(objDto.getOrderno()));
				}	
				//[145] end 
				String comSepSelectedServiceIDs=objDto.getServiceList();/*Utility.getCommaSperatedString(
						objDto.getServiceList());*/
				
				boolean userSelectingAllServices=
					Utility.CompareServiceIDs(orderRoleServicesDB,comSepSelectedServiceIDs);/*Comparing serviceids coming from front end & backend*/
				String nextRole = Utility.getNextOwner(taskList,orderApprover);
				String lastTaskRole = Utility.getLastRole(taskList);
				if(null == nextRole){
					//it means it is the last approver
					if(null != lastTaskRole && lastTaskRole.trim().equalsIgnoreCase(orderApprover))
					nextRole = orderApprover;
				}
				String currentOwner = Utility.getOrderOwnedBy(taskList);
				
				//flag will be set if the role approving the services selects all services
				//Boolean completeRoleServicesApp = false;//
				dbUpdateSuccess=true;//flag will be set when database update is successfull
				boolean orderApproved=false;
				if(orderApprover.equalsIgnoreCase(currentOwner)){ //true:order is in current owner's bin
					if(objDto.isPartialInitiator()){// true:when user is partial initiater
						if(objDto.isAllServicesSelectd()){
							objDto.setServiceList(comSepServiceIDsFromDB);
							orderApproved=true;
						}else if(userSelectingAllServices){
							orderApproved=true;
						}
					}else{//Owner of ther order but not partial initiator
						/*
						completeRoleServicesApp = true;*/
						orderApproved=true;
						objDto.setServiceList(comSepServiceIDsFromDB);
					}	
				}else{                   //user is not owner of the order
					/*if(objDto.isPartialInitiator()){
						if(objDto.isAllServicesSelectd()){
						}
					}*/if(objDto.isAllServicesSelectd()){
						objDto.setServiceList(comSepServiceIDsFromDB);
					}
				}
				if(dbUpdateSuccess && !nextRole.trim().equalsIgnoreCase(orderApprover)){
					dbUpdateSuccess = setServicesInitiateTo(
							objDto.getServiceList(),nextRole, connection);
				}
				if(dbUpdateSuccess && !nextRole.trim().equalsIgnoreCase(orderApprover) && isPermanentDisconnectionSingleThenBulkApproval==false){
					dbUpdateSuccess=updateRoleOrderMapping(
						objDto.getOrderno(), nextRole,1, connection);
					if(dbUpdateSuccess && nextRole.equals(AppConstants.COPC_ROLE) && (objDto.isAllServicesSelectd() || orderApproved)){
						dbUpdateSuccess=updateRoleOrderMapping(objDto.getOrderno(), AppConstants.PM_ROLE,1, connection);
					}
				}	
				
				if(dbUpdateSuccess && !nextRole.trim().equalsIgnoreCase(orderApprover) && (objDto.isAllServicesSelectd() || orderApproved)){
					dbUpdateSuccess=updateRoleOrderMapping(
							objDto.getOrderno(), orderApprover,0, connection);
				}
				if(dbUpdateSuccess && nextRole.trim().equalsIgnoreCase(orderApprover)){
					dbUpdateSuccess=updatePublishReadyFlag(objDto.getServiceList(), connection);
				}	
				if(dbUpdateSuccess){
					if(orderApproved){
						Utility.LOG(true, false, "While going to approve order with OwnerID: "+orderApprover+" and OrderNO: "+objDto.getOrderno());
						objRetDto=SaveChangeOrderAction(objDto,connection);
						if(!objRetDto.isSaved()){
							dbUpdateSuccess=false;
						}else{
							objRetDto.setSaveActionCalled(true);
							obTr_orderApproved=true; //set flag 'true' that means data should be inserted into ob_scheduler in case of COPC approval
						}
						
						if(dbUpdateSuccess && isPermanentDisconnectionSingleThenBulkApproval){
							int bulkApprovalPdFlagSuccess=setBulkApprovalFlagForPD(objDto.getOrderno(), connection);	
							if(bulkApprovalPdFlagSuccess<=0){
								dbUpdateSuccess=false;	
							}
						}
						if(dbUpdateSuccess){
							int result = updateOrderStageAfterApproval(
							objDto.getOrderno(), nextRole,lastTaskRole, orderApprover, connection);
							if(result==-1)
								dbUpdateSuccess=false;
						}
					}else{
						if(AppConstants.AM_ROLE.equals(currentOwner) && Long.valueOf(objDto.getActionId())==1 &&
							(null != objDto.getProjectmanagerassignedId() || objDto.getProjectmanagerassignedId()!="0")){
							/*
							 * 		If Project Manager is selected by AM during Approval and action taken is not rejection
							 */
							dbUpdateSuccess=updatePMAssignedToForPartialInitiated(objDto.getOrderno(), objDto.getProjectmanagerassignedId(), connection);
						}
						if(dbUpdateSuccess){
							int result = updateOrderStagePI(
								objDto.getOrderno(),AppConstants.ORDER_STAGE_PARTIAL_INITIATED,connection);
							if(result==-1){
								dbUpdateSuccess=false;
							}else{
								partialInitiated = true;
							}
						}
					}
				}
				
				/*Vijay
				 * In Approval Case
				 * insert records into OB_Scheduler in case of COPC approval for OB calculation.
				 * OB Calculation would be performed by scheduler later.
				 */
				if(dbUpdateSuccess && obTr_orderApproved && AppConstants.COPC_ROLE.equals(objUserDto.getUserRoleId())){
					Utility.LOG(true, false, "While inserting in OB Scheduler Table with OwnerID : "+orderApprover+" and OrderNO: "+objDto.getOrderno());
					boolean isObDataSuccessfullySave = OBCalculationDao.validateAndsaveDataIntoObScheduler(objDto.getOrderno(), 1, OBCalculationDao.COPC_Approval, 0, connection);
					if(! isObDataSuccessfullySave) 
						dbUpdateSuccess = false;
				}		
				/*end of saving obdata value in OB_Scheduler */
			}
			
			//[130] START
			if(dbUpdateSuccess){
				if( AppConstants.COPC_ROLE.equals(objUserDto.getUserRoleId())){
					if(!("2".equalsIgnoreCase(objDto.getActionId())) && !partialInitiated){
						CustomerAlertService custAlert =new CustomerAlertService();
						boolean isCOPCFirstTimeApproval=custAlert.getIsCOPCFirstTimeApproval(connection,objDto.getOrderno());
						if(isCOPCFirstTimeApproval){
							String [] serviceList=objDto.getServiceList().split(",");
							dbUpdateSuccess=custAlert.updateCOPCCustNotifyflag(connection,serviceList);
						}
					}
				}
				//[130] END
				if(dbUpdateSuccess){
					connection.commit();
				String mailSendingAlert="Click OK to send the mails.";
				objRetDto.setMsgOut("Action taken Successfully. "+mailSendingAlert);
				if( AppConstants.COPC_ROLE.equals(objUserDto.getUserRoleId())){
					if(!("2".equalsIgnoreCase(objDto.getActionId())) && !partialInitiated){
							//PMWelcomeMailModel pmmodel= new PMWelcomeMailModel();
							long orderNo = objDto.getOrderno();
							//objRetDto.setOrderno(orderNo);// orderNo is already updated during approval
							objRetDto.setIsPMWelcomeMail(true);
							//int i=pmmodel.sendPMWelcomeMailAlert(orderNo);							
						}
					}
				if(partialInitiated){
					String orderApproverTaskId = Utility.getTaskId(orderApprover, taskList);
					//objDto.setTaskID(orderApproverTaskId);
					objRetDto.setPartialInitiateTaskID(orderApproverTaskId);
					objRetDto.setServiceList(objDto.getServiceList());
					objRetDto.setIsPartialInitiateMail(1);
						//sendPartialInitiatedMail(objDto, objDto.getServiceList());
					}
				}
			}else{
				if(objRetDto.getMsgOut() != null) 
					objRetDto.setMsgOut("Action Insertion Failed. ");//+objRetDto.getMsgOut()); //appending msg that coming from Proc 
				else
					objRetDto.setMsgOut("Action Insertion Failed");
				objRetDto.setSaveActionCalled(false);
				connection.rollback();
			}
		}catch (Exception ex){
			objRetDto.setMsgOut("Action Insertion Failed");
			objRetDto.setSaveActionCalled(false);
			try {
				connection.rollback();
			} catch (SQLException e) {
				Utility.LOG(true, true, " Exception " +msg+ex);
			}
		}
		finally{
			try{
				DbConnection.freeConnection(connection);
			}catch (Exception ex) {
				Utility.LOG(true, true, " Exception in " +msg+ex);
			}
		}
		Utility.LOG(true, false, "Exiting from partialInititaionTask Method of NewOrderDo with OwnerID: "+orderApprover);
		return objRetDto;
	}
	public int setBulkApprovalFlagForPD(Long orderNo,
			Connection connection) throws Exception{
		String msg = "in setBulkApprovalFlagForPD method of newOrderDao";
		int updateCount = 0;
		PreparedStatement psBulkApprovalFlag =null;
		try
		{

			psBulkApprovalFlag = connection.prepareStatement("UPDATE IOE.TPOMASTER SET FOR_BULK_APPROVAL=? WHERE ORDERNO=?");
			psBulkApprovalFlag.setInt(1,1);
			psBulkApprovalFlag.setLong(2,orderNo);
			updateCount=psBulkApprovalFlag.executeUpdate();
			//connection.commit();

		}catch(Exception ex ){
			Utility.LOG(true, true, ex, msg);
			throw ex;
		}
		finally{
			try{
				DbConnection.closePreparedStatement(psBulkApprovalFlag);
			} 
			catch (Exception e){
				Utility.LOG(true, true, e, msg);
			}
		}
		return updateCount;

	}
	/*
	 * This method is used to getProductname of ThirdParty
	 * Added by Deepak
	 */
	public String getThirdPartyProductName(int serviceDetId) {
	     
		 Connection connection =null;
		 String query=null;
		 PreparedStatement statement=null;
		 String productName=null;
		 ResultSet rset=null;
		 
			 try {
				connection=DbConnection.getConnectionObject();
				query="SELECT SERVICEDETDESCRIPTION FROM ioe.TSERVICETYPEDETAIL WHERE SERVICEDETAILID=?";
				statement=connection.prepareStatement(query);
				statement.setInt(1,serviceDetId);
				rset=statement.executeQuery();
				while(rset.next())
				{
					productName=rset.getString("SERVICEDETDESCRIPTION");
				}
				 
			} catch (Exception e1) {
				Utility.LOG(true, true,"Some Error Occured in getThirdPartyProductName method of NewOrderDao"+e1);
			}
			
			return productName;
			
  }	
	/*
	 * This method is used to Fetch Attribute List for SCM on Product Catelog Interface added by Deepak Kumar
	 */
	public ArrayList<FieldAttibuteDTO> fetchServiceAttributeForSCM(ServiceLineDTO objDto,String roleid) 
	{
		
		String methodName="fetchServiceAttributeForSCM",  msg="";
		boolean logToFile=true, logToConsole=true;
		Connection connection =null;
		CallableStatement callState=null;
		ResultSet rs = null;
		ArrayList<FieldAttibuteDTO> listserviceAttMaster = new ArrayList<FieldAttibuteDTO>();
		FieldAttibuteDTO objNewOrderDto = null;
		String attdefaultval=null;
		String rfsDateForSCM=null;
		
		
		try
		{
			ArrayList<FieldAttibuteDTO> lstServiceSummary = null;
			connection=DbConnection.getConnectionObject();
			callState=connection.prepareCall(sqlFetchServiceAttributeForSCM);	
			callState.setInt(1,objDto.getServiceDetailID());
			callState.setInt(2,Integer.parseInt(roleid ));
			rs = callState.executeQuery();
			
			while(rs.next())
			{

				objNewOrderDto =  new FieldAttibuteDTO();
				
				objNewOrderDto.setProdAttributeID(rs.getInt("ATTMASTERID"));
				objNewOrderDto.setProdAttributeLabel(rs.getString("ATTDESCRIPTION"));
				objNewOrderDto.setAttDefaultVal(rs.getString("ATTDEFAULTVAL"));
				objNewOrderDto.setProdDataType(rs.getString("ATTDATATYPE"));
				objNewOrderDto.setProdAlisName(rs.getString("ALISNAME"));
				objNewOrderDto.setIsServiceSummMandatory(rs.getInt("ISMANDATORY"));
				objNewOrderDto.setIsCommercial(rs.getInt("IS_COMMERCIAL"));
				objNewOrderDto.setAttributeKey(rs.getString("ATTRIBUTE_KEY"));
				if(rs.getString("EXPECTEDVALUE").equalsIgnoreCase("DROPDOWN"))
				{
				  lstServiceSummary = getServiceSummary(rs.getInt("ATTMASTERID"));
				  objNewOrderDto.setServiceSummary(lstServiceSummary);
				  objNewOrderDto.setProdExpectedValue(rs.getString("EXPECTEDVALUE"));
				}
				
				else if(rs.getString("EXPECTEDVALUE").equalsIgnoreCase("LOV"))
				{
				  lstServiceSummary = getServiceSummary(rs.getInt("ATTMASTERID"));
				  objNewOrderDto.setServiceSummaryLov(lstServiceSummary);
				  objNewOrderDto.setProdExpectedValue(rs.getString("EXPECTEDVALUE"));
				 
				}
				else if(rs.getString("EXPECTEDVALUE").equalsIgnoreCase("DATETIME"))
				{
					SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
					SimpleDateFormat sdf2 = new SimpleDateFormat("dd/MM/yyyy");
					
					if(objNewOrderDto.getAttributeKey().equals("need_by_date"))
					{						
						rfsDateForSCM = getRfsDateForSCM(objDto.getServiceId());
						if(rfsDateForSCM != "")				
							rfsDateForSCM=sdf2.format(sdf1.parse(rfsDateForSCM));;
						objNewOrderDto.setRfsDate(rfsDateForSCM);
						objNewOrderDto.setProdExpectedValue(rs.getString("EXPECTEDVALUE"));
					}else if(objNewOrderDto.getAttributeKey().equals("creation_date"))
					{
						Date date = new Date();			
							rfsDateForSCM=sdf2.format(date);;
						objNewOrderDto.setRfsDate(rfsDateForSCM);
						objNewOrderDto.setProdExpectedValue(rs.getString("EXPECTEDVALUE"));
					}
					else{
						objNewOrderDto.setRfsDate("");
						 objNewOrderDto.setProdExpectedValue(rs.getString("EXPECTEDVALUE"));
						}
				}
				
				else
				{
				 objNewOrderDto.setProdExpectedValue(rs.getString("EXPECTEDVALUE"));
				}
				objNewOrderDto.setProdAttMaxLength(rs.getInt("MAXLENGTH"));
				objNewOrderDto.setMandatory(rs.getString("MANDATORY"));
				
				attdefaultval=rs.getString("ATTDEFAULTVAL");
				if(attdefaultval == null)
				{
					attdefaultval = "";
					objNewOrderDto.setDefValue(attdefaultval);
				}
				else
				{
					objNewOrderDto.setDefValue(rs.getString("ATTDEFAULTVAL"));
				}
				objNewOrderDto.setAttMasterId(rs.getLong("SERVICE_SUMMARY_ATT_ID"));
				objNewOrderDto.setLinkPopUpId(rs.getString("LINK_POPUP_ID"));
				objNewOrderDto.setFor_validation(rs.getString("FOR_VALIDATION"));
				objNewOrderDto.setIsServiceSummReadonly(rs.getInt("ISREADONLY"));
				objNewOrderDto.setParntAttId(rs.getInt("PARENT_ATTRMASTERID"));
				objNewOrderDto.setIsParentAtt(rs.getInt("IS_PARENT_ATT"));
				listserviceAttMaster.add(objNewOrderDto);
			
			}
		}
		catch(Exception ex )
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Fetching ServiceAttributeListForSCM  : "+msg, logToFile, logToConsole);
			
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callState);
				DbConnection.freeConnection(connection);
				Utility.LOG(true, true, "In fetchServiceAttributeForSCM Method of NewOrderDo:");
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, "Some Exception Occured during Fetching Service Summary Section for SCM  Page:"+e);
				
			}
		}
		return listserviceAttMaster;
	}
	
	/*
	 * This method is used to getServiceStatus 
	 * Added by Deepak
	 */
	public int getServiceStatus(int serviceID) {
	     
		 Connection connection =null;
		 String query=null;
		 PreparedStatement statement=null;
		 int status=0;
		 ResultSet rset=null;
		 
			 try {
				connection=DbConnection.getConnectionObject();
				query="SELECT IS_SERVICE_INACTIVE FROM ioe.TPOSERVICEMASTER WHERE SERVICEID=?";
				statement=connection.prepareStatement(query);
				statement.setInt(1,serviceID);
				rset=statement.executeQuery();
				while(rset.next())
				{
					status=Integer.parseInt(rset.getString("IS_SERVICE_INACTIVE"));
				}
				Utility.LOG(true, true, "In getServiceStatus method of NewOrderDao");
			} catch (Exception e1) {
				Utility.LOG(true, true,"Some Error Occured in getServiceStatus method of NewOrderDao"+e1);
			}
			
			return status;
			
  }
  //[0099]Nagarjuna For WelcomeMail Jsp page
	public static String updatePMWelcomeMail = "{call IOE.SP_UPDATE_PMWELCOMEMAIL_MODIFIED(?,?,?,?,?,?)}";
	public String updatePMWelcomeMail(ReportsDto objDto) throws Exception
    {
	String methodName="fetchBusinessSegment", className=this.getClass().getName();
	String  result=null;
	      Connection conn = null;
		try {
			conn=DbConnection.getConnectionObject();
		} catch (ClassNotFoundException ex) {
			Utility.LOG(true, false, ex, "Connection Error....");
			ex.printStackTrace();
		}
		catch (Exception e) {
			Utility.LOG(true, false, e, "Connection Error....");
			e.printStackTrace();
		}
         
         CallableStatement cs=null;
         
          try{          
                                 	  	
            	  	cs = conn.prepareCall(updatePMWelcomeMail);
            	  	
            	  	cs.setString(1,objDto.getMailBody());
            	  	cs.setString(2,objDto.getMailBodyPart2());
            	  	cs.setString(3,objDto.getMailBodyPart3());
            	  	cs.setString(4,objDto.getMailBodyPart4());
            	  	cs.setString(5,objDto.getMailBodyPart5());
            	  	cs.registerOutParameter(6, java.sql.Types.VARCHAR);
            	  	cs.execute();
            	  	
            	  	result=cs.getString(6);
            	  	//System.out.println("value in pm dao"+objDto.getMsgID());
          }
          catch (SQLException ex) {
        	  
        	  	//Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, "SQLException...", logToFile, logToConsole);
				ex.printStackTrace();
			}
          catch (Exception e) {
        	  	//Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, "Exception...", logToFile, logToConsole);
				e.printStackTrace();
			}finally {
				try {
					
					DbConnection.freeConnection(conn);
					
				} catch (Exception e) {
				//	Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, "Exception in Final Block", logToFile, logToConsole);
					e.printStackTrace();
				}
		}
              
			return result;
              
          }
		  
		  
		  	//public static String getPMWelcomeMail = "{call IOE.SP_UPDATE_PMWELCOMEMAIL(?,?,?,?)}";
	public ArrayList<ReportsDto> getPMWelcomeMail() throws Exception
    {
	String methodName="fetchBusinessSegment", className=this.getClass().getName();
	String  result=null;
	      Connection conn = null;
		try {
			conn=DbConnection.getConnectionObject();
		} catch (ClassNotFoundException ex) {
			Utility.LOG(true, false, ex, "Connection Error....");
			ex.printStackTrace();
		}
		catch (Exception e) {
			Utility.LOG(true, false, e, "Connection Error....");
			e.printStackTrace();
		}
		 
		 ArrayList<ReportsDto> l1=null;
         try{
        	 ReportsDto pmDto= new ReportsDto();
        	 l1= new ArrayList();
        	 pmDto.setMailSubject(Utility.getAppConfigValue("PM_WELCOME_MAIL_BODY_SUBJECT"));
        	 pmDto.setMailBody(Utility.getAppConfigValue("PM_WELCOME_MAIL_BODY_MAILBODY_1"));
        	 pmDto.setMailBodyPart2(Utility.getAppConfigValue("PM_WELCOME_MAIL_BODY_MAILBODY_2"));
        	 pmDto.setMailBodyPart3(Utility.getAppConfigValue("PM_WELCOME_MAIL_BODY_MAILBODY_3"));
        	 pmDto.setMailBodyPart4(Utility.getAppConfigValue("PM_WELCOME_MAIL_BODY_MAILBODY_4"));
        	 pmDto.setMailBodyPart5(Utility.getAppConfigValue("PM_WELCOME_MAIL_BODY_MAILBODY_5"));
        	 l1.add(pmDto);
         
         } catch (Exception e) {
        	 
        	  	//Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, "Exception...", logToFile, logToConsole);
				e.printStackTrace();
			}finally {
				try {
					
					DbConnection.freeConnection(conn);
					
				} catch (Exception e) {
				//	Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, "Exception in Final Block", logToFile, logToConsole);
					e.printStackTrace();
				}
		}
              
			return l1;
              
          }
	
	//[0099]End Nagarjuna For WelcomeMail Jsp page

	
	public static String sqlLinkedServiceForMBIC = "{call IOE.SP_GET_LINKED_SERVICE_STATUS(?)}";
	public List<Integer> serviceLinkingForPI(int orderNo)throws Exception
	{
		String methodName="serviceLinkingForPI", className=this.getClass().getName(), msg="";
		HashMap<Integer, Integer> map=new HashMap<Integer, Integer>();
		boolean logToFile=true, logToConsole=true;
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs = null;
		Integer status=null;
		ServiceLineDTO dto;// = new NewOrderDto();
		ArrayList<ServiceLineDTO> dtoList = new ArrayList<ServiceLineDTO>();
		List<Integer> serviceList=new ArrayList<Integer>();
		int recordCount = 0;
		try
		{
			connection=DbConnection.getConnectionObject();
			callstmt= connection.prepareCall(sqlLinkedServiceForMBIC);	
			callstmt.setLong(1, orderNo);
			rs = callstmt.executeQuery();
			while(rs.next())
			{
				dto = new ServiceLineDTO();
				dto.setServiceName(rs.getString("SERVICESTAGE"));
				dto.setServiceId(rs.getInt("SERVICENO"));
				dto.setMbic_ServiceId(rs.getInt("MBIC_SERVICE_ID"));
				dtoList.add(dto);
			}
			for(ServiceLineDTO lineDTO:dtoList)
			{
				map.put(lineDTO.getServiceId(),lineDTO.getMbic_ServiceId());
			}
				Set<Integer> keySet=map.keySet();
				Collection<Integer> values=map.values();
				for(Integer obj:keySet)
				{
					
					Integer value1=map.get(obj);
					if(map.containsKey(value1))
					{
						System.out.println("in contains key bllock"+obj);
						serviceList.add(obj);
						serviceList.add(value1);
						
					}
					
				}
		}
		catch(Exception ex )
		{
			connection.rollback();
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//nagarjuna
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callstmt);
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);//nagarjuna
			}
		}
		return serviceList;
	}
		public ArrayList<ViewOrderDto> populateReasonForCancel(String ordServFlag)throws Exception
	{

		//Nagarjuna	
		String methodName="populateReasonForCancel", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		//end Nagarjuna
		Connection connection =null;
		CallableStatement callstmt =null;
		ResultSet rs=null;
		ViewOrderDto vrderDto=null;
		ArrayList<ViewOrderDto> objRetDto = new ArrayList<ViewOrderDto>();
		try
		{
			connection=DbConnection.getConnectionObject();
			
			callstmt= connection.prepareCall(sqlgetReasonForCancel);		
			callstmt.setString(1, ordServFlag);
			rs=callstmt.executeQuery();
			while(rs.next())
			{	
				vrderDto=new ViewOrderDto();
				vrderDto.setReasonID(rs.getInt("CANCELLATION_REASON_ID"));
				vrderDto.setReasonName(rs.getString("CANCELLATION_REASON"));
			
				objRetDto.add(vrderDto);
			}
		}
		catch(Exception ex )
		{
			connection.rollback();
			
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(callstmt);
				callstmt.close();
				DbConnection.freeConnection(connection);
			} 
			catch (SQLException e) 
			{
				
				Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg, logToFile, logToConsole);
			}
		}
		return objRetDto;
   }
		public static int getLinesCount(Connection conn, long orderNo) throws Exception{
			int countLines=0;
			PreparedStatement pstmt= null;
			ResultSet rs=null;
			try{
				pstmt=conn.prepareStatement(sqlGetNewOrderLineCount);
				pstmt.setLong(1, orderNo);
				rs=pstmt.executeQuery();
				if(rs.next()){
					countLines=rs.getInt(1);				
				}
			}finally{
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(pstmt);
			}
			return countLines;
		}

		public static OrderDto getCommittedUnCommittedReadServiceCount(
				Connection conn, long currentOrderNo) throws Exception{
			OrderDto resultDto=new OrderDto();
			
			PreparedStatement pstmtServiceCount = null;
			ResultSet rsServiceCount= null;
			PreparedStatement pstmtWithUrServiceCount = null;
			ResultSet rsWithUrServiceCount = null;
			try{
				pstmtServiceCount = conn.prepareStatement(sqlGetServiceCount);
				pstmtServiceCount.setLong(1, currentOrderNo);
				rsServiceCount= pstmtServiceCount.executeQuery();
				if(rsServiceCount.next()){
					resultDto.setCommittedServiceCount(rsServiceCount.getInt(1));
				}
				
				pstmtWithUrServiceCount = conn.prepareStatement(sqlGetWithUrServiceCount);
				pstmtWithUrServiceCount.setLong(1, currentOrderNo);
				rsWithUrServiceCount= pstmtWithUrServiceCount.executeQuery();
				if(rsWithUrServiceCount.next()){
					resultDto.setUncommittedReadServiceCount(rsWithUrServiceCount.getInt(1));
				}
			}finally{
				DbConnection.closeResultset(rsServiceCount);
				DbConnection.closeResultset(rsWithUrServiceCount);
				DbConnection.closePreparedStatement(pstmtServiceCount);
				DbConnection.closePreparedStatement(pstmtWithUrServiceCount);
			}
			
			return resultDto;
		}

		public static HashMap<Long, Integer> getServiceLineCount(
				Connection conn, Long[] serviceIds) throws Exception{
			HashMap<Long,Integer> hmap_serviceId_countLines = new HashMap<Long, Integer>();
			
			String csvServiceIds=Utility.getCsv(serviceIds);
			//[148] Start
			String sqlGetServiceLinesCount = "SELECT SERVICEID,count(1) FROM ioe.tposervicedetails SD inner join IOE.TSERVICETYPEDETAIL STD ON STD.SERVICEDETAILID=SD.SERVICEDETAILID AND STD.ISACTIVE=1 where SERVICEID in (@csvServiceIds) group by SERVICEID"
					.replaceAll("@csvServiceIds", csvServiceIds);
			
			/*String sqlGetServiceLinesCount = "SELECT SERVICEID,COUNT(1) FROM IOE.TPOSERVICEDETAILS SD"
											  +" INNER JOIN IOE.TSERVICETYPEDETAIL STD ON STD.SERVICEDETAILID=SD.SERVICEDETAILID AND STD.ISACTIVE=1"
											  +" WHERE SERVICEID IN (@csvServiceIds)"
											  +" GROUP BY SERVICEID"
											  .replaceAll("@csvServiceIds", csvServiceIds);*/
			//[148] End
			
			Statement stmt=null;
			ResultSet rs=null;
			try{
				stmt=conn.createStatement();
				rs=stmt.executeQuery(sqlGetServiceLinesCount);
				while(rs.next()){
					hmap_serviceId_countLines.put(rs.getLong(1), rs.getInt(2));
				}
			}finally{
				DbConnection.closeResultset(rs);
				DbConnection.closeStatement(stmt);
			}
			
			return hmap_serviceId_countLines;
		}
/**
		 * To fetch list of services which are to be cancelled
		 * @author Gunjan
 * @param pageSize 
		 * @param LSICancellationDto
		 * @return ArrayList
		 * @throws Exception
		 */
		//[120] start
		public ArrayList<LSICancellationDto> viewEligibleLSICancelList(LSICancellationDto objDto, int startIndex, int endIndex, int pagingRequired, int pageSize) throws Exception {
			String methodName="viewEligibleLSICancelList", className=this.getClass().getName(), msg=" from viewEligibleLSICancelList";
			boolean logToFile=true, logToConsole=true;
		   ArrayList<LSICancellationDto> objLSIList = new ArrayList<LSICancellationDto>();
		   Connection conn = null;
		   ResultSet rs = null;
		   CallableStatement cstmt = null;
		   int recordCount = 0;
		    String searchCRMOrder = objDto.getSearchCRMOrder();
			String searchAccountNo  = objDto.getSearchAccountNo();
			String searchAccountName=objDto.getSearchAccountName();
			String searchLSI=objDto.getSearchLSI();
			String searchFromOrderDate=objDto.getSearchFromOrderDate();
			String searchToOrderDate=objDto.getSearchToOrderDate();
			String searchServiceNo=objDto.getSearchServiceNo();
			DateFormat df=new SimpleDateFormat("dd/MM/yyyy");
			
		   try {
			   
			ArrayList<ViewOrderDto> cancellationReasonList=populateReasonForCancel(AppConstants.ACTION_SERVICE);   //for s
			   
			conn=DbConnection.getConnectionObject();
			cstmt=conn.prepareCall(sqlgetEligibleLSIForCancelList);
			
			if (searchLSI == null || searchLSI.trim().equals("")) {
				cstmt.setNull(1, java.sql.Types.BIGINT);
			} else {
				cstmt.setLong(1, Long.parseLong(searchLSI));
			}
			if (searchFromOrderDate == null || searchFromOrderDate.trim().equals("")) {
				cstmt.setNull(2, java.sql.Types.DATE);
			} else {
				//conversion of string to date
				Date fromDate=df.parse(searchFromOrderDate);
				cstmt.setDate(2, new java.sql.Date(fromDate.getTime()));
				//cstmt.setString(2, searchFromOrderDate);
			}
			
			if (searchToOrderDate == null || searchToOrderDate.trim().equals("")) {
				cstmt.setNull(3, java.sql.Types.DATE);
			} else {
				//conversion of string to date
				Date toDate=df.parse(searchToOrderDate);
				cstmt.setDate(3, new java.sql.Date(toDate.getTime()));
			}
			if (searchAccountName == null || searchAccountName.trim().equals("")) {
				cstmt.setNull(4, java.sql.Types.VARCHAR);
			} else {
				cstmt.setString(4, searchAccountName);
			}
			if (searchAccountNo == null || searchAccountNo.trim().equals("")) {
				cstmt.setNull(5, java.sql.Types.BIGINT);
			} else {
				cstmt.setString(5, searchAccountNo);
			}
			if (searchCRMOrder == null || searchCRMOrder.trim().equals("")) {
				cstmt.setNull(6, java.sql.Types.BIGINT);
			} else {
				cstmt.setLong(6, Long.parseLong(searchCRMOrder));
			}
			
			if (searchServiceNo == null || searchServiceNo.trim().equals("")) {
				cstmt.setNull(7, java.sql.Types.BIGINT);
			} else {
				cstmt.setLong(7, Long.parseLong(searchServiceNo));
			}
			//PagingSorting pagingSorting = objDto.getPagingSorting();
			//pagingSorting.sync();// To calculate start index and Enc Index
			cstmt.setString(8, "LOGICAL_SI_NO");// columnName
			cstmt.setString(9, PagingSorting.increment);// sort order
			cstmt.setInt(10, startIndex /*pagingSorting.getStartRecordId()*/);// start index
			cstmt.setInt(11, endIndex /*pagingSorting.getEndRecordId()*/);// end index
			/*if (searchCRMOrder == null || searchCRMOrder.trim().equals("")) {
				cstmt.setNull(12, java.sql.Types.VARCHAR);
			} else {
				cstmt.setString(12, objDto.getSearchLSIScenario());
			}*/
			cstmt.setString(12,objDto.getSearchLSIScenario());
			/*cstmt.setString(13,pagingRequired);*/    
			rs=cstmt.executeQuery();
			
			
			
			while (rs.next()) {	
					objDto= new LSICancellationDto(pageSize);
					objDto.setSearchLSI(rs.getString("LOGICAL_SI_NO"));
					objDto.setSearchCRMOrder(rs.getString("ORDERNO"));
					objDto.setOrdType(rs.getString("ORDERTYPE"));
					objDto.setOrdChangeType(rs.getString("CHANGETYPENAME"));
					objDto.setOrdSubChangeType(rs.getString("SUBCHANGETYPE"));
					objDto.setOrdStage(rs.getString("STAGE"));
					objDto.setSearch_ord_create_date(df.format(rs.getDate("ORDERDATE")));
					objDto.setSearchServiceNo(rs.getString("SERVICEID"));
					objDto.setServiceName(rs.getString("SERVICESTAGE"));// not defined in proc
					objDto.setSearchAccountNo(rs.getString("CRMACCOUNTNO"));
					objDto.setSearchAccountName(rs.getString("ACCOUNTNAME"));
					objDto.setProductName(rs.getString("PRODUCTNAME"));
					objDto.setSubProductName(rs.getString("SERVICESUBTYPENAME"));
					objDto.setCancelllationReasonList(cancellationReasonList);
					recordCount=rs.getInt("FULL_REC_COUNT");
					objDto.getPagingSorting().setRecordCount(recordCount);
					objDto.setMaxPageNo(objDto.getPagingSorting().getMaxPageNumber()/*/25*/);

					objLSIList.add(objDto);
					
				
			}
		} catch (Exception e) {
			Utility.LOG(true, false, e, msg);
		}
		   finally{
			   DbConnection.closeResultset(rs);
			   DbConnection.closeCallableStatement(cstmt);
			   DbConnection.freeConnection(conn);
		   }
			return objLSIList;
		}
/**
		 * 
		 * @param LSICancellationDto
		 * @return ArrayList
		 * @throws Exception
		 * @author IBM_ADMIN
		 * @since July 2014
		 */
		public String LSICancellation(LSICancellationDto dto,long empID ) throws Exception {
			
			String methodName="LSICancellation",  msg=null;
			Connection connection =null;
			String customMsg="";
			CallableStatement callstmt =null;
			CallableStatement callstmtServiceCancel =null;
			boolean isAllSuccess=true;
			ArrayList<LSICancellationDto> list=dto.getLSICancellationDtolist();
			try {
				connection=DbConnection.getConnectionObject();
				connection.setAutoCommit(false);
				if(list !=null){
						for(LSICancellationDto objDto:list)
						{
							callstmt=connection.prepareCall(sqlvalidateservicesbeforecancel);
							Long serviceid=Long.parseLong(objDto.getSearchServiceNo());
							
							msg=":: from method LSICancellation() on cancel service:: "+serviceid;
							
							callstmt.setLong(1,serviceid);
							callstmt.setString(2,dto.getSearchLSIScenario());
							callstmt.registerOutParameter(3, java.sql.Types.NUMERIC);
							callstmt.registerOutParameter(4, java.sql.Types.VARCHAR);
							callstmt.registerOutParameter(5, java.sql.Types.VARCHAR);
							callstmt.registerOutParameter(6, java.sql.Types.VARCHAR);
							callstmt.registerOutParameter(7, java.sql.Types.VARCHAR);
							callstmt.execute();
							
							String flag=callstmt.getString(7);
							String diagnostic=callstmt.getString(5);
							String valCustomMsg=callstmt.getString(6);
							String msgcode=callstmt.getString(4);
							
							if("SUCCESS".equalsIgnoreCase(flag)){
								//After validation success for service then this service goes to cancelation section
								//before service cancellation calling OB validation API.
								boolean isObDataSuccessfullySave = OBCalculationDao.validateAndsaveDataIntoObScheduler(serviceid,
										OBCalculationDao.No, OBCalculationDao.ServiceCancel,
										OBCalculationDao.Yes, connection);
								
								callstmtServiceCancel=connection.prepareCall(sqlCancelLsi);
								callstmtServiceCancel.setLong(1, serviceid);
								callstmtServiceCancel.setString(2, dto.getSearchLSIScenario());
								callstmtServiceCancel.setLong(3, objDto.getCancellationReasonId());
								callstmtServiceCancel.setString(4, objDto.getCancellationRemarks());
								callstmtServiceCancel.registerOutParameter(5, java.sql.Types.INTEGER);
								callstmtServiceCancel.registerOutParameter(6, java.sql.Types.VARCHAR);
								callstmtServiceCancel.registerOutParameter(7, java.sql.Types.VARCHAR);
								callstmtServiceCancel.setLong(8, empID);
								callstmtServiceCancel.execute();
														
								String canDiagnostic=callstmtServiceCancel.getString(7);
								String canMsgcode=callstmtServiceCancel.getString(6);
								if("0".equalsIgnoreCase(canMsgcode)){
									connection.commit();
								}else{
									msg=msg+" Error:"+canDiagnostic;
									Utility.LOG(msg);
									isAllSuccess=false;
									connection.rollback();
								}
							}else{
								customMsg=customMsg+"[ServiceId:"+serviceid+"][Failed:"+valCustomMsg+"]\n";
								msg=msg+" "+customMsg+" Error:"+diagnostic;
								isAllSuccess=false;
								Utility.LOG(msg);
							}										
						}
				}
				if(isAllSuccess){
					customMsg="Service(s) cancelled successfully!!!";
				}
				
			} catch (Exception e) {
				Utility.LOG(true, false, e, msg);
				customMsg="Internal error";
				connection.rollback();
			}finally{
			    DbConnection.closeCallableStatement(callstmt);
			    DbConnection.closeCallableStatement(callstmtServiceCancel);
				DbConnection.freeConnection(connection);
		   }
			
			return customMsg;
		}
		//[120] end
		//[121] Start VIPIN
		/**
		 * 
		 * @param orderNo
		 * @param roleId
		 * @param connection
		 * @return Map
		 * @author vipin
		 * @since jul 2014
		 */
		private static String sqlProcessChargeDetailsForDCHWChargeValidationsAndUpdation=	"SELECT TSD.SERVICEPRODUCTID,TCM.CHARGE_NAME,TSM.SERVICEID,TSD.SERVICEID AS TSD_SERVICEID,TBI.IS_SERV_TAX_PRESENT_HW"+
																			" FROM IOE.TPOSERVICEDETAILS TSD "+
																			" INNER JOIN IOE.TDISCONNECTION_HISTORY TDH ON TDH.SERVICE_PRODUCT_ID=TSD.SERVICEPRODUCTID"+
																			" INNER JOIN IOE.TPOSERVICEMASTER TSM ON TSM.SERVICEID = TDH.MAIN_SERVICEID AND IS_SERVICE_INACTIVE=0"+
																			" INNER JOIN IOE.TPOMASTER TPOMASTER ON TPOMASTER.ORDERNO = TSM.ORDERNO"+
																			" INNER JOIN IOE.TSERVICETYPEDETAIL TSTD ON TSTD.SERVICEDETAILID=TSD.SERVICEDETAILID AND TSTD.SERVICE_SALES_TAX_LOGIC=1"+
																			" INNER JOIN IOE.TBILLING_INFO TBI ON TBI.SERVICEPRODUCTID=TSD.SERVICEPRODUCTID"+
																			" INNER JOIN ioe.TCHARGES_INFO TCHARGES_INFO ON TCHARGES_INFO.SERVICEPRODUCTID=TSD.SERVICEPRODUCTID"+
																			" INNER JOIN IOE.TPRODUCT_CHARGENAME_MAPPING TCM ON TCHARGES_INFO.CHARGENAME=TCM.MAPPING_ID"+
																			" WHERE  TPOMASTER.ORDERNO=?  AND PARENT_SERVICEPRODUCTID <> 0 AND (TPOMASTER.STAGE='New' OR TSM.INITIATED_TO=?) AND TSM.ISPUBLISHED=0"+
																			" ORDER BY TSD.SERVICEPRODUCTID WITH UR";
		public Map<Long,ChargesDto> processChargeDetailsForDCHWChargeValidationsAndUpdation(Connection connection,long orderNo,int roleId) {
				String methodName="getChargeDetailsForDCHWChargeValidations", className=this.getClass().getName(), msg="";
				boolean logToFile=true, logToConsole=true;
				
				PreparedStatement pstmt = null;
				ResultSet rs = null;
				String res=null;
				Map<Long,ChargesDto> map = new HashMap<Long,ChargesDto>();
				ChargesDto temp=null;
				Set<String> set=null;
				try {
					pstmt = connection.prepareCall(sqlProcessChargeDetailsForDCHWChargeValidationsAndUpdation);
					pstmt.setLong(1, orderNo);
					pstmt.setInt(2, roleId);
					rs=pstmt.executeQuery();
					while(rs.next()){
					//-----------------------------------------------------------------
						temp = null;
						if(null==map.get(rs.getLong("SERVICEPRODUCTID"))){
							set= new TreeSet<String>();
							set.add(rs.getString("CHARGE_NAME"));
							temp = new ChargesDto(rs.getLong("SERVICEPRODUCTID"), set, rs.getInt("SERVICEID"), 
									rs.getInt("TSD_SERVICEID"),rs.getInt("IS_SERV_TAX_PRESENT_HW"));
						}else{
							temp=map.get(rs.getLong("SERVICEPRODUCTID"));
							set=temp.getChargesList();
							set.add(rs.getString("CHARGE_NAME"));
							temp.setChargesList(set);				
						}
						map.put(rs.getLong("SERVICEPRODUCTID"), temp);
					//-----------------------------------------------------------------
					}
					System.out.println("****************** "+map);
					
				} catch (Exception ex) {
					Utility.LOG(true, true, ex, "Some Error Occured in GetChargeDetailsForDCHWChargeValidations method of NewOrderDao");
				} finally {
					try {
						DbConnection.closeResultset(rs);
						DbConnection.closePreparedStatement(pstmt);
					} catch (Exception e) {
						Utility.LOG(true, true, e,"Some Error Occured in GetChargeDetailsForDCHWChargeValidations method of NewOrderDao");
					}
				}	
				return map;
			}
		
		public int doUpdateNewServiceProductIdFlag(Connection connection, Set<Long> obj){
			String methodName="doUpdateNewServiceProductIdFlag", className=this.getClass().getName(), msg="";
			boolean logToFile=true, logToConsole=true;
			
			PreparedStatement pstmt = null;
			int res=-1;
			String list=null;
			list=obj.toString();
			list = list.replaceAll("\\[", "").replaceAll("\\]","");
			try {
				System.out.println("*****************NewServiceProductIdFlag******************"+list);
				pstmt = connection.prepareCall("UPDATE IOE.TBILLING_INFO SET IS_SERV_TAX_PRESENT_HW=0  WHERE SERVICEPRODUCTID IN("+list+")");
				res=pstmt.executeUpdate();
			}catch (Exception ex) {
				Utility.LOG(true, true, ex,"Some Error Occured in doUpdateNewServiceProductIdFlag method of NewOrderDao");
			} finally {
				try {
					DbConnection.closePreparedStatement(pstmt);
				} catch (Exception e) {
					Utility.LOG(true, true, e,"Some Error Occured in doUpdateNewServiceProductIdFlag method of NewOrderDao");
				}
			}	
			return res;
		}
		public int doUpdateServTaxPresentFlag(Connection connection,Set<Long> obj){
			String methodName="doUpdateServTaxPresentFlag", className=this.getClass().getName(), msg="";
			boolean logToFile=true, logToConsole=true;
			
			PreparedStatement pstmt = null;
			int res=-1;
			String list=null;
			list=obj.toString();
			list = list.replaceAll("\\[", "").replaceAll("\\]","");
			try {
				System.out.println("*****************UpdateServTaxPresentFlag******************"+list);
				pstmt = connection.prepareCall("UPDATE IOE.TBILLING_INFO SET IS_SERV_TAX_PRESENT_HW=1  WHERE SERVICEPRODUCTID IN("+list+")");
				res=pstmt.executeUpdate();
			}catch (Exception ex) {
				Utility.LOG(true, true, ex,"Some Error Occured in doUpdateServTaxPresentFlag method of NewOrderDao");
			} finally {
				try {
					DbConnection.closePreparedStatement(pstmt);
				} catch (Exception e) {
					Utility.LOG(true, true, e,"Some Error Occured in doUpdateServTaxPresentFlag method of NewOrderDao");
				}
			}	
			return res;
		}
		//[121] End VIPIN
		/**
		 * To fetch list of services which are to be cancelled
		 * @author Gunjan
		 * @param LSICancellationDto
		 * @return ArrayList
		 * @throws Exception
		 */
		//[120] start
		public ArrayList<LSICancellationDto> viewEligibleLSICancelList(LSICancellationDto objDto) throws Exception {
			String methodName="viewEligibleLSICancelList", className=this.getClass().getName(), msg=" from viewEligibleLSICancelList";
			boolean logToFile=true, logToConsole=true;
		   ArrayList<LSICancellationDto> objLSIList = new ArrayList<LSICancellationDto>();
		   Connection conn = null;
		   ResultSet rs = null;
		   CallableStatement cstmt = null;
		   int recordCount = 0;
		    String searchCRMOrder = objDto.getSearchCRMOrder();
			String searchAccountNo  = objDto.getSearchAccountNo();
			String searchAccountName=objDto.getSearchAccountName();
			String searchLSI=objDto.getSearchLSI();
			String searchFromOrderDate=objDto.getSearchFromOrderDate();
			String searchToOrderDate=objDto.getSearchToOrderDate();
			String searchServiceNo=objDto.getSearchServiceNo();
			DateFormat df=new SimpleDateFormat("dd/MM/yyyy");
			
		   try {
			conn=DbConnection.getConnectionObject();
			cstmt=conn.prepareCall(sqlgetEligibleLSIForCancelList);
			
			if (searchLSI == null || searchLSI.trim().equals("")) {
				cstmt.setNull(1, java.sql.Types.BIGINT);
			} else {
				cstmt.setLong(1, Long.parseLong(searchLSI));
			}
			if (searchFromOrderDate == null || searchFromOrderDate.trim().equals("")) {
				cstmt.setNull(2, java.sql.Types.DATE);
			} else {
				//conversion of string to date
				Date fromDate=df.parse(searchFromOrderDate);
				cstmt.setDate(2, new java.sql.Date(fromDate.getTime()));
				//cstmt.setString(2, searchFromOrderDate);
			}
			
			if (searchToOrderDate == null || searchToOrderDate.trim().equals("")) {
				cstmt.setNull(3, java.sql.Types.DATE);
			} else {
				//conversion of string to date
				Date toDate=df.parse(searchToOrderDate);
				cstmt.setDate(3, new java.sql.Date(toDate.getTime()));
			}
			if (searchAccountName == null || searchAccountName.trim().equals("")) {
				cstmt.setNull(4, java.sql.Types.VARCHAR);
			} else {
				cstmt.setString(4, searchAccountName);
			}
			if (searchAccountNo == null || searchAccountNo.trim().equals("")) {
				cstmt.setNull(5, java.sql.Types.BIGINT);
			} else {
				cstmt.setString(5, searchAccountNo);
			}
			if (searchCRMOrder == null || searchCRMOrder.trim().equals("")) {
				cstmt.setNull(6, java.sql.Types.BIGINT);
			} else {
				cstmt.setLong(6, Long.parseLong(searchCRMOrder));
			}
			
			if (searchServiceNo == null || searchServiceNo.trim().equals("")) {
				cstmt.setNull(7, java.sql.Types.BIGINT);
			} else {
				cstmt.setLong(7, Long.parseLong(searchServiceNo));
			}
			PagingSorting pagingSorting = objDto.getPagingSorting();
			pagingSorting.sync();// To calculate start index and Enc Index
			cstmt.setString(8, pagingSorting.getSortByColumn());// columnName
			cstmt.setString(9, PagingSorting.DB_Asc_Desc1(pagingSorting.getSortByOrder()));// sort order
			cstmt.setInt(10, pagingSorting.getStartRecordId());// start index
			cstmt.setInt(11, pagingSorting.getEndRecordId());// end index
			/*if (searchCRMOrder == null || searchCRMOrder.trim().equals("")) {
				cstmt.setNull(12, java.sql.Types.VARCHAR);
			} else {
				cstmt.setString(12, objDto.getSearchLSIScenario());
			}*/
			cstmt.setString(12,objDto.getSearchLSIScenario());
			rs=cstmt.executeQuery();
			
			
			
			while (rs.next()) {	
					objDto= new LSICancellationDto();
					objDto.setSearchLSI(rs.getString("LOGICAL_SI_NO"));
					objDto.setSearchCRMOrder(rs.getString("ORDERNO"));
					objDto.setOrdType(rs.getString("ORDERTYPE"));
					objDto.setOrdChangeType(rs.getString("CHANGETYPENAME"));
					objDto.setOrdSubChangeType(rs.getString("SUBCHANGETYPE"));
					objDto.setOrdStage(rs.getString("STAGE"));
					objDto.setSearch_ord_create_date(df.format(rs.getDate("ORDERDATE")));
					objDto.setSearchServiceNo(rs.getString("SERVICEID"));
					objDto.setServiceName(rs.getString("SERVICESTAGE"));// not defined in proc
					objDto.setSearchAccountNo(rs.getString("CRMACCOUNTNO"));
					objDto.setSearchAccountName(rs.getString("ACCOUNTNAME"));
					objDto.setProductName(rs.getString("PRODUCTNAME"));
					objDto.setSubProductName(rs.getString("SERVICESUBTYPENAME"));
					objLSIList.add(objDto);
					if (pagingSorting.isPagingToBeDone() && recordCount==0) {
						recordCount = rs.getInt("FULL_REC_COUNT");
					}
				
			}
			pagingSorting.setRecordCount(recordCount);	
		} catch (Exception e) {
			Utility.LOG(true, false, e, msg);
		}
		   finally{
			   DbConnection.closeResultset(rs);
			   DbConnection.closeCallableStatement(cstmt);
			   DbConnection.freeConnection(conn);
		   }
			return objLSIList;
		}
/**
		 * 
		 * @param LSICancellationDto
		 * @return ArrayList
		 * @throws Exception
		 * @author IBM_ADMIN
		 * @since July 2014
		 */
		/*public String LSICancellation(LSICancellationDto dto,long empID ) throws Exception {
			
			String methodName="LSICancellation",  msg=null;
			Connection connection =null;
			String customMsg="";
			CallableStatement callstmt =null;
			CallableStatement callstmtServiceCancel =null;
			boolean isAllSuccess=true;
			ArrayList<LSICancellationDto> list=dto.getLSICancellationDtolist();
			try {
				connection=DbConnection.getConnectionObject();
				connection.setAutoCommit(false);
				if(list !=null){
						for(LSICancellationDto objDto:list)
						{
							callstmt=connection.prepareCall(sqlvalidateservicesbeforecancel);
							Long serviceid=Long.parseLong(objDto.getSearchServiceNo());
							
							msg=":: from method LSICancellation() on cancel service:: "+serviceid;
							
							callstmt.setLong(1,serviceid);
							callstmt.setString(2,dto.getSearchLSIScenario());
							callstmt.registerOutParameter(3, java.sql.Types.NUMERIC);
							callstmt.registerOutParameter(4, java.sql.Types.VARCHAR);
							callstmt.registerOutParameter(5, java.sql.Types.VARCHAR);
							callstmt.registerOutParameter(6, java.sql.Types.VARCHAR);
							callstmt.registerOutParameter(7, java.sql.Types.VARCHAR);
							callstmt.execute();
							
							String flag=callstmt.getString(7);
							String diagnostic=callstmt.getString(5);
							String valCustomMsg=callstmt.getString(6);
							String msgcode=callstmt.getString(4);
							
							if("SUCCESS".equalsIgnoreCase(flag)){
								//After validation success for service then this service goes to cancelation section
								//before service cancellation calling OB validation API.
								boolean isObDataSuccessfullySave = OBCalculationDao.validateAndsaveDataIntoObScheduler(serviceid,
										OBCalculationDao.No, OBCalculationDao.ServiceCancel,
										OBCalculationDao.Yes, connection);
								
								callstmtServiceCancel=connection.prepareCall(sqlCancelLsi);
								callstmtServiceCancel.setLong(1, serviceid);
								callstmtServiceCancel.setString(2, dto.getSearchLSIScenario());
								callstmtServiceCancel.setLong(3, objDto.getCancellationReasonId());
								callstmtServiceCancel.setString(4, objDto.getCancellationRemarks());
								callstmtServiceCancel.registerOutParameter(5, java.sql.Types.INTEGER);
								callstmtServiceCancel.registerOutParameter(6, java.sql.Types.VARCHAR);
								callstmtServiceCancel.registerOutParameter(7, java.sql.Types.VARCHAR);
								callstmtServiceCancel.setLong(8, empID);
								callstmtServiceCancel.execute();
														
								String canDiagnostic=callstmtServiceCancel.getString(7);
								String canMsgcode=callstmtServiceCancel.getString(6);
								if("0".equalsIgnoreCase(canMsgcode)){
									connection.commit();
								}else{
									msg=msg+" Error:"+canDiagnostic;
									Utility.LOG(msg);
									isAllSuccess=false;
									connection.rollback();
								}
							}else{
								customMsg=customMsg+"[ServiceId:"+serviceid+"][Failed:"+valCustomMsg+"]\n";
								msg=msg+" "+customMsg+" Error:"+diagnostic;
								isAllSuccess=false;
								Utility.LOG(msg);
							}										
						}
				}
				if(isAllSuccess){
					customMsg="Service(s) cancelled successfully!!!";
				}
				
			} catch (Exception e) {
				Utility.LOG(true, false, e, msg);
				customMsg="Internal error";
				connection.rollback();
			}finally{
			    DbConnection.closeCallableStatement(callstmt);
			    DbConnection.closeCallableStatement(callstmtServiceCancel);
				DbConnection.freeConnection(connection);
		   }
			
			return customMsg;
		}*/
		//[120] end
		//[122] Start VIPIN
		private static String sqlGetServicePublishReadyCount="SELECT COUNT(1) AS COUNT_SPR FROM IOE.TPOSERVICEMASTER WHERE ORDERNO=? AND PUBLISH_READY=1 WITH UR";
		public int getServicePublishReadyCount(long orderNo){
			String methodName="getServicePublishReadyCount", className=this.getClass().getName(), msg="";
			boolean logToFile=true, logToConsole=true;
			
			Connection conn=null;
			PreparedStatement pstmt = null;
			ResultSet rs=null;
			int count=-1;
			try {
				conn=DbConnection.getConnectionObject();
				pstmt= conn.prepareCall(sqlGetServicePublishReadyCount);
				pstmt.setLong(1,orderNo);
				rs = pstmt.executeQuery();
				while(rs.next()){
					count = (rs.getInt("COUNT_SPR"));
				}
			}catch (Exception ex) {
				Utility.LOG(true, true, ex,"Some Error Occured while processing in getServicePublishReadyCount method of NewOrderDao");
			} finally {
				try {
					DbConnection.closeResultset(rs);
					DbConnection.closePreparedStatement(pstmt);
					DbConnection.freeConnection(conn);
				} catch (Exception e) {
					Utility.LOG(true, true, e,"Some Error Occured in Finally block - getServicePublishReadyCount method of NewOrderDao");
				}
			}	
			return count;
		}
		//[122] End VIPIN
		//[124] Start
		private static String sqlChkIsPoDetailsPresent="SELECT PODETAILID FROM ioe.TBILLING_INFO WHERE SERVICEPRODUCTID=? WITH UR";
		public long chkIsPoDetailsPresent(Long spId){
			String methodName="chkIsPoDetailsPresent", className=this.getClass().getName(), msg="";
			boolean logToFile=true, logToConsole=true;
			
			Connection conn=null;
			PreparedStatement pstmt = null;
			ResultSet rs=null;
			long poDetailId=-1;
			try {
				conn=DbConnection.getConnectionObject();
				pstmt= conn.prepareCall(sqlChkIsPoDetailsPresent);
				pstmt.setLong(1,spId);
				rs = pstmt.executeQuery();
				while(rs.next()){
					poDetailId = (rs.getLong("PODETAILID"));
				}
			}catch (Exception ex) {
				Utility.LOG(true, true, ex,"Some Error Occured while processing in chkIsPoDetailsPresent method of NewOrderDao");
			} finally {
				try {
					DbConnection.closeResultset(rs);
					DbConnection.closePreparedStatement(pstmt);
					DbConnection.freeConnection(conn);
				} catch (Exception e) {
					Utility.LOG(true, true, e,"Some Error Occured in Finally block - chkIsPoDetailsPresent method of NewOrderDao");
				}
			}	
			return poDetailId;
		}
		//[124] End

		public static String getOrderAttributeValue(int orderNo, int attributeId) throws Exception {
			Connection conn = null;
			PreparedStatement pstmt = null;
			ResultSet rs = null;
			
			String value=null;
			
			try{
				conn=DbConnection.getConnectionObject();
				pstmt=conn.prepareStatement("SELECT ATTVALUE FROM ioe.tattributevalues WHERE  ORDERNO=? and ATTRIBUTEID=?");
				pstmt.setLong(1, orderNo);
				pstmt.setLong(2, attributeId);
				rs=pstmt.executeQuery();
				if(rs.next()){
					value=rs.getString("ATTVALUE");
				}
				
			}finally{
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(pstmt);
				DbConnection.freeConnection(conn);
			}
			
			return value; 
		}
		//[127] start
		/**
		 * To fetch data corresponding to parallel upgraded LSIs
		 * @author gunjan
		 * @param strLSI
		 * @return Map
		 * @throws Exception
		 */
		
		public Map<Long, ParallelUpgradeValidationDto> fetchParallelUpgradeLSIData(String strLSI) throws Exception {
			
			String methodName="fetchParallelUpgradeLSIData",  msg=null;
			Connection connection =null;
			PreparedStatement pstmt=null;
			ResultSet rs=null;
			ParallelUpgradeValidationDto obValidationDto=null;
			Map<Long,ParallelUpgradeValidationDto> map = new HashMap<Long,ParallelUpgradeValidationDto>();
			String queryParallelLSI="SELECT LOGICAL_SI_NO,TPOSERVICEMASTER.SERVICETYPEID,CRMACCOUNTNO,SUB_CHANGE_TYPE_ID,TPOSERVICEMASTER.M6_FX_PROGRESS_STATUS " 
									+" FROM IOE.TPOSERVICEMASTER TPOSERVICEMASTER"
									+" INNER JOIN IOE.TSERVICETYPE TSERVICETYPE ON TPOSERVICEMASTER.SERVICETYPEID=TSERVICETYPE.SERVICETYPEID"
									+" INNER JOIN IOE.TPOMASTER TMST ON TPOSERVICEMASTER.ORDERNO=TMST.ORDERNO"
									+" INNER JOIN IOE.TM_ACCOUNT AS TM_ACCOUNT ON TMST.ACCOUNTID = TM_ACCOUNT.ACCOUNTID "
									+" WHERE LOGICAL_SI_NO IN("+strLSI+") AND IS_CHANGED_LSI=0 order by TPOSERVICEMASTER.serviceid";
			try {
				connection=DbConnection.getConnectionObject();
				pstmt=connection.prepareStatement(queryParallelLSI);
				rs=pstmt.executeQuery();
				while(rs.next()){
					obValidationDto=new ParallelUpgradeValidationDto();
					//if(null==map.get(rs.getLong("LOGICAL_SI_NO"))){
						
						
					obValidationDto.setLogicalSINo(rs.getLong("LOGICAL_SI_NO"));
					obValidationDto.setServiceTypeId(rs.getLong("SERVICETYPEID"));
					obValidationDto.setCrmAccountNo(rs.getString("CRMACCOUNTNO"));
					obValidationDto.setSubChangeTypeId(rs.getLong("SUB_CHANGE_TYPE_ID"));
					obValidationDto.setM6FxProgressStatus(rs.getString("M6_FX_PROGRESS_STATUS"));
					//}
					map.put(rs.getLong("LOGICAL_SI_NO"), obValidationDto);
				}
				
			
			}catch (Exception e) {
				Utility.LOG(true, false, e, msg);
				
				
			}finally{
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(pstmt);
				DbConnection.freeConnection(connection);
		   }
			return map;
		}
		
		/**
		 * @author gunjan
		 * @param currentServLSI
		 * @return Map
		 * @throws Exception
		 */
		public ParallelUpgradeValidationDto fetchCurrentServiceLSIData(int currentServiceId) throws Exception {

			
			String methodName="fetchParallelUpgradeLSIData",  msg=null;
			Connection connection =null;
			PreparedStatement pstmt=null;
			ResultSet rs=null;
			ParallelUpgradeValidationDto obValidationDto=null;
			ParallelUpgradeValidationDto currentService = new ParallelUpgradeValidationDto();
			String queryParallelLSI="SELECT LOGICAL_SI_NO,TPOSERVICEMASTER.SERVICETYPEID,CRMACCOUNTNO,STAGE " 
									+" FROM IOE.TPOSERVICEMASTER TPOSERVICEMASTER"
									+" INNER JOIN IOE.TSERVICETYPE TSERVICETYPE ON TPOSERVICEMASTER.SERVICETYPEID=TSERVICETYPE.SERVICETYPEID"
									+" INNER JOIN IOE.TPOMASTER TMST ON TPOSERVICEMASTER.ORDERNO=TMST.ORDERNO"
									+" INNER JOIN IOE.TM_ACCOUNT AS TM_ACCOUNT ON TMST.ACCOUNTID = TM_ACCOUNT.ACCOUNTID "
									+" WHERE TPOSERVICEMASTER.SERVICEID="+currentServiceId;
			try {
				connection=DbConnection.getConnectionObject();
				pstmt=connection.prepareStatement(queryParallelLSI);
				rs=pstmt.executeQuery();
				if(rs.next()){
					currentService.setLogicalSINo(rs.getLong("LOGICAL_SI_NO"));
					currentService.setServiceTypeId(rs.getLong("SERVICETYPEID"));
					currentService.setCrmAccountNo(rs.getString("CRMACCOUNTNO"));
					currentService.setStage(rs.getString("STAGE"));
				}
				
			}catch (Exception e) {
				Utility.LOG(true, false, e, msg);
				
				
			}finally{
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(pstmt);
				DbConnection.freeConnection(connection);
		   }
			return currentService;	
		}
		//[127] end
		
		public String updateUserRolesOnSubmit(UserAccessMatrixDto objDto,Connection conn) throws Exception {
			String Result=null;
			PreparedStatement insertRole = null,/*updateRole=null*/updateRoleForNonAssignToAssign=null,updateRoleAssignToNonAssign=null,insertHistory=null,updateCustomerSegment=null;
			String value;
			try 
			{
				 
				 ArrayList<List<String>> lListInsertRole =objDto.getListOfInsert(); //insert
				 ArrayList<List<String>> lListUpdateRole =objDto.getListOfUpdate(); //update
				 List<String> lListNonAssignedRoleToUpdate  = Arrays.asList(objDto.getNonAssignedList()); //update by all means
				 List<String> lListNonAssignedRoleToUpdateRoleName  = Arrays.asList(objDto.getNonAssignedListRoleName()); //update by all means

				 //List<String> lListNonAssignedRoleToUpdate = objDto.getNonAssignedList(); //update
				 insertRole = conn.prepareCall("INSERT INTO IOE.TM_ACCOUNTROLEDETAILS(ID,ROLEID, FIRSTNAME, LASTNAME, PHONENO, " +
				 		"EMAILID, USER_ID, PHONE_NO, LOGIN_IP, LOGIN_STATUS, LAST_ROLE_ACCESSED, LAST_LOGGED_IN_TIME, LAST_LOGGED_OUT_TIME, ISACTIVE," +
				 		" EMPLOYEEID, EMPLOYEENO, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, ORDER_NO, GAM_START_DATE, GAM_END_DATE, L1_EMPLOYEEID, " +
				 		"L2_EMPLOYEEID, L3_EMPLOYEEID)  SELECT ? , ?," +
				 		" FIRSTNAME, LASTNAME, PHONENO, EMAILID, USER_ID, PHONE_NO, LOGIN_IP, LOGIN_STATUS, LAST_ROLE_ACCESSED, LAST_LOGGED_IN_TIME, LAST_LOGGED_OUT_TIME," +
				 		" 1, EMPLOYEEID, EMPLOYEENO, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, ORDER_NO, GAM_START_DATE, GAM_END_DATE, " +
				 		"L1_EMPLOYEEID, L2_EMPLOYEEID, L3_EMPLOYEEID FROM IOE.TM_ACCOUNTROLEDETAILS WHERE EMPLOYEEID = ? FETCH FIRST ROW ONLY");
				 
				//updateRole = conn.prepareCall("UPDATE IOE.TM_ACCOUNTROLEDETAILS SET ISACTIVE = ? WHERE EMPLOYEEID = ? AND ROLEID = ?");
				 /*updateRole = conn.prepareCall(" UPDATE ioe.TM_ACCOUNTROLEDETAILS SET ISACTIVE=? WHERE id =(SELECT id FROM ioe.TM_ACCOUNTROLEDETAILS "+
                                                " WHERE EMPLOYEEID = ? AND ROLEID = ? order by ID FETCH FIRST ROW ONLY)     ");*/
				 updateRoleForNonAssignToAssign = conn.prepareCall(" UPDATE ioe.TM_ACCOUNTROLEDETAILS SET ISACTIVE=? WHERE id =(SELECT id FROM ioe.TM_ACCOUNTROLEDETAILS "+
                         " WHERE EMPLOYEEID = ? AND ROLEID = ? order by ID FETCH FIRST ROW ONLY) ");
				 updateRoleAssignToNonAssign = conn.prepareCall("UPDATE IOE.TM_ACCOUNTROLEDETAILS SET ISACTIVE = ? WHERE EMPLOYEEID = ? AND ROLEID = ?");
				 insertHistory= conn.prepareCall("INSERT INTO IOE.TM_ACCESSMATRIX_HISTORY(USERID,USERNAME,ROLEID,ROLENAME,STATUS,DATEOFMODIFICATION," +
				 		"MODIFIEDBYUSERID,MODIFIEDBYUSERNAME,OLDCUSTOMERSEGMENT,NEWCUSTOMERSEGMENT) " +
				 		"VALUES(?,?,?,?,?,current date,?,?,?,?)");
				 updateCustomerSegment = conn.prepareCall("UPDATE IOE.TM_ACCOUNTROLEDETAILS set CUST_SEGMENTID=? WHERE EMPLOYEEID = ?");

				
				 List<String> listofIds=new ArrayList<String>();
				 ResultSet rs = null;
				 PreparedStatement psGetId = null;
				 //crrate pstmt
				 psGetId=conn.prepareCall(getNextIdfromSequence);
				 for(int count = 0;count <lListInsertRole.size();count++) {//isroleassigned =1
					rs = psGetId.executeQuery();
					if (rs.next()) {
						String nextId = "" + rs.getInt("NEXT_ID");
						listofIds.add(nextId);
					}
					DbConnection.closeResultset(rs);
				 }
				 //close prestatemnt
				 DbConnection.closePreparedStatement(psGetId);
				 
				 for(int count = 0;count <lListInsertRole.size();count++) {//isroleassigned =1
					 List<String> list=lListInsertRole.get(count);

					 insertRole.setLong(1,Long.valueOf(listofIds.get(count)));
					 insertRole.setLong(2,Long.valueOf(list.get(0)));
					 insertRole.setLong(3,objDto.getEmpId());
					 	
					 /*(SELECT NEXTVAL FOR IOE.SEQ_ACCOUNT_ROLE_DETAILS FROM SYSIBM.SYSDUMMY1)*/
					 
					 insertHistory.setString(1,objDto.getUserId());
					 insertHistory.setString(2,objDto.getUserName());
					 insertHistory.setLong(3,Long.valueOf(list.get(0)));
					 insertHistory.setString(4,list.get(1));
					 insertHistory.setString(5,"Access Granted");
					 insertHistory.setString(6,objDto.getModifiedByUserId());
					 insertHistory.setString(7,objDto.getModifiedByUserName());
					 insertHistory.setString(8,"-");
					 insertHistory.setString(9, "-");
					 
					 insertRole.addBatch();
					 insertHistory.addBatch();
				 }	

				 for(int count = 0;count <lListUpdateRole.size();count++) {//isroleassigned =1
					 List<String> list=lListUpdateRole.get(count);
					updateRoleForNonAssignToAssign.setLong(1,1);
					 updateRoleForNonAssignToAssign.setLong(2,objDto.getEmpId());
					 updateRoleForNonAssignToAssign.setLong(3,Long.valueOf(list.get(0)));
					
					 insertHistory.setString(1,objDto.getUserId());
					 insertHistory.setString(2,objDto.getUserName());
					 insertHistory.setLong(3,Long.valueOf(list.get(0)));
					 insertHistory.setString(4,list.get(1));
					 insertHistory.setString(5,"Access Granted");
					 insertHistory.setString(6,objDto.getModifiedByUserId());
					 insertHistory.setString(7,objDto.getModifiedByUserName());
					 insertHistory.setString(8,"-");
					 insertHistory.setString(9, "-");
					 			 
					updateRoleForNonAssignToAssign.addBatch();
					 insertHistory.addBatch();
				 }	
				 
				 for(int count = 0;count <lListNonAssignedRoleToUpdate.size();count++) {//isroleassigned =0
					 // list=lListNonAssignedRoleToUpdate.get(count);

						 updateRoleAssignToNonAssign.setLong(1,0);
					 updateRoleAssignToNonAssign.setLong(2,objDto.getEmpId());
					 updateRoleAssignToNonAssign.setLong(3,Long.valueOf(lListNonAssignedRoleToUpdate.get(count)));
					
					 insertHistory.setString(1,objDto.getUserId());
					 insertHistory.setString(2,objDto.getUserName());
					 insertHistory.setLong(3,Long.valueOf(lListNonAssignedRoleToUpdate.get(count)));
					 insertHistory.setString(4,lListNonAssignedRoleToUpdateRoleName.get(count));
					 insertHistory.setString(5,"Access Denied");
					 insertHistory.setString(6,objDto.getModifiedByUserId());
					 insertHistory.setString(7,objDto.getModifiedByUserName());
					 insertHistory.setString(8,"-");
					 insertHistory.setString(9, "-");
					 
					 updateRoleAssignToNonAssign.addBatch();
					 insertHistory.addBatch();
				 }	
		
				 if(lListInsertRole.size()>0)
					 insertRole.executeBatch();
				 
				  if(lListUpdateRole.size()>0 || lListNonAssignedRoleToUpdate.size()>0){
					 updateRoleForNonAssignToAssign.executeBatch();
				    updateRoleAssignToNonAssign.executeBatch();
				 }
/*
				 if(""+objDto.getCustomerSegmentId()!= "-1"){
					 updateCustomerSegment.setLong(1, objDto.getCustomerSegmentId());
					 updateCustomerSegment.setLong(2, objDto.getEmpId());
					 updateCustomerSegment.executeUpdate();
					 
					 insertHistory.setString(1,objDto.getUserId());
					 insertHistory.setString(2,objDto.getUserName());
					 insertHistory.setLong(3, 0);
					 insertHistory.setString(4,"-");
					 insertHistory.setString(5,"Change in customer segment");
					 insertHistory.setString(6,objDto.getModifiedByUserId());
					 insertHistory.setString(7,objDto.getModifiedByUserName());
					 if(objDto.getOldCustSegmentName()==""){
						 insertHistory.setString(8,"");
					 }else{
						 insertHistory.setString(8,objDto.getOldCustSegmentName());
					 }
					 insertHistory.setString(9, objDto.getCus_segment());
					 insertHistory.addBatch();
				 }*/
				 insertHistory.executeBatch(); //insertHistory list size cant be 0 bcoz of validation at client side 
				 value="success";
			}
			catch(Exception ex){
				 Utility.LOG(true, true,"Some Error Occured in userUpdateRolesOnSubmit method of NewOrderDao "+ex);
				 value="failure";
			}finally{
				 DbConnection.closePreparedStatement(insertRole);
				// DbConnection.closePreparedStatement(updateRole);
				 DbConnection.closePreparedStatement(updateRoleAssignToNonAssign);
				 DbConnection.closePreparedStatement(updateRoleForNonAssignToAssign);
				 DbConnection.closePreparedStatement(insertHistory);
				 DbConnection.closePreparedStatement(updateCustomerSegment);
			}
			return value; 
		}
		
		
public String getAccessMatrixForUserId(String nm,String attrid) throws Exception 
{
	//	Nagarjuna	
	String methodName="getAccessMatrixForUserId", className=this.getClass().getName(), msg1="";
	boolean logToFile=true, logToConsole=true;
	//end Nagarjuna
	Connection connection =null;
	com.ibm.ioes.dbhelper.SQLHelper objSql = new com.ibm.ioes.dbhelper.SQLHelper();
	String jsonVal = "";
	try
	{
		connection=DbConnection.getConnectionObject();		
		List<String> labelValues = new ArrayList<String>();
		labelValues.add("USER_NAME");
		jsonVal = objSql.getJsonLableValueWithQuery(nm, labelValues, "EMPID", "CALL IOE.GET_USERACCESSMATRIX_USER_LIST_FOR_USERID(?)" ,attrid,"",connection,"");
	}
	catch(Exception ex )
	{
		connection.rollback();
		Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg1, logToFile, logToConsole);//Nagarjuna
	}
	finally
	{
		try 
		{
			DbConnection.freeConnection(connection);
		} 
		catch (SQLException e) 
		{
			
			Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg1, logToFile, logToConsole);//Nagarjuna
		}
	}
	return jsonVal;
}

	public ArrayList<UserAccessMatrixDto> getCustomerSegmentList() 
		{
			Connection connection =null;
			CallableStatement customerSegment =null;
			ResultSet rsCustomerSegment = null;
			ArrayList<UserAccessMatrixDto> listCustomerSegmrnt = new ArrayList<UserAccessMatrixDto>();
			UserAccessMatrixDto objDto = null;	
			String customer_segment="";
			String sqlFetchServiceTypeName="SELECT CUST_SEGMENT_ID,CUST_SEGMENT_CODE FROM IOE.TM_CUSTOMER_SEGMENT_MASTER";
			try
			{
				connection=DbConnection.getConnectionObject();
				customerSegment= connection.prepareCall(sqlFetchServiceTypeName);
				rsCustomerSegment = customerSegment.executeQuery();
				while(rsCustomerSegment.next())
				{
					objDto =  new UserAccessMatrixDto();
					objDto.setCustomerSegmentId(rsCustomerSegment.getInt("CUST_SEGMENT_ID"));
					objDto.setCus_segment(rsCustomerSegment.getString("CUST_SEGMENT_CODE"));
					listCustomerSegmrnt.add(objDto);	
				}
				return listCustomerSegmrnt;
			}
			catch(Exception ex )
			{
				Utility.LOG(true, false, ex, "::Exception occured while fetching customer Sigment  name in method facthCustomerSegmentDetails::block1");	
			}
			finally
			{
				try 
				{
					DbConnection.closeResultset(rsCustomerSegment);
					DbConnection.closeCallableStatement(customerSegment);
					DbConnection.freeConnection(connection);
				} 
				catch (SQLException e) 
				{
					// TODO Auto-generated catch block
					Utility.LOG(true, true, e, "::Exception occured while fetching customer Sigment name in method getCustomerSegmentList");					
				}
				catch(Exception ex)
				{
					Utility.LOG((ex.getMessage() + " Exception occured while fetching customer Sigment name in method getCustomerSegmentList" ));
				}
			}
			return listCustomerSegmrnt;
		}	
		
		public ArrayList<UserAccessMatrixDto> getMappedCustomerSegment(String empid) {
			//	Nagarjuna	
			String methodName="getMappedCustomerSegment", className=this.getClass().getName(), msg1="";
			boolean logToFile=true, logToConsole=true;
			//end Nagarjuna
			ArrayList<UserAccessMatrixDto> listofCustData=new ArrayList<UserAccessMatrixDto>();
			UserAccessMatrixDto userAccessMatrixDto = new UserAccessMatrixDto();
			CallableStatement cs =null;
			Connection conn=null;
			ResultSet rsCustDetails= null;
			try {
			conn=DbConnection.getConnectionObject();
			
			cs= conn.prepareCall("SELECT ACCOUNTROLEDETAILS.CUST_SEGMENTID,CUSTOMER_SEGMENT_MASTER.CUST_SEGMENT_CODE FROM ioe.TM_ACCOUNTROLEDETAILS ACCOUNTROLEDETAILS inner join ioe.TM_CUSTOMER_SEGMENT_MASTER CUSTOMER_SEGMENT_MASTER	on ACCOUNTROLEDETAILS.CUST_SEGMENTID=CUSTOMER_SEGMENT_MASTER.CUST_SEGMENT_ID where EMPLOYEEID=? order by UPDATED_DATE ASC fetch first row only");
				cs.setLong(1, Long.valueOf(empid));
				rsCustDetails=cs.executeQuery();
				if(rsCustDetails.next())
				{
					userAccessMatrixDto.setCus_segment(rsCustDetails.getString("CUST_SEGMENT_CODE"));
					userAccessMatrixDto.setCustomerSegmentId(rsCustDetails.getInt("CUST_SEGMENTID"));
					listofCustData.add(userAccessMatrixDto);
				}
			}
			catch (Exception e) {
				Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg1, logToFile, logToConsole);//Nagarjuna
			}

			finally
				{
					try
					{
						DbConnection.closeResultset(rsCustDetails);
						DbConnection.closePreparedStatement(cs);
						DbConnection.freeConnection(conn);
						
					} 
					catch (Exception e) 
					{
						Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg1, logToFile, logToConsole);//Nagarjuna
						}
					}

			return listofCustData;
		}

		public String updateOnlyCustomerSegmentOnSubmit(String oldCustSegmentName,String cus_segment,String customerSegmentId,Long empid,String modifiedByUserId,String modifiedByUserName,Connection conn) throws Exception
		{
			String result = null;
			try {
				NewOrderDao objDao = new NewOrderDao();
				result= objDao.updateCustSegmentOnSubmit(oldCustSegmentName,cus_segment,customerSegmentId,empid,modifiedByUserId,modifiedByUserName,conn);
			} catch (Exception e) {
				e.printStackTrace();
				Utility.LOG(true, true,"Some Error Occured in updateOnlyCustomerSegmentOnSubmit method of AjaxHelper "+e);
				result="failure";
			}
			return result;
		}
		
		public String updateCustSegmentOnSubmit(String oldCustSegmentName,String cus_segment,String customerSegmentId,Long empid,String modifiedByUserId,String modifiedByUserName,Connection conn) throws Exception{

			String Result=null;
			PreparedStatement insertHistory=null,updateCustomerSegment=null;
			
			String value;
			try 
			{
				 //ArrayList<UserAccessMatrixDto> activeDeactivatedRoles = new ArrayList<UserAccessMatrixDto>();
				 //AccessMatrixDao accessmatrixdto=new AccessMatrixDao();
				/* UserAccessMatrixDto getUseridUsernameDto=new UserAccessMatrixDto();
				 getUseridUsernameDto.setEmpId(empid);
				*/ 
				 
				 /*activeDeactivatedRoles=accessmatrixdto.getActiveDeactivatedRoles(getUseridUsernameDto); // using old method for getting user info on basis of empid
				 UserAccessMatrixDto getUserIdUserName=activeDeactivatedRoles.get(0);
				 String userIdOfRoleassignedTo=getUserIdUserName.getUserId();
				 String userNameOfRoleassignedTo=getUserIdUserName.getFIRSTNAME()+" "+getUserIdUserName.getLASTNAME();*/
				 
				ArrayList<String> list=getUsernameUserid(empid);
				String userNameOfRoleassignedTo=list.get(2);
				String userIdOfRoleassignedTo=list.get(0)+" "+list.get(1);
				updateCustomerSegment = conn.prepareCall("UPDATE ioe.TM_ACCOUNTROLEDETAILS SET CUST_SEGMENTID=? WHERE EMPLOYEEID=?");
				 
				 if(customerSegmentId!="-1"){
					 updateCustomerSegment.setString(1,customerSegmentId);
					 updateCustomerSegment.setLong(2, empid);
					 updateCustomerSegment.executeUpdate();
				 }
				 
				 insertHistory= conn.prepareStatement("INSERT INTO IOE.TM_ACCESSMATRIX_HISTORY(USERID,USERNAME,ROLEID,ROLENAME,STATUS,DATEOFMODIFICATION," +
					 		"MODIFIEDBYUSERID,MODIFIEDBYUSERNAME,OLDCUSTOMERSEGMENT,NEWCUSTOMERSEGMENT) " +
					 		"VALUES(?,?,?,?,?,current date,?,?,?,?)");
				 if(customerSegmentId!="-1"){
					 insertHistory.setString(1,userIdOfRoleassignedTo);
					 insertHistory.setString(2,userNameOfRoleassignedTo);
					 insertHistory.setLong(3,0);
					 insertHistory.setString(4,"-");
					 insertHistory.setString(5,"Change in customer segment");
					 insertHistory.setString(6,modifiedByUserId);
					 insertHistory.setString(7,modifiedByUserName);
					 if(oldCustSegmentName==""){
						 insertHistory.setString(8,"");
					 }else{
						 insertHistory.setString(8,oldCustSegmentName);
					 }
					 insertHistory.setString(9, cus_segment);
				
					 insertHistory.executeUpdate();
				 }
				
				 value="success";
			}
			catch(Exception ex){
				 Utility.LOG(true, true,"Some Error Occured in updateCustSegmentOnSubmit method of NewOrderDao "+ex);
				 value="failure";
			}finally{
				 DbConnection.closePreparedStatement(insertHistory);
				 DbConnection.closePreparedStatement(updateCustomerSegment);
			}
			return value; 
		}
		
		public ArrayList<String> getUsernameUserid(Long empId){
			String methodName="getMappedCustomerSegment", className=this.getClass().getName(), msg1="";
			boolean logToFile=true, logToConsole=true;
			//end Nagarjuna
			ArrayList<String> listofCustData=new ArrayList<String>();
			CallableStatement cs =null;
			Connection conn=null;
			ResultSet rsCustDetails= null;
			try {
			conn=DbConnection.getConnectionObject();
			
			cs= conn.prepareCall("SELECT FIRSTNAME,LASTNAME,USER_ID FROM ioe.TM_ACCOUNTROLEDETAILS WHERE EMPLOYEEID=? FETCH FIRST ROW ONLY");
				cs.setLong(1, empId);
				rsCustDetails=cs.executeQuery();
				if(rsCustDetails.next())
				{
					listofCustData.add(rsCustDetails.getString("FIRSTNAME"));
					listofCustData.add(rsCustDetails.getString("LASTNAME"));
					listofCustData.add(rsCustDetails.getString("USER_ID"));
				}
			}
			catch (Exception e) {
				Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg1, logToFile, logToConsole);//Nagarjuna
			}

			finally
				{
					try
					{
						DbConnection.closeResultset(rsCustDetails);
						DbConnection.closePreparedStatement(cs);
						DbConnection.freeConnection(conn);
						
					} 
					catch (Exception e) 
					{
						Utility.onEx_LOG_RET_NEW_EX(e, methodName, className, msg1, logToFile, logToConsole);//Nagarjuna
						}
					}

			return listofCustData;
		}
		
  
  
		//Start [131]
		public void saveRFBTResponseMsg(CLEPXmlDto clepXmldto, long xmlfileid,
				long orderNo, String isFromGUI, String responseMsg, Connection conn) {
			
			String methodName="saveRFBTResponseMsg", className=this.getClass().getName(), msg="";
			boolean logToFile=true, logToConsole=true;
			try{
				String respnseMsgId = null;
				ParseXMLforCLEP.sendResponseMsgIDToFileProcess(xmlfileid,respnseMsgId,clepXmldto.getXmlData(),"BTDelay",clepXmldto.getJmsMessageID(),conn,clepXmldto.getStage());
				CLEPUtility.SysErr("--------------- saving RFBT Response  >>>>>>>>>>>>>");
			}catch(Exception ex){	
				Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);//Nagarjuna
			}
		}
  
		//End [131]
		//[132] Start PROJECT SATYAPAN
		/**
		 * To update ISP tagging fields while saving contact & PO tab in new & change Order
		 * @param newOrderBean
		 * @return int
		 * @author VIPIN SAHARIA
		 * @date 12-May-2015
		 */
		public int updateIspTaggingFields(Connection connection,NewOrderBean newOrderBean){
			String msg = "in updateIspTaggingFields method of newOrderDao";
			int updateCount = 0;
			//Connection connection = null;
			PreparedStatement psUpdateIspTagFields =null;
			SimpleDateFormat simpleDateFormat = new SimpleDateFormat(AppConstants.DATE_FORMAT_PROC);
			try
			{
				//connection = DbConnection.getConnectionObject();
				//connection.setAutoCommit(false);
				psUpdateIspTagFields = connection.prepareStatement("UPDATE IOE.TPOMASTER SET ISP_TAGGING=?, ISP_LIC_CTGRY=?, ISP_LIC_DATE=?, ISP_LIC_NO=? WHERE ORDERNO=?");
				psUpdateIspTagFields.setInt(1, newOrderBean.getIspTagging());
				psUpdateIspTagFields.setInt(2, newOrderBean.getIspLicCtgry());
				if(null!=newOrderBean.getIspLicDate())
					if(newOrderBean.getIspLicDate().trim().length()==0)
						psUpdateIspTagFields.setDate(3,null);
					else
						psUpdateIspTagFields.setDate(3,new java.sql.Date(simpleDateFormat.parse(newOrderBean.getIspLicDate()).getTime()));
				psUpdateIspTagFields.setString(4, newOrderBean.getIspLicNo());
				psUpdateIspTagFields.setLong(5,Long.valueOf(newOrderBean.getOrderNo()));
				updateCount=psUpdateIspTagFields.executeUpdate();
				//connection.commit();
				
			}catch(Exception ex ){
				/*try {
					connection.rollback();
				}catch (SQLException e) {
					Utility.LOG(true, true, e, msg);
				}*/
				Utility.LOG(true, true, ex, msg);
			}
			finally{
				try{
					DbConnection.closePreparedStatement(psUpdateIspTagFields);
					//DbConnection.freeConnection(connection);
				} 
				catch (Exception e){
					Utility.LOG(true, true, e, msg);
				}
			}
			return updateCount;
		}
		//[132] End PROJECT SATYAPAN
		//[134] Start
		public NewOrderModel.BillingEfficiencyDto getBillingEfficiencyData(NewOrderModel.BillingEfficiencyDto billingEfficiencyDto) 
		throws Exception{
			String methodName="checkIsPermanentDisconnectionSingleThenBulkApproval", className=this.getClass().getName(), msg="";
			boolean logToFile=true, logToConsole=true;
			Connection connection =null;
			CallableStatement callstmt =null;
			try {
				connection=DbConnection.getConnectionObject();
				callstmt= connection.prepareCall(isPermanentDisconnection);
				callstmt.setLong(1,billingEfficiencyDto.getSpid());
				callstmt.setString(2, billingEfficiencyDto.getModule());
				callstmt.setString(3, billingEfficiencyDto.getAuto_Type());
				callstmt.setString(4, "");
				callstmt.setLong(5, billingEfficiencyDto.getOrderNo());
				//[137]
				callstmt.setLong(6,0);
				callstmt.execute();
				billingEfficiencyDto.setResult(callstmt.getString(4));

			}finally{
				try {

					DbConnection.closeStatement(callstmt);
					DbConnection.freeConnection(connection);
				}catch (Exception ex){
					Utility.LOG(true, true, " Exception in " +msg+ex);
				}
			}
			return billingEfficiencyDto;
		}
		
	//[134] end
		
		//[136] START
		/**
		 * To get the services count which are having publish condition  as SEC_AFTER_PRIMARY_CLOSE/SEC_WITH_OR_AFTER_PRIMARY in TM_SERVICE_LINKING table
		 * @param orderNumber
		 * @param con
		 * @return boolean
		 * @author VIPIN SAHARIA
		 * @date 1-Aug-2015
		 */
		private boolean detectSituationForPublishCondition(int orderNumber,Connection con,String publishCondition) {
			String methodName="detectSituationForPublishCondition";
			PreparedStatement psCount =null;
			ResultSet rsCount=null;
			int count=0;
			try{
				psCount=con.prepareStatement(
						"SELECT COUNT(1) AS COUNT FROM IOE.TPOSERVICEMASTER TSM " +
						"	INNER JOIN IOE.TM_SERVICE_LINKING LINKING ON TSM.SERVICETYPEID=SEC_SERVICETYPEID AND ORDERNO=?" +
						(("*".equals(publishCondition))?"":"	 AND LINKING.PUBLISH_CONDITION='"+publishCondition+"' "));
				psCount.setLong(1, orderNumber);
				rsCount=psCount.executeQuery();
				while(rsCount.next())
					count=rsCount.getInt("COUNT");
			}catch(Exception ex){
				Utility.LOG(true, true, ex, methodName);
			}finally{
				try {
					DbConnection.closeResultset(rsCount);
					DbConnection.closePreparedStatement(psCount);
				}catch (Exception ex){
					Utility.LOG(true, true, ex, methodName);
				}
			}
			return count>0?true:false;
		}
		/**
		 * To get details of primary and secondary lines for linking and all possible cases
		 * @param orderNumber
		 * @param con
		 * @return ArrayList<ServiceLinkingDTO>
		 * @author VIPIN SAHARIA
		 * @date 1-Aug-2015
		 */
		private ArrayList<ServiceLinkingDTO> getSecAfterPrimaryCloseCheckingCases(int orderNumber,Connection con) {
			String methodName="getSecAfterPrimaryCloseCheckingCases";
			PreparedStatement psCount =null;
			ResultSet rsCount=null;
			int count=0;
			ArrayList<ServiceLinkingDTO> arrSecAfterPrimaryCloseDet=new ArrayList<ServiceLinkingDTO>();
			ServiceLinkingDTO servobj=null;
			try{
				psCount=con.prepareStatement(
						
					"SELECT SECSERV.SERVICEID AS SEC_SERV_NO,SECSERV.LOGICAL_SI_NO AS SEC_LSI_NO,LINKMAS.PUBLISH_CONDITION AS PUBLISH_CONDITION, "+
					    "PRISERV.LOGICAL_SI_NO AS PRI_LSI_NO,PRISERV.SERVICEID AS PRI_SERV_NO,PRILINE.SERVICEPRODUCTID AS PRI_LINE_NO, "+
					    "PRISERV.M6_FX_PROGRESS_STATUS,PRISERV.SERVICESTAGE AS PRISERVTYPENAME, SECSERV.SERVICESTAGE AS SECSERVTYPENAME "+
					"FROM IOE.TPOSERVICEMASTER SECSERV "+
					    "INNER JOIN IOE.TPOSERVICEDETAILS PRILINE ON PRILINE.VCS_BUNDLED_SERVICE=SECSERV.LOGICAL_SI_NO "+
					    "INNER JOIN IOE.TM_SERVICE_LINKING LINKMAS ON LINKMAS.SEC_SERVICETYPEID=SECSERV.SERVICETYPEID "+
					    "	AND LINKMAS.PRIMARY_SERVICEDETAILID=PRILINE.SERVICEDETAILID "+
					    "INNER JOIN IOE.TPOSERVICEMASTER PRISERV ON PRISERV.SERVICEID=PRILINE.SERVICEID AND  PRISERV.ORDERNO=SECSERV.ORDERNO " +
					    "AND PRISERV.IS_SERVICE_INACTIVE=0 and (PRISERV.M6_FX_PROGRESS_STATUS is null or  PRISERV.M6_FX_PROGRESS_STATUS<>'M6_CANCELLED') "+
					"AND LINKMAS.PUBLISH_CONDITION='SEC_AFTER_PRIMARY_CLOSE' AND SECSERV.ORDERNO=?");
				
				psCount.setLong(1, orderNumber);
				rsCount=psCount.executeQuery();
				while(rsCount.next()){
					servobj=new ServiceLinkingDTO();
					servobj.setSecServiceId(rsCount.getLong("SEC_SERV_NO"));
					servobj.setSecLogicalSiNo(rsCount.getLong("SEC_LSI_NO"));
					servobj.setPriLogicalSiNo(rsCount.getLong("PRI_LSI_NO"));
					servobj.setPriServiceId(rsCount.getLong("PRI_SERV_NO"));
					servobj.setPriServiceProductId(rsCount.getLong("PRI_LINE_NO"));
					servobj.setPriM6FXProgressStatus(rsCount.getString("M6_FX_PROGRESS_STATUS"));
					servobj.setPriServiceTypeName(rsCount.getString("PRISERVTYPENAME"));
					servobj.setSecServiceTypeName(rsCount.getString("SECSERVTYPENAME"));
					
					arrSecAfterPrimaryCloseDet.add(servobj);
				}
			}catch(Exception ex){
				Utility.LOG(true, true, ex, methodName);
			}finally{
				try {
					DbConnection.closeResultset(rsCount);
					DbConnection.closePreparedStatement(psCount);
				}catch (Exception ex){
					Utility.LOG(true, true, ex, methodName);
				}
			}
			return arrSecAfterPrimaryCloseDet;
		}
		/**
		 * To get the list of services in a particular order where TGNO number field in MBIC service is blank
		 * @param orderNumber
		 * @param con
		 * @return List<Long>
		 * @author VIPIN SAHARIA
		 * @date 28-Aug-2015
		 */
		public List<Long> getMBICServicesWithTGNOBlank(Long orderNumber) {
			String methodName="getMBICServicesWithTGNOBlank";
			PreparedStatement psCount =null;
			ResultSet rsCount=null;
			List<Long> nonValidServiceIds = new ArrayList<Long>();
			Connection con = null;
			int count=0;
			try{
				con=DbConnection.getConnectionObject();
				psCount=con.prepareStatement("SELECT DISTINCT HIS.MAIN_SERVICE_ID FROM ioe.TPRODUCTLINEATTVALUE_HISTORY HIS " +
						"INNER JOIN ioe.TPOSERVICEMASTER TPOSMSTR ON TPOSMSTR.SERVICETYPEID=413 " +
						"AND HIS.MAIN_SERVICE_ID=TPOSMSTR.SERVICEID AND HIS.ORDERNO=TPOSMSTR.ORDERNO " +
						"AND HIS.ATTMASTERID=3948 WHERE TPOSMSTR.ORDERNO=? and TRIM(HIS.ATTVALUE_NEW)='' ");
				psCount.setLong(1, orderNumber);
				rsCount=psCount.executeQuery();
				while(rsCount.next())
					nonValidServiceIds.add(rsCount.getLong("MAIN_SERVICE_ID"));
			}catch(Exception ex){
				Utility.LOG(true, true, ex, methodName);
			}finally{
				try {
					DbConnection.closeResultset(rsCount);
					DbConnection.closePreparedStatement(psCount);
					DbConnection.freeConnection(con);
				}catch (Exception ex){
					Utility.LOG(true, true, ex, methodName);
				}
			}
			return nonValidServiceIds;
		}
		//[136] END
		
		//[139] start
		public Integer getDisconnectionFlagStatus(String orderNo) throws Exception {
			Connection connection =null;
			PreparedStatement cs =null;
			ResultSet rs = null;
			Integer isDisconectedCharge = null;
			try {
				connection=DbConnection.getConnectionObject();
						cs=connection.prepareStatement("SELECT count(*) as COUNTREDISCONNECTEDCHARGE FROM ioe.TPOSERVICEMASTER smaster " +
												"inner join ioe.TPOSERVICEDETAILS sdetail on smaster.SERVICEID=sdetail.CHANGE_SERVICEID" +
												" and smaster.ORDERNO=?  inner join ioe.TCHARGES_INFO cinfo on cinfo.SERVICEPRODUCTID=sdetail.SERVICEPRODUCTID " +
												"and smaster.ORDERNO=cinfo.DISCONNECTED_IN_ORDER_NO and IS_REDISCONNECTED=1 " +
												"WHERE smaster.M6_FX_PROGRESS_STATUS is null");
						cs.setString(1, orderNo);
						rs = cs.executeQuery();
					if(rs!=null){
						while (rs.next()) {
							isDisconectedCharge = rs.getInt("COUNTREDISCONNECTEDCHARGE");
						}
					}
			} catch (Exception e) {
				  Utility.LOG(true, true, e, "exception in getDisconnectionFlagStatus method of "+this.getClass());
			}
			finally
			{
				try 
				{
					DbConnection.closeResultset(rs);
					DbConnection.closePreparedStatement(cs);
					DbConnection.freeConnection(connection);
				} 
				catch (Exception e) 
				{
					Utility.LOG(true, true, e, "exception in getDisconnectionFlagStatus method of "+this.getClass());
				}
			}
			
			return isDisconectedCharge;	
		}
//[141] start
		
		public ArrayList<String> validateAccountofService(int orderNo) throws Exception {
			
			Connection connection =null;
			PreparedStatement pstmt =null;
			ResultSet rs = null;
			String mismatchedServiceId="";
			ArrayList<String> lstInvalidServiceId=new ArrayList<String>();
			
			try {
				connection=DbConnection.getConnectionObject();
				
				pstmt=connection.prepareStatement("SELECT SERVICEID FROM IOE.TPOMASTER TPOMASTER"
											+" INNER JOIN IOE.TPOSERVICEMASTER SERVICEMASTER ON SERVICEMASTER.ORDERNO=TPOMASTER.ORDERNO " 
											+" AND SERVICEMASTER.SERVICETYPEID in(SELECT SERVICETYPEID FROM ioe.TSERVICETYPE WHERE SERVICETYPENAME like '%M2M%') AND TPOMASTER.ORDERNO=?"
											+" INNER JOIN IOE.TM_ACCOUNT ACCOUNT ON ACCOUNT.ACCOUNTID=TPOMASTER.ACCOUNTID" 
											+" WHERE ACCOUNT.SERVICESEGMENT NOT IN (SELECT KEYVALUE FROM IOE.TM_APPCONFIG WHERE KEYNAME LIKE '%M2M_SERVICE_SEGMENT%')");
				pstmt.setInt(1, orderNo);
				rs=pstmt.executeQuery();
				while(rs.next()){
					lstInvalidServiceId.add(rs.getString("SERVICEID"));
					//mismatchedServiceId=mismatchedServiceId+","+rs.getString("SERVICEID");
					
				}
			} catch (Exception e) {
				Utility.LOG(true, true, e, "exception in validateAccountofService method of "+this.getClass());
				// TODO Auto-generated catch block
				e.printStackTrace();
			}finally{
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(pstmt);
				DbConnection.freeConnection(connection);
			}
			
			return lstInvalidServiceId;
			
		}
		
		//[141] end

		public int updateChannelPartnerTaggingFields(Connection connection,
				NewOrderBean newOrderBean) {
			String msg = "in updateChannelPartnerTaggingFields method of newOrderDao";
			int updateCount = 0;
			PreparedStatement psUpdateChannelPartnerTagFields =null;
			try
			{
				//connection = DbConnection.getConnectionObject();
				//connection.setAutoCommit(false);
				psUpdateChannelPartnerTagFields = connection.prepareStatement("UPDATE IOE.TPOMASTER SET CHANNEL_PARTNER_TAGGING=?, CHANNEL_PARTNER_NAME=?,FIELD_ENGINEER_ID=? WHERE ORDERNO=?");
				psUpdateChannelPartnerTagFields.setString(1, newOrderBean.getChannelMasterTagging());
				
				if(!"0".equals(newOrderBean.getChannelMasterTagging()))	
				{
					psUpdateChannelPartnerTagFields.setLong(2, newOrderBean.getChannelPartnerId());
					
					if(newOrderBean.getFieldEngineerId()==0)
					{
						psUpdateChannelPartnerTagFields.setNull(3, java.sql.Types.INTEGER);	
					}
					else
					{
						psUpdateChannelPartnerTagFields.setLong(3, newOrderBean.getFieldEngineerId());
					}
					psUpdateChannelPartnerTagFields.setLong(4,Long.valueOf(newOrderBean.getOrderNo()));
				
				}
				else
				{
					psUpdateChannelPartnerTagFields.setNull(2, java.sql.Types.VARCHAR);
					psUpdateChannelPartnerTagFields.setNull(3, java.sql.Types.INTEGER);
					psUpdateChannelPartnerTagFields.setLong(4,Long.valueOf(newOrderBean.getOrderNo()));
				
				//newOrderBean.setChannelPartnerName(" ");
				
				}
				
				
				updateCount=psUpdateChannelPartnerTagFields.executeUpdate();
				//connection.commit();
				
			}catch(Exception ex ){
				/*try {
					connection.rollback();
				}catch (SQLException e) {
					Utility.LOG(true, true, e, msg);
				}*/
				Utility.LOG(true, true, ex, msg);
			}
			finally{
				try{
					DbConnection.closePreparedStatement(psUpdateChannelPartnerTagFields);
					//DbConnection.freeConnection(connection);
				} 
				catch (Exception e){
					Utility.LOG(true, true, e, msg);
				}
			}
			return updateCount;
		}

		public ArrayList populateChannelPartnerList(Long orderNo) throws Exception {

			String methodName="populateChannelPartnerList",  msg="";
			boolean logToFile=true, logToConsole=true;
			Connection connection=null, connectionOther =null;
			PreparedStatement prestmt=null,prestmtOther =null;
			ResultSet rs = null,rsOther = null;
			//NewOrderDto objRetDto = new NewOrderDto();
			OrderHeaderDTO objRetDto = null;
			ArrayList<OrderHeaderDTO> channelPartnerList = new ArrayList<OrderHeaderDTO>();
			ArrayList<OrderHeaderDTO> channelPartnerListOther = new ArrayList<OrderHeaderDTO>();
			ArrayList listOther = new ArrayList();
			
			//we have to execute extra query bcoz in lines and approve tab we r not getting val from db,getting only in case of first 3 tabs..
			try
			{
				connection=DbConnection.getConnectionObject();
				prestmt= connection.prepareCall("SELECT PARTNER_ID,PARTNER_NAME FROM ioe.TM_CHANNEL_PARTNER");	
				rs = prestmt.executeQuery();
				while(rs.next())
				{
					objRetDto =  new OrderHeaderDTO();
					
					objRetDto.setPARTNER_ID(rs.getInt("PARTNER_ID"));
					objRetDto.setPARTNER_NAME(rs.getString("PARTNER_NAME"));
					channelPartnerList.add(objRetDto);
				}
				
				connectionOther=DbConnection.getConnectionObject();
				prestmtOther= connectionOther.prepareCall("SELECT CHANNEL_PARTNER_TAGGING,CHANNEL_PARTNER_NAME FROM ioe.TPOMASTER WHERE ORDERNO=?");
				prestmtOther.setLong(1, orderNo);
				rsOther = prestmtOther.executeQuery();
				while(rsOther.next())
				{
					OrderHeaderDTO objRetDtoOther =  new OrderHeaderDTO();
					
					objRetDtoOther.setPARTNER_NAME(rsOther.getString("CHANNEL_PARTNER_TAGGING"));
					
					if(null==rsOther.getString("CHANNEL_PARTNER_NAME") || rsOther.getString("CHANNEL_PARTNER_NAME").equals("")){
						objRetDtoOther.setPARTNER_ID(0);
					}else{
						objRetDtoOther.setPARTNER_ID(Integer.valueOf(rsOther.getString("CHANNEL_PARTNER_NAME")));
					}
					
					channelPartnerListOther.add(objRetDtoOther);
				}
				listOther.add(channelPartnerList);
				listOther.add(channelPartnerListOther);
			}
			catch(Exception ex )
			{
				Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Error While Fetching channelPartnerList  : "+msg, logToFile, logToConsole);//added by nagarjuna
				
				//ex.printStackTrace();	
			}
			finally
			{
				try 
				{
					DbConnection.closeResultset(rs);
					DbConnection.closePreparedStatement(prestmt);
					DbConnection.freeConnection(connection);
					DbConnection.closeResultset(rsOther);
					DbConnection.closePreparedStatement(prestmtOther);
					DbConnection.freeConnection(connectionOther);
				} 
				catch (SQLException e) 
				{
					Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
					// TODO Auto-generated catch block
					//e.printStackTrace();
				}
			}
			return listOther;
		}
		//[145] start
		public String OrderStage(Long orderNo,Connection connection)
		{
			PreparedStatement psorderstage =null;
			ResultSet rs = null;
			ViewOrderDto objDto = null;
			String orderstage = "";
			try
			{
				psorderstage= connection.prepareStatement("SELECT STAGE FROM IOE.TPOMASTER WHERE ORDERNO=?");
				psorderstage.setLong(1,orderNo);
				rs = psorderstage.executeQuery();
					
				while(rs.next())
				{
					orderstage = rs.getString("STAGE");
				}
					
			}
			catch(Exception ex )
			{
				ex.printStackTrace();	
			}
			finally
			{
				try 
				{
					DbConnection.closeResultset(rs);
					DbConnection.closePreparedStatement(psorderstage);
				} 
				catch (Exception e) 
				{
					e.printStackTrace();
				}
			}
			return orderstage;
		}
	//[145] end 
//[144] start
		
		
		private static String sqlGetTaxDetailsOldLineOldCharge="SELECT  SD.FX_ACCOUNT_EXTERNAL_ID,TAX_CLASS,SD.SERVICEPRODUCTID,SD.CHANGE_SERVICEID,CHARGEMAP.CHARGE_NAME FROM IOE.TPOSERVICEMASTER SM"
     +" INNER JOIN IOE.TDISCONNECTION_HISTORY DIS_HIS ON DIS_HIS.MAIN_SERVICEID=SM.SERVICEID"
     +" INNER JOIN IOE.TPOSERVICEDETAILS SD ON DIS_HIS.SERVICE_PRODUCT_ID=SD.SERVICEPRODUCTID AND SD.SERVICEID <> SD.CHANGE_SERVICEID"
     +" INNER JOIN IOE.TBILLING_INFO BILLING_INFO ON BILLING_INFO.SERVICEPRODUCTID=SD.SERVICEPRODUCTID"
     +" INNER JOIN IOE.TENTITY ENTITY ON ENTITY.ENTITYID=BILLING_INFO.ENTITYID AND ISFLE=1  AND ENTITY.ENTITYNAME <> 'Networki2i'"
     +" INNER JOIN IOE.TFX_RC_CREATE RC_CREATE ON RC_CREATE.FX_EXT_ACCOUNT_NO=SD.FX_ACCOUNT_EXTERNAL_ID"
     +" INNER JOIN IOE.TCHARGES_INFO CHGINF ON CHGINF.CHARGEINFOID=RC_CREATE.CHARGEINFOID"
     +" INNER JOIN IOE.TPRODUCT_CHARGENAME_MAPPING CHARGEMAP ON CHARGEMAP.MAPPING_ID=CHGINF.CHARGENAME"
     +" WHERE SM.ORDERNO=? and SM.ISPUBLISHED=0"
     +" UNION"
     +" SELECT  SD.FX_ACCOUNT_EXTERNAL_ID,TAX_CLASS,SD.SERVICEPRODUCTID,SD.CHANGE_SERVICEID,CHARGEMAP.CHARGE_NAME  FROM IOE.TPOSERVICEMASTER SM"
     +" INNER JOIN IOE.TDISCONNECTION_HISTORY DIS_HIS ON DIS_HIS.MAIN_SERVICEID=SM.SERVICEID"
     +" INNER JOIN IOE.TPOSERVICEDETAILS SD ON DIS_HIS.SERVICE_PRODUCT_ID=SD.SERVICEPRODUCTID AND SD.SERVICEID <> SD.CHANGE_SERVICEID"
     +" INNER JOIN IOE.TBILLING_INFO BILLING_INFO ON BILLING_INFO.SERVICEPRODUCTID=SD.SERVICEPRODUCTID"
     +" INNER JOIN IOE.TENTITY ENTITY ON ENTITY.ENTITYID=BILLING_INFO.ENTITYID AND ISFLE=1  AND ENTITY.ENTITYNAME <> 'Networki2i'"
     +" INNER JOIN IOE.TFX_NRC_CREATE NRC_CREATE ON NRC_CREATE.FX_EXT_ACCOUNT_NO=SD.FX_ACCOUNT_EXTERNAL_ID"
     +" INNER JOIN IOE.TCHARGES_INFO CHGINF ON CHGINF.CHARGEINFOID=NRC_CREATE.CHARGEINFOID"
     +" INNER JOIN IOE.TPRODUCT_CHARGENAME_MAPPING CHARGEMAP ON CHARGEMAP.MAPPING_ID=CHGINF.CHARGENAME"
     +" WHERE SM.ORDERNO=? and SM.ISPUBLISHED=0";
		
		
		public ArrayList<NewOrderDto> fetchTaxRateForOldLineOldChargeFle(long orderno) throws Exception {
			
				
			String methodName="fetchTaxRateForOldLineOldChargeFle", className=this.getClass().getName(), msg1="";
			boolean logToFile=true, logToConsole=true;
			Connection connection =null;
			PreparedStatement pstmt =null;
			ResultSet rs= null;
			int count=1;
			NewOrderDto objNewOrderDto = null;
			ArrayList<NewOrderDto> TaxRateList=new ArrayList<NewOrderDto>();
			
			try {
				connection=DbConnection.getConnectionObject();
				
				pstmt=connection.prepareStatement(sqlGetTaxDetailsOldLineOldCharge);
				pstmt.setLong(1, orderno);
				pstmt.setLong(2, orderno);
				
				rs=pstmt.executeQuery();
				while(rs.next()){
					objNewOrderDto=new NewOrderDto();
					
					objNewOrderDto.setFx_external_acc_id(rs.getString("FX_ACCOUNT_EXTERNAL_ID"));
					objNewOrderDto.setTaxRate(rs.getDouble("TAX_CLASS"));
					objNewOrderDto.setServiceProductID(rs.getInt("SERVICEPRODUCTID"));
					objNewOrderDto.setServiceId(rs.getInt("CHANGE_SERVICEID"));
					objNewOrderDto.setChargeName(rs.getString("CHARGE_NAME"));
					TaxRateList.add(objNewOrderDto);
					
				}
				
			} catch (Exception e) {
				
				Utility.LOG(true, true, "Exception "+e);
			}finally{
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(pstmt);
				DbConnection.freeConnection(connection);
			}
			
			return TaxRateList;
		}
		String sqlGetTaxDetailsOldLineNewCharge="SELECT SD.FX_ACCOUNT_EXTERNAL_ID,TAX_CLASS,SD.SERVICEPRODUCTID,SD.CHANGE_SERVICEID FROM IOE.TPOSERVICEMASTER SM"
				+" INNER JOIN IOE.TDISCONNECTION_HISTORY DIS_HIS ON DIS_HIS.MAIN_SERVICEID=SM.SERVICEID"
		+" INNER JOIN IOE.TPOSERVICEDETAILS SD ON DIS_HIS.SERVICE_PRODUCT_ID=SD.SERVICEPRODUCTID AND SD.SERVICEID <> SD.CHANGE_SERVICEID"
		+" INNER JOIN IOE.TBILLING_INFO BILLING_INFO ON BILLING_INFO.SERVICEPRODUCTID=SD.SERVICEPRODUCTID"
		+" INNER JOIN IOE.TENTITY ENTITY ON ENTITY.ENTITYID=BILLING_INFO.ENTITYID AND ISFLE=1 AND ENTITY.ENTITYNAME <> 'Networki2i'"
		+" INNER JOIN IOE.TCHARGES_INFO CHGINF ON CHGINF.SERVICEPRODUCTID=SD.SERVICEPRODUCTID AND CHARGES_STATUS='NEW'"
		+" INNER JOIN IOE.TPRODUCT_CHARGENAME_MAPPING CHARGEMAP ON CHARGEMAP.MAPPING_ID=CHGINF.CHARGENAME"
		+" WHERE SM.ORDERNO=? and SM.ISPUBLISHED=0";
		
		public ArrayList<NewOrderDto> fetchTaxRateOldLineNewChargeFle(
				long orderno) throws Exception {
			
			String methodName="fetchTaxRateOldLineNewChargeFle", className=this.getClass().getName(), msg1="";
			boolean logToFile=true, logToConsole=true;
			Connection connection =null;
			PreparedStatement pstmt =null;
			ResultSet rs= null;
			int count=1;
			NewOrderDto objNewOrderDto = null;
			ArrayList<NewOrderDto> TaxRateList=new ArrayList<NewOrderDto>();
			
			try {
				connection=DbConnection.getConnectionObject();
				pstmt=connection.prepareStatement(sqlGetTaxDetailsOldLineNewCharge);
				pstmt.setLong(1, orderno);
				rs=pstmt.executeQuery();
				while(rs.next()){
					objNewOrderDto=new NewOrderDto();
					objNewOrderDto.setFx_external_acc_id(rs.getString("FX_ACCOUNT_EXTERNAL_ID"));
					objNewOrderDto.setTaxRate(rs.getDouble("TAX_CLASS"));
					objNewOrderDto.setServiceProductID(rs.getInt("SERVICEPRODUCTID"));
					objNewOrderDto.setServiceId(rs.getInt("CHANGE_SERVICEID"));
					TaxRateList.add(objNewOrderDto);
				}
			} catch (Exception e) {
				Utility.LOG(true, true, "Exception "+e);
			}finally{
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(pstmt);
				DbConnection.freeConnection(connection);
			}
			
			return TaxRateList;
		}
		
	//[144] end	
		
		private static String sqlGetEligibleCustSegmforFeId = getSqlEligibleCustSegforFeId();
		
		private static String getSqlEligibleCustSegforFeId() {
			StringBuilder sql=new StringBuilder("SELECT KEYVALUE AS ELIGIBLE_CUSTSEGM_FOR_FENGINEER_VALUE FROM IOE.TM_APPCONFIG WHERE KEYNAME='ELIGIBLE_CUSTSEGM_FOR_FENGINEER'");
			return sql.toString();
		}
		
		public ArrayList<NewOrderDto> getFieldEngineer(NewOrderDto newOrderDto) 
		{
			//		Added by nagarjuna
			String methodName="getFieldEngineer",  msg="";
			boolean logToFile=true, logToConsole=true;
			//	End nagarjuna
			Connection connection =null;
			CallableStatement getAllFE =null;
			ResultSet rsgettingFE = null;
			ArrayList<NewOrderDto> listFEDetails = new ArrayList<NewOrderDto>();
			NewOrderDto objNewOrderDto = null;
			try
			{
				connection=DbConnection.getConnectionObject();
				if("".equals(newOrderDto.getFieldEngineer())){
					getAllFE= connection.prepareCall("SELECT FIELD_ENGINEER,IS_ACTIVE FROM ioe.TM_FIELD_ENG_MAPPING WHERE PARTNER_ID=?");
					getAllFE.setLong(1, Long.valueOf(newOrderDto.getChannelPartnerId()));
				}else{
					getAllFE= connection.prepareCall("SELECT FIELD_ENGINEER,IS_ACTIVE FROM ioe.TM_FIELD_ENG_MAPPING WHERE PARTNER_ID=? and upper(FIELD_ENGINEER) like upper('%"+newOrderDto.getFieldEngineer().trim()+"%')");
					getAllFE.setLong(1, Long.valueOf(newOrderDto.getChannelPartnerId()));
					//getAllFE.setInt(2, Integer.valueOf(newOrderDto.getFieldEngineer()));
				}
				rsgettingFE = getAllFE.executeQuery();
				while(rsgettingFE.next())
				{
					objNewOrderDto =  new NewOrderDto();
					objNewOrderDto.setFieldEngineer(rsgettingFE.getString("FIELD_ENGINEER"));
					objNewOrderDto.setStatus((rsgettingFE.getInt("IS_ACTIVE")));
					//msg="Error at getFieldEngineer";
					listFEDetails.add(objNewOrderDto);
				}
			}
			catch(Exception ex )
			{
				msg="Error at getFieldEngineer";
				Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Exception  :"+msg, logToFile, logToConsole);//added by nagarjuna
				//ex.printStackTrace();	
			}
			finally
			{
				try 
				{
					DbConnection.closeResultset(rsgettingFE);
					DbConnection.closeCallableStatement(getAllFE);
					DbConnection.freeConnection(connection);
				} 
				catch (Exception e) 
				{
					Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
					// TODO Auto-generated catch block
					//e.printStackTrace();
				}
			}
			return listFEDetails;
		}
		
		
		
		public ArrayList<FieldEnginnerDto> getFEbyPartnerId(String partnerId) {

				String methodName="getFEbyPartnerId",  msg="";
				boolean logToFile=true, logToConsole=true;
				//	End nagarjuna
				Connection connection =null;
				PreparedStatement getFEbyPartnerId =null;
				ResultSet rs = null;
				FieldEnginnerDto objNewOrderDto = null;
				ArrayList<FieldEnginnerDto> listGetFEbyPartnerId = new ArrayList<FieldEnginnerDto>();
				try
				{
					connection=DbConnection.getConnectionObject();
					getFEbyPartnerId= connection.prepareCall("SELECT FIELD_ENGINEER,FIELD_ENGINEER_ID,IS_ACTIVE FROM ioe.TM_FIELD_ENG_MAPPING WHERE PARTNER_ID=?");
					getFEbyPartnerId.setInt(1, Integer.valueOf(partnerId));
					rs = getFEbyPartnerId.executeQuery();
					while(rs.next())
					{
					 objNewOrderDto =  new FieldEnginnerDto();
					 objNewOrderDto.setSe_Id((rs.getLong("FIELD_ENGINEER_ID")));
					 objNewOrderDto.setFieldEngineer(rs.getString("FIELD_ENGINEER"));
					 objNewOrderDto.setField_Engineer_Is_Active(rs.getInt("IS_ACTIVE"));
					 listGetFEbyPartnerId.add(objNewOrderDto);
					}
				}
				catch(Exception ex )
				{
					 
					Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Exception"+msg, logToFile, logToConsole);//added by nagarjuna 
					//ex.printStackTrace();	
				}
				finally
				{
					try 
					{
						DbConnection.closeResultset(rs);
						DbConnection.closePreparedStatement(getFEbyPartnerId);
						DbConnection.freeConnection(connection);
					} 
					catch (Exception e) 
					{
						Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
						// TODO Auto-generated catch block
						//e.printStackTrace();
					}
				}
				return listGetFEbyPartnerId;
			}

			public ArrayList<String> getListofFE(long respId) {
				String methodName="getListofFE",  msg="";
				boolean logToFile=true, logToConsole=true;
				Connection connection =null;
				PreparedStatement getAllFE =null;
				ResultSet rs = null;
				ArrayList listofFE = new ArrayList();;
				try
				{
					connection=DbConnection.getConnectionObject();
					getAllFE= connection.prepareCall("SELECT FIELD_ENGINEER FROM ioe.TM_FIELD_ENG_MAPPING where PARTNER_ID=? and IS_ACTIVE=1");
					getAllFE.setLong(1, Long.valueOf(respId));
					rs = getAllFE.executeQuery();
					while(rs.next())
					{	
						
						listofFE.add(rs.getString("FIELD_ENGINEER").toUpperCase());
					}
				}
				catch(Exception ex )
				{
					Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Exception"+msg, logToFile, logToConsole);//added by nagarjuna 
				}
				finally
				{
					try 
					{
						DbConnection.closeResultset(rs);
						DbConnection.closePreparedStatement(getAllFE);
						DbConnection.freeConnection(connection);
					} 
					catch (Exception e) 
					{
						Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
					}
				}
				return listofFE;
			}


			
			public ArrayList<String> getListofPartnerCode(long respId) {
				String methodName="getListofPartnerCode",  msg="";
				boolean logToFile=true, logToConsole=true;
				Connection connection =null;
				PreparedStatement getAllPartnerCode =null;
				ResultSet rs = null;
				ArrayList listofPartnerCode = new ArrayList();;
				try
				{
					connection=DbConnection.getConnectionObject();
					getAllPartnerCode= connection.prepareCall("SELECT PARTNER_CODE AS CHANNELPARTNERCODE FROM IOE.TM_CHANNEL_PARTNER cp inner join ioe.TM_PARTNER_CUSTSEG_MAPPING pcm on pcm.PARTNER_ID=cp.PARTNER_ID WHERE CUST_SEGMENT_ID in ( SELECT CUST_SEGMENT_ID FROM ioe.TM_RESP_SEGMENT_MAPPING where RESP_SEG_ID = ?) AND IS_ACTIVE=1");
					getAllPartnerCode.setLong(1, Long.valueOf(respId));
					rs = getAllPartnerCode.executeQuery();
					while(rs.next())
					{	
						listofPartnerCode.add(rs.getString("CHANNELPARTNERCODE").toUpperCase());
					}
				}
				catch(Exception ex )
				{
					Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className,"Exception"+msg, logToFile, logToConsole);//added by nagarjuna 
				}
				finally
				{
					try 
					{
						DbConnection.closeResultset(rs);
						DbConnection.closePreparedStatement(getAllPartnerCode);
						DbConnection.freeConnection(connection);
					} 
					catch (Exception e) 
					{
						Utility.LOG(true, true, "Exception "+e);//added by nagarjuna
					}
				}
				return listofPartnerCode;
			}
			
			


			public static ArrayList<FieldEnginnerDto> fetchAllFE(long respId) throws Exception {
				ArrayList<FieldEnginnerDto> listofFE=new ArrayList<FieldEnginnerDto>();
				Connection conn=null;
				PreparedStatement pstmt=null;
				ResultSet rs=null;
				FieldEnginnerDto fieldEngObj=null;
				int recordCount;
				try{
					conn=DbConnection.getConnectionObject();
					pstmt=conn.prepareCall("SELECT distinct FIELD_ENGINEER_ID,FIELD_ENGINEER FROM ioe.TM_CHANNEL_PARTNER cp	" +
							"inner join ioe.TM_FIELD_ENG_MAPPING fem on fem.PARTNER_ID=cp.PARTNER_ID " +
							"inner join ioe.TM_PARTNER_CUSTSEG_MAPPING pcm on pcm.PARTNER_ID=cp.PARTNER_ID " +
							"inner join ioe.TM_RESP_SEGMENT_MAPPING csm " +
							"on csm.CUST_SEGMENT_ID=pcm.CUST_SEGMENT_ID where RESP_SEG_ID=?");
					pstmt.setLong(1, respId);
					rs=pstmt.executeQuery();
					
					while(rs.next()){
						fieldEngObj=new FieldEnginnerDto();
						fieldEngObj.setSe_Id((rs.getLong("FIELD_ENGINEER_ID")));
						fieldEngObj.setFieldEngineer((rs.getString("FIELD_ENGINEER")));
						
						listofFE.add(fieldEngObj);
					}
					
				}catch(Exception e){
					throw e;
				}finally{				
					DbConnection.closeResultset(rs);
					DbConnection.closePreparedStatement(pstmt);
					DbConnection.freeConnection(conn);
				}
				return listofFE;
			}
			
			public static ArrayList<ChannelPartnerDto> getAllPartnerNameList(long respId) throws Exception {
				ArrayList<ChannelPartnerDto> listofPartnerName=new ArrayList<ChannelPartnerDto>();
				Connection conn=null;
				PreparedStatement pstmt=null;
				ResultSet rs=null;
				ChannelPartnerDto partnerNameObj=null;
				int recordCount;
				try{
					conn=DbConnection.getConnectionObject();
					pstmt=conn.prepareCall("SELECT distinct cp.PARTNER_ID,PARTNER_NAME FROM ioe.TM_CHANNEL_PARTNER cp inner join " +
							"ioe.TM_PARTNER_CUSTSEG_MAPPING pcm on pcm.PARTNER_ID=cp.PARTNER_ID " +
							"inner join ioe.TM_RESP_SEGMENT_MAPPING csm on csm.CUST_SEGMENT_ID=pcm.CUST_SEGMENT_ID " +
							"where RESP_SEG_ID=?");
					pstmt.setLong(1, respId);
					rs=pstmt.executeQuery();
					
					while(rs.next()){
						partnerNameObj=new ChannelPartnerDto();
						partnerNameObj.setChannelPartnerName((rs.getString("PARTNER_NAME")));
						listofPartnerName.add(partnerNameObj);
					}
				}catch(Exception e){
					throw e;
				}finally{				
					DbConnection.closeResultset(rs);
					DbConnection.closePreparedStatement(pstmt);
					DbConnection.freeConnection(conn);
				}
				return listofPartnerName;
			}

			public static ArrayList<Integer> getEligibleCustSegm() throws Exception {
				Connection conn=null;
				ArrayList<Integer> getEligibleCustSegforFe = new ArrayList<Integer>();
				ResultSet rs = null;
				PreparedStatement psEligibleCustforFe=null;
				try{
					conn=DbConnection.getConnectionObject();
					psEligibleCustforFe=conn.prepareStatement(sqlGetEligibleCustSegmforFeId);
					rs=psEligibleCustforFe.executeQuery();
				
					if(rs.next()){
						String value = rs.getString("ELIGIBLE_CUSTSEGM_FOR_FENGINEER_VALUE");
						if(! Utility.checkNullValues(value)){
							StringTokenizer st = new StringTokenizer(value, ",");
							while(st.hasMoreElements()) {
								getEligibleCustSegforFe.add(Integer.valueOf(st.nextToken()));
							}
						}
					}
				}finally{
					DbConnection.closeResultset(rs);
					DbConnection.closePreparedStatement(psEligibleCustforFe);
					DbConnection.freeConnection(conn);
				}
				return getEligibleCustSegforFe;
			}

			public static ArrayList<Long> getCustSegIdByRespId(Integer respId) throws Exception {
				Connection conn=null;
				PreparedStatement pstmt=null;
				ResultSet rs=null;
				ArrayList<Long> listofCustSegIdbyRespId= new ArrayList<Long>();
				try{
					conn=DbConnection.getConnectionObject();
					pstmt=conn.prepareCall("SELECT CUST_SEGMENT_ID FROM ioe.TM_RESP_SEGMENT_MAPPING WHERE RESP_SEG_ID=?");
					pstmt.setLong(1, respId);
					rs=pstmt.executeQuery();
					while(rs.next()){
						listofCustSegIdbyRespId.add(rs.getLong("CUST_SEGMENT_ID"));
					}
				}catch(Exception e){
					throw e;
				}finally{				
					DbConnection.closeResultset(rs);
					DbConnection.closePreparedStatement(pstmt);
					DbConnection.freeConnection(conn);
				}
				return listofCustSegIdbyRespId;
			}
		
			public static String getCustSegNameByRespId(Integer respId) throws Exception {
				Connection conn=null;
				PreparedStatement pstmt=null;
				ResultSet rs=null;
				ArrayList<String> listofCustSegNamebyRespId= new ArrayList<String>();
				StringBuilder commaSepListofSegName=new StringBuilder();
				try{
					conn=DbConnection.getConnectionObject();
					pstmt=conn.prepareCall("SELECT cseg.CUST_SEGMENT_CODE as CUST_SEGMENT_NAME FROM ioe.TM_RESPONSIBILITY res " +
							"inner join ioe.TM_RESP_SEGMENT_MAPPING rsm on rsm.RESP_SEG_ID=res.RESP_ID inner join" +
							" ioe.TM_CUSTOMER_SEGMENT_MASTER cseg on cseg.CUST_SEGMENT_ID=rsm.CUST_SEGMENT_ID WHERE RESP_ID=?");
					pstmt.setLong(1, respId);
					rs=pstmt.executeQuery();
					while(rs.next()){
						commaSepListofSegName.append(rs.getString("CUST_SEGMENT_NAME")+" ,");
						//listofCustSegNamebyRespId.add(rs.getString("CUST_SEGMENT_NAME"));
					}
					//commaSepListofSegName.substring(0,commaSepListofSegName.length()-1);
				}catch(Exception e){
					throw e;
				}finally{				
					DbConnection.closeResultset(rs);
					DbConnection.closePreparedStatement(pstmt);
					DbConnection.freeConnection(conn);
				}
				return ""+commaSepListofSegName.substring(0,commaSepListofSegName.length()-1);
			}
			
			public static String getLOBNameByRespId(Integer respId) throws Exception {
				Connection conn=null;
				PreparedStatement pstmt=null;
				ResultSet rs=null;
				String commaSepListofSegName = null;
				try{
					conn=DbConnection.getConnectionObject();
					pstmt=conn.prepareCall("SELECT res.LOB_NAME FROM ioe.TM_RESPONSIBILITY res " +
							"inner join ioe.TM_RESP_SEGMENT_MAPPING rsmap on" +
							" rsmap.RESP_SEG_ID=res.RESP_ID where RESP_SEG_ID = ?");
					pstmt.setLong(1, respId);
					rs=pstmt.executeQuery();
					while(rs.next()){
						commaSepListofSegName=rs.getString("LOB_NAME");
						//listofCustSegNamebyRespId.add(rs.getString("CUST_SEGMENT_NAME"));
					}
					//commaSepListofSegName.substring(0,commaSepListofSegName.length()-1);
				}catch(Exception e){
					throw e;
				}finally{				
					DbConnection.closeResultset(rs);
					DbConnection.closePreparedStatement(pstmt);
					DbConnection.freeConnection(conn);
				}
				return commaSepListofSegName;
			}

			public static ArrayList<ChannelPartnerDto> getPartnerCodeList(long crmAccountNo) throws Exception {
				ArrayList<ChannelPartnerDto> listofPartnerCode=new ArrayList<ChannelPartnerDto>();
				Connection conn=null;
				PreparedStatement pstmt=null;
				ResultSet rs=null;
				ChannelPartnerDto partnerCodeObj=null;
				int recordCount;
				try{
					conn=DbConnection.getConnectionObject();
					pstmt=conn.prepareCall("SELECT distinct CUSTMAP.CUST_SEGMENT_ID AS CUST_SEGMENT_ID,CP.PARTNER_ID AS PARTNER_ID ," +
							" CP.PARTNER_CODE AS  PARTNER_CODE , CP.PARTNER_NAME AS  PARTNER_NAME , resp.LOB_NAME ,resp.RESP_ID , resp.RESP_NAME" +
							" FROM IOE.TM_CHANNEL_PARTNER  CP INNER JOIN IOE.TM_PARTNER_CUSTSEG_MAPPING CUSTMAP ON CUSTMAP.PARTNER_ID=CP.PARTNER_ID " +
							"inner join ioe.TM_RESP_SEGMENT_MAPPING respmap on respmap.CUST_SEGMENT_ID=CUSTMAP.CUST_SEGMENT_ID inner join " +
							"ioe.TM_RESPONSIBILITY resp on resp.RESP_ID = respmap.RESP_SEG_ID  WHERE CP.IS_ACTIVE=1 " +
							"AND CUSTMAP.CUST_SEGMENT_ID=( SELECT CUSTOMERSEGMENT FROM IOE.TM_ACCOUNT WHERE CRMACCOUNTNO=?)" +
							" and resp.RESP_ID!=?");
					pstmt.setLong(1, crmAccountNo);
					pstmt.setLong(2, AppConstants.RESPOSIBILITY_IB2B_ALL);
					rs=pstmt.executeQuery();
					
					while(rs.next()){
						partnerCodeObj=new ChannelPartnerDto();
						partnerCodeObj.setChannelpartnerCode((rs.getString("PARTNER_CODE")));
						listofPartnerCode.add(partnerCodeObj);
					}
				}catch(Exception e){
					throw e;
				}finally{				
					DbConnection.closeResultset(rs);
					DbConnection.closePreparedStatement(pstmt);
					DbConnection.freeConnection(conn);
				}
				return listofPartnerCode;
			}
			
			public static ArrayList<ChannelPartnerDto> getPartnerNameList(long crmAccountNo) throws Exception {
				ArrayList<ChannelPartnerDto> listofPartnerName=new ArrayList<ChannelPartnerDto>();
				Connection conn=null;
				PreparedStatement pstmt=null;
				ResultSet rs=null;
				ChannelPartnerDto partnerNameObj=null;
				int recordCount;
				try{
					conn=DbConnection.getConnectionObject();
					pstmt=conn.prepareCall("SELECT distinct CUSTMAP.CUST_SEGMENT_ID AS CUST_SEGMENT_ID,CP.PARTNER_ID AS PARTNER_ID ," +
							" CP.PARTNER_CODE AS  PARTNER_CODE , CP.PARTNER_NAME AS  PARTNER_NAME , resp.LOB_NAME ,resp.RESP_ID , resp.RESP_NAME" +
							" FROM IOE.TM_CHANNEL_PARTNER  CP INNER JOIN IOE.TM_PARTNER_CUSTSEG_MAPPING CUSTMAP ON CUSTMAP.PARTNER_ID=CP.PARTNER_ID " +
							"inner join ioe.TM_RESP_SEGMENT_MAPPING respmap on respmap.CUST_SEGMENT_ID=CUSTMAP.CUST_SEGMENT_ID inner join " +
							"ioe.TM_RESPONSIBILITY resp on resp.RESP_ID = respmap.RESP_SEG_ID  WHERE CP.IS_ACTIVE=1 " +
							"AND CUSTMAP.CUST_SEGMENT_ID=( SELECT CUSTOMERSEGMENT FROM IOE.TM_ACCOUNT WHERE CRMACCOUNTNO=?)" +
							" and resp.RESP_ID!=?");
					pstmt.setLong(1, crmAccountNo);
					pstmt.setLong(2, AppConstants.RESPOSIBILITY_IB2B_ALL);
					rs=pstmt.executeQuery();
					
					while(rs.next()){
						partnerNameObj=new ChannelPartnerDto();
						partnerNameObj.setChannelPartnerName((rs.getString("PARTNER_NAME")));
						listofPartnerName.add(partnerNameObj);
					}
				}catch(Exception e){
					throw e;
				}finally{				
					DbConnection.closeResultset(rs);
					DbConnection.closePreparedStatement(pstmt);
					DbConnection.freeConnection(conn);
				}
				return listofPartnerName;
			}
				
				//Shubhranshu
		// This method returns an AL of ServiceDto containing those serviceids for which reason_of_change is "New+Disconnection ." 
			// edited on 22-aug-2016
		public ArrayList<ServiceDto> getServicesDetailsForToBeCheckedServices(ArrayList<Integer> listSerivceIds) throws Exception 
		{	
			ServiceDto spidDto=null;			
			ArrayList< ServiceDto> objDto= new ArrayList<ServiceDto>();
			PreparedStatement pst=null;		
			ResultSet rst=null;	
			Connection connection=null;
			ListIterator<Integer> iterator=listSerivceIds.listIterator();			
					
				try
				{					
					connection=DbConnection.getConnectionObject();						
					pst=connection.prepareStatement(sqlgetvalidSpidList);
						pst.setInt(2, ApplicationFlags.IB2B_ID_NEW_DISCONNECTION_REASON);								
							while(iterator.hasNext())
								{							 								 														
									pst.setLong(1,iterator.next());
										rst=pst.executeQuery();												
											while(rst.next())
											{
							 					spidDto=new ServiceDto();							
							 						spidDto.setServiceId(rst.getLong("SERVICEID"));		
							 							spidDto.setLogical_si_no(rst.getLong("LOGICAL_SI_NO"));								
							 						spidDto.setOrderNo(rst.getLong("ORDERNO"));							
							 					objDto.add(spidDto);							
											}																								 	
								}	
				}			
				catch(SQLException sq)
				{	Utility.LOG(sq);}								 			
					finally
						{
							DbConnection.closeResultset(rst);
								DbConnection.closePreparedStatement(pst);
							DbConnection.freeConnection(connection);					
						}							
	return objDto;																		
		}																																						              																			
                                      
		//Shubhranshu
		//edited on 22-aug-2016
		public Integer[] getServiceIdsFromOrderNumberArray(Integer[] ordNumbers) throws Exception
			{			
				ArrayList<Integer> asArrayList=new ArrayList<Integer>(Arrays.asList(ordNumbers));
				ArrayList<Integer> servicdIdsAsArrayList=new ArrayList<Integer>();
			 	ListIterator<Integer> itr=asArrayList.listIterator();
			 	Connection con=null;
				PreparedStatement pstmt=null;
					ResultSet rst=null;
					try
					{
						con=DbConnection.getConnectionObject();
						pstmt=con.prepareStatement(sqlgetServiceIdsForOrderNumber); // query to get all serviceIds for an order							   
							while(itr.hasNext())
								{
									pstmt.setInt(1, itr.next());
										rst=pstmt.executeQuery();										
										while(rst.next())
											{
												servicdIdsAsArrayList.add(rst.getInt("SERVICEID"));	
											}
								}
					}		
					catch(SQLException sqe)
					{ 
				Utility.LOG(sqe);											
					}					
					finally
					{	
						DbConnection.closeResultset(rst);
							DbConnection.closePreparedStatement(pstmt);
						DbConnection.freeConnection(con);
					}
												
	return servicdIdsAsArrayList.toArray(new Integer[servicdIdsAsArrayList.size()]);
}//Shubhranshu
		
		//Shubhranshu, Edited ON 22-aug-2016, try-catch-finally block used
		public ArrayList<AutoBillingLineDto> getAllDataPendingForAutoBilling() throws Exception
		{
			AutoBillingLineDto dataDto=null;
			ArrayList<AutoBillingLineDto>objRetDto=new  ArrayList<AutoBillingLineDto>();
			Connection connection=null;
			CallableStatement cstmt=null;
			ResultSet rst=null;			
			try
			{
				connection=DbConnection.getConnectionObject();
					cstmt=connection.prepareCall(sqlGetAllDataPendingForAutoBilling);
						cstmt.setMaxRows(500);
							rst=cstmt.executeQuery();																
								while(rst.next())
								{	
										dataDto=new AutoBillingLineDto();
											dataDto.setOrderNo(rst.getLong("ORDERNO"));
												dataDto.setServiceId(rst.getLong("SERVICEID"));
													dataDto.setServiceProductId(rst.getLong("SPID"));
														dataDto.setLocDate(rst.getString("LOCDATE"));
															dataDto.setLocNo(rst.getString("LOCNO"));
															dataDto.setLocReceivedDate(rst.getString("LOC_REC_DATE"));																																	
														dataDto.setAutoType(rst.getString("AUTOTYPE"));
													dataDto.setBt_Status(rst.getInt("BILLING_TRIGGER_STATUS"));
												dataDto.setM6_Fx_Progress_Status(rst.getString("M6_FX_PROGRESS_STATUS"));
											dataDto.setAutoBillingStatus(rst.getString("STATUS"));
										dataDto.setStatusLocUpdateAtBT(rst.getString("LOC_UPDATE_AT_BT_STATUS"));
									objRetDto.add(dataDto);
								}			
				}
			catch(Exception ex)
			{
				connection.rollback();
				Utility.LOG(ex);
			}
			finally
				{
					DbConnection.closeResultset(rst);
						DbConnection.closeCallableStatement(cstmt);
					DbConnection.freeConnection(connection);
				}							
			
			return objRetDto;
		}		//End,Shubhranshu
		
						//[147] start
			public ArrayList<StandardReason> getAssignedReasons(long custsegmid,long subchngid) throws Exception{
				ArrayList<StandardReason> getAssignedReasonArray= new ArrayList<StandardReason>();
				Connection conn=null;
				StandardReason stdrsn= null;
				PreparedStatement pstmt=null;
				ResultSet rs= null;
				//String sqlQuery="SELECT REASONNAME,STANDARDREASONID FROM ioe.TSTANDARDREASON WHERE  INTERFACEID=2 and STANDARDREASONID in(SELECT REASON_ID FROM ioe.STANDARD_REASON_MAPPING where CUSTOMER_SEGMENT_ID=? and SUB_CHANGETYPE_ID=?)";
				String sqlQuery="SELECT REASONNAME,STANDARDREASONID FROM ioe.TSTANDARDREASON std"
						+" inner join ioe.STANDARD_REASON_MAPPING stdm on std.STANDARDREASONID=stdm.REASON_ID"
						+" where INTERFACEID=2 and CUSTOMER_SEGMENT_ID=? and SUB_CHANGETYPE_ID=?";
				try{
					conn= DbConnection.getConnectionObject();
					pstmt=conn.prepareStatement(sqlQuery);
					pstmt.setLong(1, custsegmid);
					pstmt.setLong(2, subchngid);
					rs=pstmt.executeQuery();
					while(rs.next()){
						stdrsn= new StandardReason();
						stdrsn.setStdReasonId(rs.getLong("STANDARDREASONID"));
						stdrsn.setStdReasonName(rs.getString("REASONNAME"));
						getAssignedReasonArray.add(stdrsn);

						//.add(rs.getInt("REASON_ID"));			
					}
					//System.out.println(getAssignedReasonArray);

				}
				catch (Exception e) {
					Utility.LOG(true, true, "Exception "+e);
				}
				finally{
					DbConnection.closeResultset(rs);
					DbConnection.closePreparedStatement(pstmt);
					DbConnection.freeConnection(conn);
				}
				return getAssignedReasonArray;
			}

				
			public ArrayList<StandardReason> getAllReasons()throws Exception
			{
				ArrayList<StandardReason> getAllReasonsArray= new ArrayList<StandardReason>();
				Connection conn=null;
				StandardReason stdrsn2=null;
				CallableStatement cstmt=null;
				ResultSet rs= null;
				String sqlQuery="SELECT STANDARDREASONID,REASONNAME FROM ioe.TSTANDARDREASON where INTERFACEID=2 ";
				try
				{
					conn= DbConnection.getConnectionObject();
					cstmt=conn.prepareCall(sqlQuery);
					rs=cstmt.executeQuery();
					while(rs.next())
					{
						stdrsn2= new StandardReason();
						stdrsn2.setStdReasonId(rs.getLong("STANDARDREASONID"));
						stdrsn2.setStdReasonName(rs.getString("REASONNAME"));
						getAllReasonsArray.add(stdrsn2);
					}
				}
				catch (Exception e)
				{
					Utility.LOG(true, true, "Exception "+e);
				}
				finally
				{
					DbConnection.closeResultset(rs);
					DbConnection.closeCallableStatement(cstmt);
					DbConnection.freeConnection(conn);
				}
				return getAllReasonsArray;

			}

			public int deleteAssignedReasons(long custid,long subchgid,Connection conn) throws Exception
			{
				//Connection conn=null;
				PreparedStatement pstmt=null;
				int results=0;
				String sqlQuery= "DELETE FROM ioe.STANDARD_REASON_MAPPING WHERE CUSTOMER_SEGMENT_ID=? AND SUB_CHANGETYPE_ID=?";
				try
				{
					//conn= DbConnection.getConnectionObject();
					pstmt=conn.prepareStatement(sqlQuery);
					pstmt.setLong(1, custid);
					pstmt.setLong(2, subchgid);
					results= pstmt.executeUpdate();

				}
				catch (Exception e) {
					Utility.LOG(true, true, "Exception "+e);
					results=-1;
					throw new Exception(" Exception occurred during executing delete query::");
				}
				finally{
					DbConnection.closePreparedStatement(pstmt);
					//DbConnection.freeConnection(conn);
				}
				return results;
			}
			public int	insertAssignedReasons(long custid,long subchgid,long[] assignedReasonsIds, Connection conn) throws Exception
			{
				long[] assignedIds= assignedReasonsIds;
				//Connection conn=null;
				PreparedStatement pstmt=null;
				int status=0;
				String sqlQuery= "INSERT INTO ioe.STANDARD_REASON_MAPPING (CUSTOMER_SEGMENT_ID,SUB_CHANGETYPE_ID,REASON_ID) VALUES (?,?,?)";
				try
				{
					//conn= DbConnection.getConnectionObject();
					pstmt=conn.prepareStatement(sqlQuery);
					for( int i=0 ;i< assignedIds.length ;i++)
					{
						pstmt.setLong(1, custid);
						pstmt.setLong(2, subchgid);
						pstmt.setLong(3, assignedIds[i]);
						pstmt.addBatch();
					}

					int results[]= pstmt.executeBatch();
					for(int i:results){
						if(i==PreparedStatement.EXECUTE_FAILED){
							status=-1;
							throw new Exception(" Exception occurred during executing pstmtInsert Batch::");
						}
						//status=1;
					}
					status=1;
					//System.out.println("rows affected" + pstmt.getUpdateCount() );

				}
				catch (Exception e) {
					Utility.LOG(true, true, "Exception "+e);
				}
				finally{
					DbConnection.closePreparedStatement(pstmt);
					//DbConnection.freeConnection(conn);
				}
				return status;

			}
			//[147] end
		
		//[146] start
			public String getEpcnSaved(String orderNo)
			{
				Connection connection =null;
				CallableStatement cstmt=null;
				ResultSet rs=null;
				String getEpcn="";
				String sqlQuery="SELECT EPCN_NO FROM IOE.TPOMASTER WHERE ORDERNO=?";
				try
				{
					connection= DbConnection.getConnectionObject();
					cstmt=connection.prepareCall(sqlQuery);
					cstmt.setString(1,orderNo );
					rs=cstmt.executeQuery();

					if(rs.next())
					{
						getEpcn= rs.getString("EPCN_NO");
					}
				}

				catch(Exception ex )
				{
					ex.printStackTrace();	
				}
				finally
				{
					try 
					{
						DbConnection.closeCallableStatement(cstmt);
						DbConnection.freeConnection(connection);
					} 
					catch (Exception e) 
					{
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				return getEpcn;
			}
		//[146] end

			//Shubhranshu,4-aug-2016
			//Modified ON 30-aug-2016
			
			private static final String sqlgetDataForLocNotReceivedCases=" SELECT tabl.ID,tsm.SERVICEID,tabl.ORDERNO,tabl.LOC_UPDATE_AT_BT_STATUS, " +
																														 " tabl.STATUS,tabl.LOC_RECEIVE_STATUS,tsm.M6_FX_PROGRESS_STATUS "+ 
																														 " FROM ioe.TAUTO_BILLING_LINE tabl "+
																														 " inner join ioe.TPOSERVICEMASTER tsm on tsm.SERVICEID=tabl.SERVICEID "+
																														 " WHERE tsm.M6_FX_PROGRESS_STATUS like '%FX_BT_END%' "+
																														 " AND (tabl.LOC_RECEIVE_STATUS='PENDING' "+
																														 " OR (tabl.STATUS  in ('PREP','INIT','PREP_LOCK') "+
																														 " OR (tabl.LOC_UPDATE_AT_BT_STATUS in ('PREP','PREP_LOCK') "+
																														 " OR LOC_UPDATE_AT_BT_STATUS is null))) ";
			
			public ArrayList<AutoBillingLineDto> getDataForLocNotReceivedCases() throws Exception 
			{
				AutoBillingLineDto dataRetDto=null;
					ArrayList<AutoBillingLineDto> dataRetList=new ArrayList<AutoBillingLineDto>();
						Connection con=null;
							Statement stmt=null;
								ResultSet rst=null;
									con=DbConnection.getConnectionObject();
										stmt=con.createStatement();
											rst=stmt.executeQuery(sqlgetDataForLocNotReceivedCases);
												while(rst.next())
												{
													dataRetDto=new AutoBillingLineDto();
													dataRetDto.setServiceId(rst.getLong("SERVICEID"));
													dataRetDto.setOrderNo(rst.getLong("ORDERNO"));				
													dataRetDto.setStatusLocReceived(rst.getString("LOC_RECEIVE_STATUS"));							//Modified
													dataRetDto.setStatusLocUpdateAtBT(rst.getString("LOC_UPDATE_AT_BT_STATUS"));		//Modified
													dataRetDto.setAutoBillingStatus(rst.getString("STATUS"));															//Modified
													dataRetDto.setId(rst.getLong("ID"));																								//Modified
													dataRetList.add(dataRetDto);
												}												
											try
										{
												DbConnection.closeResultset(rst);
											DbConnection.closeStatement(stmt);
										DbConnection.freeConnection(con);
									}
								catch(Exception ex)
								{
									Utility.LOG(ex);
							}		
				return dataRetList;
			}
			public long getSelectedProductId(long serviceID)
			{
				Connection connection =null;
				CallableStatement checkProductName =null;
				ResultSet result = null;
				long productId = 0;
				boolean check = false;
				try {
					connection=DbConnection.getConnectionObject();
					checkProductName= connection.prepareCall(sqlCheckProductNameSelected);
					checkProductName.setLong(1,Long.valueOf(serviceID));
					result = checkProductName.executeQuery();
					while(result.next())
					{
						productId = (result.getLong("PRODUCTID"));
					}	
						
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				finally
				{
					try {
						DbConnection.closeResultset(result);
						DbConnection.closeCallableStatement(checkProductName);
						DbConnection.freeConnection(connection);
					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
				}
				return productId;
			}
			public ArrayList<String> validateProductNameLicCompMap(String orderNo)
			{
				Connection connection =null;
				CallableStatement productNameLicCoMap =null;
				ResultSet result = null;
				ArrayList<String> list = new ArrayList<String>();
				long companyId = 0;
				
				try {
					connection=DbConnection.getConnectionObject();
					productNameLicCoMap= connection.prepareCall(sqlvalidateProductNameLicCompMap);
					productNameLicCoMap.setLong(1,Long.valueOf(orderNo));
					productNameLicCoMap.setLong(2,Long.valueOf(0));
					result = productNameLicCoMap.executeQuery();
					while(result.next())
					{
						list.add(Long.toString(result.getLong("SERVICEPRODUCTID")));
					}
					
						
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				finally
				{
					try {
						DbConnection.closeResultset(result);
						DbConnection.closeCallableStatement(productNameLicCoMap);
						DbConnection.freeConnection(connection);
					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
				}
				
			 return list;
			}	
		/*END**/
			// Start Amit Sharma
			public static ArrayList<String> newOrderKeyValues() throws Exception {
				Connection conn=null;
				PreparedStatement pstmt=null;
				ResultSet rs=null;
				ArrayList<String> layerTotalOrderList= new ArrayList<String>();
				try{
					conn=DbConnection.getConnectionObject();
					pstmt=conn.prepareCall("SELECT KEYVALUE FROM ioe.TM_APPCONFIG WHERE MODULE_NAME=?");
					pstmt.setString(1, "CC_DROP_CARRY");
					rs=pstmt.executeQuery();
					while(rs.next()){
						layerTotalOrderList.add(rs.getString("KEYVALUE"));
					}
				}catch(Exception e){
					throw e;
				}finally{				
					DbConnection.closeResultset(rs);
					DbConnection.closePreparedStatement(pstmt);
					DbConnection.freeConnection(conn);
				}
				return layerTotalOrderList;
			}


		
		// End Amit Sharma
				//	[148] start

	public ServiceDto validateDropAndCarry(long orderNo, String stage) throws Exception {
		String methodName="validateDropAndCarry",  msg="";
		boolean logToFile=true, logToConsole=true;		
		Connection conn=null;
		CallableStatement  callstmt=null;
		
		String msgCode=null;
		String result=null;
		ServiceDto dataDto=new ServiceDto();
		try{
			conn=DbConnection.getConnectionObject();
			callstmt=conn.prepareCall(sqlValidateDropAndCarry);
			
			callstmt.setLong(1, orderNo);
			callstmt.setString(2, stage);
			callstmt.registerOutParameter(3, java.sql.Types.NUMERIC);
			callstmt.registerOutParameter(4, java.sql.Types.VARCHAR);
			callstmt.registerOutParameter(5, java.sql.Types.VARCHAR);
			callstmt.registerOutParameter(6, java.sql.Types.VARCHAR);
			
			callstmt.execute();
			msgCode=callstmt.getString(4);
			msg=callstmt.getString(5);
			
			//added by Shubhranshu
			dataDto.setSqlMsgCode(msgCode);
			dataDto.setSqlMsg(msg);
			//
			
			/*if("-1".equalsIgnoreCase(msgCode))
				conn.rollback();*/
			if("-1".equalsIgnoreCase(msgCode)){
				Utility.LOG(true,true,"@msgCode :"+msgCode);
				Utility.LOG(true,true,"@errMessage :"+callstmt.getString(6));
				Utility.LOG(true,true,"@sqlCode :"+callstmt.getLong(3));
				
			}
			else//update attributes from service to line
				 result=updateAttributesFromServiceToLine(orderNo);

			
		}catch(Exception e){
			
				//conn.rollback();
			Utility.LOG(logToFile, logToConsole, e+" from method "+methodName);
		}finally{
			
			DbConnection.closeCallableStatement(callstmt);
			DbConnection.freeConnection(conn);
		}
		return dataDto;
	}
//[148] end	
			//Shubhranshu,Drop&Carry
				
			final static String sqlGetDropAndCarryData="  SELECT coalesce(SERVICE_FLAVOUR,'') as SERVICE_FLAVOUR,coalesce(CKT_TYPE,'') as CKT_TYPE," +
																							" coalesce(HEADEND_CODE,'') as HEADEND_CODE " +
																							" FROM ioe.TPOSERVICEMASTER_EXTENDED " +
																							" WHERE SERVICEID=? ";
			
			public ArrayList<ServiceDto> getDropAndCarryDataForCC(Long srvId) throws Exception
				{
						ArrayList<ServiceDto> datalist=new ArrayList<ServiceDto>();				
						ServiceDto dataDto=new ServiceDto();					
						Connection dbcon=null;
						PreparedStatement pst=null;
						ResultSet rst=null;
						
						try
						{
							dbcon=DbConnection.getConnectionObject();
							pst=dbcon.prepareStatement(sqlGetDropAndCarryData);
							pst.setLong(1, srvId);
							rst=pst.executeQuery();
							while(rst.next())
							{
								dataDto.setServiceFlavor(rst.getString("SERVICE_FLAVOUR"));						
								dataDto.setCircuitType(rst.getString("CKT_TYPE"));
								dataDto.setHeadEndCode(rst.getString("HEADEND_CODE"));
								datalist.add(dataDto);
							}
						}
						catch(SQLException sq)
						{
							Utility.LOG(sq);
						}
						finally
						{
							DbConnection.closeResultset(rst);
							DbConnection.closePreparedStatement(pst);
							DbConnection.freeConnection(dbcon);
						}
						return datalist;
					 }
			
					// Shubhranshu, For HeadEndCode Selection GUi
			
					
					final static String sqlgetHeadEndLsiForDropAndCarryWithSorting="CALL IOE.SELECT_HEADEND_CODE_WITH_SORTING(?,?,?,?,?) ";
					
					public ArrayList<ServiceDto> getHeadEndLsiForDropAndCarryWithSorting(PagingDto dataDto) throws Exception
					{
						Connection connection =null;
						CallableStatement cstmt =null;
						ResultSet rs = null;
						ArrayList<ServiceDto> listHeadEndLsi = new ArrayList<ServiceDto>();
						ServiceDto sDto = null;
						int recordCount;
						
						try
						{
							connection=DbConnection.getConnectionObject();
							cstmt= connection.prepareCall(sqlgetHeadEndLsiForDropAndCarryWithSorting);		
							cstmt.setInt(1,dataDto.getOrderNumber());
							cstmt.setInt(2, Integer.parseInt(dataDto.getLogicalSINo()));//LSI entered from search textbox		
							cstmt.setString(3,dataDto.getSortByOrder());
							cstmt.setInt(4,dataDto.getStartIndex());
							cstmt.setInt(5,dataDto.getEndIndex());
							
							rs = cstmt.executeQuery();
							
							while(rs.next())
							{
								sDto =  new ServiceDto();							
								sDto.setLogical_si_no(rs.getLong("LOGICAL_SI_NO"));
								sDto.setHeadEndCode(rs.getString("HEADEND_CODE"));
								recordCount=rs.getInt("FULL_REC_COUNT");
								sDto.getPagingSorting().setRecordCount(recordCount);	
								sDto.setMaxPageNo(sDto.getPagingSorting().getMaxPageNumber());
								listHeadEndLsi.add(sDto);			
							}
						}
						catch(SQLException sq)					
						{
							Utility.LOG(sq);
						}
						finally
						{
							DbConnection.closeResultset(rs);
							DbConnection.closeCallableStatement(cstmt);
							DbConnection.freeConnection(connection);
						}
						return listHeadEndLsi;
					}
					// Method for dropN carry data saving 
					final static String sqlsaveDropAndCarryDataIntoTable=" UPDATE IOE.TPOSERVICEMASTER_EXTENDED" +
											                                                                            " SET SERVICE_FLAVOUR=?,CKT_TYPE=?,HEADEND_CODE=? " +
							                                                                                            " WHERE SERVICEID=? ";
					public int saveDropNCarryData(ServiceDto dataDto)throws Exception
					{
						Connection con=null;
						PreparedStatement pst=null;
						ResultSet rs=null;
						
						try
						{
							con=DbConnection.getConnectionObject();
							pst=con.prepareStatement(sqlsaveDropAndCarryDataIntoTable);
							pst.setString(1, dataDto.getServiceFlavor());
							pst.setString(2, dataDto.getCircuitType());
							pst.setString(3, dataDto.getHeadEndCode());
							pst.setLong(4,dataDto.getServiceId());
							
							pst.executeUpdate();
							return 1;
						}
						catch(SQLException sq)
						{
							Utility.LOG(sq);
							return 0;
						}
						finally
						{
							DbConnection.closePreparedStatement(pst);
							DbConnection.freeConnection(con);
						}
					}		
//nancy FOR MIGRATION

	public ArrayList<FileAttachmentDto> getEligibleFilesForOneTimeMigration() throws Exception {
		ArrayList<FileAttachmentDto> getFileAttributes = new ArrayList<FileAttachmentDto>();
		FileAttachmentDto fileDto = new FileAttachmentDto();
		Connection conn=null;
		CallableStatement cstmt=null;
		ResultSet rs=null;
		//String sqlQuery="select slno,ORDERNO,FILENAME from ioe.TFILEUPLOAD where IS_UPLOADED='EFS'";
		try
		{
			conn= DbConnection.getConnectionObject();
			cstmt=conn.prepareCall(sqlQueryToFetchAttributesForFileMigration);
			rs=cstmt.executeQuery();
			while(rs.next())
			{
				fileDto = new FileAttachmentDto();
				fileDto.setHdnOrderNo((rs.getString("ORDERNO")));
				fileDto.setSlno(rs.getInt("SLNO"));
				fileDto.setFileName(rs.getString("FILENAME"));
				//System.out.println("file name is-------------------------"+rs.getString("FILENAME"));
				getFileAttributes.add(fileDto);
			}
		}
		catch (Exception e)
		{
			//Utility.LOG(true, true, "Exception "+e);
			Utility.SPT_LOG(true, true, e, "");
		}
		finally
		{
			DbConnection.closeResultset(rs);
			DbConnection.closeCallableStatement(cstmt);
			DbConnection.freeConnection(conn);
		}
		return getFileAttributes;

	}
	public Blob getFileDataForMigration(int SlNo)
	{
		String methodName="getFileDataForMigration", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		Connection connection =null;
		CallableStatement setFileDownload =null;
		java.sql.Blob blob=null;		
		ResultSet rs = null;
		//String sqlquery= "Select FILEDATA FROM IOE.TFILEUPLOAD WHERE SLNO= ?";
		try{
			connection=DbConnection.getConnectionObject();
			setFileDownload=connection.prepareCall(sqlQueryToFetchFileDataForMigration);
			setFileDownload.setInt(1,new Integer(SlNo));
			rs = setFileDownload.executeQuery();
			if(rs.next())
			{
				blob= new SerialBlob(rs.getBlob("FILEDATA"));
			}

		}
		catch(Exception ex)
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(setFileDownload);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, e,""+msg);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return blob;		
	}
	public long getNewFileDownloadLotId() {
		String methodName="getNewFileDownloadLotId", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		Connection connection =null;
		CallableStatement	updateStatus =null;	
		ResultSet rs = null;
		long lotId =0;
		String sqlquery = ("SELECT (NEXTVAL for IOE.SEQ_FILEATTACH_MIGRATE_LOT_ID) as LOT_ID  from sysibm.sysdummy1");
		try{
			
			connection=DbConnection.getConnectionObject();
			updateStatus=connection.prepareCall(sqlquery);
			rs = updateStatus.executeQuery();
			
			while(rs.next()){
				lotId=rs.getLong("LOT_ID");
			}
		}
		catch(Exception ex)
		{
			//Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);
			Utility.onEx_LOG_RET_NEW_EX_SHAREPOINT(ex, methodName, className, msg, logToFile, logToConsole);
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(updateStatus);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				//Utility.LOG(true, true, e,""+msg);
				Utility.SPT_LOG(logToFile, logToConsole, e, msg);
			}
		}
		return lotId;
	}
	
	public String updateStatusForFileUploaded(int slNo, String csvPath, long fileDownloadLotId) {
		String methodName="updateStatusForFileUploaded", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		Connection connection =null;
		PreparedStatement updateStatus =null;		
		ResultSet rs = null;
		String status=null;
		//String sqlquery= "Update ioe.TFILEUPLOAD SET IS_UPLOADED='DS',PATH_fOR_CSV=? , LOT_ID= ? WHERE SLNO=?"; // US -- UPLOADED TO SHAREPOINT
		try{
			int i =0;
			connection=DbConnection.getConnectionObject();
			updateStatus=connection.prepareCall(sqlUpdateStatusForFileSavedInSystem);
			updateStatus.setString(++i,csvPath);
			
			updateStatus.setLong(++i, fileDownloadLotId);
			updateStatus.setInt(++i, slNo);
			
			int rows=updateStatus.executeUpdate();
		}
		catch(Exception ex)
		{
			Utility.onEx_LOG_RET_NEW_EX_SHAREPOINT(ex, methodName, className, msg, logToFile, logToConsole);
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(updateStatus);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.SPT_LOG(true, true, e,""+msg);
			}
		}
		return status;
	}
	public void updateErrorStatusForUpload(int slNo, String csvPath,String error,long fileDownloadLotId) {
		String methodName="updateErrorStatusForUpload", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		Connection connection =null;
		PreparedStatement updateErrorStatus =null;		
		ResultSet rs = null;
		String status=null;
		//String sqlquery= "Update ioe.TFILEUPLOAD SET IS_UPLOADED=? WHERE SLNO=?";
		try{
			connection=DbConnection.getConnectionObject();
			updateErrorStatus=connection.prepareCall(sqlUpdateErrorStatusForFileNotSuccess);
			updateErrorStatus.setString(1,error);
			updateErrorStatus.setLong(2, fileDownloadLotId);
			updateErrorStatus.setInt(3, slNo);
			int rows=updateErrorStatus.executeUpdate();
		}
		catch(Exception ex)
		{
			Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(updateErrorStatus);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				Utility.LOG(true, true, e,""+msg);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
	}
	// NANCY FOR SHAREPOINT SCHEDULER CBR 

	public ArrayList<SharepointDto> getEligibleFileAttachmentForShareptMigration() {
		String methodName="getEligibleFileAttachmentForShareptMigration", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		Connection connection =null;
		CallableStatement setFileDownload =null;
		java.sql.Blob blob=null;		
		ResultSet rs = null;
		SharepointDto objDto = null;
		ArrayList<SharepointDto> getFileData = new ArrayList<SharepointDto>();
		//String sqlquery= "Select SLNO,FILEDATA FROM IOE.TFILEUPLOAD WHERE IS_UPLOADED='ESU' ";
		try{
			connection=DbConnection.getConnectionObject();
			setFileDownload=connection.prepareCall(sqlFetchEligibleAttachmentsForShareptMigration);
			rs = setFileDownload.executeQuery();
			while(rs.next()){
				objDto= new SharepointDto();
				//blob= new SerialBlob(rs.getBlob("FILEDATA"));
				//objDto.setFile(blob);
				objDto.setSlno(rs.getInt("SLNO"));
				
				//objDto.setFile(new SerialBlob(rs.getBlob("FILEDATA")));
				//objDto.setFileBodyforXml(rs.getString("FILEDATA"));
				getFileData.add(objDto);
				
			}
		}
		catch(Exception ex)
		{
			//Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);
			Utility.onEx_LOG_RET_NEW_EX_SHAREPOINT(ex, methodName, className, msg, logToFile, logToConsole);
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closeCallableStatement(setFileDownload);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
				//Utility.LOG(true, true, e,""+msg);
				Utility.SPT_LOG(true, true, e,""+msg);
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
		return getFileData;	

	}

	public String getXMLAttributesForFile(int slNo) throws Exception{
		
		String methodName="getXMLAttributesForFile", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		Connection conn =null;
		CallableStatement cstmt=null;
		String strXml = null;	
		try {
			conn=DbConnection.getConnectionObject();
			cstmt=conn.prepareCall(sql_create_xml_for_sharepoint_upload); 
			cstmt.setInt(1, slNo);
			cstmt.registerOutParameter(2, java.sql.Types.CLOB);
			cstmt.setString(3, "");
			cstmt.setLong(4, 0);
			cstmt.execute();
			java.sql.Clob clobxml= cstmt.getClob(2);
			long length=clobxml.length();
			strXml= clobxml.getSubString(1, (int) length);
		}
		catch (Exception ex) {
			//ex.printStackTrace();
			// TODO Auto-generated catch block
			//throw Utility.onEx_LOG_RET_NEW_EX(ex, "getXMLAttributesForFile", , null, true, true); 
			throw Utility.onEx_LOG_RET_NEW_EX_SHAREPOINT(ex, methodName, className, msg, logToFile, logToConsole);
		}
		finally
		{
			DbConnection.closeCallableStatement(cstmt);
			DbConnection.freeConnection(conn);
		}
		
		
		return strXml;
	}

	public int deleteFileAttachmentFromTable(SharepointDto objDto,Connection conn)throws Exception {
		PreparedStatement pstmt=null;
		int results=0;
		int SlNo = objDto.getSlno();
		String sqlQuery= "UPDATE IOE.TFILEUPLOAD SET FILEDATA= EMPTY_BLOB() WHERE SLNO=?";
		try
		{
			pstmt=conn.prepareStatement(sqlQuery);
			pstmt.setInt(1, SlNo);
			results= pstmt.executeUpdate();
		}
		catch (Exception e) {
			Utility.SPT_LOG(true, true, "Exception "+e);
			results=-1;
			throw new Exception(" Exception occurred during executing delete query of TFILEUPLOAD::");
		}
		finally{
			DbConnection.closePreparedStatement(pstmt);
		}
		return results;
	}

	public int updateSharepointUrlInTable(SharepointDto objDto,Connection connection)throws Exception {
		PreparedStatement pstmt=null;
		int recordsUpdated=0;
		int SlNo = objDto.getSlno();
		System.out.println(SlNo);
		String sqlQuery= "UPDATE IOE.TFILEUPLOAD SET SHAREPOINT_URL=? ,IS_UPLOADED='US' WHERE SLNO=?"; // US FOR UPLOADED SUCCESFULLY
		try
		{
			pstmt=connection.prepareStatement(sqlQuery);
			pstmt.setString(1, objDto.getSharepointUrl());
			pstmt.setInt(2, objDto.getSlno());
			recordsUpdated= pstmt.executeUpdate();
		}
		catch (Exception e) {
			Utility.LOG(true, true, "Exception "+e);
			recordsUpdated=-1;
			throw new Exception(" Exception occurred during executing UPDATE URL query of TFILEUPLOAD::");
		}
		finally{
			DbConnection.closePreparedStatement(pstmt);
		}
		return recordsUpdated;
	}

	public int updateRetryCountandErrorStatus(SharepointDto objDto) {
		String methodName="updateRetryCountandErrorStatus", className=this.getClass().getName(), msg="";
		boolean logToFile=true, logToConsole=true;
		int rowsaffected=0;
		Connection connection =null;
		PreparedStatement updateCount =null;		
		ResultSet rs = null;
		String status=null;
		String sqlUpdateRetryCountandErrorStatusForFileUpload= "UPDATE IOE.TFILEUPLOAD SET IS_UPLOADED='ERR',EXCEPTION_MESSAGE=?,RETRY_COUNT= (RETRY_COUNT+1) WHERE SLNO=?";
		try{
			connection=DbConnection.getConnectionObject();
			updateCount=connection.prepareCall(sqlUpdateRetryCountandErrorStatusForFileUpload);
			updateCount.setString(1, objDto.getException());
			updateCount.setInt(2, objDto.getSlno());
			rowsaffected=updateCount.executeUpdate();
		}
		catch(Exception ex)
		{
			//Utility.onEx_LOG_RET_NEW_EX(ex, methodName, className, msg, logToFile, logToConsole);
			Utility.onEx_LOG_RET_NEW_EX_SHAREPOINT(ex, methodName, className, msg, logToFile, logToConsole);
			//ex.printStackTrace();	
		}
		finally
		{
			try 
			{
				DbConnection.closeResultset(rs);
				DbConnection.closePreparedStatement(updateCount);
				DbConnection.freeConnection(connection);
			} 
			catch (Exception e) 
			{
			 Utility.LOG(true, true, e, ""+msg);
				Utility.SPT_LOG(true, true, e,""+msg);
			}
		}
		return rowsaffected;
	}

	public ArrayList<FileAttachmentDto> getFileAttributesforOrder(long orderno) throws Exception {
		FileAttachmentDto fileDto= new FileAttachmentDto();
		ArrayList<FileAttachmentDto> getFileAttributes = new ArrayList<FileAttachmentDto>();
		Connection conn=null;
		CallableStatement cstmt=null;
		ResultSet rs=null;
		String sqlQuery="select slno,filename from ioe.TFILEUPLOAD where ORDERNO=?  AND IS_UPLOADED='EFS'";
		try
		{
			conn= DbConnection.getConnectionObject();
			cstmt=conn.prepareCall(sqlQuery);
			cstmt.setLong(1, orderno);
			rs=cstmt.executeQuery();
			while(rs.next())
			{
				fileDto = new FileAttachmentDto();
				fileDto.setSlno(rs.getInt("SLNO"));
				fileDto.setFileName(rs.getString("FILENAME"));
				getFileAttributes.add(fileDto);
			}
		}
		catch (Exception e)
		{
			//Utility.LOG(true, true, "Exception "+e);
			Utility.SPT_LOG(true, true, e, "");
		}
		finally
		{
			DbConnection.closeResultset(rs);
			DbConnection.closeCallableStatement(cstmt);
			DbConnection.freeConnection(conn);
		}
		return getFileAttributes;

		
		
	}
//Gunjan- Bandwidth Correction
	public static ArrayList<String> getLayerRateAttIds() throws Exception {

		String methodName="getLayerRateAttIds",  msg="";
		boolean logToFile=true, logToConsole=true;
		Connection conn=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		ArrayList<String> layerRateIdList= new ArrayList<String>();
		try{
			conn=DbConnection.getConnectionObject();
			pstmt=conn.prepareStatement("SELECT BIGINT(TRIM(CHAR(ELEM))) as vELEM FROM TABLE(IOE.ELEMENTS((SELECT KEYVALUE FROM IOE.TM_APPCONFIG WHERE KEYNAME=?)) ) AS t(elem)");
			//pstmt=conn.prepareStatement("SELECT KEYVALUE FROM ioe.TM_APPCONFIG WHERE KEYNAME like '%LAYER_RATE%' and MODULE_NAME=?");
			
			//pstmt.setString(1, "CC_DROP_CARRY");
			pstmt.setString(1, "LAYER_RATE_ATTMASTERIDS");
			rs=pstmt.executeQuery();
			while(rs.next()){
				layerRateIdList.add(rs.getString("vELEM"));
			}
		}catch(Exception e){
			Utility.LOG(true, true, e, "Some Exception occured in method "+methodName+"()");
		}finally{				
			DbConnection.closeResultset(rs);
			DbConnection.closePreparedStatement(pstmt);
			DbConnection.freeConnection(conn);
		}
		return layerRateIdList;
	}
	
	public String updateAttributesFromServiceToLine(long orderNo) throws Exception {
		String methodName="updateAttributesFromServiceToLine",  msg="";
		boolean logToFile=true, logToConsole=true;		
		Connection conn=null;
		CallableStatement  callstmt=null;
		
		String msgCode=null;
		
		
		try{
			conn=DbConnection.getConnectionObject();
			callstmt=conn.prepareCall(sqlUpdateAttributesFromServiceToLine);
			
			callstmt.setLong(1, orderNo);
			callstmt.registerOutParameter(2, java.sql.Types.NUMERIC);
			callstmt.registerOutParameter(3, java.sql.Types.VARCHAR);
			callstmt.registerOutParameter(4, java.sql.Types.VARCHAR);
			callstmt.registerOutParameter(5, java.sql.Types.VARCHAR);
			
			callstmt.executeUpdate();
			msgCode=callstmt.getString(3);
			msg=callstmt.getString(4);
			
			
			
			
			if(!("SUCCESS".equalsIgnoreCase(msg))){
				Utility.LOG(true,true,"@msgCode :"+msgCode);
				Utility.LOG(true,true,"@errMessage :"+callstmt.getString(5));
				Utility.LOG(true,true,"@sqlCode :"+callstmt.getLong(2));
				conn.rollback();
			}
						
		}catch(Exception e){
			
				
			Utility.LOG(logToFile, logToConsole, e+" from method "+methodName);
			conn.rollback();
		}finally{
			
			DbConnection.closeCallableStatement(callstmt);
			DbConnection.freeConnection(conn);
		}
		
		return msg;
		
	}

	public ArrayList<String> getL2_L3_ISP_BW_AttIds() throws Exception {
		
		String methodName="getL2_L3_ISP_BW_AttIds",  msg="";
		boolean logToFile=true, logToConsole=true;
		Connection conn=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		ArrayList<String> BandwidthIdList= new ArrayList<String>();
		try{
			conn=DbConnection.getConnectionObject();
			pstmt=conn.prepareStatement("SELECT BIGINT(TRIM(CHAR(ELEM))) as vELEM FROM TABLE(IOE.ELEMENTS((SELECT KEYVALUE FROM IOE.TM_APPCONFIG WHERE KEYNAME=?)) ) AS t(elem)");
			//pstmt=conn.prepareStatement("SELECT KEYVALUE FROM ioe.TM_APPCONFIG WHERE KEYNAME like '%LAYER_RATE%' and MODULE_NAME=?");
			
			//pstmt.setString(1, "CC_DROP_CARRY");
			pstmt.setString(1, "L2_L3_ISP_ORDER_BANDWIDTH_DECIMAL_ATTMASTERIDS");
			rs=pstmt.executeQuery();
			while(rs.next()){
				BandwidthIdList.add(rs.getString("vELEM"));
			}
		}catch(Exception e){
			Utility.LOG(true, true, e, "Some Exception occured in method "+methodName+"()");
		}finally{				
			DbConnection.closeResultset(rs);
			DbConnection.closePreparedStatement(pstmt);
			DbConnection.freeConnection(conn);
		}
		return BandwidthIdList;
	
	}
  }
